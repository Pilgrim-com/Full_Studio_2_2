/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "motor.h"
#include "arm_math.h"
#include "QEI.h"
#include "PID.h"
#include "Kalman.h"
#include "ModBusRTU.h"
#include "math.h"
#include "Trapezoidal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PRISM_UPDATE_THRESH 40.0f
// LOW PASS cutoff frequency
#define FC   5.0f
#define VELOCITY_DEADZONE   0.01f   // ปรับตามหน่วย rads/s หรือ mm/s ที่เหมาะสม
//Joy set origin
#define RAW_MIN    0    // e.g. you saw ~20 at one end
#define RAW_CENTER 1750  // you measured ~1700–1800 at rest
#define RAW_MAX   3400   // you saw ~4080 at the other end
#define OUT_MIN  -100
#define OUT_MAX  +100

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim16;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
// Velo profile
VELO_PROFILE prisProfile;
VELO_PROFILE revProfile;

ModbusHandleTypedef hmodbus;
volatile u16u8_t registerFrame[70];
//state machine
typedef enum {
	STATUS_IDLE = 0, STATUS_HOME = 1 << 0,        // 00001 = 1 - สถานะโฮมมิ่ง
	STATUS_JOG = 1 << 1,         // 00010 = 2 - สถานะจ็อกกิ้ง
	STATUS_POINT = 1 << 2,       // 00100 = 4 - สถานะเคลื่อนที่แบบจุดต่อจุด
	STATUS_GO_TO_TARGET = 1 << 3,       // 01000 = 8 - สถานะไปยังตำแหน่งเป้าหมาย
	STATUS_STOP = 1 << 4         // 10000 = 16 - สถานะหยุดฉุกเฉิน
} MovingStatusFlags;

typedef enum {
	STATE_IDLE,
	STATE_HOMING,
	STATE_JOGGING,
	STATE_POINT_MOVING,
	STATE_GO_TO_TARGET,
	STATE_STOPPING,
	STATE_ERROR
} RobotState;

typedef enum {
	SERVO_STATE,
} Servo_state;

RobotState current_state = STATE_IDLE;
int joy_flag = 0;
int point_flag = 0;
float joy_save[10];

MOTOR prismatic_motor;
MOTOR revolute_motor;
MOTOR servo_motor;

float target_position_prismatic = 0.0;

// PID_Velocity gain
float Kp_velo_pris = 150.0;
float Ki_velo_pris = 2.5;         //8.5;
float Kd_velo_pris = 0.0;
float output_velo_pris = 0.00;
float error_velo_pris = 0.00;

// PID_Position gain
//float Kp_pos = 4.5; encoder
float Kp_pos_pris = 5.0;
float Ki_pos_pris = 0.0;
float Kd_pos_pris = 0.0;
float output_pos_pris = 0.00;
float error_pos_pris = 0.00;
//PID_Position CMSIS
arm_pid_instance_f32 PID_POS_pris = { 0 };
arm_pid_instance_f32 PID_POS_re = { 0 };

int32_t setpoint = 0;
float output_prismatic = 0;
float output_revolute = 0;

QEI prismatic_encoder;
CONTROLLER prismatic_pos_control;
CONTROLLER prismatic_vel_control;

// Prismatic low-pass
// LOW Pass filter
const float dt = 0.001f;
const float RC = 1.0f / (2.0f * 3.1415926f * FC);
const float alpha = dt / (RC + dt);
float prismatic_radps_lowpass_prev = 0.0f;  // filter state
float prismatic_radps_lowpass = 0.0f;

// Acceleration
float prismatic_acceleration = 0.0f;
float prismatic_acceleration_lowpass = 0.0f;
float prismatic_acceleration_lowpass_prev = 0.0f;

// unit converter
double ball_screw_pos;
double ball_screw_vel;

//REvolute
float target_position_revolute = 0.0;

QEI revolute_encoder;
uint8_t revolute_flag = 0;
CONTROLLER revolute_pos_control;
CONTROLLER revolute_vel_control;

// unit converter
uint8_t limit_r = 0;
uint8_t limit_r_prev = 0;
uint8_t limit_l = 0;
uint8_t limit_l_prev = 0;
uint8_t limit_plot = 0;

float motor_voltage = 0.0;
float error_rads = 0.0;

// PID_Velocity gain
float Kp_pos_re = 0.5;
float Ki_pos_re = 0.0;         //8.5;
float Kd_pos_re = 0.0;
float output_pos_re = 0.00;
float error_pos_re = 0.00;

//Revolute Velo Control
float Kp_velo_re = 30000.0;
float Ki_velo_re = 150.0;         //8.5;
float Kd_velo_re = 0.0;
float output_velo_re = 0.00;
float error_velo_re = 0.00;

//Revolute Low Pass
float revolute_radps_lowpass_prev = 0.0f;  // สถานะเก่าของความเร็วหลังกรอง
float revolute_radps_lowpass = 0.0f;  // ค่าความเร็วหลังกรองปัจจุบัน
float revolute_acceleration = 0.0f;  // เราจะคำนวณอัตราเร่ง (ดิบ)
float revolute_acceleration_lowpass_prev = 0.0f; // สถานะเก่าของอัตราเร่งหลังกรอง
float revolute_acceleration_lowpass = 0.0f;  // อัตราเร่งหลังกรอง

//Base system
uint64_t heartbeat_counter = 0;
float prev_prismatic_vel = 0.0;
float prev_prismatic_kalman_radps = 0.0;
float prev_revolute_vel = 0.0;

// Validation
uint32_t tim2_counter = 0;
uint8_t burst_mode = 0;
uint8_t flag = 0;

//JOY
uint16_t JOY_RawRead[20];
int16_t Joy_x;
int16_t Joy_y;
uint8_t Joy_run;
uint8_t Joy_save;
int count = 0.0;

//Proximity
uint16_t Prox_RawRead[10];
uint8_t revolute_homed = 0;

// State
uint8_t state = 0;
uint8_t button_reset = 0;
uint8_t button_reset_prev = 0;
uint8_t button_run = 0;
uint8_t waiting_state = 0;
uint8_t button_emer = 0;

//remap
float remap_pos = 0.0;
float remap_deg = 0.0;
float theta = 0.0;

uint32_t stopCounter = 0;
uint8_t pointMoveNeedsInit = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM16_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_TIM1_Init();
	MX_TIM2_Init();
	MX_TIM4_Init();
	MX_TIM5_Init();
	MX_TIM3_Init();
	MX_ADC1_Init();
	MX_TIM16_Init();
	MX_USART2_UART_Init();
	MX_ADC2_Init();
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
	hmodbus.htim = &htim16;
	hmodbus.slaveAddress = 0x15;
	hmodbus.RegisterSize = 70;
	Modbus_init(&hmodbus, registerFrame);

	PID_POS_pris.Kp = Kp_pos_pris;
	PID_POS_pris.Ki = Ki_pos_pris;
	PID_POS_pris.Kd = Kd_pos_pris;
	arm_pid_init_f32(&PID_POS_pris, 0);

	PID_POS_re.Kp = Kp_pos_re;
	PID_POS_re.Ki = Ki_pos_re;
	PID_POS_re.Kd = Kd_pos_re;
	arm_pid_init_f32(&PID_POS_re, 0);

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
	HAL_TIM_Base_Start(&htim1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);

	PIDInit(&prismatic_vel_control, 65535, -65535);
	PIDInit(&revolute_vel_control, 65535, -65535);

	HAL_TIM_Base_Start_IT(&htim5);
	HAL_TIM_Base_Start_IT(&htim2);

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
	HAL_ADC_Start_DMA(&hadc2, Prox_RawRead, 10);

//	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_1, GPIOB, GPIO_PIN_0);


//	registerFrame[4].U16 = 1;
//	registerFrame[5].U16 = 0;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
	RCC_OscInitStruct.PLL.PLLN = 85;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.GainCompensation = 0;
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.LowPowerAutoWait = DISABLE;
	hadc1.Init.ContinuousConvMode = ENABLE;
	hadc1.Init.NbrOfConversion = 2;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.DMAContinuousRequests = ENABLE;
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	hadc1.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
		Error_Handler();
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
	sConfig.Rank = ADC_REGULAR_RANK_2;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc2.Init.GainCompensation = 0;
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc2.Init.LowPowerAutoWait = DISABLE;
	hadc2.Init.ContinuousConvMode = ENABLE;
	hadc2.Init.NbrOfConversion = 1;
	hadc2.Init.DiscontinuousConvMode = DISABLE;
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc2.Init.DMAContinuousRequests = ENABLE;
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	hadc2.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 169;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 19999;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
			!= HAL_OK) {
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);

}

/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
	htim2.Init.Prescaler = 169;
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 999;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}

/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
	htim3.Init.Prescaler = 0;
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim3.Init.Period = 65535;
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC1Filter = 0;
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC2Filter = 0;
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}

/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 65535;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC1Filter = 0;
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC2Filter = 0;
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}

/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
	htim5.Init.Prescaler = 169;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.Period = 999;
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}

/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
	htim16.Init.Prescaler = 169;
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim16.Init.Period = 1145;
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim16.Init.RepetitionCounter = 0;
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 19200;
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_EVEN;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
	__HAL_RCC_DMA1_CLK_ENABLE();

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : PC3 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
	GPIO_InitStruct.Pin = RUN_Joy_Pin | Save_Joy_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : PC6 PC7 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
//	error_pos_pris = target_position_prismatic - ball_screw_pos;

	float setpoint_pris_abs = Trapezoidal_GetCurrentAbsolute(&prisProfile);
	// And compare against your actual encoder reading (ball_screw_pos):
	error_pos_pris = setpoint_pris_abs - (float)ball_screw_pos;
	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);

//	error_pos_pris = prisProfile.current_position - ball_screw_pos;
//
//	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);

	if (output_pos_pris > 600) {
		output_pos_pris = 600;
	} else if (output_pos_pris < -600) {
		output_pos_pris = -600;
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	if (limit_r == 1 && output_prismatic < 0) {
		output_prismatic = 0;
	} else if (limit_l == 1 && output_prismatic > 0) {
		output_prismatic = 0;
	}

	// Motor control
	if (ball_screw_pos >= target_position_prismatic - 0.05
			&& ball_screw_pos <= target_position_prismatic + 0.05) {
		output_prismatic = 0;
	} else {
		output_prismatic = output_pos_pris;
	}
	output_prismatic = output_velo_pris;
}

void Revolute_CasCadeControl() {
//	error_pos_re = target_position_revolute - revolute_encoder.rads;

	float setpoint_rev_abs = Trapezoidal_GetCurrentAbsolute(&revProfile);
	error_pos_re = setpoint_rev_abs - revolute_encoder.rads;
	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);

//	error_pos_re = revProfile.current_position - revolute_encoder.rads;
//
//	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);

	if (output_pos_re > 300) {
		output_pos_re = 300;
	} else if (output_pos_re < -300) {
		output_pos_re = -300;
	}

	error_velo_re = error_pos_re - (revolute_encoder.radps / 2);

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re, Ki_velo_re,
			Kd_velo_re, error_velo_re);

	if (revolute_flag == 1 && output_revolute > 0) {
		output_revolute = 0;
	} else if (revolute_encoder.rads >= (2 * M_PI) && output_revolute < 0) {
		output_revolute = 0;
	}
	// Motor control
//	if (revolute_encoder.rads >= target_position_revolute - 0.1
//			&& revolute_encoder.rads <= target_position_revolute + 0.1) {
//		output_revolute = 0;
//	} else {
//		output_revolute = output_velo_re;;
//	}
	output_revolute = output_velo_re;
}

void ball_screw_converter() {
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == GPIO_PIN_13) {
		current_state = STATE_ERROR;
		registerFrame[1].U16 = STATUS_IDLE;
	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	// sensor timer 1000 hz
	if (htim == &htim2) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
		QEIPosVelUpdate(&revolute_encoder);
		//Limit Switch check
		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
		limit_plot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
		for (int i = 0; i < 20; i++) {
			if ((i & 1) == 0)
				sum_y += JOY_RawRead[i];
			else
				sum_x += JOY_RawRead[i];
		}

		int32_t raw_x = sum_x / 10;
		int32_t raw_y = sum_y / 10;

		if (raw_x < 1700 && raw_x > 1500) {
			raw_x = 3400 / 2;
		}
		if (raw_y < 1700 && raw_y > 1500) {
			raw_y = 3400 / 2;
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);

		// Joy button
//		Joy_run = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
//		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

		//Prismatic Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
								- prismatic_radps_lowpass_prev);

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
		ball_screw_converter();

		// ==== Revolute Low‐Pass Filter ====
		// 1) กรองความเร็ว (rad/s) ของแกน Revolute
		revolute_radps_lowpass =
				revolute_radps_lowpass_prev
						+ alpha
								* (revolute_encoder.radps
										- revolute_radps_lowpass_prev);
		// 2) คำนวณอัตราเร่งดิบ (rad/s^2) จากความเปลี่ยนแปลงของค่าที่กรองแล้ว
		revolute_acceleration = (revolute_radps_lowpass
				- revolute_radps_lowpass_prev) / dt;
		// 3) กรองอัตราเร่งให้ลื่น (หากต้องการใช้ค่าเร่งหลังกรอง)
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
				+ alpha
						* (revolute_acceleration
								- revolute_acceleration_lowpass_prev);
		// 4) เก็บสถานะย้อนกลับไว้ใช้รอบถัดไป
		revolute_radps_lowpass_prev = revolute_radps_lowpass;
		revolute_acceleration_lowpass_prev = revolute_acceleration_lowpass;

		// Prox shimttrigger
//		revolute_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
		if (Prox_RawRead[0] > 3000) {
			revolute_flag = 0;
		} else if (Prox_RawRead[0] < 1500) {
			revolute_flag = 1;
		}
		//Servo
		if (registerFrame[4].U16 == 1) {
//			registerFrame[5].U16 = (registerFrame[4].U16 == 1) ? 0 : 1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 35000);
//			MotorSet(&servo_motor, 1000, 30000);
		} else if (registerFrame[5].U16 == 1) {
//			registerFrame[4].U16 = (registerFrame[4].U16 == 1) ? 0 : 1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//			MotorSet(&servo_motor, 1000, 0);
		}
		Joy_save = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
		Joy_run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);

		//button
		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
						&& button_emer == 1) ? 1 : 0;

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
						&& button_emer) ? 1 : 0;

		MotorSet(&prismatic_motor, 1000, output_prismatic);
		MotorSet(&revolute_motor, 1000, output_revolute);

		// Protocal
		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
			heartbeat_counter = 0;
			registerFrame[0x00].U16 = (registerFrame[0X00].U16 == 0) ? 22881 : 0;
		}
		heartbeat_counter++;
	}

	// state timer 1000 hz
	if (htim == &htim5) {
		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
			current_state = STATE_STOPPING;
		}

		if (registerFrame[1].U16 & STATUS_HOME) {
			current_state = STATE_HOMING;
		} else if (registerFrame[1].U16 & STATUS_JOG) {
			current_state = STATE_JOGGING;
			registerFrame[10].U16 = STATUS_JOG;
		} else if (registerFrame[1].U16 & STATUS_POINT) {
			current_state = STATE_POINT_MOVING;
			pointMoveNeedsInit = 1;
			registerFrame[10].U16 = STATUS_POINT;
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
			current_state = STATE_GO_TO_TARGET;
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
		} else if (registerFrame[1].U16 & STATUS_IDLE) {
			current_state = STATE_IDLE;
		}
//
//		if (registerFrame[4].U16 == 1 && registerFrame[5].U16 == 0) {
//			//Pen Up Servo On
//			registerFrame[3].U16 = 1 << 0;
//		} else {
//			//Pen Doen Servo Off
//			registerFrame[3].U16 = 1 << 1;
//		}

		if (button_run == 1
				&& (current_state == STATE_ERROR || current_state == 0)
				&& button_emer == 1) {
			registerFrame[1].U16 = STATUS_HOME;
		}

		switch (current_state) {
		case STATE_HOMING:
			if (limit_r != 1) {
				output_prismatic = -(65535 / 2.0);
			} else if (limit_r == 1) {
				limit_l_prev = 1;
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}
			if (revolute_flag != 1) {
				output_revolute = -60000;
			} else if (revolute_flag == 1) {
				revolute_homed = 1; // Check Proximity trick
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}
			target_position_prismatic = 0;
			target_position_revolute = 0;
			error_pos_re = 0;
			error_pos_pris = 0;
			registerFrame[4].U16 = 1;
			registerFrame[5].U16 = 0;
			registerFrame[10].U16 = STATUS_HOME;
			break;

		case STATE_JOGGING:
			//Call joystick mode
			joy_flag = 1;

			if (limit_r == 1) {
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1) {
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}

			output_prismatic = (Joy_x / 100.0) * 30000;

			if (limit_r == 1 && output_prismatic < 0) {
				output_prismatic = 0;
			} else if (limit_l == 1 && output_prismatic > 0) {
				output_prismatic = 0;
			}

			output_revolute = (Joy_y / 100.0) * 60000.0;

			if (revolute_flag == 1 && output_revolute < 0) {
				output_revolute = 0;
			} else if (revolute_encoder.rads >= (2 * M_PI)
					&& output_revolute > 0) {
				output_revolute = 0;
			}

			if (button_reset == 1 && button_reset_prev == 0) {
				count++;
				if (count > 0 && count <= 10) {
					registerFrame[18 + count * 2].U16 = ball_screw_pos * 10;
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
							/ (2 * M_PI)) * 1800.0;
				} else {
					count = 0;
				}
			}
			break;
		case STATE_POINT_MOVING:
			registerFrame[4].U16 = 1;
			registerFrame[5].U16 = 0;
			theta = (float) (registerFrame[65].U16);
//			target_position_prismatic = registerFrame[64].U16 / 10;
			if (theta <= 1800) {
				target_position_revolute = (float) (registerFrame[65].U16
						/ 1800.0) * (2.0 * M_PI);
				target_position_prismatic = 300 - (registerFrame[64].U16 / 10);
			} else if (theta > 1800) {
				target_position_revolute = (float) (fabs(
						180 - registerFrame[65].U16 / 10.0));
				target_position_revolute = (float) (target_position_revolute
						/ 180.0) * (2.0 * M_PI);
				target_position_prismatic = mapf((registerFrame[64].U16 / 10),
						0, 300, 300, 600);
//				target_position_revolute = 300 + (registerFrame[64].U16 / 10);
			}

			if (pointMoveNeedsInit) {
//				float dist_pris = target_position_prismatic
//						- (float) ball_screw_pos;
//				float dist_rev = target_position_revolute
//						- (float) revolute_encoder.rads;
//
//				// Choose v_max, a_max to suit your system:
//				Trapezoidal_Init(&prisProfile, dist_pris, 550.0f, 250.0f);
//				Trapezoidal_Init(&revProfile, dist_rev, 2.0f, 0.4f);
//
//

				// Suppose you read “ball_screw_pos” from your prismatic encoder (in mm):
				float abs_start_pris = (float)ball_screw_pos;

				// And you compute your absolute goal from Modbus registers, e.g.:
				float abs_goal_pris = target_position_prismatic;  // (mm)

				// Now initialize the trapezoid:
				Trapezoidal_Init(&prisProfile,
				                 abs_start_pris,
				                 abs_goal_pris,
				                 550.0f,   // v_max (mm/s)
				                 250.0f ); // a_max (mm/s²)

				// …similarly for revolute:
				float abs_start_rev = (float)revolute_encoder.rads;
				float abs_goal_rev  = target_position_revolute/* from registerFrame[65], converted to radians */;

				Trapezoidal_Init(&revProfile,
				                 abs_start_rev,
				                 abs_goal_rev,
				                 2.0f,   // v_max (rad/s)
				                 0.4f ); // a_max (rad/s²)



				pointMoveNeedsInit = 0; // Clear so we don’t re‐Init on the next tick
			}
			break;
		case STATE_GO_TO_TARGET:

			if (!prisProfile.finished) {
				Trapezoidal_Update(&prisProfile, 0.001f);
			}
			if (!revProfile.finished) {
				Trapezoidal_Update(&revProfile, 0.001f);
			}

			Revolute_CasCadeControl();
			Prismatic_CasCadeControl();

			if (limit_r == 1 && limit_l_prev == 0) {
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}
			registerFrame[11].U16 = (int) (ball_screw_pos * 10);
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
					* 10);
			registerFrame[13].U16 = (int) (ball_screw_vel * 10);
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
					* 10);
			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
					- prev_revolute_vel) / 0.001) * 10);
//			if ((error_pos_pris <=  0.05f && error_pos_pris >= -0.05f) &&
//			        (error_pos_re   <=  0.01f && error_pos_re   >= -0.01f))
//			    {
//			        // Both errors are “small enough” right now:
//			        stopCounter++;
//
//			        if (stopCounter >= 3000) {
//			            // We have remained “inside deadband” for at least 3000 timer ticks:
//			            registerFrame[1].U16 = STATUS_STOP;
//			        }
//			    }
//			else {
//				// At least one error is outside its deadband → reset counter:
//				stopCounter = 0;
//			}
			if (prisProfile.finished && revProfile.finished) {
				registerFrame[1].U16 = STATUS_STOP;
			}

			break;
		case STATE_STOPPING:
			registerFrame[10].U16 = STATUS_STOP;
			revolute_homed = 0;
			limit_l_prev = 0;
			output_revolute = 0;
			output_prismatic = 0;
			registerFrame[4].U16 = 0;
			registerFrame[5].U16 = 1;
			break;

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
			output_prismatic = 0;
			registerFrame[4].U16 = 0;
			registerFrame[5].U16 = 1;
			break;
		}
		button_reset_prev = button_reset;
	}
}

//void targer_remap(double degree , double pos)
//{
//	if (degree < 180)
//	{
//		target_position_prismatic = 300 - pos;
//	}
//	else
//	{
//		target_position_revolute = abs(180 - degree);
//		target_position_prismatic = mapf(pos, 0, 300, 300, 600);
//	}
//}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "motor.h"
#include "arm_math.h"
#include "QEI.h"
#include "PID.h"
#include "Kalman.h"
#include "ModBusRTU.h"
#include "math.h"
#include "Trapezoidal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PRISM_UPDATE_THRESH 40.0f
// LOW PASS cutoff frequency
#define FC   5.0f
#define VELOCITY_DEADZONE   0.01f   // ปรับตามหน่วย rads/s หรือ mm/s ที่เหมาะสม
//Joy set origin
#define RAW_MIN    0    // e.g. you saw ~20 at one end
#define RAW_CENTER 1750  // you measured ~1700–1800 at rest
#define RAW_MAX   3400   // you saw ~4080 at the other end
#define OUT_MIN  -100
#define OUT_MAX  +100
#define PATH_POINTS  (sizeof(path)/sizeof(path[0]))
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
// Velo profile
VELO_PROFILE prisProfile;
VELO_PROFILE revProfile;

ModbusHandleTypedef hmodbus;
volatile u16u8_t registerFrame[70];
//state machine
typedef enum {
	STATUS_IDLE = 0, STATUS_HOME = 1 << 0,        // 00001 = 1 - สถานะโฮมมิ่ง
	STATUS_JOG = 1 << 1,         // 00010 = 2 - สถานะจ็อกกิ้ง
	STATUS_POINT = 1 << 2,       // 00100 = 4 - สถานะเคลื่อนที่แบบจุดต่อจุด
	STATUS_GO_TO_TARGET = 1 << 3,       // 01000 = 8 - สถานะไปยังตำแหน่งเป้าหมาย
	STATUS_STOP = 1 << 4         // 10000 = 16 - สถานะหยุดฉุกเฉิน
} MovingStatusFlags;

typedef enum {
	STATE_IDLE,
	STATE_HOMING,
	STATE_JOGGING,
	STATE_POINT_MOVING,
	STATE_GO_TO_TARGET,
	STATE_STOPPING,
	STATE_ERROR,
	STATE_RUNING,
	STATE_PAIN
} RobotState;

typedef enum {
	SERVO_STATE,
} Servo_state;

RobotState current_state = STATE_IDLE;
int joy_flag = 0;
int point_flag = 0;
float joy_save[10];

MOTOR prismatic_motor;
MOTOR revolute_motor;
MOTOR servo_motor;

float target_position_prismatic = 0.0;

// PID_Velocity gain
float Kp_velo_pris = 100.0;
float Ki_velo_pris = 2.0;      //8.5;
float Kd_velo_pris = 0.0;
float output_velo_pris = 0.00;
float error_velo_pris = 0.00;

// PID_Position gain
//float Kp_pos = 4.5; encoder
float Kp_pos_pris = 6.0;
float Ki_pos_pris = 0.0;
float Kd_pos_pris = 0.0;
float output_pos_pris = 0.00;
float error_pos_pris = 0.00;

//PID_Position CMSIS
arm_pid_instance_f32 PID_POS_pris = { 0 };
arm_pid_instance_f32 PID_POS_re = { 0 };

int32_t setpoint = 0;
float output_prismatic = 0;
float output_revolute = 0;

QEI prismatic_encoder;
CONTROLLER prismatic_pos_control;
CONTROLLER prismatic_vel_control;

// Prismatic low-pass
// LOW Pass filter
const float dt = 0.001f;
const float RC = 1.0f / (2.0f * 3.1415926f * FC);
const float alpha = dt / (RC + dt);
float prismatic_radps_lowpass_prev = 0.0f;  // filter state
float prismatic_radps_lowpass = 0.0f;

// Acceleration
float prismatic_acceleration = 0.0f;
float prismatic_acceleration_lowpass = 0.0f;
float prismatic_acceleration_lowpass_prev = 0.0f;

// unit converter
double ball_screw_pos;
double ball_screw_vel;

//REvolute
float target_position_revolute = 0.0;

QEI revolute_encoder;
uint8_t revolute_flag = 0;
CONTROLLER revolute_pos_control;
CONTROLLER revolute_vel_control;

// unit converter
uint8_t limit_r = 0;
uint8_t limit_r_prev = 0;
uint8_t limit_l = 0;
uint8_t limit_l_prev = 0;
uint8_t limit_plot = 0;

float motor_voltage = 0.0;
float error_rads = 0.0;

// PID_Velocity gain
float Kp_pos_re = 15.0;
float Ki_pos_re = 0.0;         //8.5;
float Kd_pos_re = 2.0;
float output_pos_re = 0.00;
float error_pos_re = 0.00;

//Revolute Velo Control
float Kp_velo_re = 2500.0;
float Ki_velo_re = 15.0;         //8.5;
float Kd_velo_re = 0.0;
float output_velo_re = 0.00;
float error_velo_re = 0.00;

//Revolute Low Pass
float revolute_radps_lowpass_prev = 0.0f;  // สถานะเก่าของความเร็วหลังกรอง
float revolute_radps_lowpass = 0.0f;  // ค่าความเร็วหลังกรองปัจจุบัน
float revolute_acceleration = 0.0f;  // เราจะคำนวณอัตราเร่ง (ดิบ)
float revolute_acceleration_lowpass_prev = 0.0f; // สถานะเก่าของอัตราเร่งหลังกรอง
float revolute_acceleration_lowpass = 0.0f;  // อัตราเร่งหลังกรอง

//Base system
uint64_t heartbeat_counter = 0;
float prev_prismatic_vel = 0.0;
float prev_prismatic_kalman_radps = 0.0;
float prev_revolute_vel = 0.0;

// Validation
uint32_t tim2_counter = 0;
uint8_t burst_mode = 0;
uint8_t flag = 0;

//JOY
uint16_t JOY_RawRead[20];
int16_t Joy_x;
int16_t Joy_y;
uint8_t Joy_run;
uint8_t Joy_save;
int count = 0.0;
int count_run = 1.0;

//Proximity
uint16_t Prox_RawRead[10];
uint8_t revolute_homed = 0;

// State
uint8_t state = 0;
uint8_t button_reset = 0;
uint8_t button_reset_prev = 0;
uint8_t button_run = 0;
uint8_t waiting_state = 0;
uint8_t button_emer = 0;

//remap
float remap_pos = 0.0;
float remap_deg = 0.0;
float theta = 0.0;

uint32_t stopCounter = 0;
uint8_t pointMoveNeedsInit = 0;
uint8_t running_flang = 0;
uint8_t pain_flang = 0;
uint8_t pointRunNeedsInit = 0;
uint8_t pen_flag = 0;

const float path[][2] = {
    {-30.77, 16.15},
    {-28.82, 16.32},
    {-26.89, 16.61},
    {-24.99, 17.03},
    {-23.12, 17.57},
    {-21.30, 18.24},
    {-19.52, 19.02},
    {-17.80, 19.91},
    {-16.13, 20.92},
    {-14.53, 22.04},
    {-13.00, 23.27},
    {-13.00, 23.27},
    {-12.13, 24.10},
    {-11.30, 24.97},
    {-10.50, 25.87},
    {-9.75, 26.80},
    {-9.04, 27.76},
    {-8.37, 28.76},
    {-7.75, 29.78},
    {-7.17, 30.83},
    {-6.63, 31.91},
    {-6.14, 33.01},
    {-6.14, 33.01},
    {-5.65, 34.22},
    {-5.21, 35.44},
    {-4.81, 36.68},
    {-4.46, 37.93},
    {-4.15, 39.19},
    {-3.89, 40.46},
    {-3.67, 41.74},
    {-3.50, 43.02},
    {-3.38, 44.32},
    {-3.30, 45.62},
    {-3.30, 45.62},
    {-3.24, 46.94},
    {-3.23, 48.27},
    {-3.26, 49.59},
    {-3.33, 50.92},
    {-3.44, 52.24},
    {-3.60, 53.55},
    {-3.80, 54.86},
    {-4.04, 56.17},
    {-4.32, 57.46},
    {-4.65, 58.75},
    {-4.65, 58.75},
    {-4.99, 59.92},
    {-5.37, 61.07},
    {-5.80, 62.20},
    {-6.27, 63.31},
    {-6.79, 64.41},
    {-7.35, 65.48},
    {-7.95, 66.53},
    {-8.59, 67.56},
    {-9.28, 68.56},
    {-10.00, 69.53},
    {-10.00, 69.53},
    {-11.30, 71.03},
    {-12.69, 72.43},
    {-14.18, 73.71},
    {-15.75, 74.89},
    {-17.39, 75.95},
    {-19.11, 76.90},
    {-20.89, 77.72},
    {-22.72, 78.41},
    {-24.61, 78.98},
    {-26.55, 79.41},
    {-26.55, 79.41},
    {-28.22, 79.69},
    {-29.90, 79.88},
    {-31.59, 79.98},
    {-33.27, 80.00},
    {-34.96, 79.93},
    {-36.64, 79.78},
    {-38.31, 79.54},
    {-39.96, 79.22},
    {-41.61, 78.81},
    {-43.23, 78.32},
    {-43.23, 78.32},
    {-45.59, 77.36},
    {-47.83, 76.19},
    {-49.95, 74.84},
    {-51.92, 73.30},
    {-53.75, 71.59},
    {-55.41, 69.73},
    {-56.90, 67.72},
    {-58.21, 65.57},
    {-59.32, 63.30},
    {-60.23, 60.92},
    {-60.23, 60.92},
    {-60.85, 58.81},
    {-61.36, 56.68},
    {-61.76, 54.53},
    {-62.05, 52.36},
    {-62.23, 50.19},
    {-62.29, 48.00},
    {-62.24, 45.82},
    {-62.08, 43.64},
    {-61.80, 41.46},
    {-61.41, 39.30},
    {-61.41, 39.30},
    {-61.08, 37.94},
    {-60.69, 36.61},
    {-60.25, 35.29},
    {-59.75, 33.99},
    {-59.19, 32.72},
    {-58.59, 31.47},
    {-57.93, 30.25},
    {-57.21, 29.06},
    {-56.45, 27.90},
    {-55.63, 26.77},
    {-55.63, 26.77},
    {-54.19, 25.09},
    {-52.64, 23.54},
    {-50.97, 22.13},
    {-49.21, 20.85},
    {-47.35, 19.72},
    {-45.41, 18.73},
    {-43.40, 17.89},
    {-41.32, 17.22},
    {-39.19, 16.70},
    {-37.01, 16.35},
    {-37.01, 16.35},
    {-36.39, 16.28},
    {-35.77, 16.22},
    {-35.14, 16.17},
    {-34.52, 16.13},
    {-33.90, 16.11},
    {-33.27, 16.09},
    {-32.65, 16.09},
    {-32.02, 16.10},
    {-31.40, 16.12},
    {-30.77, 16.15},
    {86.42, 16.13},
    {88.30, 16.27},
    {90.16, 16.51},
    {92.01, 16.83},
    {93.83, 17.24},
    {95.64, 17.74},
    {97.41, 18.33},
    {99.16, 19.00},
    {100.87, 19.76},
    {102.55, 20.60},
    {104.19, 21.53},
    {104.19, 21.53},
    {104.83, 21.91},
    {105.46, 22.30},
    {106.09, 22.70},
    {106.71, 23.10},
    {107.33, 23.52},
    {107.94, 23.94},
    {108.54, 24.38},
    {109.13, 24.82},
    {109.72, 25.27},
    {110.31, 25.73},
    {110.31, 25.73},
    {110.31, 28.03},
    {110.31, 30.32},
    {110.31, 32.61},
    {110.31, 34.90},
    {110.31, 37.19},
    {110.31, 39.48},
    {110.31, 41.77},
    {110.31, 44.07},
    {110.31, 46.36},
    {110.31, 48.65},
    {110.31, 48.65},
    {107.69, 48.64},
    {105.08, 48.64},
    {102.46, 48.64},
    {99.85, 48.63},
    {97.23, 48.63},
    {94.61, 48.62},
    {92.00, 48.62},
    {89.38, 48.61},
    {86.77, 48.61},
    {84.15, 48.61},
    {84.15, 48.61},
    {84.15, 47.88},
    {84.15, 47.16},
    {84.15, 46.43},
    {84.15, 45.71},
    {84.15, 44.98},
    {84.15, 44.26},
    {84.15, 43.54},
    {84.15, 42.81},
    {84.15, 42.09},
    {84.15, 41.36},
    {84.15, 41.36},
    {85.97, 41.36},
    {87.78, 41.36},
    {89.60, 41.36},
    {91.41, 41.36},
    {93.23, 41.36},
    {95.04, 41.36},
    {96.86, 41.36},
    {98.68, 41.36},
    {100.49, 41.36},
    {102.31, 41.36},
    {102.31, 41.36},
    {102.31, 40.21},
    {102.31, 39.06},
    {102.31, 37.91},
    {102.31, 36.76},
    {102.31, 35.61},
    {102.31, 34.46},
    {102.31, 33.31},
    {102.31, 32.16},
    {102.31, 31.01},
    {102.31, 29.86},
    {102.31, 29.86},
    {101.72, 29.39},
    {101.11, 28.94},
    {100.50, 28.51},
    {99.87, 28.09},
    {99.23, 27.70},
    {98.58, 27.32},
    {97.92, 26.97},
    {97.24, 26.63},
    {96.56, 26.31},
    {95.87, 26.02},
    {95.87, 26.02},
    {93.92, 25.20},
    {91.93, 24.54},
    {89.91, 24.03},
    {87.85, 23.69},
    {85.78, 23.50},
    {83.70, 23.48},
    {81.63, 23.61},
    {79.56, 23.91},
    {77.51, 24.36},
    {75.50, 24.98},
    {75.50, 24.98},
    {74.66, 25.28},
    {73.83, 25.62},
    {73.02, 25.99},
    {72.24, 26.40},
    {71.47, 26.85},
    {70.72, 27.33},
    {69.99, 27.84},
    {69.29, 28.38},
    {68.61, 28.96},
    {67.95, 29.57},
    {67.95, 29.57},
    {67.21, 30.37},
    {66.52, 31.21},
    {65.87, 32.08},
    {65.27, 32.99},
    {64.72, 33.92},
    {64.22, 34.88},
    {63.77, 35.87},
    {63.37, 36.88},
    {63.02, 37.91},
    {62.73, 38.96},
    {62.73, 38.96},
    {62.34, 40.67},
    {62.04, 42.38},
    {61.81, 44.11},
    {61.67, 45.84},
    {61.61, 47.58},
    {61.63, 49.32},
    {61.74, 51.05},
    {61.92, 52.78},
    {62.19, 54.51},
    {62.54, 56.22},
    {62.54, 56.22},
    {62.73, 57.03},
    {62.95, 57.82},
    {63.20, 58.61},
    {63.47, 59.39},
    {63.77, 60.16},
    {64.10, 60.92},
    {64.45, 61.67},
    {64.82, 62.41},
    {65.22, 63.13},
    {65.65, 63.84},
    {65.65, 63.84},
    {65.95, 64.31},
    {66.26, 64.77},
    {66.59, 65.22},
    {66.93, 65.66},
    {67.28, 66.09},
    {67.65, 66.51},
    {68.02, 66.92},
    {68.41, 67.32},
    {68.81, 67.71},
    {69.22, 68.08},
    {69.22, 68.08},
    {70.18, 68.83},
    {71.17, 69.51},
    {72.20, 70.14},
    {73.26, 70.70},
    {74.35, 71.20},
    {75.47, 71.64},
    {76.62, 72.01},
    {77.78, 72.31},
    {78.96, 72.55},
    {80.16, 72.71},
    {80.16, 72.71},
    {81.12, 72.83},
    {82.07, 72.91},
    {83.02, 72.95},
    {83.98, 72.97},
    {84.93, 72.94},
    {85.89, 72.89},
    {86.84, 72.80},
    {87.79, 72.67},
    {88.73, 72.51},
    {89.67, 72.32},
    {89.67, 72.32},
    {90.53, 72.10},
    {91.37, 71.84},
    {92.20, 71.54},
    {93.01, 71.20},
    {93.80, 70.81},
    {94.57, 70.39},
    {95.32, 69.92},
    {96.05, 69.42},
    {96.74, 68.87},
    {97.41, 68.29},
    {97.41, 68.29},
    {97.86, 67.82},
    {98.28, 67.32},
    {98.68, 66.81},
    {99.06, 66.29},
    {99.42, 65.75},
    {99.76, 65.19},
    {100.07, 64.63},
    {100.36, 64.05},
    {100.63, 63.46},
    {100.87, 62.85},
    {100.87, 62.85},
    {101.00, 62.53},
    {101.13, 62.21},
    {101.25, 61.89},
    {101.37, 61.57},
    {101.48, 61.24},
    {101.60, 60.92},
    {101.71, 60.59},
    {101.81, 60.26},
    {101.91, 59.93},
    {102.01, 59.60},
    {102.01, 59.60},
    {102.75, 59.80},
    {103.49, 60.00},
    {104.22, 60.21},
    {104.96, 60.41},
    {105.70, 60.61},
    {106.43, 60.81},
    {107.17, 61.01},
    {107.91, 61.22},
    {108.64, 61.42},
    {109.38, 61.62},
    {109.38, 61.62},
    {109.14, 62.59},
    {108.86, 63.55},
    {108.55, 64.49},
    {108.20, 65.43},
    {107.82, 66.35},
    {107.41, 67.26},
    {106.97, 68.15},
    {106.50, 69.02},
    {105.99, 69.88},
    {105.45, 70.72},
    {105.45, 70.72},
    {104.83, 71.56},
    {104.17, 72.36},
    {103.46, 73.11},
    {102.72, 73.83},
    {101.94, 74.51},
    {101.12, 75.14},
    {100.27, 75.73},
    {99.39, 76.27},
    {98.48, 76.76},
    {97.54, 77.21},
    {97.54, 77.21},
    {96.26, 77.74},
    {94.96, 78.22},
    {93.65, 78.64},
    {92.32, 79.00},
    {90.97, 79.31},
    {89.62, 79.55},
    {88.25, 79.74},
    {86.88, 79.87},
    {85.49, 79.94},
    {84.11, 79.94},
    {84.11, 79.94},
    {82.82, 79.94},
    {81.53, 79.88},
    {80.25, 79.78},
    {78.97, 79.64},
    {77.70, 79.45},
    {76.44, 79.21},
    {75.18, 78.93},
    {73.94, 78.60},
    {72.70, 78.23},
    {71.48, 77.81},
    {71.48, 77.81},
    {70.55, 77.46},
    {69.63, 77.07},
    {68.73, 76.64},
    {67.84, 76.18},
    {66.98, 75.69},
    {66.13, 75.16},
    {65.31, 74.61},
    {64.51, 74.02},
    {63.72, 73.40},
    {62.97, 72.74},
    {62.97, 72.74},
    {62.23, 72.03},
    {61.52, 71.30},
    {60.84, 70.54},
    {60.19, 69.75},
    {59.57, 68.94},
    {58.98, 68.10},
    {58.43, 67.24},
    {57.91, 66.37},
    {57.42, 65.47},
    {56.96, 64.55},
    {56.96, 64.55},
    {56.16, 62.75},
    {55.45, 60.92},
    {54.84, 59.05},
    {54.32, 57.16},
    {53.89, 55.25},
    {53.57, 53.32},
    {53.34, 51.37},
    {53.21, 49.41},
    {53.18, 47.44},
    {53.25, 45.47},
    {53.25, 45.47},
    {53.35, 43.99},
    {53.51, 42.52},
    {53.73, 41.05},
    {54.01, 39.60},
    {54.36, 38.16},
    {54.76, 36.74},
    {55.23, 35.34},
    {55.76, 33.95},
    {56.34, 32.59},
    {56.98, 31.25},
    {56.98, 31.25},
    {57.77, 29.83},
    {58.63, 28.46},
    {59.58, 27.15},
    {60.61, 25.91},
    {61.71, 24.73},
    {62.88, 23.63},
    {64.12, 22.60},
    {65.42, 21.65},
    {66.79, 20.77},
    {68.21, 19.99},
    {68.21, 19.99},
    {69.55, 19.33},
    {70.92, 18.73},
    {72.31, 18.19},
    {73.72, 17.71},
    {75.14, 17.30},
    {76.59, 16.94},
    {78.05, 16.65},
    {79.52, 16.42},
    {81.00, 16.25},
    {82.49, 16.15},
    {82.49, 16.15},
    {82.89, 16.13},
    {83.28, 16.12},
    {83.67, 16.10},
    {84.06, 16.10},
    {84.46, 16.09},
    {84.85, 16.09},
    {85.24, 16.09},
    {85.64, 16.10},
    {86.03, 16.11},
    {86.42, 16.13},
    {141.07, 16.15},
    {141.97, 16.21},
    {142.86, 16.33},
    {143.74, 16.49},
    {144.60, 16.70},
    {145.46, 16.95},
    {146.30, 17.25},
    {147.13, 17.59},
    {147.94, 17.98},
    {148.72, 18.41},
    {149.49, 18.88},
    {149.49, 18.88},
    {150.21, 19.41},
    {150.90, 19.97},
    {151.56, 20.56},
    {152.19, 21.18},
    {152.80, 21.83},
    {153.37, 22.51},
    {153.91, 23.21},
    {154.42, 23.94},
    {154.89, 24.70},
    {155.33, 25.47},
    {155.33, 25.47},
    {155.82, 26.43},
    {156.27, 27.41},
    {156.69, 28.40},
    {157.08, 29.40},
    {157.43, 30.42},
    {157.75, 31.44},
    {158.04, 32.48},
    {158.28, 33.53},
    {158.50, 34.58},
    {158.67, 35.65},
    {158.67, 35.65},
    {158.99, 38.00},
    {159.23, 40.35},
    {159.41, 42.72},
    {159.52, 45.08},
    {159.56, 47.45},
    {159.54, 49.81},
    {159.44, 52.18},
    {159.28, 54.54},
    {159.06, 56.90},
    {158.76, 59.25},
    {158.76, 59.25},
    {158.54, 60.53},
    {158.27, 61.80},
    {157.94, 63.06},
    {157.57, 64.31},
    {157.15, 65.53},
    {156.68, 66.74},
    {156.16, 67.93},
    {155.59, 69.10},
    {154.98, 70.25},
    {154.32, 71.37},
    {154.32, 71.37},
    {153.36, 72.73},
    {152.29, 73.97},
    {151.10, 75.09},
    {149.82, 76.09},
    {148.45, 76.96},
    {147.00, 77.69},
    {145.48, 78.27},
    {143.91, 78.71},
    {142.29, 78.99},
    {140.64, 79.11},
    {140.64, 79.11},
    {139.74, 79.15},
    {138.85, 79.15},
    {137.95, 79.12},
    {137.07, 79.04},
    {136.18, 78.92},
    {135.30, 78.76},
    {134.43, 78.56},
    {133.57, 78.32},
    {132.72, 78.04},
    {131.88, 77.73},
    {131.88, 77.73},
    {131.10, 77.36},
    {130.33, 76.95},
    {129.59, 76.50},
    {128.88, 76.01},
    {128.19, 75.49},
    {127.53, 74.93},
    {126.90, 74.34},
    {126.30, 73.72},
    {125.74, 73.06},
    {125.20, 72.38},
    {125.20, 72.38},
    {124.63, 71.56},
    {124.10, 70.73},
    {123.59, 69.88},
    {123.12, 69.02},
    {122.68, 68.13},
    {122.28, 67.23},
    {121.91, 66.31},
    {121.57, 65.38},
    {121.27, 64.44},
    {121.00, 63.49},
    {121.00, 63.49},
    {120.75, 62.43},
    {120.51, 61.38},
    {120.30, 60.32},
    {120.11, 59.25},
    {119.94, 58.19},
    {119.79, 57.11},
    {119.67, 56.04},
    {119.56, 54.96},
    {119.48, 53.88},
    {119.42, 52.80},
    {119.42, 52.80},
    {119.33, 51.11},
    {119.27, 49.42},
    {119.26, 47.72},
    {119.27, 46.03},
    {119.33, 44.34},
    {119.42, 42.65},
    {119.54, 40.96},
    {119.71, 39.27},
    {119.90, 37.59},
    {120.14, 35.91},
    {120.14, 35.91},
    {120.31, 34.85},
    {120.51, 33.80},
    {120.75, 32.75},
    {121.02, 31.72},
    {121.32, 30.69},
    {121.65, 29.67},
    {122.02, 28.67},
    {122.42, 27.67},
    {122.85, 26.69},
    {123.31, 25.72},
    {123.31, 25.72},
    {123.81, 24.77},
    {124.37, 23.86},
    {124.98, 22.99},
    {125.65, 22.15},
    {126.36, 21.36},
    {127.12, 20.61},
    {127.92, 19.91},
    {128.77, 19.26},
    {129.65, 18.66},
    {130.58, 18.12},
    {130.58, 18.12},
    {131.41, 17.72},
    {132.25, 17.36},
    {133.11, 17.05},
    {133.99, 16.78},
    {134.87, 16.56},
    {135.77, 16.38},
    {136.67, 16.24},
    {137.58, 16.14},
    {138.49, 16.09},
    {139.41, 16.09},
    {139.41, 16.09},
    {139.58, 16.10},
    {139.74, 16.10},
    {139.91, 16.11},
    {140.08, 16.11},
    {140.24, 16.12},
    {140.41, 16.12},
    {140.57, 16.13},
    {140.74, 16.14},
    {140.90, 16.14},
    {141.07, 16.15},
    {188.03, 16.07},
    {189.36, 16.13},
    {190.68, 16.28},
    {191.98, 16.52},
    {193.26, 16.83},
    {194.51, 17.22},
    {195.74, 17.70},
    {196.94, 18.25},
    {198.10, 18.88},
    {199.23, 19.58},
    {200.31, 20.35},
    {200.31, 20.35},
    {201.36, 21.21},
    {202.34, 22.13},
    {203.25, 23.12},
    {204.09, 24.17},
    {204.84, 25.28},
    {205.52, 26.44},
    {206.11, 27.64},
    {206.62, 28.89},
    {207.03, 30.17},
    {207.36, 31.49},
    {207.36, 31.49},
    {207.54, 32.56},
    {207.66, 33.62},
    {207.73, 34.70},
    {207.73, 35.77},
    {207.68, 36.84},
    {207.57, 37.91},
    {207.40, 38.96},
    {207.17, 40.01},
    {206.88, 41.05},
    {206.54, 42.08},
    {206.54, 42.08},
    {206.01, 43.24},
    {205.39, 44.34},
    {204.67, 45.37},
    {203.86, 46.32},
    {202.97, 47.20},
    {202.01, 48.00},
    {200.98, 48.70},
    {199.88, 49.31},
    {198.72, 49.82},
    {197.52, 50.23},
    {197.52, 50.23},
    {197.38, 50.26},
    {197.25, 50.30},
    {197.12, 50.34},
    {196.98, 50.37},
    {196.85, 50.41},
    {196.72, 50.44},
    {196.58, 50.48},
    {196.45, 50.51},
    {196.32, 50.55},
    {196.18, 50.59},
    {196.18, 50.59},
    {196.29, 50.64},
    {196.39, 50.69},
    {196.49, 50.74},
    {196.59, 50.79},
    {196.69, 50.84},
    {196.80, 50.89},
    {196.90, 50.94},
    {197.00, 50.99},
    {197.10, 51.04},
    {197.20, 51.09},
    {197.20, 51.09},
    {198.18, 51.62},
    {199.11, 52.23},
    {199.98, 52.91},
    {200.78, 53.66},
    {201.53, 54.46},
    {202.20, 55.33},
    {202.81, 56.24},
    {203.34, 57.21},
    {203.79, 58.22},
    {204.16, 59.27},
    {204.16, 59.27},
    {204.54, 61.28},
    {204.66, 63.29},
    {204.51, 65.27},
    {204.11, 67.21},
    {203.47, 69.06},
    {202.60, 70.82},
    {201.50, 72.46},
    {200.19, 73.95},
    {198.67, 75.28},
    {196.96, 76.41},
    {196.96, 76.41},
    {195.85, 77.01},
    {194.70, 77.54},
    {193.52, 77.99},
    {192.32, 78.38},
    {191.10, 78.68},
    {189.87, 78.92},
    {188.62, 79.07},
    {187.36, 79.15},
    {186.10, 79.15},
    {184.83, 79.08},
    {184.83, 79.08},
    {183.84, 78.99},
    {182.87, 78.86},
    {181.90, 78.67},
    {180.95, 78.43},
    {180.02, 78.14},
    {179.10, 77.79},
    {178.20, 77.40},
    {177.32, 76.96},
    {176.47, 76.47},
    {175.64, 75.93},
    {175.64, 75.93},
    {174.85, 75.34},
    {174.09, 74.71},
    {173.38, 74.04},
    {172.71, 73.33},
    {172.08, 72.58},
    {171.49, 71.80},
    {170.94, 70.99},
    {170.44, 70.14},
    {169.99, 69.27},
    {169.59, 68.37},
    {169.59, 68.37},
    {169.38, 67.87},
    {169.19, 67.35},
    {169.00, 66.84},
    {168.83, 66.32},
    {168.67, 65.80},
    {168.52, 65.27},
    {168.39, 64.74},
    {168.26, 64.21},
    {168.15, 63.68},
    {168.05, 63.14},
    {168.05, 63.14},
    {168.81, 63.00},
    {169.56, 62.87},
    {170.32, 62.73},
    {171.08, 62.60},
    {171.84, 62.46},
    {172.60, 62.33},
    {173.35, 62.19},
    {174.11, 62.06},
    {174.87, 61.92},
    {175.63, 61.79},
    {175.63, 61.79},
    {175.65, 61.92},
    {175.68, 62.06},
    {175.70, 62.19},
    {175.73, 62.33},
    {175.75, 62.46},
    {175.78, 62.60},
    {175.80, 62.73},
    {175.82, 62.87},
    {175.85, 63.00},
    {175.87, 63.14},
    {175.87, 63.14},
    {175.99, 63.72},
    {176.14, 64.29},
    {176.30, 64.85},
    {176.49, 65.41},
    {176.70, 65.96},
    {176.93, 66.50},
    {177.19, 67.04},
    {177.46, 67.56},
    {177.76, 68.07},
    {178.08, 68.57},
    {178.08, 68.57},
    {178.63, 69.29},
    {179.25, 69.96},
    {179.92, 70.57},
    {180.64, 71.11},
    {181.40, 71.59},
    {182.20, 72.00},
    {183.04, 72.33},
    {183.91, 72.59},
    {184.80, 72.77},
    {185.71, 72.87},
    {185.71, 72.87},
    {186.33, 72.91},
    {186.95, 72.92},
    {187.56, 72.90},
    {188.18, 72.85},
    {188.79, 72.76},
    {189.39, 72.64},
    {189.99, 72.49},
    {190.58, 72.30},
    {191.16, 72.09},
    {191.73, 71.84},
    {191.73, 71.84},
    {192.67, 71.31},
    {193.52, 70.68},
    {194.30, 69.96},
    {194.98, 69.17},
    {195.57, 68.31},
    {196.06, 67.38},
    {196.44, 66.41},
    {196.71, 65.39},
    {196.87, 64.34},
    {196.90, 63.26},
    {196.90, 63.26},
    {196.90, 62.79},
    {196.88, 62.32},
    {196.83, 61.85},
    {196.77, 61.38},
    {196.68, 60.92},
    {196.57, 60.46},
    {196.44, 60.01},
    {196.29, 59.56},
    {196.12, 59.12},
    {195.93, 58.68},
    {195.93, 58.68},
    {195.66, 58.20},
    {195.36, 57.73},
    {195.03, 57.29},
    {194.67, 56.87},
    {194.29, 56.47},
    {193.88, 56.10},
    {193.45, 55.75},
    {193.00, 55.43},
    {192.53, 55.14},
    {192.04, 54.88},
    {192.04, 54.88},
    {191.21, 54.45},
    {190.36, 54.08},
    {189.49, 53.76},
    {188.60, 53.49},
    {187.70, 53.28},
    {186.79, 53.12},
    {185.87, 53.01},
    {184.95, 52.96},
    {184.02, 52.97},
    {183.08, 53.03},
    {183.08, 53.03},
    {183.00, 52.36},
    {182.92, 51.70},
    {182.83, 51.03},
    {182.75, 50.37},
    {182.66, 49.70},
    {182.58, 49.04},
    {182.49, 48.37},
    {182.41, 47.70},
    {182.33, 47.04},
    {182.24, 46.37},
    {182.24, 46.37},
    {182.32, 46.39},
    {182.40, 46.41},
    {182.48, 46.43},
    {182.56, 46.45},
    {182.63, 46.47},
    {182.71, 46.49},
    {182.79, 46.51},
    {182.87, 46.53},
    {182.95, 46.55},
    {183.03, 46.57},
    {183.03, 46.57},
    {183.84, 46.78},
    {184.66, 46.95},
    {185.48, 47.07},
    {186.31, 47.15},
    {187.14, 47.19},
    {187.97, 47.19},
    {188.81, 47.14},
    {189.64, 47.05},
    {190.46, 46.92},
    {191.28, 46.74},
    {191.28, 46.74},
    {192.64, 46.27},
    {193.91, 45.64},
    {195.08, 44.86},
    {196.14, 43.96},
    {197.08, 42.94},
    {197.89, 41.81},
    {198.56, 40.59},
    {199.08, 39.29},
    {199.44, 37.92},
    {199.63, 36.49},
    {199.63, 36.49},
    {199.68, 35.72},
    {199.69, 34.95},
    {199.66, 34.19},
    {199.59, 33.43},
    {199.47, 32.67},
    {199.31, 31.93},
    {199.10, 31.19},
    {198.86, 30.47},
    {198.57, 29.76},
    {198.24, 29.06},
    {198.24, 29.06},
    {197.67, 28.08},
    {197.01, 27.16},
    {196.29, 26.30},
    {195.49, 25.52},
    {194.62, 24.82},
    {193.70, 24.19},
    {192.73, 23.65},
    {191.70, 23.19},
    {190.64, 22.83},
    {189.53, 22.56},
    {189.53, 22.56},
    {188.85, 22.44},
    {188.17, 22.36},
    {187.49, 22.32},
    {186.81, 22.31},
    {186.13, 22.34},
    {185.45, 22.41},
    {184.78, 22.51},
    {184.11, 22.65},
    {183.45, 22.83},
    {182.80, 23.03},
    {182.80, 23.03},
    {182.10, 23.32},
    {181.43, 23.66},
    {180.78, 24.04},
    {180.17, 24.46},
    {179.59, 24.93},
    {179.04, 25.43},
    {178.52, 25.97},
    {178.05, 26.55},
    {177.61, 27.16},
    {177.22, 27.81},
    {177.22, 27.81},
    {176.89, 28.43},
    {176.58, 29.07},
    {176.29, 29.72},
    {176.03, 30.37},
    {175.78, 31.04},
    {175.55, 31.71},
    {175.35, 32.38},
    {175.17, 33.07},
    {175.01, 33.76},
    {174.87, 34.45},
    {174.87, 34.45},
    {174.11, 34.35},
    {173.35, 34.25},
    {172.60, 34.15},
    {171.84, 34.05},
    {171.08, 33.95},
    {170.32, 33.85},
    {169.56, 33.75},
    {168.81, 33.65},
    {168.05, 33.54},
    {167.29, 33.44},
    {167.29, 33.44},
    {167.54, 31.46},
    {167.99, 29.54},
    {168.63, 27.69},
    {169.46, 25.93},
    {170.47, 24.27},
    {171.65, 22.72},
    {172.98, 21.30},
    {174.46, 20.02},
    {176.08, 18.90},
    {177.83, 17.94},
    {177.83, 17.94},
    {178.80, 17.53},
    {179.79, 17.17},
    {180.79, 16.86},
    {181.80, 16.60},
    {182.82, 16.39},
    {183.85, 16.22},
    {184.89, 16.11},
    {185.93, 16.04},
    {186.98, 16.03},
    {188.03, 16.07},
    {-185.39, 45.20},
    {-182.49, 45.20},
    {-179.60, 45.20},
    {-176.70, 45.20},
    {-173.80, 45.20},
    {-170.90, 45.20},
    {-168.00, 45.20},
    {-165.11, 45.20},
    {-162.21, 45.20},
    {-159.31, 45.20},
    {-156.41, 45.20},
    {-156.41, 45.20},
    {-156.41, 45.92},
    {-156.41, 46.65},
    {-156.41, 47.38},
    {-156.41, 48.11},
    {-156.41, 48.84},
    {-156.41, 49.57},
    {-156.41, 50.30},
    {-156.41, 51.02},
    {-156.41, 51.75},
    {-156.41, 52.48},
    {-156.41, 52.48},
    {-159.31, 52.48},
    {-162.21, 52.48},
    {-165.11, 52.48},
    {-168.00, 52.48},
    {-170.90, 52.48},
    {-173.80, 52.48},
    {-176.70, 52.48},
    {-179.60, 52.48},
    {-182.49, 52.48},
    {-185.39, 52.48},
    {-185.39, 52.48},
    {-185.39, 54.39},
    {-185.39, 56.31},
    {-185.39, 58.22},
    {-185.39, 60.13},
    {-185.39, 62.04},
    {-185.39, 63.95},
    {-185.39, 65.87},
    {-185.39, 67.78},
    {-185.39, 69.69},
    {-185.39, 71.60},
    {-185.39, 71.60},
    {-182.04, 71.60},
    {-178.69, 71.60},
    {-175.35, 71.60},
    {-172.00, 71.60},
    {-168.65, 71.60},
    {-165.30, 71.60},
    {-161.95, 71.60},
    {-158.60, 71.60},
    {-155.25, 71.60},
    {-151.91, 71.60},
    {-151.91, 71.60},
    {-151.91, 72.33},
    {-151.91, 73.06},
    {-151.91, 73.79},
    {-151.91, 74.52},
    {-151.91, 75.25},
    {-151.91, 75.98},
    {-151.91, 76.70},
    {-151.91, 77.43},
    {-151.91, 78.16},
    {-151.91, 78.89},
    {-151.91, 78.89},
    {-156.07, 78.89},
    {-160.24, 78.89},
    {-164.40, 78.89},
    {-168.57, 78.89},
    {-172.73, 78.89},
    {-176.90, 78.89},
    {-181.07, 78.89},
    {-185.23, 78.89},
    {-189.40, 78.89},
    {-193.56, 78.89},
    {-193.56, 78.89},
    {-193.56, 72.72},
    {-193.56, 66.54},
    {-193.56, 60.37},
    {-193.56, 54.19},
    {-193.56, 48.02},
    {-193.56, 41.84},
    {-193.56, 35.67},
    {-193.56, 29.49},
    {-193.56, 23.32},
    {-193.56, 17.14},
    {-193.56, 17.14},
    {-192.74, 17.14},
    {-191.93, 17.14},
    {-191.11, 17.14},
    {-190.29, 17.14},
    {-189.48, 17.14},
    {-188.66, 17.14},
    {-187.84, 17.14},
    {-187.03, 17.14},
    {-186.21, 17.14},
    {-185.39, 17.14},
    {-185.39, 17.14},
    {-185.39, 19.95},
    {-185.39, 22.75},
    {-185.39, 25.56},
    {-185.39, 28.36},
    {-185.39, 31.17},
    {-185.39, 33.97},
    {-185.39, 36.78},
    {-185.39, 39.58},
    {-185.39, 42.39},
    {-185.39, 45.20},
    {-131.74, 78.89},
    {-132.55, 78.89},
    {-133.37, 78.89},
    {-134.19, 78.89},
    {-135.00, 78.89},
    {-135.82, 78.89},
    {-136.64, 78.89},
    {-137.46, 78.89},
    {-138.27, 78.89},
    {-139.09, 78.89},
    {-139.91, 78.89},
    {-139.91, 78.89},
    {-139.91, 72.72},
    {-139.91, 66.54},
    {-139.91, 60.37},
    {-139.91, 54.19},
    {-139.91, 48.02},
    {-139.91, 41.84},
    {-139.91, 35.67},
    {-139.91, 29.49},
    {-139.91, 23.32},
    {-139.91, 17.14},
    {-139.91, 17.14},
    {-139.09, 17.14},
    {-138.27, 17.14},
    {-137.46, 17.14},
    {-136.64, 17.14},
    {-135.82, 17.14},
    {-135.00, 17.14},
    {-134.19, 17.14},
    {-133.37, 17.14},
    {-132.55, 17.14},
    {-131.74, 17.14},
    {-131.74, 17.14},
    {-131.74, 23.32},
    {-131.74, 29.49},
    {-131.74, 35.67},
    {-131.74, 41.84},
    {-131.74, 48.02},
    {-131.74, 54.19},
    {-131.74, 60.37},
    {-131.74, 66.54},
    {-131.74, 72.72},
    {-131.74, 78.89},
    {-92.68, 17.16},
    {-91.61, 17.17},
    {-90.55, 17.22},
    {-89.49, 17.29},
    {-88.44, 17.40},
    {-87.39, 17.55},
    {-86.34, 17.72},
    {-85.30, 17.93},
    {-84.26, 18.17},
    {-83.24, 18.45},
    {-82.22, 18.75},
    {-82.22, 18.75},
    {-81.37, 19.04},
    {-80.54, 19.38},
    {-79.73, 19.76},
    {-78.95, 20.19},
    {-78.20, 20.67},
    {-77.48, 21.19},
    {-76.79, 21.75},
    {-76.13, 22.35},
    {-75.51, 23.00},
    {-74.92, 23.68},
    {-74.92, 23.68},
    {-73.91, 25.11},
    {-73.04, 26.62},
    {-72.33, 28.20},
    {-71.77, 29.83},
    {-71.37, 31.50},
    {-71.12, 33.20},
    {-71.04, 34.92},
    {-71.13, 36.65},
    {-71.38, 38.37},
    {-71.80, 40.08},
    {-71.80, 40.08},
    {-72.24, 41.26},
    {-72.78, 42.40},
    {-73.42, 43.48},
    {-74.14, 44.50},
    {-74.94, 45.45},
    {-75.82, 46.33},
    {-76.78, 47.13},
    {-77.80, 47.85},
    {-78.88, 48.49},
    {-80.03, 49.03},
    {-80.03, 49.03},
    {-80.29, 49.14},
    {-80.55, 49.25},
    {-80.81, 49.36},
    {-81.07, 49.46},
    {-81.33, 49.56},
    {-81.60, 49.65},
    {-81.86, 49.74},
    {-82.13, 49.83},
    {-82.40, 49.92},
    {-82.67, 50.00},
    {-82.67, 50.00},
    {-82.56, 50.05},
    {-82.46, 50.11},
    {-82.35, 50.16},
    {-82.25, 50.22},
    {-82.14, 50.28},
    {-82.04, 50.33},
    {-81.93, 50.39},
    {-81.83, 50.44},
    {-81.72, 50.50},
    {-81.62, 50.55},
    {-81.62, 50.55},
    {-80.36, 51.31},
    {-79.21, 52.17},
    {-78.15, 53.14},
    {-77.20, 54.21},
    {-76.36, 55.37},
    {-75.64, 56.60},
    {-75.04, 57.90},
    {-74.58, 59.25},
    {-74.25, 60.66},
    {-74.07, 62.11},
    {-74.07, 62.11},
    {-74.09, 64.27},
    {-74.41, 66.37},
    {-75.00, 68.37},
    {-75.86, 70.26},
    {-76.96, 72.01},
    {-78.28, 73.60},
    {-79.81, 75.00},
    {-81.53, 76.19},
    {-83.42, 77.14},
    {-85.47, 77.84},
    {-85.47, 77.84},
    {-86.35, 78.05},
    {-87.25, 78.24},
    {-88.14, 78.41},
    {-89.04, 78.55},
    {-89.95, 78.67},
    {-90.86, 78.76},
    {-91.77, 78.83},
    {-92.68, 78.88},
    {-93.59, 78.90},
    {-94.50, 78.89},
    {-94.50, 78.89},
    {-96.82, 78.89},
    {-99.14, 78.89},
    {-101.45, 78.89},
    {-103.77, 78.89},
    {-106.09, 78.89},
    {-108.40, 78.89},
    {-110.72, 78.89},
    {-113.04, 78.89},
    {-115.35, 78.89},
    {-117.67, 78.89},
    {-117.67, 78.89},
    {-117.67, 72.72},
    {-117.67, 66.54},
    {-117.67, 60.37},
    {-117.67, 54.19},
    {-117.67, 48.02},
    {-117.67, 41.84},
    {-117.67, 35.67},
    {-117.67, 29.49},
    {-117.67, 23.32},
    {-117.67, 17.14},
    {-117.67, 17.14},
    {-115.31, 17.14},
    {-112.96, 17.14},
    {-110.61, 17.14},
    {-108.25, 17.14},
    {-105.90, 17.14},
    {-103.54, 17.14},
    {-101.19, 17.14},
    {-98.83, 17.14},
    {-96.48, 17.14},
    {-94.12, 17.14},
    {-94.12, 17.14},
    {-93.98, 17.14},
    {-93.83, 17.15},
    {-93.69, 17.15},
    {-93.55, 17.15},
    {-93.40, 17.15},
    {-93.26, 17.15},
    {-93.11, 17.15},
    {-92.97, 17.16},
    {-92.82, 17.16},
    {-92.68, 17.16},
    {-33.93, 23.11},
    {-36.20, 23.32},
    {-38.40, 23.78},
    {-40.51, 24.47},
    {-42.53, 25.39},
    {-44.43, 26.53},
    {-46.19, 27.86},
    {-47.79, 29.39},
    {-49.23, 31.09},
    {-50.48, 32.96},
    {-51.52, 34.99},
    {-51.52, 34.99},
    {-51.94, 36.01},
    {-52.32, 37.05},
    {-52.66, 38.10},
    {-52.96, 39.16},
    {-53.21, 40.24},
    {-53.42, 41.32},
    {-53.59, 42.41},
    {-53.72, 43.51},
    {-53.80, 44.61},
    {-53.84, 45.71},
    {-53.84, 45.71},
    {-53.88, 46.93},
    {-53.88, 48.14},
    {-53.84, 49.36},
    {-53.78, 50.57},
    {-53.67, 51.78},
    {-53.54, 52.98},
    {-53.37, 54.19},
    {-53.17, 55.38},
    {-52.94, 56.58},
    {-52.67, 57.76},
    {-52.67, 57.76},
    {-52.46, 58.58},
    {-52.21, 59.40},
    {-51.93, 60.20},
    {-51.62, 60.98},
    {-51.27, 61.76},
    {-50.89, 62.51},
    {-50.49, 63.26},
    {-50.05, 63.98},
    {-49.58, 64.69},
    {-49.08, 65.38},
    {-49.08, 65.38},
    {-47.70, 66.89},
    {-46.19, 68.24},
    {-44.57, 69.44},
    {-42.85, 70.47},
    {-41.05, 71.33},
    {-39.17, 72.02},
    {-37.23, 72.53},
    {-35.24, 72.85},
    {-33.22, 72.97},
    {-31.17, 72.90},
    {-31.17, 72.90},
    {-28.98, 72.66},
    {-26.84, 72.18},
    {-24.80, 71.48},
    {-22.85, 70.55},
    {-21.02, 69.43},
    {-19.33, 68.11},
    {-17.78, 66.61},
    {-16.40, 64.94},
    {-15.21, 63.11},
    {-14.21, 61.14},
    {-14.21, 61.14},
    {-13.77, 60.06},
    {-13.37, 58.96},
    {-13.01, 57.85},
    {-12.69, 56.73},
    {-12.42, 55.60},
    {-12.19, 54.46},
    {-12.00, 53.31},
    {-11.86, 52.16},
    {-11.76, 51.00},
    {-11.70, 49.83},
    {-11.70, 49.83},
    {-11.65, 48.57},
    {-11.64, 47.31},
    {-11.68, 46.06},
    {-11.76, 44.81},
    {-11.88, 43.56},
    {-12.05, 42.31},
    {-12.26, 41.08},
    {-12.51, 39.85},
    {-12.81, 38.63},
    {-13.15, 37.41},
    {-13.15, 37.41},
    {-13.78, 35.64},
    {-14.56, 33.95},
    {-15.48, 32.35},
    {-16.54, 30.85},
    {-17.73, 29.45},
    {-19.05, 28.16},
    {-20.47, 27.00},
    {-22.01, 25.96},
    {-23.64, 25.07},
    {-25.36, 24.32},
    {-25.36, 24.32},
    {-26.19, 24.05},
    {-27.03, 23.81},
    {-27.87, 23.60},
    {-28.73, 23.43},
    {-29.58, 23.29},
    {-30.45, 23.19},
    {-31.31, 23.12},
    {-32.18, 23.08},
    {-33.06, 23.08},
    {-33.93, 23.11},
    {138.13, 22.40},
    {138.01, 22.43},
    {137.89, 22.45},
    {137.76, 22.47},
    {137.64, 22.50},
    {137.52, 22.52},
    {137.40, 22.54},
    {137.27, 22.57},
    {137.15, 22.59},
    {137.03, 22.61},
    {136.90, 22.64},
    {136.90, 22.64},
    {136.28, 22.84},
    {135.67, 23.07},
    {135.08, 23.35},
    {134.50, 23.65},
    {133.95, 23.99},
    {133.42, 24.37},
    {132.91, 24.78},
    {132.43, 25.21},
    {131.97, 25.68},
    {131.55, 26.18},
    {131.55, 26.18},
    {131.16, 26.65},
    {130.80, 27.13},
    {130.46, 27.63},
    {130.14, 28.15},
    {129.85, 28.68},
    {129.58, 29.22},
    {129.33, 29.77},
    {129.11, 30.34},
    {128.92, 30.91},
    {128.75, 31.50},
    {128.75, 31.50},
    {128.49, 32.55},
    {128.24, 33.62},
    {128.02, 34.68},
    {127.83, 35.75},
    {127.66, 36.83},
    {127.52, 37.91},
    {127.40, 38.99},
    {127.31, 40.07},
    {127.24, 41.16},
    {127.20, 42.25},
    {127.20, 42.25},
    {127.11, 43.94},
    {127.06, 45.62},
    {127.05, 47.31},
    {127.06, 48.99},
    {127.11, 50.68},
    {127.19, 52.36},
    {127.30, 54.04},
    {127.44, 55.72},
    {127.61, 57.40},
    {127.82, 59.07},
    {127.82, 59.07},
    {127.94, 59.88},
    {128.08, 60.68},
    {128.24, 61.48},
    {128.43, 62.28},
    {128.64, 63.06},
    {128.88, 63.84},
    {129.14, 64.62},
    {129.43, 65.38},
    {129.74, 66.14},
    {130.07, 66.88},
    {130.07, 66.88},
    {130.38, 67.49},
    {130.73, 68.07},
    {131.11, 68.63},
    {131.53, 69.17},
    {131.97, 69.68},
    {132.45, 70.15},
    {132.96, 70.60},
    {133.49, 71.02},
    {134.05, 71.41},
    {134.63, 71.76},
    {134.63, 71.76},
    {135.55, 72.17},
    {136.50, 72.49},
    {137.47, 72.71},
    {138.45, 72.84},
    {139.43, 72.87},
    {140.42, 72.81},
    {141.39, 72.65},
    {142.35, 72.40},
    {143.29, 72.05},
    {144.20, 71.61},
    {144.20, 71.61},
    {145.05, 71.06},
    {145.85, 70.44},
    {146.59, 69.76},
    {147.28, 69.03},
    {147.91, 68.25},
    {148.48, 67.42},
    {148.98, 66.55},
    {149.42, 65.64},
    {149.78, 64.70},
    {150.07, 63.72},
    {150.07, 63.72},
    {150.34, 62.66},
    {150.58, 61.60},
    {150.80, 60.53},
    {150.99, 59.46},
    {151.16, 58.38},
    {151.30, 57.30},
    {151.42, 56.22},
    {151.52, 55.13},
    {151.58, 54.04},
    {151.63, 52.95},
    {151.63, 52.95},
    {151.71, 51.28},
    {151.76, 49.61},
    {151.77, 47.94},
    {151.76, 46.27},
    {151.72, 44.60},
    {151.65, 42.93},
    {151.55, 41.26},
    {151.42, 39.59},
    {151.26, 37.93},
    {151.07, 36.26},
    {151.07, 36.26},
    {150.97, 35.49},
    {150.85, 34.72},
    {150.70, 33.96},
    {150.53, 33.20},
    {150.34, 32.45},
    {150.12, 31.71},
    {149.88, 30.97},
    {149.62, 30.24},
    {149.34, 29.51},
    {149.03, 28.80},
    {149.03, 28.80},
    {148.68, 28.16},
    {148.31, 27.55},
    {147.90, 26.96},
    {147.46, 26.40},
    {146.99, 25.86},
    {146.49, 25.35},
    {145.96, 24.86},
    {145.40, 24.41},
    {144.82, 23.98},
    {144.22, 23.59},
    {144.22, 23.59},
    {143.66, 23.29},
    {143.08, 23.03},
    {142.49, 22.82},
    {141.89, 22.64},
    {141.27, 22.50},
    {140.65, 22.40},
    {140.03, 22.34},
    {139.40, 22.32},
    {138.76, 22.34},
    {138.13, 22.40},
    {-109.50, 52.95},
    {-109.50, 54.81},
    {-109.50, 56.68},
    {-109.50, 58.54},
    {-109.50, 60.41},
    {-109.50, 62.27},
    {-109.50, 64.14},
    {-109.50, 66.01},
    {-109.50, 67.87},
    {-109.50, 69.74},
    {-109.50, 71.60},
    {-109.50, 71.60},
    {-108.10, 71.61},
    {-106.71, 71.62},
    {-105.32, 71.62},
    {-103.92, 71.63},
    {-102.53, 71.63},
    {-101.13, 71.62},
    {-99.74, 71.62},
    {-98.34, 71.61},
    {-96.95, 71.60},
    {-95.55, 71.59},
    {-95.55, 71.59},
    {-94.85, 71.59},
    {-94.14, 71.57},
    {-93.43, 71.54},
    {-92.72, 71.50},
    {-92.02, 71.44},
    {-91.31, 71.37},
    {-90.61, 71.28},
    {-89.91, 71.18},
    {-89.21, 71.07},
    {-88.51, 70.94},
    {-88.51, 70.94},
    {-87.63, 70.70},
    {-86.80, 70.37},
    {-86.01, 69.95},
    {-85.28, 69.44},
    {-84.62, 68.86},
    {-84.02, 68.21},
    {-83.50, 67.49},
    {-83.06, 66.72},
    {-82.71, 65.89},
    {-82.45, 65.02},
    {-82.45, 65.02},
    {-82.28, 64.30},
    {-82.16, 63.58},
    {-82.09, 62.86},
    {-82.07, 62.13},
    {-82.09, 61.40},
    {-82.17, 60.68},
    {-82.30, 59.96},
    {-82.47, 59.26},
    {-82.69, 58.56},
    {-82.97, 57.88},
    {-82.97, 57.88},
    {-83.28, 57.33},
    {-83.62, 56.81},
    {-84.01, 56.32},
    {-84.43, 55.86},
    {-84.89, 55.44},
    {-85.38, 55.05},
    {-85.89, 54.70},
    {-86.44, 54.40},
    {-87.01, 54.13},
    {-87.60, 53.91},
    {-87.60, 53.91},
    {-88.08, 53.76},
    {-88.56, 53.62},
    {-89.04, 53.50},
    {-89.53, 53.39},
    {-90.02, 53.29},
    {-90.51, 53.21},
    {-91.01, 53.15},
    {-91.50, 53.10},
    {-92.00, 53.07},
    {-92.50, 53.05},
    {-92.50, 53.05},
    {-92.87, 53.03},
    {-93.23, 53.01},
    {-93.60, 52.99},
    {-93.96, 52.98},
    {-94.32, 52.97},
    {-94.69, 52.96},
    {-95.05, 52.95},
    {-95.42, 52.95},
    {-95.78, 52.95},
    {-96.15, 52.95},
    {-96.15, 52.95},
    {-97.48, 52.95},
    {-98.82, 52.95},
    {-100.15, 52.95},
    {-101.49, 52.95},
    {-102.82, 52.95},
    {-104.16, 52.95},
    {-105.49, 52.95},
    {-106.83, 52.95},
    {-108.16, 52.95},
    {-109.50, 52.95},
    {-109.50, 24.43},
    {-109.50, 26.55},
    {-109.50, 28.68},
    {-109.50, 30.80},
    {-109.50, 32.92},
    {-109.50, 35.04},
    {-109.50, 37.17},
    {-109.50, 39.29},
    {-109.50, 41.41},
    {-109.50, 43.54},
    {-109.50, 45.66},
    {-109.50, 45.66},
    {-108.07, 45.66},
    {-106.64, 45.66},
    {-105.21, 45.66},
    {-103.79, 45.66},
    {-102.36, 45.66},
    {-100.93, 45.66},
    {-99.50, 45.66},
    {-98.08, 45.66},
    {-96.65, 45.66},
    {-95.22, 45.66},
    {-95.22, 45.66},
    {-94.39, 45.67},
    {-93.57, 45.66},
    {-92.74, 45.64},
    {-91.91, 45.59},
    {-91.09, 45.52},
    {-90.27, 45.43},
    {-89.45, 45.32},
    {-88.64, 45.19},
    {-87.82, 45.04},
    {-87.01, 44.87},
    {-87.01, 44.87},
    {-85.78, 44.50},
    {-84.62, 43.99},
    {-83.56, 43.33},
    {-82.60, 42.55},
    {-81.75, 41.65},
    {-81.02, 40.65},
    {-80.42, 39.57},
    {-79.97, 38.40},
    {-79.67, 37.17},
    {-79.54, 35.89},
    {-79.54, 35.89},
    {-79.49, 35.02},
    {-79.51, 34.15},
    {-79.60, 33.29},
    {-79.77, 32.44},
    {-80.00, 31.61},
    {-80.29, 30.80},
    {-80.66, 30.01},
    {-81.08, 29.26},
    {-81.57, 28.54},
    {-82.12, 27.86},
    {-82.12, 27.86},
    {-82.45, 27.53},
    {-82.79, 27.21},
    {-83.14, 26.92},
    {-83.51, 26.64},
    {-83.89, 26.38},
    {-84.29, 26.14},
    {-84.69, 25.93},
    {-85.11, 25.73},
    {-85.54, 25.55},
    {-85.97, 25.40},
    {-85.97, 25.40},
    {-86.59, 25.21},
    {-87.21, 25.04},
    {-87.83, 24.89},
    {-88.46, 24.76},
    {-89.09, 24.66},
    {-89.73, 24.57},
    {-90.37, 24.51},
    {-91.01, 24.47},
    {-91.65, 24.45},
    {-92.29, 24.45},
    {-92.29, 24.45},
    {-92.48, 24.44},
    {-92.66, 24.44},
    {-92.84, 24.44},
    {-93.02, 24.44},
    {-93.21, 24.43},
    {-93.39, 24.43},
    {-93.57, 24.43},
    {-93.76, 24.43},
    {-93.94, 24.43},
    {-94.12, 24.43},
    {-94.12, 24.43},
    {-95.66, 24.43},
    {-97.20, 24.43},
    {-98.74, 24.43},
    {-100.27, 24.43},
    {-101.81, 24.43},
    {-103.35, 24.43},
    {-104.89, 24.43},
    {-106.42, 24.43},
    {-107.96, 24.43},
    {-109.50, 24.43},
    {49.58, 5.48},
    {44.55, 5.48},
    {39.53, 5.48},
    {34.50, 5.48},
    {29.48, 5.48},
    {24.45, 5.48},
    {19.43, 5.48},
    {14.40, 5.48},
    {9.38, 5.48},
    {4.35, 5.48},
    {-0.67, 5.48},
    {-0.67, 5.48},
    {-0.67, 4.93},
    {-0.67, 4.38},
    {-0.67, 3.83},
    {-0.67, 3.29},
    {-0.67, 2.74},
    {-0.67, 2.19},
    {-0.67, 1.64},
    {-0.67, 1.10},
    {-0.67, 0.55},
    {-0.67, 0.00},
    {-0.67, 0.00},
    {4.35, 0.00},
    {9.38, 0.00},
    {14.40, 0.00},
    {19.43, 0.00},
    {24.45, 0.00},
    {29.48, 0.00},
    {34.50, 0.00},
    {39.53, 0.00},
    {44.55, 0.00},
    {49.58, 0.00},
    {49.58, 0.00},
    {49.58, 0.55},
    {49.58, 1.10},
    {49.58, 1.64},
    {49.58, 2.19},
    {49.58, 2.74},
    {49.58, 3.29},
    {49.58, 3.83},
    {49.58, 4.38},
    {49.58, 4.93},
    {49.58, 5.48},
    {-1, -1},
};


static uint16_t path_idx = 0;
static uint8_t painInit = 1;
uint8_t count_pain = 0;
float goal_r_mm = 0.0;
float goal_th_deg = 0.0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM16_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM8_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_TIM1_Init();
	MX_TIM2_Init();
	MX_TIM4_Init();
	MX_TIM5_Init();
	MX_TIM3_Init();
	MX_ADC1_Init();
	MX_TIM16_Init();
	MX_USART2_UART_Init();
	MX_ADC2_Init();
	MX_TIM8_Init();
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
	hmodbus.htim = &htim16;
	hmodbus.slaveAddress = 0x15;
	hmodbus.RegisterSize = 70;
	Modbus_init(&hmodbus, &registerFrame);

	PID_POS_pris.Kp = Kp_pos_pris;
	PID_POS_pris.Ki = Ki_pos_pris;
	PID_POS_pris.Kd = Kd_pos_pris;
	arm_pid_init_f32(&PID_POS_pris, 0);

	PID_POS_re.Kp = Kp_pos_re;
	PID_POS_re.Ki = Ki_pos_re;
	PID_POS_re.Kd = Kd_pos_re;
	arm_pid_init_f32(&PID_POS_re, 0);

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
	HAL_TIM_Base_Start(&htim8);
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);

	PIDInit(&prismatic_vel_control, 65535, -65535);
	PIDInit(&revolute_vel_control, 65535, -65535);

	HAL_TIM_Base_Start_IT(&htim5);
	HAL_TIM_Base_Start_IT(&htim2);

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
	HAL_ADC_Start_DMA(&hadc2, Prox_RawRead, 10);

//	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_1, GPIOB, GPIO_PIN_0);

//	registerFrame[4].U16 = 1;
//	registerFrame[5].U16 = 0;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
	RCC_OscInitStruct.PLL.PLLN = 85;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.GainCompensation = 0;
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.LowPowerAutoWait = DISABLE;
	hadc1.Init.ContinuousConvMode = ENABLE;
	hadc1.Init.NbrOfConversion = 2;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.DMAContinuousRequests = ENABLE;
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	hadc1.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
		Error_Handler();
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
	sConfig.Rank = ADC_REGULAR_RANK_2;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc2.Init.GainCompensation = 0;
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc2.Init.LowPowerAutoWait = DISABLE;
	hadc2.Init.ContinuousConvMode = ENABLE;
	hadc2.Init.NbrOfConversion = 1;
	hadc2.Init.DiscontinuousConvMode = DISABLE;
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc2.Init.DMAContinuousRequests = ENABLE;
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	hadc2.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 169;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 19999;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
			!= HAL_OK) {
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);

}

/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
	htim2.Init.Prescaler = 169;
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 999;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}

/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
	htim3.Init.Prescaler = 0;
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim3.Init.Period = 65535;
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC1Filter = 0;
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC2Filter = 0;
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}

/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 0;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 65535;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC1Filter = 0;
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
	sConfig.IC2Filter = 0;
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}

/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
	htim5.Init.Prescaler = 169;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.Period = 999;
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}

/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
	htim8.Init.Prescaler = 169;
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim8.Init.Period = 19999;
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim8.Init.RepetitionCounter = 0;
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK) {
		Error_Handler();
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);

}

/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
	htim16.Init.Prescaler = 169;
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim16.Init.Period = 1145;
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim16.Init.RepetitionCounter = 0;
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_EVEN;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
	__HAL_RCC_DMA1_CLK_ENABLE();

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : PC3 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
	GPIO_InitStruct.Pin = RUN_Joy_Pin | Save_Joy_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : PC6 PC7 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
	registerFrame[4].U16 = 1;
	registerFrame[5].U16 = 0;
	float setpoint_pris_abs = Trapezoidal_GetCurrentAbsolute(&prisProfile);

	error_pos_pris = setpoint_pris_abs - (float) ball_screw_pos;
	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);

	if (output_pos_pris > 550) {
		output_pos_pris = 550;
	} else if (output_pos_pris < -550) {
		output_pos_pris = -550;
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	if (limit_r == 1 && output_prismatic < 0) {
		output_prismatic = 0;
	} else if (limit_l == 1 && output_prismatic > 0) {
		output_prismatic = 0;
	}

	// Motor control}
	if (error_pos_pris <= 0.1 && error_pos_pris >= -0.1) {
		output_prismatic = 0;
		registerFrame[4].U16 = 0;
		registerFrame[5].U16 = 1;
	} else {
		output_prismatic = output_velo_pris;
	}
}

void Revolute_CasCadeControl() {
//	error_pos_re = target_position_revolute - revolute_encoder.rads;
	registerFrame[4].U16 = 1;
	registerFrame[5].U16 = 0;
	float setpoint_rev_abs = Trapezoidal_GetCurrentAbsolute(&revProfile);
	error_pos_re = setpoint_rev_abs - revolute_encoder.rads;
	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);

//	error_pos_re = revProfile.current_position - revolute_encoder.rads;
//
//	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);

	if (output_pos_re > 300) {
		output_pos_re = 300;
	} else if (output_pos_re < -300) {
		output_pos_re = -300;
	}

	error_velo_re = output_pos_re - (revolute_encoder.radps / 2);

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re, Ki_velo_re,
			Kd_velo_re, error_velo_re);

	if (revolute_flag == 1 && output_revolute > 0) {
		output_revolute = 0;
	} else if (revolute_encoder.rads >= (2 * M_PI) && output_revolute < 0) {
		output_revolute = 0;
	}
	// Motor control
	if (revolute_encoder.rads >= target_position_revolute - 0.1
			&& revolute_encoder.rads <= target_position_revolute + 0.1) {
		{
			stopCounter++;
			if (stopCounter >= 1500) {
				output_revolute = 0;
				registerFrame[4].U16 = 0;
				registerFrame[5].U16 = 1;
			}
		}
	} else {
		stopCounter = 0;
		output_revolute = output_velo_re;
	}
}

void ball_screw_converter() {
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == GPIO_PIN_13) {
		current_state = STATE_ERROR;
		registerFrame[1].U16 = STATUS_IDLE;
	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	// sensor timer 1000 hz
	if (htim == &htim2) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
		QEIPosVelUpdate(&revolute_encoder);
		//Limit Switch check
		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
		limit_plot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
		for (int i = 0; i < 20; i++) {
			if ((i & 1) == 0)
				sum_y += JOY_RawRead[i];
			else
				sum_x += JOY_RawRead[i];
		}

		int32_t raw_x = sum_x / 10;
		int32_t raw_y = sum_y / 10;

		if (raw_x < 1700 && raw_x > 1500) {
			raw_x = 3400 / 2;
		}
		if (raw_y < 1700 && raw_y > 1500) {
			raw_y = 3400 / 2;
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);

		// Joy button
//		Joy_run = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
//		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

		//Prismatic Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
								- prismatic_radps_lowpass_prev);

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
		ball_screw_converter();

		// ==== Revolute Low‐Pass Filter ====
		// 1) กรองความเร็ว (rad/s) ของแกน Revolute
		revolute_radps_lowpass =
				revolute_radps_lowpass_prev
						+ alpha
								* (revolute_encoder.radps
										- revolute_radps_lowpass_prev);
		// 2) คำนวณอัตราเร่งดิบ (rad/s^2) จากความเปลี่ยนแปลงของค่าที่กรองแล้ว
		revolute_acceleration = (revolute_radps_lowpass
				- revolute_radps_lowpass_prev) / dt;
		// 3) กรองอัตราเร่งให้ลื่น (หากต้องการใช้ค่าเร่งหลังกรอง)
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
				+ alpha
						* (revolute_acceleration
								- revolute_acceleration_lowpass_prev);
		// 4) เก็บสถานะย้อนกลับไว้ใช้รอบถัดไป
		revolute_radps_lowpass_prev = revolute_radps_lowpass;
		revolute_acceleration_lowpass_prev = revolute_acceleration_lowpass;

		// Prox shimttrigger
//		revolute_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
		if (Prox_RawRead[0] > 3000) {
			revolute_flag = 0;
		} else if (Prox_RawRead[0] < 1500) {
			revolute_flag = 1;
		}

		//Servo
		if (registerFrame[4].U16 == 1) {
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1600);
		} else if (registerFrame[5].U16 == 1) {
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2200);
		}
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_voltage);
		//button
		Joy_save = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
		Joy_run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
						&& button_emer == 1) ? 1 : 0;

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
						&& button_emer) ? 1 : 0;

		MotorSet(&prismatic_motor, 1000, output_prismatic);
		MotorSet(&revolute_motor, 1000, output_revolute);

		// Protocal
		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
			heartbeat_counter = 0;
			registerFrame[0x00].U16 =
					(registerFrame[0X00].U16 == 0) ? 22881 : 0;
		}
		heartbeat_counter++;
	}
	// state timer 1000 hz
	if (htim == &htim5) {
		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
			current_state = STATE_STOPPING;
		}
		if ((registerFrame[1].U16 & STATUS_HOME) && pain_flang == 0) {
			current_state = STATE_HOMING;
		} else if ((registerFrame[1].U16 & STATUS_JOG) && running_flang == 0) {
			current_state = STATE_JOGGING;
			registerFrame[10].U16 = STATUS_JOG;
		} else if (registerFrame[1].U16 & STATUS_POINT) {
			current_state = STATE_POINT_MOVING;
			pointMoveNeedsInit = 1;
			registerFrame[10].U16 = STATUS_POINT;
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
			current_state = STATE_GO_TO_TARGET;
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
		} else if (registerFrame[1].U16 & STATUS_IDLE) {
			current_state = STATE_IDLE;
		}
		if (registerFrame[4].U16 == 1 && registerFrame[5].U16 == 0) {
			//Pen Up Servo On
			registerFrame[3].U16 = 1 << 0;
		} else {
			//Pen Doen Servo Off
			registerFrame[3].U16 = 1 << 1;
		}

		if (button_reset == 1
				&& (current_state == STATE_ERROR || current_state == STATE_IDLE)
				&& button_emer == 1) {
			registerFrame[1].U16 = STATUS_HOME;
		}

		switch (current_state) {
		case STATE_HOMING:

			if (pen_flag == 0) {
				pen_flag = 1;
				count_run = 0;
			}

			if (count_run <= 1500) {
				output_prismatic = 0;
				output_revolute = 0;
				registerFrame[4].U16 = 1;
				registerFrame[5].U16 = 0;

				count_run++;
			} else {
				if (limit_r != 1) {
					output_prismatic = -(65535 / 2.0);
				} else if (limit_r == 1) {
					limit_l_prev = 1;
					output_prismatic = 0;
					QEI_Reset(&prismatic_encoder);
					QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
				}
				if (revolute_flag != 1) {
					output_revolute = -60000;
				} else if (revolute_flag == 1) {
					revolute_homed = 1; // Check Proximity trick
					output_revolute = 0;
					QEI_Reset(&revolute_encoder);
					QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
				}
				target_position_prismatic = 0;
				target_position_revolute = 0;
				error_pos_re = 0;
				error_pos_pris = 0;
				registerFrame[10].U16 = STATUS_HOME;
				if (button_run == 1) {
					current_state = STATE_PAIN;
					pain_flang = 1;
				}
			}
			break;
		case STATE_PAIN:
			// ถ้าวิ่งจนครบทุกจุด ให้ข้ามไปโฮมมิ่ง
			if (path_idx >= PATH_POINTS) {
				registerFrame[4].U16 = 1;
				registerFrame[5].U16 = 0;
				pain_flang = 0;
				current_state = STATE_HOMING;
				break;
			}

			if (painInit) {
				float x_mm = path[path_idx][0];
				float y_mm = path[path_idx][1];



				theta = atan2(y_mm, x_mm);
				if (theta < 0.0f)
					theta += 2.0f * M_PI;

				theta *= 2.0;

				if (theta <= 2.0 *M_PI) {
					target_position_revolute = theta;
					target_position_prismatic = 300 + (sqrt((x_mm * x_mm) + (y_mm * y_mm)));
				} else if (theta > 2.0 *M_PI) {
					target_position_revolute = (float) (fabs(M_PI - theta));
					target_position_prismatic = mapf(sqrt((x_mm * x_mm) + (y_mm * y_mm)),
							-300, 0, 300, 600);
				}

//				target_position_prismatic = 300.0 - (sqrt((x_mm * x_mm) + (y_mm * y_mm)));
//				target_position_revolute = target_position_revolute * (2 * M_PI / 180.0f);

				Trapezoidal_Init(&prisProfile, (float) ball_screw_pos,
						target_position_prismatic, 550.0f, 250.0f);
				Trapezoidal_Init(&revProfile, revolute_encoder.rads,
						target_position_revolute, 2.0f, 0.4f);

				painInit = 0;
			}

			if (!prisProfile.finished)
				Trapezoidal_Update(&prisProfile, dt);
			if (!revProfile.finished)
				Trapezoidal_Update(&revProfile, dt);
			Prismatic_CasCadeControl();
			Revolute_CasCadeControl();

			if ((limit_r && output_prismatic < 0)
					|| (limit_l && output_prismatic > 0))
				output_prismatic = 0;
			if ((revolute_flag && output_revolute < 0)
					|| (revolute_encoder.rads >= 2.0f * M_PI
							&& output_revolute > 0))
				output_revolute = 0;
			if (prisProfile.finished && revProfile.finished && output_prismatic == 0 && output_revolute == 0) {
				registerFrame[4].U16 = 0;
				registerFrame[5].U16 = 1;
				path_idx++;
				painInit = 1;
			}
			break;
		case STATE_JOGGING:
			//Call joystick mode
			registerFrame[4].U16 = 1;
			registerFrame[5].U16 = 0;
			joy_flag = 1;

			if (limit_r == 1) {
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1) {
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}

			output_prismatic = (Joy_x / 100.0) * 30000;

			if (limit_r == 1 && output_prismatic < 0) {
				output_prismatic = 0;
			} else if (limit_l == 1 && output_prismatic > 0) {
				output_prismatic = 0;
			}

			output_revolute = (Joy_y / 100.0) * 60000.0;

			if (revolute_flag == 1 && output_revolute < 0) {
				output_revolute = 0;
			} else if (revolute_encoder.rads >= (2 * M_PI)
					&& output_revolute > 0) {
				output_revolute = 0;
			}

			if (button_reset == 1) {
				count_run = 1;
				current_state = STATE_RUNING;
				pointRunNeedsInit = 1;
				running_flang = 1;
			}

			if (button_run == 1 && button_reset_prev == 0) {
				count++;
				if (count > 0 && count <= 10) {
					registerFrame[18 + count * 2].U16 = ball_screw_pos * 10;
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
							/ (2 * M_PI)) * 1800.0;
				} else {
					count = 1;
				}
			}

			pen_flag = 0;
			break;
		case STATE_RUNING:
			if (pointRunNeedsInit == 1) {
				// ต้องจ่ายค่ารอบเดียว
				target_position_revolute = (float) (registerFrame[19
						+ count_run * 2].U16 / 1800.0) * (2.0 * M_PI);
				target_position_prismatic =
						(registerFrame[18 + count_run * 2].U16 / 10);

				float abs_start_pris = (float) ball_screw_pos;
				float abs_goal_pris = target_position_prismatic;  // (mm)

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
						550.0f, // v_max (mm/s)
						250.0f); // a_max (mm/s²)

				float abs_start_rev = (float) revolute_encoder.rads;
				float abs_goal_rev = target_position_revolute/* from registerFrame[65], converted to radians */;

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
						0.4f); // a_max (rad/s²)
				pointRunNeedsInit = 0;
			}

			if (!prisProfile.finished) {
				Trapezoidal_Update(&prisProfile, 0.001f);
			}
			if (!revProfile.finished) {
				Trapezoidal_Update(&revProfile, 0.001f);
			}

			Revolute_CasCadeControl();
			Prismatic_CasCadeControl();

			if (limit_r == 1 && limit_l_prev == 0) {
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}
			if (output_prismatic == 0 && output_revolute == 0
					&& prisProfile.finished && revProfile.finished) {
				pointRunNeedsInit = 1;
				count_run++;
				running_flang = 0;
				registerFrame[4].U16 = 0;
				registerFrame[5].U16 = 1;
				current_state = STATE_JOGGING;
			}
			pen_flag = 0;
			break;
		case STATE_POINT_MOVING:
			registerFrame[4].U16 = 1;
			registerFrame[5].U16 = 0;
			theta = (float) (registerFrame[65].U16);
			if (theta <= 1800) {
				target_position_revolute = (float) (registerFrame[65].U16
						/ 1800.0) * (2.0 * M_PI);
				target_position_prismatic = 300 - (registerFrame[64].U16 / 10);
			} else if (theta > 1800) {
				target_position_revolute = (float) (fabs(
						180 - registerFrame[65].U16 / 10.0));
				target_position_revolute = (float) (target_position_revolute
						/ 180.0) * (2.0 * M_PI);
				target_position_prismatic = mapf((registerFrame[64].U16 / 10),
						0, 300, 300, 600);
			}

			if (pointMoveNeedsInit) {
				float abs_start_pris = (float) ball_screw_pos;
				float abs_goal_pris = target_position_prismatic;

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
						550.0f, 250.0f);

				float abs_start_rev = (float) revolute_encoder.rads;
				float abs_goal_rev = target_position_revolute;

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
						0.4f); // a_max (rad/s²)

				pointMoveNeedsInit = 0;
			}
			pen_flag = 0;
			break;
		case STATE_GO_TO_TARGET:

			if (!prisProfile.finished) {
				Trapezoidal_Update(&prisProfile, 0.001f);
			}
			if (!revProfile.finished) {
				Trapezoidal_Update(&revProfile, 0.001f);
			}

			Revolute_CasCadeControl();
			Prismatic_CasCadeControl();

			if (limit_r == 1 && limit_l_prev == 0) {
				output_prismatic = 0;
				QEI_Reset(&prismatic_encoder);
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
				output_revolute = 0;
				QEI_Reset(&revolute_encoder);
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}
			registerFrame[11].U16 = (int) (ball_screw_pos * 10);
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
					* 10);
			registerFrame[13].U16 = (int) (ball_screw_vel * 10);
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
					* 10);
			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
					- prev_revolute_vel) / 0.001) * 10);

			if (output_prismatic == 0 && output_revolute == 0
					&& prisProfile.finished && revProfile.finished) {
				registerFrame[1].U16 = STATUS_STOP;
			}
			pen_flag = 0;
			break;

		case STATE_STOPPING:
			registerFrame[10].U16 = STATUS_STOP;
			revolute_homed = 0;
			limit_l_prev = 0;
			output_revolute = 0;
			output_prismatic = 0;
			registerFrame[4].U16 = 0;
			registerFrame[5].U16 = 1;
			pen_flag = 0;
			break;

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
			output_prismatic = 0;
			registerFrame[4].U16 = 0;
			registerFrame[5].U16 = 1;
			pen_flag = 0;
			pain_flang = 0;
			break;
		}
		button_reset_prev = button_run;
	}
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

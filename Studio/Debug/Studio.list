
Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb60  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800bd38  0800bd38  0000cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf8  0800bdf8  0000d2e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bdf8  0800bdf8  0000cdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be00  0800be00  0000d2e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be00  0800be00  0000ce00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be04  0800be04  0000ce04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  0800be08  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  200002e0  0800c0e8  0000d2e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001808  0800c0e8  0000d808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c85  00000000  00000000  0000d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  00030f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00034b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134c  00000000  00000000  000363e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a145  00000000  00000000  00037734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ac6  00000000  00000000  00061879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011769e  00000000  00000000  0008233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001999dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d24  00000000  00000000  00199a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001a0744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002e0 	.word	0x200002e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd20 	.word	0x0800bd20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002e4 	.word	0x200002e4
 8000214:	0800bd20 	.word	0x0800bd20

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <KalmanInit>:
#include "Kalman.h"

// Initialize Kalman filter matrices and parameters
void KalmanInit(KALMAN *kalman, float32_t Matrix_A[16], float32_t Matrix_B[4], float32_t Q_scalar, float32_t R_scalar)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b0d0      	sub	sp, #320	@ 0x140
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f2e:	6018      	str	r0, [r3, #0]
 8000f30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000f38:	6019      	str	r1, [r3, #0]
 8000f3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f48:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f4c:	ed83 0a00 	vstr	s0, [r3]
 8000f50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f58:	edc3 0a00 	vstr	s1, [r3]
	// set constance

	//Matrix A
	for (int i = 0; i < 16; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000f62:	e018      	b.n	8000f96 <KalmanInit+0x76>
	{
		kalman->A_f32[i] = Matrix_A[i];
 8000f64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000f6e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000f8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f90:	3301      	adds	r3, #1
 8000f92:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000f96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	dde2      	ble.n	8000f64 <KalmanInit+0x44>
	}
	arm_mat_init_f32(&kalman->A, 4, 4, kalman->A_f32);
 8000f9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8000fac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	2104      	movs	r1, #4
 8000fba:	f00a fe0f 	bl	800bbdc <arm_mat_init_f32>
	//Matrix A transpose
	arm_mat_init_f32(&kalman->A_t, 4, 4, kalman->A_t_f32);
 8000fbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8000fcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3340      	adds	r3, #64	@ 0x40
 8000fd8:	2204      	movs	r2, #4
 8000fda:	2104      	movs	r1, #4
 8000fdc:	f00a fdfe 	bl	800bbdc <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->A, &kalman->A_t);
 8000fe0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8000fee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ff2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3388      	adds	r3, #136	@ 0x88
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f00a fe05 	bl	800bc0c <arm_mat_trans_f32>

	//Matrix B
	for(int i = 0; i<4; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001008:	e019      	b.n	800103e <KalmanInit+0x11e>
	{
		kalman->B_f32[i] = Matrix_B[i];
 800100a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001014:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	4413      	add	r3, r2
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800102c:	3324      	adds	r3, #36	@ 0x24
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<4; i++)
 8001034:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001038:	3301      	adds	r3, #1
 800103a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800103e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001042:	2b03      	cmp	r3, #3
 8001044:	dde1      	ble.n	800100a <KalmanInit+0xea>
	}
	arm_mat_init_f32(&kalman->B, 4, 1, kalman->B_f32);
 8001046:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800104a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8001054:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001058:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3390      	adds	r3, #144	@ 0x90
 8001060:	2201      	movs	r2, #1
 8001062:	2104      	movs	r1, #4
 8001064:	f00a fdba 	bl	800bbdc <arm_mat_init_f32>

	//Matrix G
	float32_t G_new[4] = {0, 0, 1, 0};
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001078:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800107c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	memcpy(kalman->G_f32, G_new, sizeof(G_new));
 8001088:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800108c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	33d8      	adds	r3, #216	@ 0xd8
 8001094:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8001098:	2210      	movs	r2, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f00a fe32 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->G, 4, 1, kalman->G_f32);
 80010a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80010ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	33d8      	adds	r3, #216	@ 0xd8
 80010ba:	2201      	movs	r2, #1
 80010bc:	2104      	movs	r1, #4
 80010be:	f00a fd8d 	bl	800bbdc <arm_mat_init_f32>

	//Matrix H
	float32_t H_new[4] = {1, 0, 0, 0};
 80010c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	memcpy(kalman->H_f32, H_new, sizeof(H_new));
 80010e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	33f0      	adds	r3, #240	@ 0xf0
 80010ee:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80010f2:	2210      	movs	r2, #16
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00a fe05 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->H, 1, 4, kalman->H_f32);
 80010fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8001108:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800110c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	33f0      	adds	r3, #240	@ 0xf0
 8001114:	2204      	movs	r2, #4
 8001116:	2101      	movs	r1, #1
 8001118:	f00a fd60 	bl	800bbdc <arm_mat_init_f32>

	//MatrixH traspose
	float32_t H_t_new[4] = {0, 0, 0, 0};
 800111c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
	memcpy(kalman->H_t_f32, H_t_new, sizeof(H_t_new));
 800112a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800112e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001138:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800113c:	2210      	movs	r2, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fde0 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->H_t, 4,1,kalman->H_t_f32);
 8001144:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8001152:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001160:	2201      	movs	r2, #1
 8001162:	2104      	movs	r1, #4
 8001164:	f00a fd3a 	bl	800bbdc <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->H, &kalman->H_t);
 8001168:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800116c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8001176:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800117a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f00a fd40 	bl	800bc0c <arm_mat_trans_f32>

	//Matrix I
	float32_t I_new[16] =
 800118c:	4bdb      	ldr	r3, [pc, #876]	@ (80014fc <KalmanInit+0x5dc>)
 800118e:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001192:	461d      	mov	r5, r3
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0,
	};
	memcpy(kalman->I_f32, I_new, sizeof(I_new));
 80011a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80011b6:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	4618      	mov	r0, r3
 80011be:	f00a fda1 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->I, 4, 4,kalman->I_f32);
 80011c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f503 70b0 	add.w	r0, r3, #352	@ 0x160
 80011d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80011de:	2204      	movs	r2, #4
 80011e0:	2104      	movs	r1, #4
 80011e2:	f00a fcfb 	bl	800bbdc <arm_mat_init_f32>

	//Measurement
	float32_t Z_new[1] = {0};
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	memcpy(kalman->Z_f32, Z_new, sizeof(Z_new));
 80011ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001200:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 8001202:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001206:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 8001210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001214:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800121e:	2201      	movs	r2, #1
 8001220:	2101      	movs	r1, #1
 8001222:	f00a fcdb 	bl	800bbdc <arm_mat_init_f32>

	//Matrix X
	float32_t X_init[4] = { 0 };
 8001226:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
	memcpy(kalman->X_f32, X_init, sizeof(X_init));
 8001234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8001242:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001246:	2210      	movs	r2, #16
 8001248:	4618      	mov	r0, r3
 800124a:	f00a fd5b 	bl	800bd04 <memcpy>
	memcpy(kalman->X_pred_f32, X_init, sizeof(X_init));
 800124e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001252:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800125c:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001260:	2210      	movs	r2, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f00a fd4e 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->X, 4, 1, kalman->X_f32);
 8001268:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800126c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 8001276:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800127a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	f00a fca8 	bl	800bbdc <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->X_pred, 4, 1, kalman->X_pred_f32);
 800128c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f503 70ce 	add.w	r0, r3, #412	@ 0x19c
 800129a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800129e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80012a8:	2201      	movs	r2, #1
 80012aa:	2104      	movs	r1, #4
 80012ac:	f00a fc96 	bl	800bbdc <arm_mat_init_f32>

	//Matrix P
	float32_t P_init[16] = {
 80012b0:	4b93      	ldr	r3, [pc, #588]	@ (8001500 <KalmanInit+0x5e0>)
 80012b2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80012b6:	461d      	mov	r5, r3
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    100.0, 0.0, 0.0, 0.0,
	    0.0, 100.0, 0.0, 0.0,
	    0.0, 0.0, 100.0, 0.0,
	    0.0, 0.0, 0.0, 100.0
	};
	memcpy(kalman->P_f32, P_init, sizeof(P_init));
 80012cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80012da:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80012de:	2240      	movs	r2, #64	@ 0x40
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00a fd0f 	bl	800bd04 <memcpy>
	memcpy(kalman->P_pred_f32, P_init, sizeof(P_init));
 80012e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80012f4:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80012f8:	2240      	movs	r2, #64	@ 0x40
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00a fd02 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 8001300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001304:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 800130e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001312:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800131c:	2204      	movs	r2, #4
 800131e:	2104      	movs	r1, #4
 8001320:	f00a fc5c 	bl	800bbdc <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->P_pred, 4, 4, kalman->P_pred_f32);
 8001324:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001328:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 8001332:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001336:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8001340:	2204      	movs	r2, #4
 8001342:	2104      	movs	r1, #4
 8001344:	f00a fc4a 	bl	800bbdc <arm_mat_init_f32>

	//Matrix K (kalman gain)
	float32_t K_new[4] = {0};
 8001348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
	memcpy(kalman->K_f32, K_new, sizeof(K_new));
 8001356:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800135a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8001364:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001368:	2210      	movs	r2, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f00a fcca 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->K, 4, 1, kalman->K_f32);
 8001370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800137e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800138c:	2201      	movs	r2, #1
 800138e:	2104      	movs	r1, #4
 8001390:	f00a fc24 	bl	800bbdc <arm_mat_init_f32>

	//Matrix Q
	float32_t Q_new[16] =
 8001394:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001398:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800139c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013a0:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013e8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013ec:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
 8001402:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001406:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
 8001410:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001414:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
 800141e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001422:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
 800142c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001430:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001434:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001438:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001440:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001444:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800144e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001452:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
 800145c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001460:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
 800146a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800146e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	@ 0x38
 8001478:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800147c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001480:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001484:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	63da      	str	r2, [r3, #60]	@ 0x3c
			Q_scalar, 0.0, 0.0, 0.0,
			0.0, Q_scalar, 0.0, 0.0,
			0.0, 0.0, Q_scalar, 0.0,
			0.0, 0.0, 0.0, Q_scalar
	};
	memcpy(kalman->Q_f32, Q_new, sizeof(Q_new));
 800148c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800149a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800149e:	2240      	movs	r2, #64	@ 0x40
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00a fc2f 	bl	800bd04 <memcpy>
	arm_mat_init_f32(&kalman->Q, 4, 4, kalman->Q_f32);
 80014a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 80014b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80014c2:	2204      	movs	r2, #4
 80014c4:	2104      	movs	r1, #4
 80014c6:	f00a fb89 	bl	800bbdc <arm_mat_init_f32>

	//MatrixR
	float32_t R_new[1] = {R_scalar};
 80014ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80014d6:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	601a      	str	r2, [r3, #0]
	memcpy(kalman->R_f32, R_new, sizeof(R_new));
 80014de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80014ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80014f0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e004      	b.n	8001504 <KalmanInit+0x5e4>
 80014fa:	bf00      	nop
 80014fc:	0800bd38 	.word	0x0800bd38
 8001500:	0800bd78 	.word	0x0800bd78
	arm_mat_init_f32(&kalman->R, 1, 1, kalman->R_f32);
 8001504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8001512:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	f00a fb5a 	bl	800bbdc <arm_mat_init_f32>

	//Matrix of contol input
	float32_t U_new[1] = {0.0};
 8001528:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800152c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	memcpy(kalman->U_f32, U_new, sizeof(U_new));
 8001536:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800153a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001544:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001548:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001550:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001554:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800155e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001562:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800156c:	2201      	movs	r2, #1
 800156e:	2101      	movs	r1, #1
 8001570:	f00a fb34 	bl	800bbdc <arm_mat_init_f32>

}
 8001574:	bf00      	nop
 8001576:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800157a:	46bd      	mov	sp, r7
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
 800157e:	bf00      	nop

08001580 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <modbus_1t5_Timeout+0x3c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <modbus_1t5_Timeout+0x3c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <modbus_1t5_Timeout+0x3c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <modbus_1t5_Timeout+0x3c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200002fc 	.word	0x200002fc

080015c0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <modbus_3t5_Timeout+0x1c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	755a      	strb	r2, [r3, #21]

}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200002fc 	.word	0x200002fc

080015e0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f009 f99d 	bl	800a928 <HAL_UART_GetError>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d101      	bne.n	80015f8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80015f4:	f7ff ffc4 	bl	8001580 <modbus_1t5_Timeout>

	}
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800160a:	4a25      	ldr	r2, [pc, #148]	@ (80016a0 <Modbus_init+0xa0>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <Modbus_init+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <Modbus_init+0xa4>)
 800161e:	210e      	movs	r1, #14
 8001620:	4618      	mov	r0, r3
 8001622:	f007 fba5 	bl	8008d70 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2110      	movs	r1, #16
 800162c:	4618      	mov	r0, r3
 800162e:	f009 f925 	bl	800a87c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f009 f93c 	bl	800a8b4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <Modbus_init+0xa8>)
 8001642:	2104      	movs	r1, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f008 fbe3 	bl	8009e10 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <Modbus_init+0xa0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <Modbus_init+0xa0>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <Modbus_init+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 800165c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001660:	4413      	add	r3, r2
 8001662:	3302      	adds	r3, #2
 8001664:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001668:	4619      	mov	r1, r3
 800166a:	f008 fd0b 	bl	800a084 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <Modbus_init+0xa0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10c      	bne.n	8001698 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <Modbus_init+0xa0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fa9f 	bl	8007bc8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800168a:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <Modbus_init+0xa0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f006 fcf8 	bl	8008088 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002fc 	.word	0x200002fc
 80016a4:	080015c1 	.word	0x080015c1
 80016a8:	080015e1 	.word	0x080015e1

080016ac <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80016b8:	23ff      	movs	r3, #255	@ 0xff
 80016ba:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80016bc:	23ff      	movs	r3, #255	@ 0xff
 80016be:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80016c0:	e013      	b.n	80016ea <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	4053      	eors	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80016d2:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <CRC16+0x68>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4413      	add	r3, r2
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4053      	eors	r3, r2
 80016de:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <CRC16+0x6c>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	1e5a      	subs	r2, r3, #1
 80016ee:	803a      	strh	r2, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e6      	bne.n	80016c2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	b29b      	uxth	r3, r3
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000100 	.word	0x20000100
 8001718:	20000000 	.word	0x20000000

0800171c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001722:	4b7e      	ldr	r3, [pc, #504]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	7ddb      	ldrb	r3, [r3, #23]
 8001728:	3b01      	subs	r3, #1
 800172a:	2b03      	cmp	r3, #3
 800172c:	d80a      	bhi.n	8001744 <Modbus_Protocal_Worker+0x28>
 800172e:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <Modbus_Protocal_Worker+0x18>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	0800174f 	.word	0x0800174f
 8001738:	080018e3 	.word	0x080018e3
 800173c:	080017db 	.word	0x080017db
 8001740:	0800181f 	.word	0x0800181f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001744:	4b75      	ldr	r3, [pc, #468]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	75da      	strb	r2, [r3, #23]
		break;
 800174c:	e0e1      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800174e:	4b73      	ldr	r3, [pc, #460]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800175a:	4b70      	ldr	r3, [pc, #448]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2202      	movs	r2, #2
 8001760:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001762:	f000 f9cd 	bl	8001b00 <Modbus_Emission>
 8001766:	e018      	b.n	800179a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001768:	4b6c      	ldr	r3, [pc, #432]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001772:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800177c:	b29b      	uxth	r3, r3
 800177e:	429a      	cmp	r2, r3
 8001780:	d00b      	beq.n	800179a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001782:	4b66      	ldr	r3, [pc, #408]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800178a:	4b64      	ldr	r3, [pc, #400]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2200      	movs	r2, #0
 8001790:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2203      	movs	r2, #3
 8001798:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800179a:	4b60      	ldr	r3, [pc, #384]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 80ad 	bne.w	8001904 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80017b4:	4b59      	ldr	r3, [pc, #356]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80017ba:	4b58      	ldr	r3, [pc, #352]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b57      	ldr	r3, [pc, #348]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80017c6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80017ca:	4413      	add	r3, r2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017d2:	4619      	mov	r1, r3
 80017d4:	f008 fc56 	bl	800a084 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80017d8:	e094      	b.n	8001904 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80017da:	4b50      	ldr	r3, [pc, #320]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	7d1b      	ldrb	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8091 	beq.w	8001908 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80017e6:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	22fe      	movs	r2, #254	@ 0xfe
 80017ec:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80017ee:	4b4b      	ldr	r3, [pc, #300]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80017f8:	4b48      	ldr	r3, [pc, #288]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001808:	4b44      	ldr	r3, [pc, #272]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800180a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800180c:	1a8a      	subs	r2, r1, r2
 800180e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001810:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001814:	4b41      	ldr	r3, [pc, #260]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2204      	movs	r2, #4
 800181a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800181c:	e074      	b.n	8001908 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800181e:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001826:	f113 0f02 	cmn.w	r3, #2
 800182a:	d150      	bne.n	80018ce <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001834:	4b39      	ldr	r3, [pc, #228]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800183c:	4b37      	ldr	r3, [pc, #220]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001844:	3b02      	subs	r3, #2
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f7ff ff2f 	bl	80016ac <CRC16>
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001852:	793a      	ldrb	r2, [r7, #4]
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	4b30      	ldr	r3, [pc, #192]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001860:	3b02      	subs	r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001868:	429a      	cmp	r2, r3
 800186a:	d10c      	bne.n	8001886 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800186c:	797a      	ldrb	r2, [r7, #5]
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800187a:	3b01      	subs	r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001882:	429a      	cmp	r2, r3
 8001884:	d004      	beq.n	8001890 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	22ff      	movs	r2, #255	@ 0xff
 800188c:	759a      	strb	r2, [r3, #22]
				break;
 800188e:	e040      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d113      	bne.n	80018ca <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80018b2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80018bc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80018be:	461a      	mov	r2, r3
 80018c0:	f00a fa20 	bl	800bd04 <memcpy>

			//execute command
			Modbus_frame_response();
 80018c4:	f000 f904 	bl	8001ad0 <Modbus_frame_response>
 80018c8:	e001      	b.n	80018ce <Modbus_Protocal_Worker+0x1b2>
				break;
 80018ca:	bf00      	nop
					}
		break;


	}
}
 80018cc:	e021      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7d5b      	ldrb	r3, [r3, #21]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d019      	beq.n	800190c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80018d8:	4b10      	ldr	r3, [pc, #64]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	75da      	strb	r2, [r3, #23]
		break;
 80018e0:	e014      	b.n	800190c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d10f      	bne.n	8001910 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <Modbus_Protocal_Worker+0x200>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	75da      	strb	r2, [r3, #23]
		break;
 8001902:	e005      	b.n	8001910 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001904:	bf00      	nop
 8001906:	e004      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001908:	bf00      	nop
 800190a:	e002      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
		break;
 800190c:	bf00      	nop
 800190e:	e000      	b.n	8001912 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001910:	bf00      	nop
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002fc 	.word	0x200002fc

08001920 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <modbusWrite1Register+0x7c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	7e5b      	ldrb	r3, [r3, #25]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	4a1a      	ldr	r2, [pc, #104]	@ (800199c <modbusWrite1Register+0x7c>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	7e92      	ldrb	r2, [r2, #26]
 8001936:	4413      	add	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800193a:	88fa      	ldrh	r2, [r7, #6]
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <modbusWrite1Register+0x7c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d903      	bls.n	800194e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001946:	2002      	movs	r0, #2
 8001948:	f000 f8a0 	bl	8001a8c <ModbusErrorReply>
			 return;
 800194c:	e023      	b.n	8001996 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <modbusWrite1Register+0x7c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <modbusWrite1Register+0x7c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	440b      	add	r3, r1
 800195e:	7ed2      	ldrb	r2, [r2, #27]
 8001960:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <modbusWrite1Register+0x7c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <modbusWrite1Register+0x7c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	440b      	add	r3, r1
 8001972:	7f12      	ldrb	r2, [r2, #28]
 8001974:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <modbusWrite1Register+0x7c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <modbusWrite1Register+0x7c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001984:	2208      	movs	r2, #8
 8001986:	4619      	mov	r1, r3
 8001988:	f00a f9bc 	bl	800bd04 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <modbusWrite1Register+0x7c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2205      	movs	r2, #5
 8001992:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200002fc 	.word	0x200002fc

080019a0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	7edb      	ldrb	r3, [r3, #27]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4a35      	ldr	r2, [pc, #212]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	7f12      	ldrb	r2, [r2, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	7e5b      	ldrb	r3, [r3, #25]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	7e92      	ldrb	r2, [r2, #26]
 80019ca:	4413      	add	r3, r2
 80019cc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <modbusRead1Register+0x3a>
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80019d8:	d903      	bls.n	80019e2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f856 	bl	8001a8c <ModbusErrorReply>
		 return;
 80019e0:	e04e      	b.n	8001a80 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80019e2:	88ba      	ldrh	r2, [r7, #4]
 80019e4:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d808      	bhi.n	8001a00 <modbusRead1Register+0x60>
 80019ee:	88ba      	ldrh	r2, [r7, #4]
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4413      	add	r3, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <modbusRead1Register+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d903      	bls.n	8001a08 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a00:	2002      	movs	r0, #2
 8001a02:	f000 f843 	bl	8001a8c <ModbusErrorReply>
		 return;
 8001a06:	e03b      	b.n	8001a80 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001a22:	2400      	movs	r4, #0
 8001a24:	e020      	b.n	8001a68 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	4423      	add	r3, r4
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	18d1      	adds	r1, r2, r3
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	1c63      	adds	r3, r4, #1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	7849      	ldrb	r1, [r1, #1]
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	4423      	add	r3, r4
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	18d1      	adds	r1, r2, r3
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	0063      	lsls	r3, r4, #1
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	7809      	ldrb	r1, [r1, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	460a      	mov	r2, r1
 8001a62:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001a66:	3401      	adds	r4, #1
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	dbdb      	blt.n	8001a26 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <modbusRead1Register+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0052      	lsls	r2, r2, #1
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002fc 	.word	0x200002fc

08001a8c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <ModbusErrorReply+0x40>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	7e1a      	ldrb	r2, [r3, #24]
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <ModbusErrorReply+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <ModbusErrorReply+0x40>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <ModbusErrorReply+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200002fc 	.word	0x200002fc

08001ad0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <Modbus_frame_response+0x2c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	7e1b      	ldrb	r3, [r3, #24]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d004      	beq.n	8001ae8 <Modbus_frame_response+0x18>
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d105      	bne.n	8001aee <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001ae2:	f7ff ff1d 	bl	8001920 <modbusWrite1Register>
		break;
 8001ae6:	e006      	b.n	8001af6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001ae8:	f7ff ff5a 	bl	80019a0 <modbusRead1Register>
		break;
 8001aec:	e003      	b.n	8001af6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff ffcc 	bl	8001a8c <ModbusErrorReply>
		break;
 8001af4:	bf00      	nop

	}
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002fc 	.word	0x200002fc

08001b00 <Modbus_Emission>:

void Modbus_Emission()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b06:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d15d      	bne.n	8001bd0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001b14:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001b2a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f00a f8e1 	bl	800bd04 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3203      	adds	r2, #3
 8001b52:	b292      	uxth	r2, r2
 8001b54:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001b58:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001b68:	3b02      	subs	r3, #2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff fd9d 	bl	80016ac <CRC16>
 8001b72:	4603      	mov	r3, r0
 8001b74:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b82:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001b84:	7939      	ldrb	r1, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001b8e:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b9a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001b9c:	7979      	ldrb	r1, [r7, #5]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d10d      	bne.n	8001bd0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001bc6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f008 f9da 	bl	8009f84 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <Modbus_Emission+0xe8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	755a      	strb	r2, [r3, #21]

}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002fc 	.word	0x200002fc

08001bec <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bf8:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	615a      	str	r2, [r3, #20]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <PIDCompute>:

float PIDCompute(CONTROLLER* controller , float kp, float ki, float kd, float error)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6178      	str	r0, [r7, #20]
 8001c1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c20:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c24:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c28:	edc7 1a01 	vstr	s3, [r7, #4]

	controller -> kp = kp;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]
	controller -> kd = kd;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	609a      	str	r2, [r3, #8]
	controller -> ki = ki;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	605a      	str	r2, [r3, #4]

    // Anti-windup: only integrate if not saturated
    if (!((controller->u >= controller->u_max && error > 0) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	bfac      	ite	ge
 8001c54:	2301      	movge	r3, #1
 8001c56:	2300      	movlt	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <PIDCompute+0x6e>
 8001c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	bfcc      	ite	gt
 8001c72:	2301      	movgt	r3, #1
 8001c74:	2300      	movle	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d059      	beq.n	8001d36 <PIDCompute+0x122>
          (controller->u <= controller->u_min && error < 0)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
    if (!((controller->u >= controller->u_max && error > 0) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10e      	bne.n	8001cc6 <PIDCompute+0xb2>
          (controller->u <= controller->u_min && error < 0)))
 8001ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	bf4c      	ite	mi
 8001cb6:	2301      	movmi	r3, #1
 8001cb8:	2300      	movpl	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d037      	beq.n	8001d36 <PIDCompute+0x122>
    {
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
                      - (controller->kp + 2 * controller->kd) * controller->prev_error_one
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	edd3 6a00 	vldr	s13, [r3]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cf8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d06:	ee37 7a67 	vsub.f32	s14, s14, s15
                      + (controller->kd * controller->prev_error_two);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	edc7 7a07 	vstr	s15, [r7, #28]

        controller->u += delta_u;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (controller->u > controller->u_max) {controller->u = controller->u_max;}
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	dd04      	ble.n	8001d56 <PIDCompute+0x142>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	e00e      	b.n	8001d74 <PIDCompute+0x160>
    else if (controller->u < controller->u_min) {controller->u = controller->u_min;}
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d503      	bpl.n	8001d74 <PIDCompute+0x160>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	60da      	str	r2, [r3, #12]

    // Shift error history
    controller->prev_error_two = controller->prev_error_one;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	61da      	str	r2, [r3, #28]
    controller->prev_error_one = error;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]

    return controller->u;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	ee07 3a90 	vmov	s15, r3
}
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	3724      	adds	r7, #36	@ 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6178      	str	r0, [r7, #20]
 8001da0:	6139      	str	r1, [r7, #16]
 8001da2:	60fa      	str	r2, [r7, #12]
 8001da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001da8:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 8001dec:	213c      	movs	r1, #60	@ 0x3c
 8001dee:	6938      	ldr	r0, [r7, #16]
 8001df0:	f006 fa8c 	bl	800830c <HAL_TIM_Encoder_Start>

}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	1ad2      	subs	r2, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0fd9      	lsrs	r1, r3, #31
 8001e2e:	440b      	add	r3, r1
 8001e30:	105b      	asrs	r3, r3, #1
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dd07      	ble.n	8001e46 <QEIPosVelUpdate+0x46>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	621a      	str	r2, [r3, #32]
 8001e44:	e010      	b.n	8001e68 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0fd9      	lsrs	r1, r3, #31
 8001e50:	440b      	add	r3, r1
 8001e52:	105b      	asrs	r3, r3, #1
 8001e54:	425b      	negs	r3, r3
 8001e56:	429a      	cmp	r2, r3
 8001e58:	da06      	bge.n	8001e68 <QEIPosVelUpdate+0x68>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1a      	ldr	r2, [r3, #32]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	441a      	add	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	441a      	add	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe fb1b 	bl	80004e0 <__aeabi_f2d>
 8001eaa:	a323      	add	r3, pc, #140	@ (adr r3, 8001f38 <QEIPosVelUpdate+0x138>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fb6e 	bl	8000590 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe4a 	bl	8000b54 <__aeabi_d2f>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ee0:	ee17 0a90 	vmov	r0, s15
 8001ee4:	f7fe fafc 	bl	80004e0 <__aeabi_f2d>
 8001ee8:	a313      	add	r3, pc, #76	@ (adr r3, 8001f38 <QEIPosVelUpdate+0x138>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe fb4f 	bl	8000590 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fadc 	bl	80004bc <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe fc6a 	bl	80007e4 <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe1c 	bl	8000b54 <__aeabi_d2f>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	f3af 8000 	nop.w
 8001f38:	54442d18 	.word	0x54442d18
 8001f3c:	400921fb 	.word	0x400921fb

08001f40 <QEI_Reset>:

void QEI_Reset(QEI *qei)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    // 1) stop encoder (optional)
    HAL_TIM_Encoder_Stop(qei->htim_qei, TIM_CHANNEL_ALL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	213c      	movs	r1, #60	@ 0x3c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f006 fa6a 	bl	8008428 <HAL_TIM_Encoder_Stop>

    // 2) clear the hardware counter
    __HAL_TIM_SET_COUNTER(qei->htim_qei, 0);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24

    // 3) clear your software state
    qei->new_val   = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->old_val   = 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->pulses    = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
    qei->revs      = 0.0f;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
    qei->rads      = 0.0f;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
    qei->radps     = 0.0f;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) restart encoder
    HAL_TIM_Encoder_Start(qei->htim_qei, TIM_CHANNEL_ALL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	213c      	movs	r1, #60	@ 0x3c
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f006 f9bc 	bl	800830c <HAL_TIM_Encoder_Start>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f002 f854 	bl	800404e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 f8f5 	bl	8002194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f000 fd0f 	bl	80029cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001fae:	f000 fccb 	bl	8002948 <MX_DMA_Init>
  MX_TIM1_Init();
 8001fb2:	f000 fa3b 	bl	800242c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fb6:	f000 fb01 	bl	80025bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001fba:	f000 fba3 	bl	8002704 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001fbe:	f000 fbf7 	bl	80027b0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001fc2:	f000 fb49 	bl	8002658 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001fc6:	f000 f931 	bl	800222c <MX_ADC1_Init>
  MX_TIM16_Init();
 8001fca:	f000 fc3f 	bl	800284c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001fce:	f000 fc6d 	bl	80028ac <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001fd2:	f000 f9b3 	bl	800233c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 8001fd6:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <main+0x160>)
 8001fd8:	4a49      	ldr	r2, [pc, #292]	@ (8002100 <main+0x164>)
 8001fda:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001fdc:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <main+0x160>)
 8001fde:	4a49      	ldr	r2, [pc, #292]	@ (8002104 <main+0x168>)
 8001fe0:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001fe2:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <main+0x160>)
 8001fe4:	2215      	movs	r2, #21
 8001fe6:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8001fe8:	4b44      	ldr	r3, [pc, #272]	@ (80020fc <main+0x160>)
 8001fea:	2246      	movs	r2, #70	@ 0x46
 8001fec:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001fee:	4946      	ldr	r1, [pc, #280]	@ (8002108 <main+0x16c>)
 8001ff0:	4842      	ldr	r0, [pc, #264]	@ (80020fc <main+0x160>)
 8001ff2:	f7ff fb05 	bl	8001600 <Modbus_init>

	PID_POS_pris.Kp = Kp_pos_pris;
 8001ff6:	4b45      	ldr	r3, [pc, #276]	@ (800210c <main+0x170>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a45      	ldr	r2, [pc, #276]	@ (8002110 <main+0x174>)
 8001ffc:	6193      	str	r3, [r2, #24]
	PID_POS_pris.Ki = Ki_pos_pris;
 8001ffe:	4b45      	ldr	r3, [pc, #276]	@ (8002114 <main+0x178>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a43      	ldr	r2, [pc, #268]	@ (8002110 <main+0x174>)
 8002004:	61d3      	str	r3, [r2, #28]
	PID_POS_pris.Kd = Kd_pos_pris;
 8002006:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <main+0x17c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a41      	ldr	r2, [pc, #260]	@ (8002110 <main+0x174>)
 800200c:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_pris, 0);
 800200e:	2100      	movs	r1, #0
 8002010:	483f      	ldr	r0, [pc, #252]	@ (8002110 <main+0x174>)
 8002012:	f009 fdad 	bl	800bb70 <arm_pid_init_f32>

	PID_POS_re.Kp = Kp_pos_pris;
 8002016:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <main+0x170>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a40      	ldr	r2, [pc, #256]	@ (800211c <main+0x180>)
 800201c:	6193      	str	r3, [r2, #24]
	PID_POS_re.Ki = Ki_pos_pris;
 800201e:	4b3d      	ldr	r3, [pc, #244]	@ (8002114 <main+0x178>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a3e      	ldr	r2, [pc, #248]	@ (800211c <main+0x180>)
 8002024:	61d3      	str	r3, [r2, #28]
	PID_POS_re.Kd = Kd_pos_pris;
 8002026:	4b3c      	ldr	r3, [pc, #240]	@ (8002118 <main+0x17c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <main+0x180>)
 800202c:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_re, 0);
 800202e:	2100      	movs	r1, #0
 8002030:	483a      	ldr	r0, [pc, #232]	@ (800211c <main+0x180>)
 8002032:	f009 fd9d 	bl	800bb70 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <main+0x184>)
 800203c:	2208      	movs	r2, #8
 800203e:	4939      	ldr	r1, [pc, #228]	@ (8002124 <main+0x188>)
 8002040:	4839      	ldr	r0, [pc, #228]	@ (8002128 <main+0x18c>)
 8002042:	f001 faa9 	bl	8003598 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8002046:	2340      	movs	r3, #64	@ 0x40
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <main+0x184>)
 800204c:	2204      	movs	r2, #4
 800204e:	4935      	ldr	r1, [pc, #212]	@ (8002124 <main+0x188>)
 8002050:	4836      	ldr	r0, [pc, #216]	@ (800212c <main+0x190>)
 8002052:	f001 faa1 	bl	8003598 <MotorInit>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8002056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800205a:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8002130 <main+0x194>
 800205e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002062:	4934      	ldr	r1, [pc, #208]	@ (8002134 <main+0x198>)
 8002064:	4834      	ldr	r0, [pc, #208]	@ (8002138 <main+0x19c>)
 8002066:	f7ff fe97 	bl	8001d98 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 800206a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800206e:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002130 <main+0x194>
 8002072:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002076:	4931      	ldr	r1, [pc, #196]	@ (800213c <main+0x1a0>)
 8002078:	4831      	ldr	r0, [pc, #196]	@ (8002140 <main+0x1a4>)
 800207a:	f7ff fe8d 	bl	8001d98 <QEIInit>

	PIDInit(&prismatic_vel_control, 65535, -65535);
 800207e:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8002144 <main+0x1a8>
 8002082:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002148 <main+0x1ac>
 8002086:	4831      	ldr	r0, [pc, #196]	@ (800214c <main+0x1b0>)
 8002088:	f7ff fdb0 	bl	8001bec <PIDInit>
	PIDInit(&revolute_vel_control, 65535, -65535);
 800208c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002144 <main+0x1a8>
 8002090:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8002148 <main+0x1ac>
 8002094:	482e      	ldr	r0, [pc, #184]	@ (8002150 <main+0x1b4>)
 8002096:	f7ff fda9 	bl	8001bec <PIDInit>

	KalmanInit(&prismatic_kalman, A_f32_prismatic, B_f32_prismatic, Q_prismatic,
 800209a:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <main+0x1b8>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <main+0x1bc>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	eef0 0a47 	vmov.f32	s1, s14
 80020aa:	eeb0 0a67 	vmov.f32	s0, s15
 80020ae:	4a2b      	ldr	r2, [pc, #172]	@ (800215c <main+0x1c0>)
 80020b0:	492b      	ldr	r1, [pc, #172]	@ (8002160 <main+0x1c4>)
 80020b2:	482c      	ldr	r0, [pc, #176]	@ (8002164 <main+0x1c8>)
 80020b4:	f7fe ff34 	bl	8000f20 <KalmanInit>
			R_prismatic);
	KalmanInit(&revolute_kalman, A_f32_revolute, B_f32_revolute, Q_revolute,
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <main+0x1cc>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <main+0x1d0>)
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	eef0 0a47 	vmov.f32	s1, s14
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	4a28      	ldr	r2, [pc, #160]	@ (8002170 <main+0x1d4>)
 80020ce:	4929      	ldr	r1, [pc, #164]	@ (8002174 <main+0x1d8>)
 80020d0:	4829      	ldr	r0, [pc, #164]	@ (8002178 <main+0x1dc>)
 80020d2:	f7fe ff25 	bl	8000f20 <KalmanInit>
			R_revolute);

	HAL_TIM_Base_Start_IT(&htim5);
 80020d6:	4829      	ldr	r0, [pc, #164]	@ (800217c <main+0x1e0>)
 80020d8:	f005 fd76 	bl	8007bc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80020dc:	4828      	ldr	r0, [pc, #160]	@ (8002180 <main+0x1e4>)
 80020de:	f005 fd73 	bl	8007bc8 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
 80020e2:	2214      	movs	r2, #20
 80020e4:	4927      	ldr	r1, [pc, #156]	@ (8002184 <main+0x1e8>)
 80020e6:	4828      	ldr	r0, [pc, #160]	@ (8002188 <main+0x1ec>)
 80020e8:	f002 fc1e 	bl	8004928 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, Prox_RawRead, 10);
 80020ec:	220a      	movs	r2, #10
 80020ee:	4927      	ldr	r1, [pc, #156]	@ (800218c <main+0x1f0>)
 80020f0:	4827      	ldr	r0, [pc, #156]	@ (8002190 <main+0x1f4>)
 80020f2:	f002 fc19 	bl	8004928 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80020f6:	f7ff fb11 	bl	800171c <Modbus_Protocal_Worker>
 80020fa:	e7fc      	b.n	80020f6 <main+0x15a>
 80020fc:	20000aec 	.word	0x20000aec
 8002100:	20000960 	.word	0x20000960
 8002104:	20000894 	.word	0x20000894
 8002108:	20000fc4 	.word	0x20000fc4
 800210c:	2000020c 	.word	0x2000020c
 8002110:	200010a8 	.word	0x200010a8
 8002114:	20000210 	.word	0x20000210
 8002118:	20000214 	.word	0x20000214
 800211c:	200010cc 	.word	0x200010cc
 8002120:	48000800 	.word	0x48000800
 8002124:	20000498 	.word	0x20000498
 8002128:	2000105c 	.word	0x2000105c
 800212c:	20001078 	.word	0x20001078
 8002130:	447a0000 	.word	0x447a0000
 8002134:	200006fc 	.word	0x200006fc
 8002138:	200010f8 	.word	0x200010f8
 800213c:	20000630 	.word	0x20000630
 8002140:	2000145c 	.word	0x2000145c
 8002144:	c77fff00 	.word	0xc77fff00
 8002148:	477fff00 	.word	0x477fff00
 800214c:	20001128 	.word	0x20001128
 8002150:	20001490 	.word	0x20001490
 8002154:	20000268 	.word	0x20000268
 8002158:	2000026c 	.word	0x2000026c
 800215c:	20000258 	.word	0x20000258
 8002160:	20000218 	.word	0x20000218
 8002164:	20001148 	.word	0x20001148
 8002168:	200002c0 	.word	0x200002c0
 800216c:	200002c4 	.word	0x200002c4
 8002170:	200002b0 	.word	0x200002b0
 8002174:	20000270 	.word	0x20000270
 8002178:	200014b0 	.word	0x200014b0
 800217c:	200007c8 	.word	0x200007c8
 8002180:	20000564 	.word	0x20000564
 8002184:	200017bc 	.word	0x200017bc
 8002188:	20000300 	.word	0x20000300
 800218c:	200017ec 	.word	0x200017ec
 8002190:	2000036c 	.word	0x2000036c

08002194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b094      	sub	sp, #80	@ 0x50
 8002198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	2238      	movs	r2, #56	@ 0x38
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f009 fd82 	bl	800bcac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f004 fc02 	bl	80069c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c6:	2340      	movs	r3, #64	@ 0x40
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ca:	2302      	movs	r3, #2
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ce:	2302      	movs	r3, #2
 80021d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80021d2:	2304      	movs	r3, #4
 80021d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80021d6:	2355      	movs	r3, #85	@ 0x55
 80021d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021da:	2302      	movs	r3, #2
 80021dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021de:	2302      	movs	r3, #2
 80021e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 fc9c 	bl	8006b28 <HAL_RCC_OscConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021f6:	f001 f9c9 	bl	800358c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fa:	230f      	movs	r3, #15
 80021fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fe:	2303      	movs	r3, #3
 8002200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2104      	movs	r1, #4
 8002212:	4618      	mov	r0, r3
 8002214:	f004 ff9a 	bl	800714c <HAL_RCC_ClockConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800221e:	f001 f9b5 	bl	800358c <Error_Handler>
  }
}
 8002222:	bf00      	nop
 8002224:	3750      	adds	r7, #80	@ 0x50
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2220      	movs	r2, #32
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f009 fd31 	bl	800bcac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <MX_ADC1_Init+0x104>)
 800224c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002252:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002254:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800225a:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <MX_ADC1_Init+0x104>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002260:	4b33      	ldr	r3, [pc, #204]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002266:	4b32      	ldr	r3, [pc, #200]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800226c:	4b30      	ldr	r3, [pc, #192]	@ (8002330 <MX_ADC1_Init+0x104>)
 800226e:	2201      	movs	r2, #1
 8002270:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002272:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002274:	2204      	movs	r2, #4
 8002276:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002278:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <MX_ADC1_Init+0x104>)
 800227a:	2200      	movs	r2, #0
 800227c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800227e:	4b2c      	ldr	r3, [pc, #176]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002280:	2201      	movs	r2, #1
 8002282:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002284:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002286:	2202      	movs	r2, #2
 8002288:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800228a:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <MX_ADC1_Init+0x104>)
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002292:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002294:	2200      	movs	r2, #0
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <MX_ADC1_Init+0x104>)
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80022ac:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022b4:	481e      	ldr	r0, [pc, #120]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022b6:	f002 f97b 	bl	80045b0 <HAL_ADC_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80022c0:	f001 f964 	bl	800358c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4818      	ldr	r0, [pc, #96]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022d0:	f003 fc48 	bl	8005b64 <HAL_ADCEx_MultiModeConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80022da:	f001 f957 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <MX_ADC1_Init+0x108>)
 80022e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022e2:	2306      	movs	r3, #6
 80022e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80022e6:	2307      	movs	r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022ea:	237f      	movs	r3, #127	@ 0x7f
 80022ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022ee:	2304      	movs	r3, #4
 80022f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	@ (8002330 <MX_ADC1_Init+0x104>)
 80022fc:	f002 fe70 	bl	8004fe0 <HAL_ADC_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002306:	f001 f941 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <MX_ADC1_Init+0x10c>)
 800230c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800230e:	230c      	movs	r3, #12
 8002310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	@ (8002330 <MX_ADC1_Init+0x104>)
 8002318:	f002 fe62 	bl	8004fe0 <HAL_ADC_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002322:	f001 f933 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3730      	adds	r7, #48	@ 0x30
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000300 	.word	0x20000300
 8002334:	1d500080 	.word	0x1d500080
 8002338:	21800100 	.word	0x21800100

0800233c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2220      	movs	r2, #32
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f009 fca9 	bl	800bcac <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800235c:	4a31      	ldr	r2, [pc, #196]	@ (8002424 <MX_ADC3_Init+0xe8>)
 800235e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002360:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002362:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002366:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8002374:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002382:	2204      	movs	r2, #4
 8002384:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800238c:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800238e:	2201      	movs	r2, #1
 8002390:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <MX_ADC3_Init+0xe4>)
 8002394:	2201      	movs	r2, #1
 8002396:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80023c2:	4817      	ldr	r0, [pc, #92]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023c4:	f002 f8f4 	bl	80045b0 <HAL_ADC_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80023ce:	f001 f8dd 	bl	800358c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80023d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023da:	4619      	mov	r1, r3
 80023dc:	4810      	ldr	r0, [pc, #64]	@ (8002420 <MX_ADC3_Init+0xe4>)
 80023de:	f003 fbc1 	bl	8005b64 <HAL_ADCEx_MultiModeConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80023e8:	f001 f8d0 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <MX_ADC3_Init+0xec>)
 80023ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f0:	2306      	movs	r3, #6
 80023f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80023f4:	2307      	movs	r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023f8:	237f      	movs	r3, #127	@ 0x7f
 80023fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023fc:	2304      	movs	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_ADC3_Init+0xe4>)
 800240a:	f002 fde9 	bl	8004fe0 <HAL_ADC_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8002414:	f001 f8ba 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	@ 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000036c 	.word	0x2000036c
 8002424:	50000400 	.word	0x50000400
 8002428:	32601000 	.word	0x32601000

0800242c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b09c      	sub	sp, #112	@ 0x70
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002432:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002440:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800244c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2234      	movs	r2, #52	@ 0x34
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f009 fc20 	bl	800bcac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246c:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800246e:	4a52      	ldr	r2, [pc, #328]	@ (80025b8 <MX_TIM1_Init+0x18c>)
 8002470:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8002472:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002474:	22a9      	movs	r2, #169	@ 0xa9
 8002476:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b4e      	ldr	r3, [pc, #312]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800247e:	4b4d      	ldr	r3, [pc, #308]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002480:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002484:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b4b      	ldr	r3, [pc, #300]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800248c:	4b49      	ldr	r3, [pc, #292]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b48      	ldr	r3, [pc, #288]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002498:	4846      	ldr	r0, [pc, #280]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800249a:	f005 fac1 	bl	8007a20 <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f001 f872 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024b2:	4619      	mov	r1, r3
 80024b4:	483f      	ldr	r0, [pc, #252]	@ (80025b4 <MX_TIM1_Init+0x188>)
 80024b6:	f006 faeb 	bl	8008a90 <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024c0:	f001 f864 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024c4:	483b      	ldr	r0, [pc, #236]	@ (80025b4 <MX_TIM1_Init+0x188>)
 80024c6:	f005 fbf7 	bl	8007cb8 <HAL_TIM_PWM_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024d0:	f001 f85c 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e4:	4619      	mov	r1, r3
 80024e6:	4833      	ldr	r0, [pc, #204]	@ (80025b4 <MX_TIM1_Init+0x188>)
 80024e8:	f007 fab8 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024f2:	f001 f84b 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f6:	2360      	movs	r3, #96	@ 0x60
 80024f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002502:	2300      	movs	r3, #0
 8002504:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002512:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002516:	2200      	movs	r2, #0
 8002518:	4619      	mov	r1, r3
 800251a:	4826      	ldr	r0, [pc, #152]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800251c:	f006 f9a4 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002526:	f001 f831 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800252a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800252e:	2204      	movs	r2, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4820      	ldr	r0, [pc, #128]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002534:	f006 f998 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800253e:	f001 f825 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002542:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002546:	2208      	movs	r2, #8
 8002548:	4619      	mov	r1, r3
 800254a:	481a      	ldr	r0, [pc, #104]	@ (80025b4 <MX_TIM1_Init+0x188>)
 800254c:	f006 f98c 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002556:	f001 f819 	bl	800358c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800256e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002572:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002580:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <MX_TIM1_Init+0x188>)
 8002598:	f007 faf6 	bl	8009b88 <HAL_TIMEx_ConfigBreakDeadTime>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80025a2:	f000 fff3 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025a6:	4803      	ldr	r0, [pc, #12]	@ (80025b4 <MX_TIM1_Init+0x188>)
 80025a8:	f001 fb66 	bl	8003c78 <HAL_TIM_MspPostInit>

}
 80025ac:	bf00      	nop
 80025ae:	3770      	adds	r7, #112	@ 0x70
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000498 	.word	0x20000498
 80025b8:	40012c00 	.word	0x40012c00

080025bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025e4:	22a9      	movs	r2, #169	@ 0xa9
 80025e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <MX_TIM2_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002602:	4814      	ldr	r0, [pc, #80]	@ (8002654 <MX_TIM2_Init+0x98>)
 8002604:	f005 fa0c 	bl	8007a20 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800260e:	f000 ffbd 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	@ (8002654 <MX_TIM2_Init+0x98>)
 8002620:	f006 fa36 	bl	8008a90 <HAL_TIM_ConfigClockSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800262a:	f000 ffaf 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	@ (8002654 <MX_TIM2_Init+0x98>)
 800263c:	f007 fa0e 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002646:	f000 ffa1 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000564 	.word	0x20000564

08002658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	@ 0x30
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f009 fb20 	bl	800bcac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002676:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <MX_TIM3_Init+0xa4>)
 8002678:	4a21      	ldr	r2, [pc, #132]	@ (8002700 <MX_TIM3_Init+0xa8>)
 800267a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800267c:	4b1f      	ldr	r3, [pc, #124]	@ (80026fc <MX_TIM3_Init+0xa4>)
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <MX_TIM3_Init+0xa4>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002688:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <MX_TIM3_Init+0xa4>)
 800268a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800268e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_TIM3_Init+0xa4>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <MX_TIM3_Init+0xa4>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800269c:	2303      	movs	r3, #3
 800269e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026a4:	2301      	movs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026b4:	2301      	movs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4619      	mov	r1, r3
 80026c6:	480d      	ldr	r0, [pc, #52]	@ (80026fc <MX_TIM3_Init+0xa4>)
 80026c8:	f005 fd6c 	bl	80081a4 <HAL_TIM_Encoder_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026d2:	f000 ff5b 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026de:	463b      	mov	r3, r7
 80026e0:	4619      	mov	r1, r3
 80026e2:	4806      	ldr	r0, [pc, #24]	@ (80026fc <MX_TIM3_Init+0xa4>)
 80026e4:	f007 f9ba 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80026ee:	f000 ff4d 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	3730      	adds	r7, #48	@ 0x30
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000630 	.word	0x20000630
 8002700:	40000400 	.word	0x40000400

08002704 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	@ 0x30
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	2224      	movs	r2, #36	@ 0x24
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f009 faca 	bl	800bcac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002724:	4a21      	ldr	r2, [pc, #132]	@ (80027ac <MX_TIM4_Init+0xa8>)
 8002726:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002734:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800273a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002748:	2303      	movs	r3, #3
 800274a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002750:	2301      	movs	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002760:	2301      	movs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002774:	f005 fd16 	bl	80081a4 <HAL_TIM_Encoder_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800277e:	f000 ff05 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	@ (80027a8 <MX_TIM4_Init+0xa4>)
 8002790:	f007 f964 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800279a:	f000 fef7 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3730      	adds	r7, #48	@ 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200006fc 	.word	0x200006fc
 80027ac:	40000800 	.word	0x40000800

080027b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002848 <MX_TIM5_Init+0x98>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027d6:	22a9      	movs	r2, #169	@ 0xa9
 80027d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027f4:	4813      	ldr	r0, [pc, #76]	@ (8002844 <MX_TIM5_Init+0x94>)
 80027f6:	f005 f913 	bl	8007a20 <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002800:	f000 fec4 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	@ (8002844 <MX_TIM5_Init+0x94>)
 8002812:	f006 f93d 	bl	8008a90 <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800281c:	f000 feb6 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_TIM5_Init+0x94>)
 800282e:	f007 f915 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002838:	f000 fea8 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200007c8 	.word	0x200007c8
 8002848:	40000c00 	.word	0x40000c00

0800284c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <MX_TIM16_Init+0x5c>)
 8002854:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002858:	22a9      	movs	r2, #169	@ 0xa9
 800285a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <MX_TIM16_Init+0x58>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002864:	f240 4279 	movw	r2, #1145	@ 0x479
 8002868:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286a:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <MX_TIM16_Init+0x58>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800287c:	4809      	ldr	r0, [pc, #36]	@ (80028a4 <MX_TIM16_Init+0x58>)
 800287e:	f005 f8cf 	bl	8007a20 <HAL_TIM_Base_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002888:	f000 fe80 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800288c:	2108      	movs	r1, #8
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_TIM16_Init+0x58>)
 8002890:	f005 fb92 	bl	8007fb8 <HAL_TIM_OnePulse_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800289a:	f000 fe77 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000894 	.word	0x20000894
 80028a8:	40014400 	.word	0x40014400

080028ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028b2:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <MX_USART2_UART_Init+0x98>)
 80028b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028b8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80028bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028fa:	f007 fa29 	bl	8009d50 <HAL_UART_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002904:	f000 fe42 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800290c:	f009 f865 	bl	800b9da <HAL_UARTEx_SetTxFifoThreshold>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002916:	f000 fe39 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4808      	ldr	r0, [pc, #32]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800291e:	f009 f89a 	bl	800ba56 <HAL_UARTEx_SetRxFifoThreshold>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002928:	f000 fe30 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800292e:	f009 f81b 	bl	800b968 <HAL_UARTEx_DisableFifoMode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002938:	f000 fe28 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000960 	.word	0x20000960
 8002944:	40004400 	.word	0x40004400

08002948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800294e:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <MX_DMA_Init+0x80>)
 8002950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002952:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <MX_DMA_Init+0x80>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6493      	str	r3, [r2, #72]	@ 0x48
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MX_DMA_Init+0x80>)
 800295c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002966:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <MX_DMA_Init+0x80>)
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <MX_DMA_Init+0x80>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6493      	str	r3, [r2, #72]	@ 0x48
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_DMA_Init+0x80>)
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	200b      	movs	r0, #11
 8002984:	f003 fad1 	bl	8005f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002988:	200b      	movs	r0, #11
 800298a:	f003 fae8 	bl	8005f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	200c      	movs	r0, #12
 8002994:	f003 fac9 	bl	8005f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002998:	200c      	movs	r0, #12
 800299a:	f003 fae0 	bl	8005f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	200d      	movs	r0, #13
 80029a4:	f003 fac1 	bl	8005f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029a8:	200d      	movs	r0, #13
 80029aa:	f003 fad8 	bl	8005f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	200e      	movs	r0, #14
 80029b4:	f003 fab9 	bl	8005f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029b8:	200e      	movs	r0, #14
 80029ba:	f003 fad0 	bl	8005f5e <HAL_NVIC_EnableIRQ>

}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b50 <MX_GPIO_Init+0x184>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b50 <MX_GPIO_Init+0x184>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ee:	4b58      	ldr	r3, [pc, #352]	@ (8002b50 <MX_GPIO_Init+0x184>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029fa:	4b55      	ldr	r3, [pc, #340]	@ (8002b50 <MX_GPIO_Init+0x184>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	4a54      	ldr	r2, [pc, #336]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a06:	4b52      	ldr	r3, [pc, #328]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b4f      	ldr	r3, [pc, #316]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a16:	4a4e      	ldr	r2, [pc, #312]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	4b49      	ldr	r3, [pc, #292]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a36:	4b46      	ldr	r3, [pc, #280]	@ (8002b50 <MX_GPIO_Init+0x184>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2120      	movs	r1, #32
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a4a:	f003 ff6f 	bl	800692c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 8002a54:	483f      	ldr	r0, [pc, #252]	@ (8002b54 <MX_GPIO_Init+0x188>)
 8002a56:	f003 ff69 	bl	800692c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4838      	ldr	r0, [pc, #224]	@ (8002b54 <MX_GPIO_Init+0x188>)
 8002a72:	f003 fdc1 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a76:	2308      	movs	r3, #8
 8002a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	4832      	ldr	r0, [pc, #200]	@ (8002b54 <MX_GPIO_Init+0x188>)
 8002a8a:	f003 fdb5 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
  GPIO_InitStruct.Pin = RUN_Joy_Pin|Save_Joy_Pin;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa4:	f003 fda8 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac2:	f003 fd99 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ac6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002acc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	481e      	ldr	r0, [pc, #120]	@ (8002b58 <MX_GPIO_Init+0x18c>)
 8002ade:	f003 fd8b 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002ae2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	4818      	ldr	r0, [pc, #96]	@ (8002b58 <MX_GPIO_Init+0x18c>)
 8002af8:	f003 fd7e 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002afc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	480f      	ldr	r0, [pc, #60]	@ (8002b54 <MX_GPIO_Init+0x188>)
 8002b16:	f003 fd6f 	bl	80065f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4808      	ldr	r0, [pc, #32]	@ (8002b54 <MX_GPIO_Init+0x188>)
 8002b32:	f003 fd61 	bl	80065f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2028      	movs	r0, #40	@ 0x28
 8002b3c:	f003 f9f5 	bl	8005f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b40:	2028      	movs	r0, #40	@ 0x28
 8002b42:	f003 fa0c 	bl	8005f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	48000800 	.word	0x48000800
 8002b58:	48000400 	.word	0x48000400

08002b5c <Prismatic_CasCadeControl>:

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
	error_pos_pris = target_position_prismatic - ball_screw_pos;
 8002b62:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <Prismatic_CasCadeControl+0x1b0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcba 	bl	80004e0 <__aeabi_f2d>
 8002b6c:	4b68      	ldr	r3, [pc, #416]	@ (8002d10 <Prismatic_CasCadeControl+0x1b4>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fb55 	bl	8000220 <__aeabi_dsub>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fd ffe9 	bl	8000b54 <__aeabi_d2f>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a63      	ldr	r2, [pc, #396]	@ (8002d14 <Prismatic_CasCadeControl+0x1b8>)
 8002b86:	6013      	str	r3, [r2, #0]

	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);
 8002b88:	4b62      	ldr	r3, [pc, #392]	@ (8002d14 <Prismatic_CasCadeControl+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a62      	ldr	r2, [pc, #392]	@ (8002d18 <Prismatic_CasCadeControl+0x1bc>)
 8002b8e:	60fa      	str	r2, [r7, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002bee:	6013      	str	r3, [r2, #0]

	if (output_pos_pris > 300) {
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002d20 <Prismatic_CasCadeControl+0x1c4>
 8002bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	dd03      	ble.n	8002c0c <Prismatic_CasCadeControl+0xb0>
		output_pos_pris = 300;
 8002c04:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002c06:	4a47      	ldr	r2, [pc, #284]	@ (8002d24 <Prismatic_CasCadeControl+0x1c8>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00c      	b.n	8002c26 <Prismatic_CasCadeControl+0xca>
	} else if (output_pos_pris < -300) {
 8002c0c:	4b43      	ldr	r3, [pc, #268]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002d28 <Prismatic_CasCadeControl+0x1cc>
 8002c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d502      	bpl.n	8002c26 <Prismatic_CasCadeControl+0xca>
		output_pos_pris = -300;
 8002c20:	4b3e      	ldr	r3, [pc, #248]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002c22:	4a42      	ldr	r2, [pc, #264]	@ (8002d2c <Prismatic_CasCadeControl+0x1d0>)
 8002c24:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
 8002c26:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <Prismatic_CasCadeControl+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc58 	bl	80004e0 <__aeabi_f2d>
 8002c30:	4b3f      	ldr	r3, [pc, #252]	@ (8002d30 <Prismatic_CasCadeControl+0x1d4>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd faf3 	bl	8000220 <__aeabi_dsub>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7fd ff87 	bl	8000b54 <__aeabi_d2f>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4a3a      	ldr	r2, [pc, #232]	@ (8002d34 <Prismatic_CasCadeControl+0x1d8>)
 8002c4a:	6013      	str	r3, [r2, #0]

	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <Prismatic_CasCadeControl+0x1dc>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <Prismatic_CasCadeControl+0x1e0>)
 8002c54:	ed93 7a00 	vldr	s14, [r3]
 8002c58:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <Prismatic_CasCadeControl+0x1e4>)
 8002c5a:	edd3 6a00 	vldr	s13, [r3]
 8002c5e:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <Prismatic_CasCadeControl+0x1d8>)
 8002c60:	ed93 6a00 	vldr	s12, [r3]
 8002c64:	eef0 1a46 	vmov.f32	s3, s12
 8002c68:	eeb0 1a66 	vmov.f32	s2, s13
 8002c6c:	eef0 0a47 	vmov.f32	s1, s14
 8002c70:	eeb0 0a67 	vmov.f32	s0, s15
 8002c74:	4833      	ldr	r0, [pc, #204]	@ (8002d44 <Prismatic_CasCadeControl+0x1e8>)
 8002c76:	f7fe ffcd 	bl	8001c14 <PIDCompute>
 8002c7a:	eef0 7a40 	vmov.f32	s15, s0
 8002c7e:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <Prismatic_CasCadeControl+0x1ec>)
 8002c80:	edc3 7a00 	vstr	s15, [r3]
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	// Motor control
	if (ball_screw_pos >= target_position_prismatic - 0.25
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <Prismatic_CasCadeControl+0x1b0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc29 	bl	80004e0 <__aeabi_f2d>
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <Prismatic_CasCadeControl+0x1f0>)
 8002c94:	f7fd fac4 	bl	8000220 <__aeabi_dsub>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <Prismatic_CasCadeControl+0x1b4>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd feef 	bl	8000a88 <__aeabi_dcmple>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01d      	beq.n	8002cec <Prismatic_CasCadeControl+0x190>
			&& ball_screw_pos <= target_position_prismatic + 0.25) {
 8002cb0:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <Prismatic_CasCadeControl+0x1b0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc13 	bl	80004e0 <__aeabi_f2d>
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <Prismatic_CasCadeControl+0x1f0>)
 8002cc0:	f7fd fab0 	bl	8000224 <__adddf3>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <Prismatic_CasCadeControl+0x1b4>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fee3 	bl	8000a9c <__aeabi_dcmpge>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <Prismatic_CasCadeControl+0x190>
		MotorSet(&prismatic_motor, 1000, 0);
 8002cdc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8002d50 <Prismatic_CasCadeControl+0x1f4>
 8002ce0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002d54 <Prismatic_CasCadeControl+0x1f8>
 8002ce4:	481c      	ldr	r0, [pc, #112]	@ (8002d58 <Prismatic_CasCadeControl+0x1fc>)
 8002ce6:	f000 fc7f 	bl	80035e8 <MotorSet>
 8002cea:	e00a      	b.n	8002d02 <Prismatic_CasCadeControl+0x1a6>
	} else {
		MotorSet(&prismatic_motor, 1000, output_velo_pris);
 8002cec:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <Prismatic_CasCadeControl+0x1ec>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	eef0 0a67 	vmov.f32	s1, s15
 8002cf6:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002d54 <Prismatic_CasCadeControl+0x1f8>
 8002cfa:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <Prismatic_CasCadeControl+0x1fc>)
 8002cfc:	f000 fc74 	bl	80035e8 <MotorSet>
	}
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20001094 	.word	0x20001094
 8002d10:	20001448 	.word	0x20001448
 8002d14:	200010a4 	.word	0x200010a4
 8002d18:	200010a8 	.word	0x200010a8
 8002d1c:	200010a0 	.word	0x200010a0
 8002d20:	43960000 	.word	0x43960000
 8002d24:	43960000 	.word	0x43960000
 8002d28:	c3960000 	.word	0xc3960000
 8002d2c:	c3960000 	.word	0xc3960000
 8002d30:	20001450 	.word	0x20001450
 8002d34:	2000109c 	.word	0x2000109c
 8002d38:	20000200 	.word	0x20000200
 8002d3c:	20000204 	.word	0x20000204
 8002d40:	20000208 	.word	0x20000208
 8002d44:	20001128 	.word	0x20001128
 8002d48:	20001098 	.word	0x20001098
 8002d4c:	3fd00000 	.word	0x3fd00000
 8002d50:	00000000 	.word	0x00000000
 8002d54:	447a0000 	.word	0x447a0000
 8002d58:	2000105c 	.word	0x2000105c

08002d5c <Revolute_CasCadeControl>:

void Revolute_CasCadeControl() {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
	error_pos_re = target_position_revolute - revolute_encoder.rads;
 8002d62:	4b37      	ldr	r3, [pc, #220]	@ (8002e40 <Revolute_CasCadeControl+0xe4>)
 8002d64:	ed93 7a00 	vldr	s14, [r3]
 8002d68:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <Revolute_CasCadeControl+0xe8>)
 8002d6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d72:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <Revolute_CasCadeControl+0xec>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]

	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);
 8002d78:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <Revolute_CasCadeControl+0xec>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <Revolute_CasCadeControl+0xf0>)
 8002d7e:	60fa      	str	r2, [r7, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
    out = (S->A0 * in) +
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002da0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	615a      	str	r2, [r3, #20]
    return (out);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <Revolute_CasCadeControl+0xf4>)
 8002dde:	6013      	str	r3, [r2, #0]
//		output_pos_re = 300;
//	} else if (output_pos_re < -300) {
//		output_pos_re = -300;
//	}

	error_velo_re = output_pos_re - revolute_encoder.radps;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <Revolute_CasCadeControl+0xf4>)
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <Revolute_CasCadeControl+0xe8>)
 8002de8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <Revolute_CasCadeControl+0xf8>)
 8002df2:	edc3 7a00 	vstr	s15, [r3]

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re,
 8002df6:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <Revolute_CasCadeControl+0xfc>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <Revolute_CasCadeControl+0x100>)
 8002dfe:	ed93 7a00 	vldr	s14, [r3]
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <Revolute_CasCadeControl+0x104>)
 8002e04:	edd3 6a00 	vldr	s13, [r3]
 8002e08:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <Revolute_CasCadeControl+0xf8>)
 8002e0a:	ed93 6a00 	vldr	s12, [r3]
 8002e0e:	eef0 1a46 	vmov.f32	s3, s12
 8002e12:	eeb0 1a66 	vmov.f32	s2, s13
 8002e16:	eef0 0a47 	vmov.f32	s1, s14
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	4811      	ldr	r0, [pc, #68]	@ (8002e64 <Revolute_CasCadeControl+0x108>)
 8002e20:	f7fe fef8 	bl	8001c14 <PIDCompute>
 8002e24:	eef0 7a40 	vmov.f32	s15, s0
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <Revolute_CasCadeControl+0x10c>)
 8002e2a:	edc3 7a00 	vstr	s15, [r3]
			Ki_velo_re, Kd_velo_re, error_velo_re);

	// Motor control
	output_revolute = output_velo_re;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <Revolute_CasCadeControl+0x10c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0e      	ldr	r2, [pc, #56]	@ (8002e6c <Revolute_CasCadeControl+0x110>)
 8002e34:	6013      	str	r3, [r2, #0]
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20001458 	.word	0x20001458
 8002e44:	2000145c 	.word	0x2000145c
 8002e48:	200017a0 	.word	0x200017a0
 8002e4c:	200010cc 	.word	0x200010cc
 8002e50:	2000179c 	.word	0x2000179c
 8002e54:	200017a8 	.word	0x200017a8
 8002e58:	200002c8 	.word	0x200002c8
 8002e5c:	200002cc 	.word	0x200002cc
 8002e60:	200002d0 	.word	0x200002d0
 8002e64:	20001490 	.word	0x20001490
 8002e68:	200017a4 	.word	0x200017a4
 8002e6c:	200010f4 	.word	0x200010f4

08002e70 <ball_screw_converter>:

void ball_screw_converter() {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <ball_screw_converter+0x50>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb31 	bl	80004e0 <__aeabi_f2d>
 8002e7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002eb8 <ball_screw_converter+0x48>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd fb84 	bl	8000590 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	490d      	ldr	r1, [pc, #52]	@ (8002ec4 <ball_screw_converter+0x54>)
 8002e8e:	e9c1 2300 	strd	r2, r3, [r1]
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <ball_screw_converter+0x58>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb22 	bl	80004e0 <__aeabi_f2d>
 8002e9c:	a306      	add	r3, pc, #24	@ (adr r3, 8002eb8 <ball_screw_converter+0x48>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fb75 	bl	8000590 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <ball_screw_converter+0x5c>)
 8002eac:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	6dc9c883 	.word	0x6dc9c883
 8002ebc:	40045f30 	.word	0x40045f30
 8002ec0:	200010f8 	.word	0x200010f8
 8002ec4:	20001448 	.word	0x20001448
 8002ec8:	20001434 	.word	0x20001434
 8002ecc:	20001450 	.word	0x20001450

08002ed0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee0:	d105      	bne.n	8002eee <HAL_GPIO_EXTI_Callback+0x1e>
		current_state = STATE_ERROR;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ee4:	2206      	movs	r2, #6
 8002ee6:	701a      	strb	r2, [r3, #0]
		registerFrame[1].U16 = STATUS_IDLE;
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <HAL_GPIO_EXTI_Callback+0x68>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	805a      	strh	r2, [r3, #2]
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef4:	d111      	bne.n	8002f1a <HAL_GPIO_EXTI_Callback+0x4a>
		output_prismatic = (output_prismatic == 65535) ? -65535 : 65535;
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002f40 <HAL_GPIO_EXTI_Callback+0x70>
 8002f00:	eef4 7a47 	vcmp.f32	s15, s14
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_EXTI_Callback+0x3e>
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_GPIO_EXTI_Callback+0x74>)
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_EXTI_Callback+0x40>
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_GPIO_EXTI_Callback+0x78>)
 8002f10:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002f12:	6013      	str	r3, [r2, #0]
//		MotorSet(&prismatic_motor, 1000, output_prismatic);
		limit_r = 1;
 8002f14:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f20:	d102      	bne.n	8002f28 <HAL_GPIO_EXTI_Callback+0x58>
		limit_l = 1;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_GPIO_EXTI_Callback+0x80>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
//		revolute_flag = (revlolute_flag == 0) ? 1 : 0;
	}
//	if (GPIO_Pin == GPIO_PIN_0) {
//		revolute_flag = (revolute_flag == 1) ? 0 : 1;
//	}
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	20001050 	.word	0x20001050
 8002f38:	20000fc4 	.word	0x20000fc4
 8002f3c:	200010f0 	.word	0x200010f0
 8002f40:	477fff00 	.word	0x477fff00
 8002f44:	c77fff00 	.word	0xc77fff00
 8002f48:	477fff00 	.word	0x477fff00
 8002f4c:	20001798 	.word	0x20001798
 8002f50:	20001799 	.word	0x20001799

08002f54 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	69b9      	ldr	r1, [r7, #24]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	1a8a      	subs	r2, r1, r2
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1acb      	subs	r3, r1, r3
 8002f78:	fb92 f2f3 	sdiv	r2, r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4413      	add	r3, r2
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	0000      	movs	r0, r0
	...

08002f90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b08a      	sub	sp, #40	@ 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	6078      	str	r0, [r7, #4]

	// sensor timer 1000 hz
	if (htim == &htim2) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4aaf      	ldr	r2, [pc, #700]	@ (8003258 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	f040 8138 	bne.w	8003212 <HAL_TIM_PeriodElapsedCallback+0x282>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa8:	f003 fcd8 	bl	800695c <HAL_GPIO_TogglePin>
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002fac:	48ab      	ldr	r0, [pc, #684]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002fae:	f7fe ff27 	bl	8001e00 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002fb2:	48ab      	ldr	r0, [pc, #684]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002fb4:	f7fe ff24 	bl	8001e00 <QEIPosVelUpdate>
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 20; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e018      	b.n	8002ff8 <HAL_TIM_PeriodElapsedCallback+0x68>
			if ((i & 1) == 0)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <HAL_TIM_PeriodElapsedCallback+0x52>
				sum_x += JOY_RawRead[i];
 8002fd0:	4aa4      	ldr	r2, [pc, #656]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e007      	b.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x62>
			else
				sum_y += JOY_RawRead[i];
 8002fe2:	4aa0      	ldr	r2, [pc, #640]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fea:	461a      	mov	r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 20; i++) {
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b13      	cmp	r3, #19
 8002ffc:	dde3      	ble.n	8002fc6 <HAL_TIM_PeriodElapsedCallback+0x36>
		}

		int32_t raw_x = sum_x / 10;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4a99      	ldr	r2, [pc, #612]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003002:	fb82 1203 	smull	r1, r2, r2, r3
 8003006:	1092      	asrs	r2, r2, #2
 8003008:	17db      	asrs	r3, r3, #31
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	613b      	str	r3, [r7, #16]
		int32_t raw_y = sum_y / 10;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4a95      	ldr	r2, [pc, #596]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003012:	fb82 1203 	smull	r1, r2, r2, r3
 8003016:	1092      	asrs	r2, r2, #2
 8003018:	17db      	asrs	r3, r3, #31
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	60fb      	str	r3, [r7, #12]

		if (raw_x < 1700 && raw_x > 1500) {
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003024:	4293      	cmp	r3, r2
 8003026:	dc07      	bgt.n	8003038 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800302e:	4293      	cmp	r3, r2
 8003030:	dd02      	ble.n	8003038 <HAL_TIM_PeriodElapsedCallback+0xa8>
			raw_x = 4096 / 2;
 8003032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003036:	613b      	str	r3, [r7, #16]
		}
		if (raw_y < 1700 && raw_y > 1500) {
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800303e:	4293      	cmp	r3, r2
 8003040:	dc07      	bgt.n	8003052 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003048:	4293      	cmp	r3, r2
 800304a:	dd02      	ble.n	8003052 <HAL_TIM_PeriodElapsedCallback+0xc2>
			raw_y = 4096 / 2;
 800304c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003050:	60fb      	str	r3, [r7, #12]
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8003052:	2364      	movs	r3, #100	@ 0x64
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800305a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800305e:	2100      	movs	r1, #0
 8003060:	6938      	ldr	r0, [r7, #16]
 8003062:	f7ff ff77 	bl	8002f54 <map>
 8003066:	4603      	mov	r3, r0
 8003068:	b21a      	sxth	r2, r3
 800306a:	4b80      	ldr	r3, [pc, #512]	@ (800326c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800306c:	801a      	strh	r2, [r3, #0]
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 800306e:	2364      	movs	r3, #100	@ 0x64
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8003076:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800307a:	2100      	movs	r1, #0
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff ff69 	bl	8002f54 <map>
 8003082:	4603      	mov	r3, r0
 8003084:	b21a      	sxth	r2, r3
 8003086:	4b7a      	ldr	r3, [pc, #488]	@ (8003270 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003088:	801a      	strh	r2, [r3, #0]

		// Joy button
		Joy_run = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800308a:	2101      	movs	r1, #1
 800308c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003090:	f003 fc34 	bl	80068fc <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800309a:	701a      	strb	r2, [r3, #0]
		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800309c:	2102      	movs	r1, #2
 800309e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030a2:	f003 fc2b 	bl	80068fc <HAL_GPIO_ReadPin>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b73      	ldr	r3, [pc, #460]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80030ac:	701a      	strb	r2, [r3, #0]

		// Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
 80030ae:	4b6b      	ldr	r3, [pc, #428]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80030b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
								- prismatic_radps_lowpass_prev);
 80030b4:	4b71      	ldr	r3, [pc, #452]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_encoder.radps
 80030be:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003280 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 80030c2:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 80030c6:	4b6d      	ldr	r3, [pc, #436]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
 80030d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80030d2:	edc3 7a00 	vstr	s15, [r3]

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
 80030d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	4b67      	ldr	r3, [pc, #412]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e6:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8003288 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 80030ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
		prismatic_acceleration = ((prismatic_radps_lowpass
 80030ee:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
 80030f4:	4b63      	ldr	r3, [pc, #396]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a60      	ldr	r2, [pc, #384]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80030fa:	6013      	str	r3, [r2, #0]
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
 80030fc:	4b63      	ldr	r3, [pc, #396]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	4b63      	ldr	r3, [pc, #396]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_acceleration
 800310c:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003280 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8003110:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8003114:	4b5e      	ldr	r3, [pc, #376]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
 800311e:	4b5d      	ldr	r3, [pc, #372]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8003120:	edc3 7a00 	vstr	s15, [r3]

		ball_screw_converter();
 8003124:	f7ff fea4 	bl	8002e70 <ball_screw_converter>

		// Prox shimttrigger
		if (Prox_RawRead[0] > 4000) {
 8003128:	4b5b      	ldr	r3, [pc, #364]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003130:	d903      	bls.n	800313a <HAL_TIM_PeriodElapsedCallback+0x1aa>
			revolute_flag = 1;
 8003132:	4b5a      	ldr	r3, [pc, #360]	@ (800329c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e006      	b.n	8003148 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		} else if (Prox_RawRead[0] < 50) {
 800313a:	4b57      	ldr	r3, [pc, #348]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	2b31      	cmp	r3, #49	@ 0x31
 8003140:	d802      	bhi.n	8003148 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			revolute_flag = 0;
 8003142:	4b56      	ldr	r3, [pc, #344]	@ (800329c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
		}

		//button

		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;
 8003148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800314c:	4854      	ldr	r0, [pc, #336]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800314e:	f003 fbd5 	bl	80068fc <HAL_GPIO_ReadPin>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
		button_emer =
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003162:	701a      	strb	r2, [r3, #0]

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
 8003164:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003168:	484f      	ldr	r0, [pc, #316]	@ (80032a8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800316a:	f003 fbc7 	bl	80068fc <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
						&& button_emer == 1) ? 1 : 0;
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8003174:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8003180:	2300      	movs	r3, #0
		button_reset =
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003186:	701a      	strb	r2, [r3, #0]

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 8003188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800318c:	4846      	ldr	r0, [pc, #280]	@ (80032a8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800318e:	f003 fbb5 	bl	80068fc <HAL_GPIO_ReadPin>
 8003192:	4603      	mov	r3, r0
						&& button_emer) ? 1 : 0;
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_TIM_PeriodElapsedCallback+0x214>
 8003198:	4b42      	ldr	r3, [pc, #264]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_TIM_PeriodElapsedCallback+0x214>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_TIM_PeriodElapsedCallback+0x216>
 80031a4:	2300      	movs	r3, #0
		button_run =
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80031aa:	701a      	strb	r2, [r3, #0]

//		Prismatic_CasCadeControl();
//		Joystick_COntrol();

//		MotorSet(&prismatic_motor, 1000, output_prismatic);
		MotorSet(&revolute_motor, 1000, output_revolute);
 80031ac:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	eef0 0a67 	vmov.f32	s1, s15
 80031b6:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80032b8 <HAL_TIM_PeriodElapsedCallback+0x328>
 80031ba:	4840      	ldr	r0, [pc, #256]	@ (80032bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80031bc:	f000 fa14 	bl	80035e8 <MotorSet>

		// Protocal

		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 80031c0:	4b3f      	ldr	r3, [pc, #252]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80031ca:	428a      	cmp	r2, r1
 80031cc:	f173 0300 	sbcs.w	r3, r3, #0
 80031d0:	d311      	bcc.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x266>
			heartbeat_counter = 0;
 80031d2:	493b      	ldr	r1, [pc, #236]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = (registerFrame[0].U16 == 0) ? 22881 : 0;
 80031e0:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0x260>
 80031ea:	f645 1261 	movw	r2, #22881	@ 0x5961
 80031ee:	e000      	b.n	80031f2 <HAL_TIM_PeriodElapsedCallback+0x262>
 80031f0:	2200      	movs	r2, #0
 80031f2:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80031f4:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 80031f6:	4b32      	ldr	r3, [pc, #200]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	1c54      	adds	r4, r2, #1
 80031fe:	f143 0500 	adc.w	r5, r3, #0
 8003202:	4b2f      	ldr	r3, [pc, #188]	@ (80032c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003204:	e9c3 4500 	strd	r4, r5, [r3]

		tim2_counter++;
 8003208:	4b2f      	ldr	r3, [pc, #188]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a2e      	ldr	r2, [pc, #184]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003210:	6013      	str	r3, [r2, #0]

	}

	// state timer 1000 hz
	if (htim == &htim5) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2d      	ldr	r2, [pc, #180]	@ (80032cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f040 817a 	bne.w	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>
		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
 800321c:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800321e:	885b      	ldrh	r3, [r3, #2]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			current_state = STATE_STOPPING;
 800322a:	4b29      	ldr	r3, [pc, #164]	@ (80032d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800322c:	2205      	movs	r2, #5
 800322e:	701a      	strb	r2, [r3, #0]
			registerFrame[1].U16 &= ~(STATUS_HOME | STATUS_JOG | STATUS_POINT
 8003230:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003232:	885b      	ldrh	r3, [r3, #2]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f023 030f 	bic.w	r3, r3, #15
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b21      	ldr	r3, [pc, #132]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800323e:	805a      	strh	r2, [r3, #2]
					| STATUS_GO_TO_TARGET); // ลบคำสั่งอื่นๆ
		}

		if (registerFrame[1].U16 & STATUS_HOME) {
 8003240:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003242:	885b      	ldrh	r3, [r3, #2]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d042      	beq.n	80032d4 <HAL_TIM_PeriodElapsedCallback+0x344>
			current_state = STATE_HOMING;
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e067      	b.n	8003326 <HAL_TIM_PeriodElapsedCallback+0x396>
 8003256:	bf00      	nop
 8003258:	20000564 	.word	0x20000564
 800325c:	200010f8 	.word	0x200010f8
 8003260:	2000145c 	.word	0x2000145c
 8003264:	200017bc 	.word	0x200017bc
 8003268:	66666667 	.word	0x66666667
 800326c:	200017e4 	.word	0x200017e4
 8003270:	200017e6 	.word	0x200017e6
 8003274:	200017e8 	.word	0x200017e8
 8003278:	200017e9 	.word	0x200017e9
 800327c:	20001430 	.word	0x20001430
 8003280:	3cf98536 	.word	0x3cf98536
 8003284:	20001434 	.word	0x20001434
 8003288:	3a83126f 	.word	0x3a83126f
 800328c:	20001438 	.word	0x20001438
 8003290:	20001440 	.word	0x20001440
 8003294:	2000143c 	.word	0x2000143c
 8003298:	200017ec 	.word	0x200017ec
 800329c:	2000148c 	.word	0x2000148c
 80032a0:	48000800 	.word	0x48000800
 80032a4:	20001803 	.word	0x20001803
 80032a8:	48000400 	.word	0x48000400
 80032ac:	20001800 	.word	0x20001800
 80032b0:	20001801 	.word	0x20001801
 80032b4:	200010f4 	.word	0x200010f4
 80032b8:	447a0000 	.word	0x447a0000
 80032bc:	20001078 	.word	0x20001078
 80032c0:	200017b0 	.word	0x200017b0
 80032c4:	20000fc4 	.word	0x20000fc4
 80032c8:	200017b8 	.word	0x200017b8
 80032cc:	200007c8 	.word	0x200007c8
 80032d0:	20001050 	.word	0x20001050
		} else if (registerFrame[1].U16 & STATUS_JOG) {
 80032d4:	4b92      	ldr	r3, [pc, #584]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80032d6:	885b      	ldrh	r3, [r3, #2]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <HAL_TIM_PeriodElapsedCallback+0x360>
			current_state = STATE_JOGGING;
 80032e2:	4b90      	ldr	r3, [pc, #576]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_JOG;
 80032e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80032ea:	2202      	movs	r2, #2
 80032ec:	829a      	strh	r2, [r3, #20]
 80032ee:	e01a      	b.n	8003326 <HAL_TIM_PeriodElapsedCallback+0x396>
		} else if (registerFrame[1].U16 & STATUS_POINT) {
 80032f0:	4b8b      	ldr	r3, [pc, #556]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80032f2:	885b      	ldrh	r3, [r3, #2]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_TIM_PeriodElapsedCallback+0x37c>
			current_state = STATE_POINT_MOVING;
 80032fe:	4b89      	ldr	r3, [pc, #548]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8003300:	2203      	movs	r2, #3
 8003302:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_POINT;
 8003304:	4b86      	ldr	r3, [pc, #536]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003306:	2204      	movs	r2, #4
 8003308:	829a      	strh	r2, [r3, #20]
 800330a:	e00c      	b.n	8003326 <HAL_TIM_PeriodElapsedCallback+0x396>
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
 800330c:	4b84      	ldr	r3, [pc, #528]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800330e:	885b      	ldrh	r3, [r3, #2]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_TIM_PeriodElapsedCallback+0x396>
			current_state = STATE_GO_TO_TARGET;
 800331a:	4b82      	ldr	r3, [pc, #520]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800331c:	2204      	movs	r2, #4
 800331e:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
 8003320:	4b7f      	ldr	r3, [pc, #508]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003322:	2208      	movs	r2, #8
 8003324:	829a      	strh	r2, [r3, #20]
		}

		if (registerFrame[4].U16 == 1 && registerFrame[5].U16 == 0) {
 8003326:	4b7e      	ldr	r3, [pc, #504]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003328:	891b      	ldrh	r3, [r3, #8]
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8003330:	4b7b      	ldr	r3, [pc, #492]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003332:	895b      	ldrh	r3, [r3, #10]
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_TIM_PeriodElapsedCallback+0x3b2>
			//Pen Up Servo On
			registerFrame[3].U16 = 1 << 0;
 800333a:	4b79      	ldr	r3, [pc, #484]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800333c:	2201      	movs	r2, #1
 800333e:	80da      	strh	r2, [r3, #6]
 8003340:	e002      	b.n	8003348 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		} else {
			//Pen Doen Servo Off
			registerFrame[3].U16 = 1 << 1;
 8003342:	4b77      	ldr	r3, [pc, #476]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003344:	2202      	movs	r2, #2
 8003346:	80da      	strh	r2, [r3, #6]
		}

		if (button_reset == 1 ){
 8003348:	4b77      	ldr	r3, [pc, #476]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x3c6>
			registerFrame[1].U16 = STATUS_HOME;
 8003350:	4b73      	ldr	r3, [pc, #460]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003352:	2201      	movs	r2, #1
 8003354:	805a      	strh	r2, [r3, #2]
		}

		switch (current_state) {
 8003356:	4b73      	ldr	r3, [pc, #460]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	3b01      	subs	r3, #1
 800335c:	2b05      	cmp	r3, #5
 800335e:	f200 80d7 	bhi.w	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>
 8003362:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003381 	.word	0x08003381
 800336c:	080033c9 	.word	0x080033c9
 8003370:	08003413 	.word	0x08003413
 8003374:	0800345d 	.word	0x0800345d
 8003378:	080034cb 	.word	0x080034cb
 800337c:	080034e3 	.word	0x080034e3
//				QEI_Reset(&prismatic_encoder);
//				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
//				point_flag = 3;
//				limit_r = 0;
//			}
			if (revolute_flag != 1) {
 8003380:	4b6a      	ldr	r3, [pc, #424]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d003      	beq.n	8003390 <HAL_TIM_PeriodElapsedCallback+0x400>
				output_revolute = -65535;
 8003388:	4b69      	ldr	r3, [pc, #420]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800338a:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e017      	b.n	80033c0 <HAL_TIM_PeriodElapsedCallback+0x430>
			} else if (revolute_flag == 1) {
 8003390:	4b66      	ldr	r3, [pc, #408]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d113      	bne.n	80033c0 <HAL_TIM_PeriodElapsedCallback+0x430>

				waiting_state = 0;
 8003398:	4b67      	ldr	r3, [pc, #412]	@ (8003538 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
				output_revolute = 0;
 800339e:	4b64      	ldr	r3, [pc, #400]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 80033a6:	4865      	ldr	r0, [pc, #404]	@ (800353c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80033a8:	f7fe fdca 	bl	8001f40 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80033ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033b0:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8003540 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 80033b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033b8:	4962      	ldr	r1, [pc, #392]	@ (8003544 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80033ba:	4860      	ldr	r0, [pc, #384]	@ (800353c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80033bc:	f7fe fcec 	bl	8001d98 <QEIInit>
			}
			registerFrame[10].U16 = STATUS_HOME;
 80033c0:	4b57      	ldr	r3, [pc, #348]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	829a      	strh	r2, [r3, #20]
			break;
 80033c6:	e0a3      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>

		case STATE_JOGGING:
			//Call joystick mode
			joy_flag = 1;
 80033c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003548 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
		//	error_velo_pris = Joy_x - ball_screw_vel;
		//	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
		//			Ki_velo_pris, Kd_velo_pris, error_velo_pris);
		//	MotorSet(&prismatic_motor, 1000, output_velo_pris);
			//Joy y -> Revolute
			error_velo_re = (Joy_y / 100.0) * 65535;
 80033ce:	4b5f      	ldr	r3, [pc, #380]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80033d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f871 	bl	80004bc <__aeabi_i2d>
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b5c      	ldr	r3, [pc, #368]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80033e0:	f7fd fa00 	bl	80007e4 <__aeabi_ddiv>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	a34a      	add	r3, pc, #296	@ (adr r3, 8003518 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f7fd f8cd 	bl	8000590 <__aeabi_dmul>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7fd fba9 	bl	8000b54 <__aeabi_d2f>
 8003402:	4603      	mov	r3, r0
 8003404:	4a53      	ldr	r2, [pc, #332]	@ (8003554 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003406:	6013      	str	r3, [r2, #0]
			output_revolute = output_velo_re;
 8003408:	4b53      	ldr	r3, [pc, #332]	@ (8003558 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a48      	ldr	r2, [pc, #288]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800340e:	6013      	str	r3, [r2, #0]
			break;
 8003410:	e07e      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>

		case STATE_POINT_MOVING:
			target_position_prismatic = registerFrame[64].U16 / 10;
 8003412:	4b43      	ldr	r3, [pc, #268]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003414:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8003418:	b29b      	uxth	r3, r3
 800341a:	4a50      	ldr	r2, [pc, #320]	@ (800355c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	b29b      	uxth	r3, r3
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800342c:	4b4c      	ldr	r3, [pc, #304]	@ (8003560 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800342e:	edc3 7a00 	vstr	s15, [r3]
			target_position_revolute = (registerFrame[65].U16 / 10) * 2;
 8003432:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003434:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003438:	b29b      	uxth	r3, r3
 800343a:	4a48      	ldr	r2, [pc, #288]	@ (800355c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	b29b      	uxth	r3, r3
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8003450:	edc3 7a00 	vstr	s15, [r3]
//			target_position_revolute = (target_position_revolute > 360) ? 360 : target_position_revolute;
			point_flag = 1;
 8003454:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]
			break;
 800345a:	e059      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>

		case STATE_GO_TO_TARGET:

			Revolute_CasCadeControl();
 800345c:	f7ff fc7e 	bl	8002d5c <Revolute_CasCadeControl>
			Prismatic_CasCadeControl();
 8003460:	f7ff fb7c 	bl	8002b5c <Prismatic_CasCadeControl>
			registerFrame[11].U16 = (int) (ball_screw_pos * 10);
 8003464:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003470:	f7fd f88e 	bl	8000590 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fb22 	bl	8000ac4 <__aeabi_d2iz>
 8003480:	4603      	mov	r3, r0
 8003482:	b29a      	uxth	r2, r3
 8003484:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003486:	82da      	strh	r2, [r3, #22]
			//			registerFrame[12].U16 = (int) (revolute_kalman_rads * (180 / M_PI)
			//					* 10);
			registerFrame[13].U16 = (int) (ball_screw_vel * 10);
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800348a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b37      	ldr	r3, [pc, #220]	@ (8003570 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003494:	f7fd f87c 	bl	8000590 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fb10 	bl	8000ac4 <__aeabi_d2iz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80034aa:	835a      	strh	r2, [r3, #26]
			//			registerFrame[14].U16 = (int) (revolute_kalman_radps * (180 / M_PI)
			//					* 10);
			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034be:	ee17 3a90 	vmov	r3, s15
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80034c6:	83da      	strh	r2, [r3, #30]
			//					- prev_revolute_vel) / 0.001) * 10);
//			if (prismatic_kalman_rads < 0.2 && revolute_kalman_rads <= 0.2) {
//				current_state = STATE_STOPPING;
//				point_flag = 0;
//			}
			break;
 80034c8:	e022      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>
		case STATE_STOPPING:
			// ขั้นตอนหยุดฉุกเฉิน
			//			stop_all_motors();
			registerFrame[10].U16 = STATUS_STOP;
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80034cc:	2210      	movs	r2, #16
 80034ce:	829a      	strh	r2, [r3, #20]
			output_revolute = 0;
 80034d0:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 80034d8:	4b28      	ldr	r3, [pc, #160]	@ (800357c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
			break;
 80034e0:	e016      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x580>

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
 80034e2:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 80034ea:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
			MotorSet(&prismatic_motor, 1000, 0);
 80034f2:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003580 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 80034f6:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003540 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 80034fa:	4822      	ldr	r0, [pc, #136]	@ (8003584 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80034fc:	f000 f874 	bl	80035e8 <MotorSet>
			MotorSet(&revolute_motor, 1000, 0);
 8003500:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8003580 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8003504:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8003540 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 8003508:	481f      	ldr	r0, [pc, #124]	@ (8003588 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800350a:	f000 f86d 	bl	80035e8 <MotorSet>
//			registerFrame[1].U16 = STATUS_ERROR;
			break;
 800350e:	bf00      	nop
		}
	}
}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bdb0      	pop	{r4, r5, r7, pc}
 8003518:	00000000 	.word	0x00000000
 800351c:	40efffe0 	.word	0x40efffe0
 8003520:	20000fc4 	.word	0x20000fc4
 8003524:	20001050 	.word	0x20001050
 8003528:	20001800 	.word	0x20001800
 800352c:	2000148c 	.word	0x2000148c
 8003530:	200010f4 	.word	0x200010f4
 8003534:	c77fff00 	.word	0xc77fff00
 8003538:	20001802 	.word	0x20001802
 800353c:	2000145c 	.word	0x2000145c
 8003540:	447a0000 	.word	0x447a0000
 8003544:	20000630 	.word	0x20000630
 8003548:	20001054 	.word	0x20001054
 800354c:	200017e6 	.word	0x200017e6
 8003550:	40590000 	.word	0x40590000
 8003554:	200017a8 	.word	0x200017a8
 8003558:	200017a4 	.word	0x200017a4
 800355c:	cccccccd 	.word	0xcccccccd
 8003560:	20001094 	.word	0x20001094
 8003564:	20001458 	.word	0x20001458
 8003568:	20001058 	.word	0x20001058
 800356c:	20001448 	.word	0x20001448
 8003570:	40240000 	.word	0x40240000
 8003574:	20001450 	.word	0x20001450
 8003578:	2000143c 	.word	0x2000143c
 800357c:	200010f0 	.word	0x200010f0
 8003580:	00000000 	.word	0x00000000
 8003584:	2000105c 	.word	0x2000105c
 8003588:	20001078 	.word	0x20001078

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
}
 8003592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <Error_Handler+0x8>

08003598 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a0c      	ldr	r2, [pc, #48]	@ (80035e4 <MotorInit+0x4c>)
 80035b2:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8b3a      	ldrh	r2, [r7, #24]
 80035ca:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f004 fa8b 	bl	8007ae8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	4619      	mov	r1, r3
 80035d6:	68b8      	ldr	r0, [r7, #8]
 80035d8:	f004 fbdc 	bl	8007d94 <HAL_TIM_PWM_Start>
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0a21fe80 	.word	0x0a21fe80

080035e8 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035f4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 80035f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	d137      	bne.n	8003676 <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	895b      	ldrh	r3, [r3, #10]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <MotorSet+0x32>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8003618:	e104      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	895b      	ldrh	r3, [r3, #10]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d105      	bne.n	800362e <MotorSet+0x46>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	6393      	str	r3, [r2, #56]	@ 0x38
 800362c:	e0fa      	b.n	8003824 <MotorSet+0x23c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	895b      	ldrh	r3, [r3, #10]
 8003632:	2b08      	cmp	r3, #8
 8003634:	d105      	bne.n	8003642 <MotorSet+0x5a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003640:	e0f0      	b.n	8003824 <MotorSet+0x23c>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	895b      	ldrh	r3, [r3, #10]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d105      	bne.n	8003656 <MotorSet+0x6e>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	6413      	str	r3, [r2, #64]	@ 0x40
 8003654:	e0e6      	b.n	8003824 <MotorSet+0x23c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	895b      	ldrh	r3, [r3, #10]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d105      	bne.n	800366a <MotorSet+0x82>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	6493      	str	r3, [r2, #72]	@ 0x48
 8003668:	e0dc      	b.n	8003824 <MotorSet+0x23c>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003674:	e0d6      	b.n	8003824 <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 7a02 	vldr	s14, [r7, #8]
 8003686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800368a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368e:	ee17 2a90 	vmov	r2, s15
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800369e:	33fe      	adds	r3, #254	@ 0xfe
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc fefb 	bl	800049c <__aeabi_ui2d>
 80036a6:	a362      	add	r3, pc, #392	@ (adr r3, 8003830 <MotorSet+0x248>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fd f89a 	bl	80007e4 <__aeabi_ddiv>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fa2c 	bl	8000b14 <__aeabi_d2uiz>
 80036bc:	4603      	mov	r3, r0
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8a1b      	ldrh	r3, [r3, #16]
 80036d8:	3301      	adds	r3, #1
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8a5b      	ldrh	r3, [r3, #18]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fed7 	bl	80004bc <__aeabi_i2d>
 800370e:	4604      	mov	r4, r0
 8003710:	460d      	mov	r5, r1
 8003712:	edd7 7a01 	vldr	s15, [r7, #4]
 8003716:	eef0 7ae7 	vabs.f32	s15, s15
 800371a:	ee17 0a90 	vmov	r0, s15
 800371e:	f7fc fedf 	bl	80004e0 <__aeabi_f2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fc ff31 	bl	8000590 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	a33e      	add	r3, pc, #248	@ (adr r3, 8003830 <MotorSet+0x248>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fd f852 	bl	80007e4 <__aeabi_ddiv>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd f9e4 	bl	8000b14 <__aeabi_d2uiz>
 800374c:	4603      	mov	r3, r0
 800374e:	b29b      	uxth	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 8003756:	edd7 7a01 	vldr	s15, [r7, #4]
 800375a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	db08      	blt.n	8003776 <MotorSet+0x18e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6858      	ldr	r0, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	891b      	ldrh	r3, [r3, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	4619      	mov	r1, r3
 8003770:	f003 f8dc 	bl	800692c <HAL_GPIO_WritePin>
 8003774:	e007      	b.n	8003786 <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6858      	ldr	r0, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	891b      	ldrh	r3, [r3, #8]
 800377e:	2201      	movs	r2, #1
 8003780:	4619      	mov	r1, r3
 8003782:	f003 f8d3 	bl	800692c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8a1a      	ldrh	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8a5a      	ldrh	r2, [r3, #18]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8a5a      	ldrh	r2, [r3, #18]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	895b      	ldrh	r3, [r3, #10]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <MotorSet+0x1d6>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	6992      	ldr	r2, [r2, #24]
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037bc:	e032      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	895b      	ldrh	r3, [r3, #10]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d106      	bne.n	80037d4 <MotorSet+0x1ec>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037d2:	e027      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	895b      	ldrh	r3, [r3, #10]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d106      	bne.n	80037ea <MotorSet+0x202>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80037e8:	e01c      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	895b      	ldrh	r3, [r3, #10]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d106      	bne.n	8003800 <MotorSet+0x218>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037fe:	e011      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	895b      	ldrh	r3, [r3, #10]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d106      	bne.n	8003816 <MotorSet+0x22e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003814:	e006      	b.n	8003824 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003822:	e7ff      	b.n	8003824 <MotorSet+0x23c>
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bdb0      	pop	{r4, r5, r7, pc}
 800382c:	f3af 8000 	nop.w
 8003830:	00000000 	.word	0x00000000
 8003834:	40efffe0 	.word	0x40efffe0

08003838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <HAL_MspInit+0x44>)
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	4a0e      	ldr	r2, [pc, #56]	@ (800387c <HAL_MspInit+0x44>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6613      	str	r3, [r2, #96]	@ 0x60
 800384a:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <HAL_MspInit+0x44>)
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_MspInit+0x44>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4a08      	ldr	r2, [pc, #32]	@ (800387c <HAL_MspInit+0x44>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
 8003862:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_MspInit+0x44>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800386e:	f003 f94b 	bl	8006b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b0a0      	sub	sp, #128	@ 0x80
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003898:	f107 0318 	add.w	r3, r7, #24
 800389c:	2254      	movs	r2, #84	@ 0x54
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f008 fa03 	bl	800bcac <memset>
  if(hadc->Instance==ADC1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ae:	d167      	bne.n	8003980 <HAL_ADC_MspInit+0x100>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80038b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80038b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80038ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038bc:	f107 0318 	add.w	r3, r7, #24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fe5f 	bl	8007584 <HAL_RCCEx_PeriphCLKConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80038cc:	f7ff fe5e 	bl	800358c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80038d0:	4b63      	ldr	r3, [pc, #396]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	4a62      	ldr	r2, [pc, #392]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038dc:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003900:	2306      	movs	r3, #6
 8003902:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003904:	2303      	movs	r3, #3
 8003906:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003910:	4619      	mov	r1, r3
 8003912:	4854      	ldr	r0, [pc, #336]	@ (8003a64 <HAL_ADC_MspInit+0x1e4>)
 8003914:	f002 fe70 	bl	80065f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 800391a:	4a54      	ldr	r2, [pc, #336]	@ (8003a6c <HAL_ADC_MspInit+0x1ec>)
 800391c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800391e:	4b52      	ldr	r3, [pc, #328]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003920:	2205      	movs	r2, #5
 8003922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800392a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003930:	4b4d      	ldr	r3, [pc, #308]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003932:	2280      	movs	r2, #128	@ 0x80
 8003934:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003936:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800393c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003946:	4b48      	ldr	r3, [pc, #288]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003948:	2220      	movs	r2, #32
 800394a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800394c:	4b46      	ldr	r3, [pc, #280]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 800394e:	2200      	movs	r2, #0
 8003950:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003952:	4845      	ldr	r0, [pc, #276]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003954:	f002 fb1e 	bl	8005f94 <HAL_DMA_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800395e:	f7ff fe15 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
 8003968:	4a3f      	ldr	r2, [pc, #252]	@ (8003a68 <HAL_ADC_MspInit+0x1e8>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	2012      	movs	r0, #18
 8003974:	f002 fad9 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003978:	2012      	movs	r0, #18
 800397a:	f002 faf0 	bl	8005f5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800397e:	e06b      	b.n	8003a58 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC3)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3a      	ldr	r2, [pc, #232]	@ (8003a70 <HAL_ADC_MspInit+0x1f0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d166      	bne.n	8003a58 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800398a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800398e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003990:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003994:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003996:	f107 0318 	add.w	r3, r7, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fdf2 	bl	8007584 <HAL_RCCEx_PeriphCLKConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_ADC_MspInit+0x12a>
      Error_Handler();
 80039a6:	f7ff fdf1 	bl	800358c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039c8:	f043 0302 	orr.w	r3, r3, #2
 80039cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ce:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_ADC_MspInit+0x1e0>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039da:	2301      	movs	r3, #1
 80039dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	2303      	movs	r3, #3
 80039e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80039ea:	4619      	mov	r1, r3
 80039ec:	4821      	ldr	r0, [pc, #132]	@ (8003a74 <HAL_ADC_MspInit+0x1f4>)
 80039ee:	f002 fe03 	bl	80065f8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel4;
 80039f2:	4b21      	ldr	r3, [pc, #132]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 80039f4:	4a21      	ldr	r2, [pc, #132]	@ (8003a7c <HAL_ADC_MspInit+0x1fc>)
 80039f6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80039f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 80039fa:	2225      	movs	r2, #37	@ 0x25
 80039fc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a0c:	2280      	movs	r2, #128	@ 0x80
 8003a0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a18:	4b17      	ldr	r3, [pc, #92]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003a20:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a22:	2220      	movs	r2, #32
 8003a24:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003a2c:	4812      	ldr	r0, [pc, #72]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a2e:	f002 fab1 	bl	8005f94 <HAL_DMA_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_ADC_MspInit+0x1bc>
      Error_Handler();
 8003a38:	f7ff fda8 	bl	800358c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a42:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <HAL_ADC_MspInit+0x1f8>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	202f      	movs	r0, #47	@ 0x2f
 8003a4e:	f002 fa6c 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003a52:	202f      	movs	r0, #47	@ 0x2f
 8003a54:	f002 fa83 	bl	8005f5e <HAL_NVIC_EnableIRQ>
}
 8003a58:	bf00      	nop
 8003a5a:	3780      	adds	r7, #128	@ 0x80
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	48000800 	.word	0x48000800
 8003a68:	200003d8 	.word	0x200003d8
 8003a6c:	40020030 	.word	0x40020030
 8003a70:	50000400 	.word	0x50000400
 8003a74:	48000400 	.word	0x48000400
 8003a78:	20000438 	.word	0x20000438
 8003a7c:	40020044 	.word	0x40020044

08003a80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a34      	ldr	r2, [pc, #208]	@ (8003b60 <HAL_TIM_Base_MspInit+0xe0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d114      	bne.n	8003abc <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a9e:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2019      	movs	r0, #25
 8003ab0:	f002 fa3b 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003ab4:	2019      	movs	r0, #25
 8003ab6:	f002 fa52 	bl	8005f5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003aba:	e04c      	b.n	8003b56 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d114      	bne.n	8003af0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac6:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	4a26      	ldr	r2, [pc, #152]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad2:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	201c      	movs	r0, #28
 8003ae4:	f002 fa21 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ae8:	201c      	movs	r0, #28
 8003aea:	f002 fa38 	bl	8005f5e <HAL_NVIC_EnableIRQ>
}
 8003aee:	e032      	b.n	8003b56 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_TIM_Base_MspInit+0xe8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d114      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003afa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	4a19      	ldr	r2, [pc, #100]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b06:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2032      	movs	r0, #50	@ 0x32
 8003b18:	f002 fa07 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b1c:	2032      	movs	r0, #50	@ 0x32
 8003b1e:	f002 fa1e 	bl	8005f5e <HAL_NVIC_EnableIRQ>
}
 8003b22:	e018      	b.n	8003b56 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a10      	ldr	r2, [pc, #64]	@ (8003b6c <HAL_TIM_Base_MspInit+0xec>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d113      	bne.n	8003b56 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_TIM_Base_MspInit+0xe4>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2019      	movs	r0, #25
 8003b4c:	f002 f9ed 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b50:	2019      	movs	r0, #25
 8003b52:	f002 fa04 	bl	8005f5e <HAL_NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014400 	.word	0x40014400

08003b70 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	@ 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a36      	ldr	r2, [pc, #216]	@ (8003c68 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d131      	bne.n	8003bf6 <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b92:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	4a35      	ldr	r2, [pc, #212]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b9e:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc2:	23c0      	movs	r3, #192	@ 0xc0
 8003bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003be0:	f002 fd0a 	bl	80065f8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	2100      	movs	r1, #0
 8003be8:	201d      	movs	r0, #29
 8003bea:	f002 f99e 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bee:	201d      	movs	r0, #29
 8003bf0:	f002 f9b5 	bl	8005f5e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bf4:	e034      	b.n	8003c60 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003c70 <HAL_TIM_Encoder_MspInit+0x100>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d12f      	bne.n	8003c60 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c18:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1c:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c30:	23c0      	movs	r3, #192	@ 0xc0
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c40:	2302      	movs	r3, #2
 8003c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480a      	ldr	r0, [pc, #40]	@ (8003c74 <HAL_TIM_Encoder_MspInit+0x104>)
 8003c4c:	f002 fcd4 	bl	80065f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	201e      	movs	r0, #30
 8003c56:	f002 f968 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c5a:	201e      	movs	r0, #30
 8003c5c:	f002 f97f 	bl	8005f5e <HAL_NVIC_EnableIRQ>
}
 8003c60:	bf00      	nop
 8003c62:	3730      	adds	r7, #48	@ 0x30
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40000800 	.word	0x40000800
 8003c74:	48000400 	.word	0x48000400

08003c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <HAL_TIM_MspPostInit+0x68>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d11d      	bne.n	8003cd6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_TIM_MspPostInit+0x6c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	4a11      	ldr	r2, [pc, #68]	@ (8003ce4 <HAL_TIM_MspPostInit+0x6c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <HAL_TIM_MspPostInit+0x6c>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003cb2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003cc4:	2306      	movs	r3, #6
 8003cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cd2:	f002 fc91 	bl	80065f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b09e      	sub	sp, #120	@ 0x78
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	2254      	movs	r2, #84	@ 0x54
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f007 ffcf 	bl	800bcac <memset>
  if(huart->Instance==USART2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4d      	ldr	r2, [pc, #308]	@ (8003e48 <HAL_UART_MspInit+0x160>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	f040 8092 	bne.w	8003e3e <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fc2c 	bl	8007584 <HAL_RCCEx_PeriphCLKConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d32:	f7ff fc2b 	bl	800358c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d36:	4b45      	ldr	r3, [pc, #276]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	4a44      	ldr	r2, [pc, #272]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d42:	4b42      	ldr	r3, [pc, #264]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d52:	4a3e      	ldr	r2, [pc, #248]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e4c <HAL_UART_MspInit+0x164>)
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d66:	230c      	movs	r3, #12
 8003d68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d76:	2307      	movs	r3, #7
 8003d78:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d84:	f002 fc38 	bl	80065f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003d88:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003d8a:	4a32      	ldr	r2, [pc, #200]	@ (8003e54 <HAL_UART_MspInit+0x16c>)
 8003d8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003d8e:	4b30      	ldr	r3, [pc, #192]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003d90:	221a      	movs	r2, #26
 8003d92:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d94:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dac:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003db8:	4b25      	ldr	r3, [pc, #148]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003dbe:	4824      	ldr	r0, [pc, #144]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003dc0:	f002 f8e8 	bl	8005f94 <HAL_DMA_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003dca:	f7ff fbdf 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_UART_MspInit+0x168>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003dde:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_UART_MspInit+0x174>)
 8003de0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003de2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003de4:	221b      	movs	r2, #27
 8003de6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003dea:	2210      	movs	r2, #16
 8003dec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003df4:	4b18      	ldr	r3, [pc, #96]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003df6:	2280      	movs	r2, #128	@ 0x80
 8003df8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dfa:	4b17      	ldr	r3, [pc, #92]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e00:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e0c:	4b12      	ldr	r3, [pc, #72]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e12:	4811      	ldr	r0, [pc, #68]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e14:	f002 f8be 	bl	8005f94 <HAL_DMA_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003e1e:	f7ff fbb5 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a0c      	ldr	r2, [pc, #48]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e26:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e28:	4a0b      	ldr	r2, [pc, #44]	@ (8003e58 <HAL_UART_MspInit+0x170>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	2026      	movs	r0, #38	@ 0x26
 8003e34:	f002 f879 	bl	8005f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e38:	2026      	movs	r0, #38	@ 0x26
 8003e3a:	f002 f890 	bl	8005f5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003e3e:	bf00      	nop
 8003e40:	3778      	adds	r7, #120	@ 0x78
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	20000a2c 	.word	0x20000a2c
 8003e54:	40020008 	.word	0x40020008
 8003e58:	20000a8c 	.word	0x20000a8c
 8003e5c:	4002001c 	.word	0x4002001c

08003e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <NMI_Handler+0x4>

08003e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <HardFault_Handler+0x4>

08003e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <MemManage_Handler+0x4>

08003e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7c:	bf00      	nop
 8003e7e:	e7fd      	b.n	8003e7c <BusFault_Handler+0x4>

08003e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <UsageFault_Handler+0x4>

08003e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb6:	f000 f91d 	bl	80040f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ec4:	4802      	ldr	r0, [pc, #8]	@ (8003ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8003ec6:	f002 fa48 	bl	800635a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000a2c 	.word	0x20000a2c

08003ed4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ed8:	4802      	ldr	r0, [pc, #8]	@ (8003ee4 <DMA1_Channel2_IRQHandler+0x10>)
 8003eda:	f002 fa3e 	bl	800635a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000a8c 	.word	0x20000a8c

08003ee8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003eec:	4802      	ldr	r0, [pc, #8]	@ (8003ef8 <DMA1_Channel3_IRQHandler+0x10>)
 8003eee:	f002 fa34 	bl	800635a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200003d8 	.word	0x200003d8

08003efc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f00:	4802      	ldr	r0, [pc, #8]	@ (8003f0c <DMA1_Channel4_IRQHandler+0x10>)
 8003f02:	f002 fa2a 	bl	800635a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000438 	.word	0x20000438

08003f10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f14:	4802      	ldr	r0, [pc, #8]	@ (8003f20 <ADC1_2_IRQHandler+0x10>)
 8003f16:	f000 fddb 	bl	8004ad0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000300 	.word	0x20000300

08003f24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f28:	4803      	ldr	r0, [pc, #12]	@ (8003f38 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003f2a:	f004 fb24 	bl	8008576 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003f2e:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003f30:	f004 fb21 	bl	8008576 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000498 	.word	0x20000498
 8003f3c:	20000894 	.word	0x20000894

08003f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f44:	4802      	ldr	r0, [pc, #8]	@ (8003f50 <TIM2_IRQHandler+0x10>)
 8003f46:	f004 fb16 	bl	8008576 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000564 	.word	0x20000564

08003f54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f58:	4802      	ldr	r0, [pc, #8]	@ (8003f64 <TIM3_IRQHandler+0x10>)
 8003f5a:	f004 fb0c 	bl	8008576 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000630 	.word	0x20000630

08003f68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f6c:	4802      	ldr	r0, [pc, #8]	@ (8003f78 <TIM4_IRQHandler+0x10>)
 8003f6e:	f004 fb02 	bl	8008576 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200006fc 	.word	0x200006fc

08003f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f80:	4802      	ldr	r0, [pc, #8]	@ (8003f8c <USART2_IRQHandler+0x10>)
 8003f82:	f006 f8cb 	bl	800a11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000960 	.word	0x20000960

08003f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003f94:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003f98:	f002 fcfa 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003f9c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fa0:	f002 fcf6 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fa4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fa8:	f002 fcf2 	bl	8006990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <ADC3_IRQHandler+0x10>)
 8003fb6:	f000 fd8b 	bl	8004ad0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000036c 	.word	0x2000036c

08003fc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003fc8:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <TIM5_IRQHandler+0x10>)
 8003fca:	f004 fad4 	bl	8008576 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200007c8 	.word	0x200007c8

08003fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <SystemInit+0x20>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	4a05      	ldr	r2, [pc, #20]	@ (8003ff8 <SystemInit+0x20>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ffc:	480d      	ldr	r0, [pc, #52]	@ (8004034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ffe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004000:	f7ff ffea 	bl	8003fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004004:	480c      	ldr	r0, [pc, #48]	@ (8004038 <LoopForever+0x6>)
  ldr r1, =_edata
 8004006:	490d      	ldr	r1, [pc, #52]	@ (800403c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004008:	4a0d      	ldr	r2, [pc, #52]	@ (8004040 <LoopForever+0xe>)
  movs r3, #0
 800400a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800400c:	e002      	b.n	8004014 <LoopCopyDataInit>

0800400e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004012:	3304      	adds	r3, #4

08004014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004018:	d3f9      	bcc.n	800400e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800401a:	4a0a      	ldr	r2, [pc, #40]	@ (8004044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800401c:	4c0a      	ldr	r4, [pc, #40]	@ (8004048 <LoopForever+0x16>)
  movs r3, #0
 800401e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004020:	e001      	b.n	8004026 <LoopFillZerobss>

08004022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004024:	3204      	adds	r2, #4

08004026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004028:	d3fb      	bcc.n	8004022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800402a:	f007 fe47 	bl	800bcbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800402e:	f7fd ffb5 	bl	8001f9c <main>

08004032 <LoopForever>:

LoopForever:
    b LoopForever
 8004032:	e7fe      	b.n	8004032 <LoopForever>
  ldr   r0, =_estack
 8004034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800403c:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8004040:	0800be08 	.word	0x0800be08
  ldr r2, =_sbss
 8004044:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8004048:	20001808 	.word	0x20001808

0800404c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800404c:	e7fe      	b.n	800404c <ADC4_IRQHandler>

0800404e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f001 ff5b 	bl	8005f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800405e:	2000      	movs	r0, #0
 8004060:	f000 f80e 	bl	8004080 <HAL_InitTick>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	71fb      	strb	r3, [r7, #7]
 800406e:	e001      	b.n	8004074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004070:	f7ff fbe2 	bl	8003838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004074:	79fb      	ldrb	r3, [r7, #7]

}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800408c:	4b16      	ldr	r3, [pc, #88]	@ (80040e8 <HAL_InitTick+0x68>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d022      	beq.n	80040da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004094:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_InitTick+0x6c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <HAL_InitTick+0x68>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 ff66 	bl	8005f7a <HAL_SYSTICK_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d809      	bhi.n	80040ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ba:	2200      	movs	r2, #0
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	f04f 30ff 	mov.w	r0, #4294967295
 80040c2:	f001 ff32 	bl	8005f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040c6:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <HAL_InitTick+0x70>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e007      	b.n	80040de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e004      	b.n	80040de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e001      	b.n	80040de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200002dc 	.word	0x200002dc
 80040ec:	200002d4 	.word	0x200002d4
 80040f0:	200002d8 	.word	0x200002d8

080040f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_IncTick+0x1c>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_IncTick+0x20>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4413      	add	r3, r2
 8004102:	4a03      	ldr	r2, [pc, #12]	@ (8004110 <HAL_IncTick+0x1c>)
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20001804 	.word	0x20001804
 8004114:	200002dc 	.word	0x200002dc

08004118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return uwTick;
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <HAL_GetTick+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20001804 	.word	0x20001804

08004130 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	609a      	str	r2, [r3, #8]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3360      	adds	r3, #96	@ 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <LL_ADC_SetOffset+0x44>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	03fff000 	.word	0x03fff000

080041e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3360      	adds	r3, #96	@ 0x60
 80041ee:	461a      	mov	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3360      	adds	r3, #96	@ 0x60
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	431a      	orrs	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3360      	adds	r3, #96	@ 0x60
 8004252:	461a      	mov	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3360      	adds	r3, #96	@ 0x60
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	431a      	orrs	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	615a      	str	r2, [r3, #20]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3330      	adds	r3, #48	@ 0x30
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	4413      	add	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	211f      	movs	r1, #31
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	401a      	ands	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	f003 011f 	and.w	r1, r3, #31
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3314      	adds	r3, #20
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0e5b      	lsrs	r3, r3, #25
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	4413      	add	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0d1b      	lsrs	r3, r3, #20
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2107      	movs	r1, #7
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	401a      	ands	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	0d1b      	lsrs	r3, r3, #20
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	431a      	orrs	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0318 	and.w	r3, r3, #24
 80043f2:	4908      	ldr	r1, [pc, #32]	@ (8004414 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043f4:	40d9      	lsrs	r1, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	400b      	ands	r3, r1
 80043fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fe:	431a      	orrs	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	0007ffff 	.word	0x0007ffff

08004418 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 031f 	and.w	r3, r3, #31
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6093      	str	r3, [r2, #8]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004488:	d101      	bne.n	800448e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80044ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044d8:	d101      	bne.n	80044de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004500:	f043 0201 	orr.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <LL_ADC_IsEnabled+0x18>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <LL_ADC_IsEnabled+0x1a>
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800454a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d101      	bne.n	800457a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d101      	bne.n	80045a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b089      	sub	sp, #36	@ 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e1a9      	b.n	800491e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff f951 	bl	8003880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff3f 	bl	8004474 <LL_ADC_IsDeepPowerDownEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff25 	bl	8004450 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff5a 	bl	80044c4 <LL_ADC_IsInternalRegulatorEnabled>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d115      	bne.n	8004642 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ff3e 	bl	800449c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004620:	4b9c      	ldr	r3, [pc, #624]	@ (8004894 <HAL_ADC_Init+0x2e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	4a9c      	ldr	r2, [pc, #624]	@ (8004898 <HAL_ADC_Init+0x2e8>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004634:	e002      	b.n	800463c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b01      	subs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f9      	bne.n	8004636 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff3c 	bl	80044c4 <LL_ADC_IsInternalRegulatorEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10d      	bne.n	800466e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff75 	bl	8004562 <LL_ADC_REG_IsConversionOngoing>
 8004678:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 8142 	bne.w	800490c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 813e 	bne.w	800490c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004694:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004698:	f043 0202 	orr.w	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff35 	bl	8004514 <LL_ADC_IsEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d141      	bne.n	8004734 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046b8:	d004      	beq.n	80046c4 <HAL_ADC_Init+0x114>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a77      	ldr	r2, [pc, #476]	@ (800489c <HAL_ADC_Init+0x2ec>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10f      	bne.n	80046e4 <HAL_ADC_Init+0x134>
 80046c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046c8:	f7ff ff24 	bl	8004514 <LL_ADC_IsEnabled>
 80046cc:	4604      	mov	r4, r0
 80046ce:	4873      	ldr	r0, [pc, #460]	@ (800489c <HAL_ADC_Init+0x2ec>)
 80046d0:	f7ff ff20 	bl	8004514 <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4323      	orrs	r3, r4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e012      	b.n	800470a <HAL_ADC_Init+0x15a>
 80046e4:	486e      	ldr	r0, [pc, #440]	@ (80048a0 <HAL_ADC_Init+0x2f0>)
 80046e6:	f7ff ff15 	bl	8004514 <LL_ADC_IsEnabled>
 80046ea:	4604      	mov	r4, r0
 80046ec:	486d      	ldr	r0, [pc, #436]	@ (80048a4 <HAL_ADC_Init+0x2f4>)
 80046ee:	f7ff ff11 	bl	8004514 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	431c      	orrs	r4, r3
 80046f6:	486c      	ldr	r0, [pc, #432]	@ (80048a8 <HAL_ADC_Init+0x2f8>)
 80046f8:	f7ff ff0c 	bl	8004514 <LL_ADC_IsEnabled>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4323      	orrs	r3, r4
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004716:	d004      	beq.n	8004722 <HAL_ADC_Init+0x172>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5f      	ldr	r2, [pc, #380]	@ (800489c <HAL_ADC_Init+0x2ec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_ADC_Init+0x176>
 8004722:	4a62      	ldr	r2, [pc, #392]	@ (80048ac <HAL_ADC_Init+0x2fc>)
 8004724:	e000      	b.n	8004728 <HAL_ADC_Init+0x178>
 8004726:	4a62      	ldr	r2, [pc, #392]	@ (80048b0 <HAL_ADC_Init+0x300>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7ff fcfe 	bl	8004130 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7f5b      	ldrb	r3, [r3, #29]
 8004738:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800473e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004744:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800474a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004752:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800475e:	2b01      	cmp	r3, #1
 8004760:	d106      	bne.n	8004770 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	3b01      	subs	r3, #1
 8004768:	045b      	lsls	r3, r3, #17
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	4b48      	ldr	r3, [pc, #288]	@ (80048b4 <HAL_ADC_Init+0x304>)
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	69b9      	ldr	r1, [r7, #24]
 800479c:	430b      	orrs	r3, r1
 800479e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fee4 	bl	8004588 <LL_ADC_INJ_IsConversionOngoing>
 80047c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d17f      	bne.n	80048c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d17c      	bne.n	80048c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ea:	f023 0302 	bic.w	r3, r3, #2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	69b9      	ldr	r1, [r7, #24]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d017      	beq.n	8004830 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800480e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004818:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800481c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6911      	ldr	r1, [r2, #16]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800482e:	e013      	b.n	8004858 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800483e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004850:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004854:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485e:	2b01      	cmp	r3, #1
 8004860:	d12a      	bne.n	80048b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004878:	4311      	orrs	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004884:	430a      	orrs	r2, r1
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e019      	b.n	80048c8 <HAL_ADC_Init+0x318>
 8004894:	200002d4 	.word	0x200002d4
 8004898:	053e2d63 	.word	0x053e2d63
 800489c:	50000100 	.word	0x50000100
 80048a0:	50000400 	.word	0x50000400
 80048a4:	50000500 	.word	0x50000500
 80048a8:	50000600 	.word	0x50000600
 80048ac:	50000300 	.word	0x50000300
 80048b0:	50000700 	.word	0x50000700
 80048b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10c      	bne.n	80048ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f023 010f 	bic.w	r1, r3, #15
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	1e5a      	subs	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80048e8:	e007      	b.n	80048fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 020f 	bic.w	r2, r2, #15
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	f043 0201 	orr.w	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	65da      	str	r2, [r3, #92]	@ 0x5c
 800490a:	e007      	b.n	800491c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004910:	f043 0210 	orr.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800491c:	7ffb      	ldrb	r3, [r7, #31]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd90      	pop	{r4, r7, pc}
 8004926:	bf00      	nop

08004928 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800493c:	d004      	beq.n	8004948 <HAL_ADC_Start_DMA+0x20>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5a      	ldr	r2, [pc, #360]	@ (8004aac <HAL_ADC_Start_DMA+0x184>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_ADC_Start_DMA+0x24>
 8004948:	4b59      	ldr	r3, [pc, #356]	@ (8004ab0 <HAL_ADC_Start_DMA+0x188>)
 800494a:	e000      	b.n	800494e <HAL_ADC_Start_DMA+0x26>
 800494c:	4b59      	ldr	r3, [pc, #356]	@ (8004ab4 <HAL_ADC_Start_DMA+0x18c>)
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fd62 	bl	8004418 <LL_ADC_GetMultimode>
 8004954:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fe01 	bl	8004562 <LL_ADC_REG_IsConversionOngoing>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 809b 	bne.w	8004a9e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_ADC_Start_DMA+0x4e>
 8004972:	2302      	movs	r3, #2
 8004974:	e096      	b.n	8004aa4 <HAL_ADC_Start_DMA+0x17c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4d      	ldr	r2, [pc, #308]	@ (8004ab8 <HAL_ADC_Start_DMA+0x190>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d008      	beq.n	800499a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b05      	cmp	r3, #5
 8004992:	d002      	beq.n	800499a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b09      	cmp	r3, #9
 8004998:	d17a      	bne.n	8004a90 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 ff60 	bl	8005860 <ADC_Enable>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d16d      	bne.n	8004a86 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	@ (8004aac <HAL_ADC_Start_DMA+0x184>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_ADC_Start_DMA+0xb4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3b      	ldr	r2, [pc, #236]	@ (8004abc <HAL_ADC_Start_DMA+0x194>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d002      	beq.n	80049d8 <HAL_ADC_Start_DMA+0xb0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	e003      	b.n	80049e0 <HAL_ADC_Start_DMA+0xb8>
 80049d8:	4b39      	ldr	r3, [pc, #228]	@ (8004ac0 <HAL_ADC_Start_DMA+0x198>)
 80049da:	e001      	b.n	80049e0 <HAL_ADC_Start_DMA+0xb8>
 80049dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d002      	beq.n	80049ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0a:	f023 0206 	bic.w	r2, r3, #6
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a12:	e002      	b.n	8004a1a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <HAL_ADC_Start_DMA+0x19c>)
 8004a20:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	4a28      	ldr	r2, [pc, #160]	@ (8004ac8 <HAL_ADC_Start_DMA+0x1a0>)
 8004a28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	4a27      	ldr	r2, [pc, #156]	@ (8004acc <HAL_ADC_Start_DMA+0x1a4>)
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	221c      	movs	r2, #28
 8004a38:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0210 	orr.w	r2, r2, #16
 8004a50:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3340      	adds	r3, #64	@ 0x40
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f001 fb37 	bl	80060e4 <HAL_DMA_Start_IT>
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fd5b 	bl	800453a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a84:	e00d      	b.n	8004aa2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004a8e:	e008      	b.n	8004aa2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a9c:	e001      	b.n	8004aa2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	50000100 	.word	0x50000100
 8004ab0:	50000300 	.word	0x50000300
 8004ab4:	50000700 	.word	0x50000700
 8004ab8:	50000600 	.word	0x50000600
 8004abc:	50000500 	.word	0x50000500
 8004ac0:	50000400 	.word	0x50000400
 8004ac4:	0800598d 	.word	0x0800598d
 8004ac8:	08005a65 	.word	0x08005a65
 8004acc:	08005a81 	.word	0x08005a81

08004ad0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004af4:	d004      	beq.n	8004b00 <HAL_ADC_IRQHandler+0x30>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a8e      	ldr	r2, [pc, #568]	@ (8004d34 <HAL_ADC_IRQHandler+0x264>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x34>
 8004b00:	4b8d      	ldr	r3, [pc, #564]	@ (8004d38 <HAL_ADC_IRQHandler+0x268>)
 8004b02:	e000      	b.n	8004b06 <HAL_ADC_IRQHandler+0x36>
 8004b04:	4b8d      	ldr	r3, [pc, #564]	@ (8004d3c <HAL_ADC_IRQHandler+0x26c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fc86 	bl	8004418 <LL_ADC_GetMultimode>
 8004b0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d017      	beq.n	8004b48 <HAL_ADC_IRQHandler+0x78>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 f808 	bl	8005b50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2202      	movs	r2, #2
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <HAL_ADC_IRQHandler+0x8c>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8094 	beq.w	8004c90 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 808e 	beq.w	8004c90 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fb9f 	bl	80042d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d072      	beq.n	8004c82 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a64      	ldr	r2, [pc, #400]	@ (8004d34 <HAL_ADC_IRQHandler+0x264>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_ADC_IRQHandler+0xea>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a65      	ldr	r2, [pc, #404]	@ (8004d40 <HAL_ADC_IRQHandler+0x270>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d002      	beq.n	8004bb6 <HAL_ADC_IRQHandler+0xe6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e003      	b.n	8004bbe <HAL_ADC_IRQHandler+0xee>
 8004bb6:	4b63      	ldr	r3, [pc, #396]	@ (8004d44 <HAL_ADC_IRQHandler+0x274>)
 8004bb8:	e001      	b.n	8004bbe <HAL_ADC_IRQHandler+0xee>
 8004bba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d008      	beq.n	8004bd8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d002      	beq.n	8004bd8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b09      	cmp	r3, #9
 8004bd6:	d104      	bne.n	8004be2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	e014      	b.n	8004c0c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a53      	ldr	r2, [pc, #332]	@ (8004d34 <HAL_ADC_IRQHandler+0x264>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_ADC_IRQHandler+0x130>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a53      	ldr	r2, [pc, #332]	@ (8004d40 <HAL_ADC_IRQHandler+0x270>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d002      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x12c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	e003      	b.n	8004c04 <HAL_ADC_IRQHandler+0x134>
 8004bfc:	4b51      	ldr	r3, [pc, #324]	@ (8004d44 <HAL_ADC_IRQHandler+0x274>)
 8004bfe:	e001      	b.n	8004c04 <HAL_ADC_IRQHandler+0x134>
 8004c00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d135      	bne.n	8004c82 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d12e      	bne.n	8004c82 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fc9a 	bl	8004562 <LL_ADC_REG_IsConversionOngoing>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11a      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020c 	bic.w	r2, r2, #12
 8004c42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d112      	bne.n	8004c82 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c60:	f043 0201 	orr.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c68:	e00b      	b.n	8004c82 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6e:	f043 0210 	orr.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f984 	bl	8004f90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	220c      	movs	r2, #12
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <HAL_ADC_IRQHandler+0x1d4>
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80b3 	beq.w	8004e16 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80ad 	beq.w	8004e16 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fb3a 	bl	8004352 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004cde:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff faf5 	bl	80042d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <HAL_ADC_IRQHandler+0x264>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_ADC_IRQHandler+0x23a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <HAL_ADC_IRQHandler+0x270>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d002      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x236>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	e003      	b.n	8004d0e <HAL_ADC_IRQHandler+0x23e>
 8004d06:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <HAL_ADC_IRQHandler+0x274>)
 8004d08:	e001      	b.n	8004d0e <HAL_ADC_IRQHandler+0x23e>
 8004d0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d008      	beq.n	8004d28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b06      	cmp	r3, #6
 8004d20:	d002      	beq.n	8004d28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b07      	cmp	r3, #7
 8004d26:	d10f      	bne.n	8004d48 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	e01f      	b.n	8004d72 <HAL_ADC_IRQHandler+0x2a2>
 8004d32:	bf00      	nop
 8004d34:	50000100 	.word	0x50000100
 8004d38:	50000300 	.word	0x50000300
 8004d3c:	50000700 	.word	0x50000700
 8004d40:	50000500 	.word	0x50000500
 8004d44:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a8b      	ldr	r2, [pc, #556]	@ (8004f7c <HAL_ADC_IRQHandler+0x4ac>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_ADC_IRQHandler+0x296>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a8a      	ldr	r2, [pc, #552]	@ (8004f80 <HAL_ADC_IRQHandler+0x4b0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d002      	beq.n	8004d62 <HAL_ADC_IRQHandler+0x292>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	e003      	b.n	8004d6a <HAL_ADC_IRQHandler+0x29a>
 8004d62:	4b88      	ldr	r3, [pc, #544]	@ (8004f84 <HAL_ADC_IRQHandler+0x4b4>)
 8004d64:	e001      	b.n	8004d6a <HAL_ADC_IRQHandler+0x29a>
 8004d66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d047      	beq.n	8004e08 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x2c2>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03f      	beq.n	8004e08 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13a      	bne.n	8004e08 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	d133      	bne.n	8004e08 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d12e      	bne.n	8004e08 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fbea 	bl	8004588 <LL_ADC_INJ_IsConversionOngoing>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11a      	bne.n	8004df0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dc8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d112      	bne.n	8004e08 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dee:	e00b      	b.n	8004e08 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df4:	f043 0210 	orr.w	r2, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fe79 	bl	8005b00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2260      	movs	r2, #96	@ 0x60
 8004e14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d011      	beq.n	8004e44 <HAL_ADC_IRQHandler+0x374>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8be 	bl	8004fb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2280      	movs	r2, #128	@ 0x80
 8004e42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <HAL_ADC_IRQHandler+0x3a4>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fe5f 	bl	8005b28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d012      	beq.n	8004ea4 <HAL_ADC_IRQHandler+0x3d4>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fe51 	bl	8005b3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d043      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x466>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03e      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec4:	e021      	b.n	8004f0a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ed4:	d004      	beq.n	8004ee0 <HAL_ADC_IRQHandler+0x410>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a28      	ldr	r2, [pc, #160]	@ (8004f7c <HAL_ADC_IRQHandler+0x4ac>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADC_IRQHandler+0x414>
 8004ee0:	4b29      	ldr	r3, [pc, #164]	@ (8004f88 <HAL_ADC_IRQHandler+0x4b8>)
 8004ee2:	e000      	b.n	8004ee6 <HAL_ADC_IRQHandler+0x416>
 8004ee4:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <HAL_ADC_IRQHandler+0x4bc>)
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff faa4 	bl	8004434 <LL_ADC_GetMultiDMATransfer>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	e008      	b.n	8004f0a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10e      	bne.n	8004f2e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	f043 0202 	orr.w	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f84f 	bl	8004fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_ADC_IRQHandler+0x4a2>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d013      	beq.n	8004f72 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fdd1 	bl	8005b14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004f72:	bf00      	nop
 8004f74:	3728      	adds	r7, #40	@ 0x28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	50000100 	.word	0x50000100
 8004f80:	50000500 	.word	0x50000500
 8004f84:	50000400 	.word	0x50000400
 8004f88:	50000300 	.word	0x50000300
 8004f8c:	50000700 	.word	0x50000700

08004f90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0b6      	sub	sp, #216	@ 0xd8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x24>
 8004ffe:	2302      	movs	r3, #2
 8005000:	f000 bc13 	b.w	800582a <HAL_ADC_ConfigChannel+0x84a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff faa6 	bl	8004562 <LL_ADC_REG_IsConversionOngoing>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 83f3 	bne.w	8005804 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7ff f965 	bl	80042fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fa94 	bl	8004562 <LL_ADC_REG_IsConversionOngoing>
 800503a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff faa0 	bl	8004588 <LL_ADC_INJ_IsConversionOngoing>
 8005048:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800504c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005050:	2b00      	cmp	r3, #0
 8005052:	f040 81d9 	bne.w	8005408 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 81d4 	bne.w	8005408 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005068:	d10f      	bne.n	800508a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	4619      	mov	r1, r3
 8005076:	f7ff f97f 	bl	8004378 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f913 	bl	80042ae <LL_ADC_SetSamplingTimeCommonConfig>
 8005088:	e00e      	b.n	80050a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	461a      	mov	r2, r3
 8005098:	f7ff f96e 	bl	8004378 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff f903 	bl	80042ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	08db      	lsrs	r3, r3, #3
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d022      	beq.n	8005110 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6919      	ldr	r1, [r3, #16]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050da:	f7ff f85d 	bl	8004198 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6919      	ldr	r1, [r3, #16]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7ff f8a9 	bl	8004242 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x126>
 8005100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005104:	e000      	b.n	8005108 <HAL_ADC_ConfigChannel+0x128>
 8005106:	2300      	movs	r3, #0
 8005108:	461a      	mov	r2, r3
 800510a:	f7ff f8b5 	bl	8004278 <LL_ADC_SetOffsetSaturation>
 800510e:	e17b      	b.n	8005408 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff f862 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 800511c:	4603      	mov	r3, r0
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <HAL_ADC_ConfigChannel+0x15c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff f857 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 8005132:	4603      	mov	r3, r0
 8005134:	0e9b      	lsrs	r3, r3, #26
 8005136:	f003 021f 	and.w	r2, r3, #31
 800513a:	e01e      	b.n	800517a <HAL_ADC_ConfigChannel+0x19a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f84c 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 8005148:	4603      	mov	r3, r0
 800514a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005152:	fa93 f3a3 	rbit	r3, r3
 8005156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800515a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800515e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800516a:	2320      	movs	r3, #32
 800516c:	e004      	b.n	8005178 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800516e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x1b2>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	0e9b      	lsrs	r3, r3, #26
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	e018      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x1e4>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80051a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80051ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80051b6:	2320      	movs	r3, #32
 80051b8:	e004      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80051ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d106      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff f81b 	bl	800420c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe ffff 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x222>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe fff4 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	0e9b      	lsrs	r3, r3, #26
 80051fc:	f003 021f 	and.w	r2, r3, #31
 8005200:	e01e      	b.n	8005240 <HAL_ADC_ConfigChannel+0x260>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe ffe9 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 800520e:	4603      	mov	r3, r0
 8005210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005230:	2320      	movs	r3, #32
 8005232:	e004      	b.n	800523e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x278>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	0e9b      	lsrs	r3, r3, #26
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	e018      	b.n	800528a <HAL_ADC_ConfigChannel+0x2aa>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005264:	fa93 f3a3 	rbit	r3, r3
 8005268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800526c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800527c:	2320      	movs	r3, #32
 800527e:	e004      	b.n	800528a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800528a:	429a      	cmp	r2, r3
 800528c:	d106      	bne.n	800529c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	2101      	movs	r1, #1
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe ffb8 	bl	800420c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe ff9c 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x2e8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe ff91 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	0e9b      	lsrs	r3, r3, #26
 80052c2:	f003 021f 	and.w	r2, r3, #31
 80052c6:	e01e      	b.n	8005306 <HAL_ADC_ConfigChannel+0x326>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2102      	movs	r1, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe ff86 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80052e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80052ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80052f6:	2320      	movs	r3, #32
 80052f8:	e004      	b.n	8005304 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80052fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <HAL_ADC_ConfigChannel+0x33e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	e016      	b.n	800534c <HAL_ADC_ConfigChannel+0x36c>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005330:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800533e:	2320      	movs	r3, #32
 8005340:	e004      	b.n	800534c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800534c:	429a      	cmp	r2, r3
 800534e:	d106      	bne.n	800535e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2200      	movs	r2, #0
 8005356:	2102      	movs	r1, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe ff57 	bl	800420c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2103      	movs	r1, #3
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe ff3b 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 800536a:	4603      	mov	r3, r0
 800536c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <HAL_ADC_ConfigChannel+0x3aa>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2103      	movs	r1, #3
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe ff30 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 8005380:	4603      	mov	r3, r0
 8005382:	0e9b      	lsrs	r3, r3, #26
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	e017      	b.n	80053ba <HAL_ADC_ConfigChannel+0x3da>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2103      	movs	r1, #3
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe ff25 	bl	80041e0 <LL_ADC_GetOffsetChannel>
 8005396:	4603      	mov	r3, r0
 8005398:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80053a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80053a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80053ac:	2320      	movs	r3, #32
 80053ae:	e003      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80053b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b2:	fab3 f383 	clz	r3, r3
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_ADC_ConfigChannel+0x3f2>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	0e9b      	lsrs	r3, r3, #26
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	e011      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x416>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80053e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80053e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80053ea:	2320      	movs	r3, #32
 80053ec:	e003      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80053ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d106      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	2103      	movs	r1, #3
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe ff02 	bl	800420c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff f881 	bl	8004514 <LL_ADC_IsEnabled>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 813d 	bne.w	8005694 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	461a      	mov	r2, r3
 8005428:	f7fe ffd2 	bl	80043d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4aa2      	ldr	r2, [pc, #648]	@ (80056bc <HAL_ADC_ConfigChannel+0x6dc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f040 812e 	bne.w	8005694 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x480>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0e9b      	lsrs	r3, r3, #26
 800544e:	3301      	adds	r3, #1
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2b09      	cmp	r3, #9
 8005456:	bf94      	ite	ls
 8005458:	2301      	movls	r3, #1
 800545a:	2300      	movhi	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e019      	b.n	8005494 <HAL_ADC_ConfigChannel+0x4b4>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800546e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005470:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005478:	2320      	movs	r3, #32
 800547a:	e003      	b.n	8005484 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800547c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	3301      	adds	r3, #1
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2b09      	cmp	r3, #9
 800548c:	bf94      	ite	ls
 800548e:	2301      	movls	r3, #1
 8005490:	2300      	movhi	r3, #0
 8005492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005494:	2b00      	cmp	r3, #0
 8005496:	d079      	beq.n	800558c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x4d4>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	0e9b      	lsrs	r3, r3, #26
 80054aa:	3301      	adds	r3, #1
 80054ac:	069b      	lsls	r3, r3, #26
 80054ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054b2:	e015      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x500>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80054c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80054c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80054cc:	2320      	movs	r3, #32
 80054ce:	e003      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80054d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	069b      	lsls	r3, r3, #26
 80054dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x520>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0e9b      	lsrs	r3, r3, #26
 80054f2:	3301      	adds	r3, #1
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2101      	movs	r1, #1
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	e017      	b.n	8005530 <HAL_ADC_ConfigChannel+0x550>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800550e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005510:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005518:	2320      	movs	r3, #32
 800551a:	e003      	b.n	8005524 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800551c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	3301      	adds	r3, #1
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	ea42 0103 	orr.w	r1, r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x576>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0e9b      	lsrs	r3, r3, #26
 8005546:	3301      	adds	r3, #1
 8005548:	f003 021f 	and.w	r2, r3, #31
 800554c:	4613      	mov	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4413      	add	r3, r2
 8005552:	051b      	lsls	r3, r3, #20
 8005554:	e018      	b.n	8005588 <HAL_ADC_ConfigChannel+0x5a8>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555e:	fa93 f3a3 	rbit	r3, r3
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800556e:	2320      	movs	r3, #32
 8005570:	e003      	b.n	800557a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f003 021f 	and.w	r2, r3, #31
 8005580:	4613      	mov	r3, r2
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4413      	add	r3, r2
 8005586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005588:	430b      	orrs	r3, r1
 800558a:	e07e      	b.n	800568a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x5c8>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0e9b      	lsrs	r3, r3, #26
 800559e:	3301      	adds	r3, #1
 80055a0:	069b      	lsls	r3, r3, #26
 80055a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055a6:	e015      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x5f4>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	fa93 f3a3 	rbit	r3, r3
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80055c0:	2320      	movs	r3, #32
 80055c2:	e003      	b.n	80055cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	3301      	adds	r3, #1
 80055ce:	069b      	lsls	r3, r3, #26
 80055d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x614>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	0e9b      	lsrs	r3, r3, #26
 80055e6:	3301      	adds	r3, #1
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	e017      	b.n	8005624 <HAL_ADC_ConfigChannel+0x644>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	fa93 f3a3 	rbit	r3, r3
 8005600:	61fb      	str	r3, [r7, #28]
  return result;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800560c:	2320      	movs	r3, #32
 800560e:	e003      	b.n	8005618 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	3301      	adds	r3, #1
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	ea42 0103 	orr.w	r1, r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10d      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x670>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0e9b      	lsrs	r3, r3, #26
 800563a:	3301      	adds	r3, #1
 800563c:	f003 021f 	and.w	r2, r3, #31
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	3b1e      	subs	r3, #30
 8005648:	051b      	lsls	r3, r3, #20
 800564a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800564e:	e01b      	b.n	8005688 <HAL_ADC_ConfigChannel+0x6a8>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	613b      	str	r3, [r7, #16]
  return result;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005668:	2320      	movs	r3, #32
 800566a:	e003      	b.n	8005674 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	3301      	adds	r3, #1
 8005676:	f003 021f 	and.w	r2, r3, #31
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	3b1e      	subs	r3, #30
 8005682:	051b      	lsls	r3, r3, #20
 8005684:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005688:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800568e:	4619      	mov	r1, r3
 8005690:	f7fe fe72 	bl	8004378 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80be 	beq.w	800581e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056aa:	d004      	beq.n	80056b6 <HAL_ADC_ConfigChannel+0x6d6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10a      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x6ec>
 80056b6:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80056b8:	e009      	b.n	80056ce <HAL_ADC_ConfigChannel+0x6ee>
 80056ba:	bf00      	nop
 80056bc:	407f0000 	.word	0x407f0000
 80056c0:	80080000 	.word	0x80080000
 80056c4:	50000100 	.word	0x50000100
 80056c8:	50000300 	.word	0x50000300
 80056cc:	4b59      	ldr	r3, [pc, #356]	@ (8005834 <HAL_ADC_ConfigChannel+0x854>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fd54 	bl	800417c <LL_ADC_GetCommonPathInternalCh>
 80056d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a56      	ldr	r2, [pc, #344]	@ (8005838 <HAL_ADC_ConfigChannel+0x858>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_ADC_ConfigChannel+0x70c>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a55      	ldr	r2, [pc, #340]	@ (800583c <HAL_ADC_ConfigChannel+0x85c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d13a      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d134      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005700:	d005      	beq.n	800570e <HAL_ADC_ConfigChannel+0x72e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <HAL_ADC_ConfigChannel+0x860>)
 8005708:	4293      	cmp	r3, r2
 800570a:	f040 8085 	bne.w	8005818 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005716:	d004      	beq.n	8005722 <HAL_ADC_ConfigChannel+0x742>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a49      	ldr	r2, [pc, #292]	@ (8005844 <HAL_ADC_ConfigChannel+0x864>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x746>
 8005722:	4a49      	ldr	r2, [pc, #292]	@ (8005848 <HAL_ADC_ConfigChannel+0x868>)
 8005724:	e000      	b.n	8005728 <HAL_ADC_ConfigChannel+0x748>
 8005726:	4a43      	ldr	r2, [pc, #268]	@ (8005834 <HAL_ADC_ConfigChannel+0x854>)
 8005728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800572c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe fd0f 	bl	8004156 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005738:	4b44      	ldr	r3, [pc, #272]	@ (800584c <HAL_ADC_ConfigChannel+0x86c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	4a44      	ldr	r2, [pc, #272]	@ (8005850 <HAL_ADC_ConfigChannel+0x870>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	099b      	lsrs	r3, r3, #6
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005752:	e002      	b.n	800575a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f9      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005760:	e05a      	b.n	8005818 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3b      	ldr	r2, [pc, #236]	@ (8005854 <HAL_ADC_ConfigChannel+0x874>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d125      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800576c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11f      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a31      	ldr	r2, [pc, #196]	@ (8005844 <HAL_ADC_ConfigChannel+0x864>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d104      	bne.n	800578c <HAL_ADC_ConfigChannel+0x7ac>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a34      	ldr	r2, [pc, #208]	@ (8005858 <HAL_ADC_ConfigChannel+0x878>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d047      	beq.n	800581c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005794:	d004      	beq.n	80057a0 <HAL_ADC_ConfigChannel+0x7c0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <HAL_ADC_ConfigChannel+0x864>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x7c4>
 80057a0:	4a29      	ldr	r2, [pc, #164]	@ (8005848 <HAL_ADC_ConfigChannel+0x868>)
 80057a2:	e000      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x7c6>
 80057a4:	4a23      	ldr	r2, [pc, #140]	@ (8005834 <HAL_ADC_ConfigChannel+0x854>)
 80057a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f7fe fcd0 	bl	8004156 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057b6:	e031      	b.n	800581c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a27      	ldr	r2, [pc, #156]	@ (800585c <HAL_ADC_ConfigChannel+0x87c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d12d      	bne.n	800581e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d127      	bne.n	800581e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <HAL_ADC_ConfigChannel+0x864>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e0:	d004      	beq.n	80057ec <HAL_ADC_ConfigChannel+0x80c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <HAL_ADC_ConfigChannel+0x864>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x810>
 80057ec:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <HAL_ADC_ConfigChannel+0x868>)
 80057ee:	e000      	b.n	80057f2 <HAL_ADC_ConfigChannel+0x812>
 80057f0:	4a10      	ldr	r2, [pc, #64]	@ (8005834 <HAL_ADC_ConfigChannel+0x854>)
 80057f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7fe fcaa 	bl	8004156 <LL_ADC_SetCommonPathInternalCh>
 8005802:	e00c      	b.n	800581e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005816:	e002      	b.n	800581e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800581c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005826:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800582a:	4618      	mov	r0, r3
 800582c:	37d8      	adds	r7, #216	@ 0xd8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	50000700 	.word	0x50000700
 8005838:	c3210000 	.word	0xc3210000
 800583c:	90c00010 	.word	0x90c00010
 8005840:	50000600 	.word	0x50000600
 8005844:	50000100 	.word	0x50000100
 8005848:	50000300 	.word	0x50000300
 800584c:	200002d4 	.word	0x200002d4
 8005850:	053e2d63 	.word	0x053e2d63
 8005854:	c7520000 	.word	0xc7520000
 8005858:	50000500 	.word	0x50000500
 800585c:	cb840000 	.word	0xcb840000

08005860 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe fe4f 	bl	8004514 <LL_ADC_IsEnabled>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d176      	bne.n	800596a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	4b3c      	ldr	r3, [pc, #240]	@ (8005974 <ADC_Enable+0x114>)
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00d      	beq.n	80058a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588e:	f043 0210 	orr.w	r2, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589a:	f043 0201 	orr.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e062      	b.n	800596c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fe1e 	bl	80044ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058b8:	d004      	beq.n	80058c4 <ADC_Enable+0x64>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2e      	ldr	r2, [pc, #184]	@ (8005978 <ADC_Enable+0x118>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d101      	bne.n	80058c8 <ADC_Enable+0x68>
 80058c4:	4b2d      	ldr	r3, [pc, #180]	@ (800597c <ADC_Enable+0x11c>)
 80058c6:	e000      	b.n	80058ca <ADC_Enable+0x6a>
 80058c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005980 <ADC_Enable+0x120>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fc56 	bl	800417c <LL_ADC_GetCommonPathInternalCh>
 80058d0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80058d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d013      	beq.n	8005902 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058da:	4b2a      	ldr	r3, [pc, #168]	@ (8005984 <ADC_Enable+0x124>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	4a29      	ldr	r2, [pc, #164]	@ (8005988 <ADC_Enable+0x128>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	099b      	lsrs	r3, r3, #6
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80058f4:	e002      	b.n	80058fc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f9      	bne.n	80058f6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005902:	f7fe fc09 	bl	8004118 <HAL_GetTick>
 8005906:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005908:	e028      	b.n	800595c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fe00 	bl	8004514 <LL_ADC_IsEnabled>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fde4 	bl	80044ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005924:	f7fe fbf8 	bl	8004118 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d914      	bls.n	800595c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d00d      	beq.n	800595c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005944:	f043 0210 	orr.w	r2, r3, #16
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d1cf      	bne.n	800590a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	8000003f 	.word	0x8000003f
 8005978:	50000100 	.word	0x50000100
 800597c:	50000300 	.word	0x50000300
 8005980:	50000700 	.word	0x50000700
 8005984:	200002d4 	.word	0x200002d4
 8005988:	053e2d63 	.word	0x053e2d63

0800598c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d14b      	bne.n	8005a3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d021      	beq.n	8005a04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fc85 	bl	80042d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d032      	beq.n	8005a36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d12b      	bne.n	8005a36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11f      	bne.n	8005a36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a02:	e018      	b.n	8005a36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d111      	bne.n	8005a36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff faaa 	bl	8004f90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a3c:	e00e      	b.n	8005a5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fabe 	bl	8004fcc <HAL_ADC_ErrorCallback>
}
 8005a50:	e004      	b.n	8005a5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fa96 	bl	8004fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fa90 	bl	8004fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <LL_ADC_IsEnabled>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <LL_ADC_IsEnabled+0x18>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <LL_ADC_IsEnabled+0x1a>
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_ADC_REG_IsConversionOngoing>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d101      	bne.n	8005af2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b0a1      	sub	sp, #132	@ 0x84
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e0e7      	b.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b9a:	d102      	bne.n	8005ba2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	e009      	b.n	8005bb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d102      	bne.n	8005bb2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005bac:	4b6d      	ldr	r3, [pc, #436]	@ (8005d64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	e001      	b.n	8005bb6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc0:	f043 0220 	orr.w	r2, r3, #32
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0be      	b.n	8005d52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff7f 	bl	8005ada <LL_ADC_REG_IsConversionOngoing>
 8005bdc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff ff79 	bl	8005ada <LL_ADC_REG_IsConversionOngoing>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 80a0 	bne.w	8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 809c 	bne.w	8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c00:	d004      	beq.n	8005c0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a55      	ldr	r2, [pc, #340]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005c0c:	4b56      	ldr	r3, [pc, #344]	@ (8005d68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005c0e:	e000      	b.n	8005c12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005c10:	4b56      	ldr	r3, [pc, #344]	@ (8005d6c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005c12:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d04b      	beq.n	8005cb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c2e:	035b      	lsls	r3, r3, #13
 8005c30:	430b      	orrs	r3, r1
 8005c32:	431a      	orrs	r2, r3
 8005c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c40:	d004      	beq.n	8005c4c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a45      	ldr	r2, [pc, #276]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10f      	bne.n	8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005c4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c50:	f7ff ff30 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005c54:	4604      	mov	r4, r0
 8005c56:	4841      	ldr	r0, [pc, #260]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c58:	f7ff ff2c 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4323      	orrs	r3, r4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e012      	b.n	8005c92 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c6c:	483c      	ldr	r0, [pc, #240]	@ (8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c6e:	f7ff ff21 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005c72:	4604      	mov	r4, r0
 8005c74:	483b      	ldr	r0, [pc, #236]	@ (8005d64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c76:	f7ff ff1d 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	431c      	orrs	r4, r3
 8005c7e:	483c      	ldr	r0, [pc, #240]	@ (8005d70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005c80:	f7ff ff18 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005c84:	4603      	mov	r3, r0
 8005c86:	4323      	orrs	r3, r4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d056      	beq.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c9e:	f023 030f 	bic.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	6811      	ldr	r1, [r2, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	6892      	ldr	r2, [r2, #8]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	431a      	orrs	r2, r3
 8005cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb2:	e047      	b.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cbe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cc8:	d004      	beq.n	8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a23      	ldr	r2, [pc, #140]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005cd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cd8:	f7ff feec 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	481f      	ldr	r0, [pc, #124]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ce0:	f7ff fee8 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4323      	orrs	r3, r4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e012      	b.n	8005d1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005cf4:	481a      	ldr	r0, [pc, #104]	@ (8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005cf6:	f7ff fedd 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4819      	ldr	r0, [pc, #100]	@ (8005d64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005cfe:	f7ff fed9 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005d02:	4603      	mov	r3, r0
 8005d04:	431c      	orrs	r4, r3
 8005d06:	481a      	ldr	r0, [pc, #104]	@ (8005d70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d08:	f7ff fed4 	bl	8005ab4 <LL_ADC_IsEnabled>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4323      	orrs	r3, r4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d26:	f023 030f 	bic.w	r3, r3, #15
 8005d2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d2e:	e009      	b.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005d42:	e000      	b.n	8005d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3784      	adds	r7, #132	@ 0x84
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	50000100 	.word	0x50000100
 8005d60:	50000400 	.word	0x50000400
 8005d64:	50000500 	.word	0x50000500
 8005d68:	50000300 	.word	0x50000300
 8005d6c:	50000700 	.word	0x50000700
 8005d70:	50000600 	.word	0x50000600

08005d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d84:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <__NVIC_SetPriorityGrouping+0x44>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d90:	4013      	ands	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <__NVIC_SetPriorityGrouping+0x44>)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	60d3      	str	r3, [r2, #12]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	e000ed00 	.word	0xe000ed00

08005dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dc0:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	f003 0307 	and.w	r3, r3, #7
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000ed00 	.word	0xe000ed00

08005dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	db0b      	blt.n	8005e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	f003 021f 	and.w	r2, r3, #31
 8005df0:	4907      	ldr	r1, [pc, #28]	@ (8005e10 <__NVIC_EnableIRQ+0x38>)
 8005df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	2001      	movs	r0, #1
 8005dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	e000e100 	.word	0xe000e100

08005e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	6039      	str	r1, [r7, #0]
 8005e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	db0a      	blt.n	8005e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	490c      	ldr	r1, [pc, #48]	@ (8005e60 <__NVIC_SetPriority+0x4c>)
 8005e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e32:	0112      	lsls	r2, r2, #4
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	440b      	add	r3, r1
 8005e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e3c:	e00a      	b.n	8005e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4908      	ldr	r1, [pc, #32]	@ (8005e64 <__NVIC_SetPriority+0x50>)
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	0112      	lsls	r2, r2, #4
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	440b      	add	r3, r1
 8005e52:	761a      	strb	r2, [r3, #24]
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	e000e100 	.word	0xe000e100
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	@ 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f1c3 0307 	rsb	r3, r3, #7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	bf28      	it	cs
 8005e86:	2304      	movcs	r3, #4
 8005e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	2b06      	cmp	r3, #6
 8005e90:	d902      	bls.n	8005e98 <NVIC_EncodePriority+0x30>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3b03      	subs	r3, #3
 8005e96:	e000      	b.n	8005e9a <NVIC_EncodePriority+0x32>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	401a      	ands	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	43d9      	mvns	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	4313      	orrs	r3, r2
         );
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3724      	adds	r7, #36	@ 0x24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee0:	d301      	bcc.n	8005ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e00f      	b.n	8005f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <SysTick_Config+0x40>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eee:	210f      	movs	r1, #15
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	f7ff ff8e 	bl	8005e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <SysTick_Config+0x40>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005efe:	4b04      	ldr	r3, [pc, #16]	@ (8005f10 <SysTick_Config+0x40>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010

08005f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ff29 	bl	8005d74 <__NVIC_SetPriorityGrouping>
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	4603      	mov	r3, r0
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f38:	f7ff ff40 	bl	8005dbc <__NVIC_GetPriorityGrouping>
 8005f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f7ff ff90 	bl	8005e68 <NVIC_EncodePriority>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ff5f 	bl	8005e14 <__NVIC_SetPriority>
}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	4603      	mov	r3, r0
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ff33 	bl	8005dd8 <__NVIC_EnableIRQ>
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ffa4 	bl	8005ed0 <SysTick_Config>
 8005f88:	4603      	mov	r3, r0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e08d      	b.n	80060c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	4b47      	ldr	r3, [pc, #284]	@ (80060cc <HAL_DMA_Init+0x138>)
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d80f      	bhi.n	8005fd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4b45      	ldr	r3, [pc, #276]	@ (80060d0 <HAL_DMA_Init+0x13c>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	4a45      	ldr	r2, [pc, #276]	@ (80060d4 <HAL_DMA_Init+0x140>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	009a      	lsls	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a42      	ldr	r2, [pc, #264]	@ (80060d8 <HAL_DMA_Init+0x144>)
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd0:	e00e      	b.n	8005ff0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b40      	ldr	r3, [pc, #256]	@ (80060dc <HAL_DMA_Init+0x148>)
 8005fda:	4413      	add	r3, r2
 8005fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80060d4 <HAL_DMA_Init+0x140>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	009a      	lsls	r2, r3, #2
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a3c      	ldr	r2, [pc, #240]	@ (80060e0 <HAL_DMA_Init+0x14c>)
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa76 	bl	8006534 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006050:	d102      	bne.n	8006058 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800606c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d010      	beq.n	8006098 <HAL_DMA_Init+0x104>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d80c      	bhi.n	8006098 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa96 	bl	80065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	e008      	b.n	80060aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40020407 	.word	0x40020407
 80060d0:	bffdfff8 	.word	0xbffdfff8
 80060d4:	cccccccd 	.word	0xcccccccd
 80060d8:	40020000 	.word	0x40020000
 80060dc:	bffdfbf8 	.word	0xbffdfbf8
 80060e0:	40020400 	.word	0x40020400

080060e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Start_IT+0x20>
 8006100:	2302      	movs	r3, #2
 8006102:	e066      	b.n	80061d2 <HAL_DMA_Start_IT+0xee>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d155      	bne.n	80061c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f9bb 	bl	80064b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 020e 	orr.w	r2, r2, #14
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e00f      	b.n	800617c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 020a 	orr.w	r2, r2, #10
 800617a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006198:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e005      	b.n	80061d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
 80061ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d005      	beq.n	80061fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2204      	movs	r2, #4
 80061f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	e037      	b.n	800626e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 020e 	bic.w	r2, r2, #14
 800620c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800621c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f003 021f 	and.w	r2, r3, #31
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f202 	lsl.w	r2, r1, r2
 8006240:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800624a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006262:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800626c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800627e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d00d      	beq.n	80062c0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2204      	movs	r2, #4
 80062a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
 80062be:	e047      	b.n	8006350 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 020e 	bic.w	r2, r2, #14
 80062ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0201 	bic.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	f003 021f 	and.w	r2, r3, #31
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006302:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800630c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006324:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800632e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
    }
  }
  return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2204      	movs	r2, #4
 800637c:	409a      	lsls	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d026      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x7a>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d021      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0204 	bic.w	r2, r2, #4
 80063ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f003 021f 	and.w	r2, r3, #31
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	2104      	movs	r1, #4
 80063bc:	fa01 f202 	lsl.w	r2, r1, r2
 80063c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d071      	beq.n	80064ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063d2:	e06c      	b.n	80064ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2202      	movs	r2, #2
 80063de:	409a      	lsls	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02e      	beq.n	8006446 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d029      	beq.n	8006446 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 020a 	bic.w	r2, r2, #10
 800640e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641c:	f003 021f 	and.w	r2, r3, #31
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	2102      	movs	r1, #2
 8006426:	fa01 f202 	lsl.w	r2, r1, r2
 800642a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d038      	beq.n	80064ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006444:	e033      	b.n	80064ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2208      	movs	r2, #8
 8006450:	409a      	lsls	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4013      	ands	r3, r2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02a      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d025      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 020e 	bic.w	r2, r2, #14
 8006472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	f003 021f 	and.w	r2, r3, #31
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	2101      	movs	r1, #1
 8006482:	fa01 f202 	lsl.w	r2, r1, r2
 8006486:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
}
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e6:	f003 021f 	and.w	r2, r3, #31
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f202 	lsl.w	r2, r1, r2
 80064f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b10      	cmp	r3, #16
 8006504:	d108      	bne.n	8006518 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006516:	e007      	b.n	8006528 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	4b16      	ldr	r3, [pc, #88]	@ (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006544:	429a      	cmp	r2, r3
 8006546:	d802      	bhi.n	800654e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006548:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e001      	b.n	8006552 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800654e:	4b15      	ldr	r3, [pc, #84]	@ (80065a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006550:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	3b08      	subs	r3, #8
 800655e:	4a12      	ldr	r2, [pc, #72]	@ (80065a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656c:	089b      	lsrs	r3, r3, #2
 800656e:	009a      	lsls	r2, r3, #2
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a0b      	ldr	r2, [pc, #44]	@ (80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2201      	movs	r2, #1
 8006588:	409a      	lsls	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40020407 	.word	0x40020407
 80065a0:	40020800 	.word	0x40020800
 80065a4:	40020820 	.word	0x40020820
 80065a8:	cccccccd 	.word	0xcccccccd
 80065ac:	40020880 	.word	0x40020880

080065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a08      	ldr	r2, [pc, #32]	@ (80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2201      	movs	r2, #1
 80065de:	409a      	lsls	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	1000823f 	.word	0x1000823f
 80065f4:	40020940 	.word	0x40020940

080065f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006606:	e15a      	b.n	80068be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	2101      	movs	r1, #1
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 814c 	beq.w	80068b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d005      	beq.n	8006638 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006634:	2b02      	cmp	r3, #2
 8006636:	d130      	bne.n	800669a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	2203      	movs	r2, #3
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4013      	ands	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800666e:	2201      	movs	r2, #1
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4013      	ands	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	091b      	lsrs	r3, r3, #4
 8006684:	f003 0201 	and.w	r2, r3, #1
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d017      	beq.n	80066d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	2203      	movs	r2, #3
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d123      	bne.n	800672a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	08da      	lsrs	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3208      	adds	r2, #8
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	220f      	movs	r2, #15
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43db      	mvns	r3, r3
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4013      	ands	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	08da      	lsrs	r2, r3, #3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3208      	adds	r2, #8
 8006724:	6939      	ldr	r1, [r7, #16]
 8006726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	2203      	movs	r2, #3
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	43db      	mvns	r3, r3
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4013      	ands	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0203 	and.w	r2, r3, #3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80a6 	beq.w	80068b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800676c:	4b5b      	ldr	r3, [pc, #364]	@ (80068dc <HAL_GPIO_Init+0x2e4>)
 800676e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006770:	4a5a      	ldr	r2, [pc, #360]	@ (80068dc <HAL_GPIO_Init+0x2e4>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6613      	str	r3, [r2, #96]	@ 0x60
 8006778:	4b58      	ldr	r3, [pc, #352]	@ (80068dc <HAL_GPIO_Init+0x2e4>)
 800677a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006784:	4a56      	ldr	r2, [pc, #344]	@ (80068e0 <HAL_GPIO_Init+0x2e8>)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	089b      	lsrs	r3, r3, #2
 800678a:	3302      	adds	r3, #2
 800678c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	220f      	movs	r2, #15
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	43db      	mvns	r3, r3
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4013      	ands	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80067ae:	d01f      	beq.n	80067f0 <HAL_GPIO_Init+0x1f8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a4c      	ldr	r2, [pc, #304]	@ (80068e4 <HAL_GPIO_Init+0x2ec>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d019      	beq.n	80067ec <HAL_GPIO_Init+0x1f4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a4b      	ldr	r2, [pc, #300]	@ (80068e8 <HAL_GPIO_Init+0x2f0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_GPIO_Init+0x1f0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a4a      	ldr	r2, [pc, #296]	@ (80068ec <HAL_GPIO_Init+0x2f4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00d      	beq.n	80067e4 <HAL_GPIO_Init+0x1ec>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a49      	ldr	r2, [pc, #292]	@ (80068f0 <HAL_GPIO_Init+0x2f8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <HAL_GPIO_Init+0x1e8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a48      	ldr	r2, [pc, #288]	@ (80068f4 <HAL_GPIO_Init+0x2fc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d101      	bne.n	80067dc <HAL_GPIO_Init+0x1e4>
 80067d8:	2305      	movs	r3, #5
 80067da:	e00a      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067dc:	2306      	movs	r3, #6
 80067de:	e008      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067e0:	2304      	movs	r3, #4
 80067e2:	e006      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067e4:	2303      	movs	r3, #3
 80067e6:	e004      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e002      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_GPIO_Init+0x1fa>
 80067f0:	2300      	movs	r3, #0
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	f002 0203 	and.w	r2, r2, #3
 80067f8:	0092      	lsls	r2, r2, #2
 80067fa:	4093      	lsls	r3, r2
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006802:	4937      	ldr	r1, [pc, #220]	@ (80068e0 <HAL_GPIO_Init+0x2e8>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	3302      	adds	r3, #2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006810:	4b39      	ldr	r3, [pc, #228]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	43db      	mvns	r3, r3
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4013      	ands	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006834:	4a30      	ldr	r2, [pc, #192]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800683a:	4b2f      	ldr	r3, [pc, #188]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	43db      	mvns	r3, r3
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4013      	ands	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800685e:	4a26      	ldr	r2, [pc, #152]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006864:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	43db      	mvns	r3, r3
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4013      	ands	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006888:	4a1b      	ldr	r2, [pc, #108]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800688e:	4b1a      	ldr	r3, [pc, #104]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43db      	mvns	r3, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068b2:	4a11      	ldr	r2, [pc, #68]	@ (80068f8 <HAL_GPIO_Init+0x300>)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3301      	adds	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f47f ae9d 	bne.w	8006608 <HAL_GPIO_Init+0x10>
  }
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40010000 	.word	0x40010000
 80068e4:	48000400 	.word	0x48000400
 80068e8:	48000800 	.word	0x48000800
 80068ec:	48000c00 	.word	0x48000c00
 80068f0:	48001000 	.word	0x48001000
 80068f4:	48001400 	.word	0x48001400
 80068f8:	40010400 	.word	0x40010400

080068fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e001      	b.n	800691e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
 8006938:	4613      	mov	r3, r2
 800693a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800693c:	787b      	ldrb	r3, [r7, #1]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006948:	e002      	b.n	8006950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4013      	ands	r3, r2
 8006974:	041a      	lsls	r2, r3, #16
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	43d9      	mvns	r1, r3
 800697a:	887b      	ldrh	r3, [r7, #2]
 800697c:	400b      	ands	r3, r1
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	619a      	str	r2, [r3, #24]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800699a:	4b08      	ldr	r3, [pc, #32]	@ (80069bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d006      	beq.n	80069b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069a6:	4a05      	ldr	r2, [pc, #20]	@ (80069bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fc fa8e 	bl	8002ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40010400 	.word	0x40010400

080069c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d141      	bne.n	8006a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069ce:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069da:	d131      	bne.n	8006a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069dc:	4b47      	ldr	r3, [pc, #284]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e2:	4a46      	ldr	r2, [pc, #280]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069ec:	4b43      	ldr	r3, [pc, #268]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069f4:	4a41      	ldr	r2, [pc, #260]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069fc:	4b40      	ldr	r3, [pc, #256]	@ (8006b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2232      	movs	r2, #50	@ 0x32
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	4a3f      	ldr	r2, [pc, #252]	@ (8006b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	0c9b      	lsrs	r3, r3, #18
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a12:	e002      	b.n	8006a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a1a:	4b38      	ldr	r3, [pc, #224]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a26:	d102      	bne.n	8006a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f2      	bne.n	8006a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a2e:	4b33      	ldr	r3, [pc, #204]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a3a:	d158      	bne.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e057      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a40:	4b2e      	ldr	r3, [pc, #184]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a46:	4a2d      	ldr	r2, [pc, #180]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a50:	e04d      	b.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a58:	d141      	bne.n	8006ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a5a:	4b28      	ldr	r3, [pc, #160]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a66:	d131      	bne.n	8006acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a68:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a6e:	4a23      	ldr	r2, [pc, #140]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a78:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a80:	4a1e      	ldr	r2, [pc, #120]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2232      	movs	r2, #50	@ 0x32
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	4a1c      	ldr	r2, [pc, #112]	@ (8006b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	0c9b      	lsrs	r3, r3, #18
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a9e:	e002      	b.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aa6:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab2:	d102      	bne.n	8006aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f2      	bne.n	8006aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006aba:	4b10      	ldr	r3, [pc, #64]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac6:	d112      	bne.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e011      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006acc:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006adc:	e007      	b.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ade:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ae6:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40007000 	.word	0x40007000
 8006b00:	200002d4 	.word	0x200002d4
 8006b04:	431bde83 	.word	0x431bde83

08006b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006b0c:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a04      	ldr	r2, [pc, #16]	@ (8006b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b16:	6093      	str	r3, [r2, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40007000 	.word	0x40007000

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e2fe      	b.n	8007138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d075      	beq.n	8006c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b46:	4b97      	ldr	r3, [pc, #604]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b50:	4b94      	ldr	r3, [pc, #592]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	d102      	bne.n	8006b66 <HAL_RCC_OscConfig+0x3e>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d002      	beq.n	8006b6c <HAL_RCC_OscConfig+0x44>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d10b      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d05b      	beq.n	8006c30 <HAL_RCC_OscConfig+0x108>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d157      	bne.n	8006c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e2d9      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCC_OscConfig+0x74>
 8006b8e:	4b85      	ldr	r3, [pc, #532]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a84      	ldr	r2, [pc, #528]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e01d      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x98>
 8006ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a7e      	ldr	r2, [pc, #504]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e00b      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006bc0:	4b78      	ldr	r3, [pc, #480]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a77      	ldr	r2, [pc, #476]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	4b75      	ldr	r3, [pc, #468]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a74      	ldr	r2, [pc, #464]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d013      	beq.n	8006c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fd fa9a 	bl	8004118 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fd fa96 	bl	8004118 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	@ 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e29e      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0xc0>
 8006c06:	e014      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fd fa86 	bl	8004118 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c10:	f7fd fa82 	bl	8004118 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	@ 0x64
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e28a      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c22:	4b60      	ldr	r3, [pc, #384]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0xe8>
 8006c2e:	e000      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d075      	beq.n	8006d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c3e:	4b59      	ldr	r3, [pc, #356]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
 8006c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c48:	4b56      	ldr	r3, [pc, #344]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d102      	bne.n	8006c5e <HAL_RCC_OscConfig+0x136>
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCC_OscConfig+0x13c>
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d11f      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c64:	4b4f      	ldr	r3, [pc, #316]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_OscConfig+0x154>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e25d      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7c:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	4946      	ldr	r1, [pc, #280]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c90:	4b45      	ldr	r3, [pc, #276]	@ (8006da8 <HAL_RCC_OscConfig+0x280>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fd f9f3 	bl	8004080 <HAL_InitTick>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d043      	beq.n	8006d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e249      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d023      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cac:	4b3d      	ldr	r3, [pc, #244]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd fa2e 	bl	8004118 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc0:	f7fd fa2a 	bl	8004118 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e232      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cd2:	4b34      	ldr	r3, [pc, #208]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b31      	ldr	r3, [pc, #196]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	492d      	ldr	r1, [pc, #180]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	604b      	str	r3, [r1, #4]
 8006cf2:	e01a      	b.n	8006d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fd fa0a 	bl	8004118 <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d08:	f7fd fa06 	bl	8004118 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e20e      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d1a:	4b22      	ldr	r3, [pc, #136]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x1e0>
 8006d26:	e000      	b.n	8006d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d041      	beq.n	8006dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01c      	beq.n	8006d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3e:	4b19      	ldr	r3, [pc, #100]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d44:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7fd f9e3 	bl	8004118 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d56:	f7fd f9df 	bl	8004118 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e1e7      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d68:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0ef      	beq.n	8006d56 <HAL_RCC_OscConfig+0x22e>
 8006d76:	e020      	b.n	8006dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d7e:	4a09      	ldr	r2, [pc, #36]	@ (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fd f9c6 	bl	8004118 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d8e:	e00d      	b.n	8006dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fd f9c2 	bl	8004118 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d906      	bls.n	8006dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e1ca      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
 8006da8:	200002d8 	.word	0x200002d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dac:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ea      	bne.n	8006d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80a6 	beq.w	8006f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dcc:	4b84      	ldr	r3, [pc, #528]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_RCC_OscConfig+0x2b4>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <HAL_RCC_OscConfig+0x2b6>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00d      	beq.n	8006dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de2:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dee:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfe:	4b79      	ldr	r3, [pc, #484]	@ (8006fe4 <HAL_RCC_OscConfig+0x4bc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d118      	bne.n	8006e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e0a:	4b76      	ldr	r3, [pc, #472]	@ (8006fe4 <HAL_RCC_OscConfig+0x4bc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a75      	ldr	r2, [pc, #468]	@ (8006fe4 <HAL_RCC_OscConfig+0x4bc>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e16:	f7fd f97f 	bl	8004118 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1e:	f7fd f97b 	bl	8004118 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e183      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e30:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe4 <HAL_RCC_OscConfig+0x4bc>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d108      	bne.n	8006e56 <HAL_RCC_OscConfig+0x32e>
 8006e44:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4a:	4a65      	ldr	r2, [pc, #404]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e54:	e024      	b.n	8006ea0 <HAL_RCC_OscConfig+0x378>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d110      	bne.n	8006e80 <HAL_RCC_OscConfig+0x358>
 8006e5e:	4b60      	ldr	r3, [pc, #384]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e64:	4a5e      	ldr	r2, [pc, #376]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e66:	f043 0304 	orr.w	r3, r3, #4
 8006e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e74:	4a5a      	ldr	r2, [pc, #360]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e7e:	e00f      	b.n	8006ea0 <HAL_RCC_OscConfig+0x378>
 8006e80:	4b57      	ldr	r3, [pc, #348]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	4a56      	ldr	r2, [pc, #344]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e90:	4b53      	ldr	r3, [pc, #332]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e96:	4a52      	ldr	r2, [pc, #328]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fd f936 	bl	8004118 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eae:	e00a      	b.n	8006ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb0:	f7fd f932 	bl	8004118 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e138      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec6:	4b46      	ldr	r3, [pc, #280]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ed      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x388>
 8006ed4:	e015      	b.n	8006f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed6:	f7fd f91f 	bl	8004118 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006edc:	e00a      	b.n	8006ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ede:	f7fd f91b 	bl	8004118 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e121      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1ed      	bne.n	8006ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f02:	7ffb      	ldrb	r3, [r7, #31]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0c:	4a34      	ldr	r2, [pc, #208]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d03c      	beq.n	8006f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01c      	beq.n	8006f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f28:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f38:	f7fd f8ee 	bl	8004118 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f40:	f7fd f8ea 	bl	8004118 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e0f2      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f52:	4b23      	ldr	r3, [pc, #140]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0ef      	beq.n	8006f40 <HAL_RCC_OscConfig+0x418>
 8006f60:	e01b      	b.n	8006f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f62:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f68:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f72:	f7fd f8d1 	bl	8004118 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f7a:	f7fd f8cd 	bl	8004118 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e0d5      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f8c:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1ef      	bne.n	8006f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 80c9 	beq.w	8007136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d15e      	bne.n	8007078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fba:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a08      	ldr	r2, [pc, #32]	@ (8006fe0 <HAL_RCC_OscConfig+0x4b8>)
 8006fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fd f8a7 	bl	8004118 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fcc:	e00c      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fce:	f7fd f8a3 	bl	8004118 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d905      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e0ab      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fe8:	4b55      	ldr	r3, [pc, #340]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1ec      	bne.n	8006fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ff4:	4b52      	ldr	r3, [pc, #328]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	4b52      	ldr	r3, [pc, #328]	@ (8007144 <HAL_RCC_OscConfig+0x61c>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6a11      	ldr	r1, [r2, #32]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007004:	3a01      	subs	r2, #1
 8007006:	0112      	lsls	r2, r2, #4
 8007008:	4311      	orrs	r1, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800700e:	0212      	lsls	r2, r2, #8
 8007010:	4311      	orrs	r1, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007016:	0852      	lsrs	r2, r2, #1
 8007018:	3a01      	subs	r2, #1
 800701a:	0552      	lsls	r2, r2, #21
 800701c:	4311      	orrs	r1, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007022:	0852      	lsrs	r2, r2, #1
 8007024:	3a01      	subs	r2, #1
 8007026:	0652      	lsls	r2, r2, #25
 8007028:	4311      	orrs	r1, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800702e:	06d2      	lsls	r2, r2, #27
 8007030:	430a      	orrs	r2, r1
 8007032:	4943      	ldr	r1, [pc, #268]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 8007034:	4313      	orrs	r3, r2
 8007036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007038:	4b41      	ldr	r3, [pc, #260]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a40      	ldr	r2, [pc, #256]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800703e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007044:	4b3e      	ldr	r3, [pc, #248]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4a3d      	ldr	r2, [pc, #244]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800704a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800704e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fd f862 	bl	8004118 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007058:	f7fd f85e 	bl	8004118 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e066      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800706a:	4b35      	ldr	r3, [pc, #212]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <HAL_RCC_OscConfig+0x530>
 8007076:	e05e      	b.n	8007136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007078:	4b31      	ldr	r3, [pc, #196]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a30      	ldr	r2, [pc, #192]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 800707e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fd f848 	bl	8004118 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708c:	f7fd f844 	bl	8004118 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e04c      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800709e:	4b28      	ldr	r3, [pc, #160]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80070aa:	4b25      	ldr	r3, [pc, #148]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	4924      	ldr	r1, [pc, #144]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 80070b0:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <HAL_RCC_OscConfig+0x620>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	60cb      	str	r3, [r1, #12]
 80070b6:	e03e      	b.n	8007136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e039      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80070c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007140 <HAL_RCC_OscConfig+0x618>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f003 0203 	and.w	r2, r3, #3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d12c      	bne.n	8007132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e2:	3b01      	subs	r3, #1
 80070e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d123      	bne.n	8007132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d11b      	bne.n	8007132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007106:	429a      	cmp	r2, r3
 8007108:	d113      	bne.n	8007132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	3b01      	subs	r3, #1
 8007118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800711a:	429a      	cmp	r2, r3
 800711c:	d109      	bne.n	8007132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	3b01      	subs	r3, #1
 800712c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d001      	beq.n	8007136 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40021000 	.word	0x40021000
 8007144:	019f800c 	.word	0x019f800c
 8007148:	feeefffc 	.word	0xfeeefffc

0800714c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e11e      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007164:	4b91      	ldr	r3, [pc, #580]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d910      	bls.n	8007194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b8e      	ldr	r3, [pc, #568]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 020f 	bic.w	r2, r3, #15
 800717a:	498c      	ldr	r1, [pc, #560]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4313      	orrs	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007182:	4b8a      	ldr	r3, [pc, #552]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e106      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d073      	beq.n	8007288 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d129      	bne.n	80071fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a8:	4b81      	ldr	r3, [pc, #516]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0f4      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80071b8:	f000 f99e 	bl	80074f8 <RCC_GetSysClockFreqFromPLLSource>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4a7c      	ldr	r2, [pc, #496]	@ (80073b4 <HAL_RCC_ClockConfig+0x268>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d93f      	bls.n	8007246 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071c6:	4b7a      	ldr	r3, [pc, #488]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d033      	beq.n	8007246 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d12f      	bne.n	8007246 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071e6:	4b72      	ldr	r3, [pc, #456]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ee:	4a70      	ldr	r2, [pc, #448]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80071f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	e024      	b.n	8007246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d107      	bne.n	8007214 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007204:	4b6a      	ldr	r3, [pc, #424]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0c6      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007214:	4b66      	ldr	r3, [pc, #408]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0be      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007224:	f000 f8ce 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 8007228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4a61      	ldr	r2, [pc, #388]	@ (80073b4 <HAL_RCC_ClockConfig+0x268>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d909      	bls.n	8007246 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007232:	4b5f      	ldr	r3, [pc, #380]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800723a:	4a5d      	ldr	r2, [pc, #372]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 800723c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007242:	2380      	movs	r3, #128	@ 0x80
 8007244:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007246:	4b5a      	ldr	r3, [pc, #360]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f023 0203 	bic.w	r2, r3, #3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4957      	ldr	r1, [pc, #348]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007254:	4313      	orrs	r3, r2
 8007256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007258:	f7fc ff5e 	bl	8004118 <HAL_GetTick>
 800725c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725e:	e00a      	b.n	8007276 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007260:	f7fc ff5a 	bl	8004118 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e095      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007276:	4b4e      	ldr	r3, [pc, #312]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 020c 	and.w	r2, r3, #12
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	429a      	cmp	r2, r3
 8007286:	d1eb      	bne.n	8007260 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d023      	beq.n	80072dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072a0:	4b43      	ldr	r3, [pc, #268]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a42      	ldr	r2, [pc, #264]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80072b8:	4b3d      	ldr	r3, [pc, #244]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072c0:	4a3b      	ldr	r2, [pc, #236]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072c8:	4b39      	ldr	r3, [pc, #228]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4936      	ldr	r1, [pc, #216]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	608b      	str	r3, [r1, #8]
 80072da:	e008      	b.n	80072ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b80      	cmp	r3, #128	@ 0x80
 80072e0:	d105      	bne.n	80072ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80072e2:	4b33      	ldr	r3, [pc, #204]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	4a32      	ldr	r2, [pc, #200]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 80072e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072ee:	4b2f      	ldr	r3, [pc, #188]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d21d      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fc:	4b2b      	ldr	r3, [pc, #172]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f023 020f 	bic.w	r2, r3, #15
 8007304:	4929      	ldr	r1, [pc, #164]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800730c:	f7fc ff04 	bl	8004118 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007312:	e00a      	b.n	800732a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007314:	f7fc ff00 	bl	8004118 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e03b      	b.n	80073a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b20      	ldr	r3, [pc, #128]	@ (80073ac <HAL_RCC_ClockConfig+0x260>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d1ed      	bne.n	8007314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007344:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4917      	ldr	r1, [pc, #92]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007362:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	490f      	ldr	r1, [pc, #60]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007376:	f000 f825 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800737a:	4602      	mov	r2, r0
 800737c:	4b0c      	ldr	r3, [pc, #48]	@ (80073b0 <HAL_RCC_ClockConfig+0x264>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	490c      	ldr	r1, [pc, #48]	@ (80073b8 <HAL_RCC_ClockConfig+0x26c>)
 8007388:	5ccb      	ldrb	r3, [r1, r3]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <HAL_RCC_ClockConfig+0x270>)
 8007394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007396:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <HAL_RCC_ClockConfig+0x274>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fe70 	bl	8004080 <HAL_InitTick>
 80073a0:	4603      	mov	r3, r0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40022000 	.word	0x40022000
 80073b0:	40021000 	.word	0x40021000
 80073b4:	04c4b400 	.word	0x04c4b400
 80073b8:	0800bdb8 	.word	0x0800bdb8
 80073bc:	200002d4 	.word	0x200002d4
 80073c0:	200002d8 	.word	0x200002d8

080073c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80073ca:	4b2c      	ldr	r3, [pc, #176]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d102      	bne.n	80073dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80073d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	e047      	b.n	800746c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80073dc:	4b27      	ldr	r3, [pc, #156]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 030c 	and.w	r3, r3, #12
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d102      	bne.n	80073ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073e8:	4b26      	ldr	r3, [pc, #152]	@ (8007484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	e03e      	b.n	800746c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80073ee:	4b23      	ldr	r3, [pc, #140]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 030c 	and.w	r3, r3, #12
 80073f6:	2b0c      	cmp	r3, #12
 80073f8:	d136      	bne.n	8007468 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073fa:	4b20      	ldr	r3, [pc, #128]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007404:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	3301      	adds	r3, #1
 8007410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b03      	cmp	r3, #3
 8007416:	d10c      	bne.n	8007432 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007418:	4a1a      	ldr	r2, [pc, #104]	@ (8007484 <HAL_RCC_GetSysClockFreq+0xc0>)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	4a16      	ldr	r2, [pc, #88]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007422:	68d2      	ldr	r2, [r2, #12]
 8007424:	0a12      	lsrs	r2, r2, #8
 8007426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	617b      	str	r3, [r7, #20]
      break;
 8007430:	e00c      	b.n	800744c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007432:	4a13      	ldr	r2, [pc, #76]	@ (8007480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	4a10      	ldr	r2, [pc, #64]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 800743c:	68d2      	ldr	r2, [r2, #12]
 800743e:	0a12      	lsrs	r2, r2, #8
 8007440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
      break;
 800744a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800744c:	4b0b      	ldr	r3, [pc, #44]	@ (800747c <HAL_RCC_GetSysClockFreq+0xb8>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	3301      	adds	r3, #1
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	e001      	b.n	800746c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800746c:	693b      	ldr	r3, [r7, #16]
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40021000 	.word	0x40021000
 8007480:	00f42400 	.word	0x00f42400
 8007484:	016e3600 	.word	0x016e3600

08007488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800748c:	4b03      	ldr	r3, [pc, #12]	@ (800749c <HAL_RCC_GetHCLKFreq+0x14>)
 800748e:	681b      	ldr	r3, [r3, #0]
}
 8007490:	4618      	mov	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	200002d4 	.word	0x200002d4

080074a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074a4:	f7ff fff0 	bl	8007488 <HAL_RCC_GetHCLKFreq>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4b06      	ldr	r3, [pc, #24]	@ (80074c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	4904      	ldr	r1, [pc, #16]	@ (80074c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074b6:	5ccb      	ldrb	r3, [r1, r3]
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40021000 	.word	0x40021000
 80074c8:	0800bdc8 	.word	0x0800bdc8

080074cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80074d0:	f7ff ffda 	bl	8007488 <HAL_RCC_GetHCLKFreq>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	0adb      	lsrs	r3, r3, #11
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	4904      	ldr	r1, [pc, #16]	@ (80074f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074e2:	5ccb      	ldrb	r3, [r1, r3]
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40021000 	.word	0x40021000
 80074f4:	0800bdc8 	.word	0x0800bdc8

080074f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007508:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	091b      	lsrs	r3, r3, #4
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b03      	cmp	r3, #3
 800751a:	d10c      	bne.n	8007536 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800751c:	4a17      	ldr	r2, [pc, #92]	@ (800757c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	4a14      	ldr	r2, [pc, #80]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007526:	68d2      	ldr	r2, [r2, #12]
 8007528:	0a12      	lsrs	r2, r2, #8
 800752a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	617b      	str	r3, [r7, #20]
    break;
 8007534:	e00c      	b.n	8007550 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007536:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	fbb2 f3f3 	udiv	r3, r2, r3
 800753e:	4a0e      	ldr	r2, [pc, #56]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007540:	68d2      	ldr	r2, [r2, #12]
 8007542:	0a12      	lsrs	r2, r2, #8
 8007544:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007548:	fb02 f303 	mul.w	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]
    break;
 800754e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007550:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	0e5b      	lsrs	r3, r3, #25
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	3301      	adds	r3, #1
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800756a:	687b      	ldr	r3, [r7, #4]
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40021000 	.word	0x40021000
 800757c:	016e3600 	.word	0x016e3600
 8007580:	00f42400 	.word	0x00f42400

08007584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800758c:	2300      	movs	r3, #0
 800758e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007590:	2300      	movs	r3, #0
 8007592:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8098 	beq.w	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075a2:	2300      	movs	r3, #0
 80075a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a6:	4b43      	ldr	r3, [pc, #268]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075b2:	4b40      	ldr	r3, [pc, #256]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	4a3f      	ldr	r2, [pc, #252]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80075be:	4b3d      	ldr	r3, [pc, #244]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	60bb      	str	r3, [r7, #8]
 80075c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ca:	2301      	movs	r3, #1
 80075cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ce:	4b3a      	ldr	r3, [pc, #232]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a39      	ldr	r2, [pc, #228]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075da:	f7fc fd9d 	bl	8004118 <HAL_GetTick>
 80075de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e0:	e009      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e2:	f7fc fd99 	bl	8004118 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d902      	bls.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	74fb      	strb	r3, [r7, #19]
        break;
 80075f4:	e005      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f6:	4b30      	ldr	r3, [pc, #192]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ef      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d159      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007608:	4b2a      	ldr	r3, [pc, #168]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007612:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01e      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	429a      	cmp	r2, r3
 8007622:	d019      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007624:	4b23      	ldr	r3, [pc, #140]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007630:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007636:	4a1f      	ldr	r2, [pc, #124]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007640:	4b1c      	ldr	r3, [pc, #112]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007646:	4a1b      	ldr	r2, [pc, #108]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800764c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007650:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d016      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007662:	f7fc fd59 	bl	8004118 <HAL_GetTick>
 8007666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007668:	e00b      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fc fd55 	bl	8004118 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d902      	bls.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	74fb      	strb	r3, [r7, #19]
            break;
 8007680:	e006      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0ec      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007690:	7cfb      	ldrb	r3, [r7, #19]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10b      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a4:	4903      	ldr	r1, [pc, #12]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076ac:	e008      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ae:	7cfb      	ldrb	r3, [r7, #19]
 80076b0:	74bb      	strb	r3, [r7, #18]
 80076b2:	e005      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7cfb      	ldrb	r3, [r7, #19]
 80076be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076c0:	7c7b      	ldrb	r3, [r7, #17]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d105      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c6:	4ba7      	ldr	r3, [pc, #668]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ca:	4aa6      	ldr	r2, [pc, #664]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076de:	4ba1      	ldr	r3, [pc, #644]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e4:	f023 0203 	bic.w	r2, r3, #3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	499d      	ldr	r1, [pc, #628]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007700:	4b98      	ldr	r3, [pc, #608]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007706:	f023 020c 	bic.w	r2, r3, #12
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	4995      	ldr	r1, [pc, #596]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007722:	4b90      	ldr	r3, [pc, #576]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007728:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	498c      	ldr	r1, [pc, #560]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007744:	4b87      	ldr	r3, [pc, #540]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	4984      	ldr	r1, [pc, #528]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007754:	4313      	orrs	r3, r2
 8007756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007766:	4b7f      	ldr	r3, [pc, #508]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	497b      	ldr	r1, [pc, #492]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007788:	4b76      	ldr	r3, [pc, #472]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4973      	ldr	r1, [pc, #460]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007798:	4313      	orrs	r3, r2
 800779a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077aa:	4b6e      	ldr	r3, [pc, #440]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	496a      	ldr	r1, [pc, #424]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077cc:	4b65      	ldr	r3, [pc, #404]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	4962      	ldr	r1, [pc, #392]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077ee:	4b5d      	ldr	r3, [pc, #372]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	4959      	ldr	r1, [pc, #356]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007810:	4b54      	ldr	r3, [pc, #336]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007816:	f023 0203 	bic.w	r2, r3, #3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	4951      	ldr	r1, [pc, #324]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007820:	4313      	orrs	r3, r2
 8007822:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007832:	4b4c      	ldr	r3, [pc, #304]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007838:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	4948      	ldr	r1, [pc, #288]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007854:	4b43      	ldr	r3, [pc, #268]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007862:	4940      	ldr	r1, [pc, #256]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007864:	4313      	orrs	r3, r2
 8007866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007872:	d105      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007874:	4b3b      	ldr	r3, [pc, #236]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4a3a      	ldr	r2, [pc, #232]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800787a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800787e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007888:	2b00      	cmp	r3, #0
 800788a:	d015      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800788c:	4b35      	ldr	r3, [pc, #212]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007892:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789a:	4932      	ldr	r1, [pc, #200]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800789c:	4313      	orrs	r3, r2
 800789e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078aa:	d105      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d015      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078c4:	4b27      	ldr	r3, [pc, #156]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	4924      	ldr	r1, [pc, #144]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078e2:	d105      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d015      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078fc:	4b19      	ldr	r3, [pc, #100]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790a:	4916      	ldr	r1, [pc, #88]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800791a:	d105      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800791c:	4b11      	ldr	r3, [pc, #68]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4a10      	ldr	r2, [pc, #64]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007926:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d019      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007934:	4b0b      	ldr	r3, [pc, #44]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	4908      	ldr	r1, [pc, #32]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a02      	ldr	r2, [pc, #8]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800795e:	60d3      	str	r3, [r2, #12]
 8007960:	e002      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007962:	bf00      	nop
 8007964:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d015      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007974:	4b29      	ldr	r3, [pc, #164]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007982:	4926      	ldr	r1, [pc, #152]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007984:	4313      	orrs	r3, r2
 8007986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007992:	d105      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007994:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800799a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800799e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d015      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80079ac:	4b1b      	ldr	r3, [pc, #108]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ba:	4918      	ldr	r1, [pc, #96]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ca:	d105      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079cc:	4b13      	ldr	r3, [pc, #76]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4a12      	ldr	r2, [pc, #72]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d015      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80079e4:	4b0d      	ldr	r3, [pc, #52]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f2:	490a      	ldr	r1, [pc, #40]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a02:	d105      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4a04      	ldr	r2, [pc, #16]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40021000 	.word	0x40021000

08007a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e054      	b.n	8007adc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d111      	bne.n	8007a62 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 ff92 	bl	8009970 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a23      	ldr	r2, [pc, #140]	@ (8007ae4 <HAL_TIM_Base_Init+0xc4>)
 8007a58:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f001 fadb 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	08003a81 	.word	0x08003a81

08007ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d001      	beq.n	8007b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e04c      	b.n	8007b9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a26      	ldr	r2, [pc, #152]	@ (8007ba8 <HAL_TIM_Base_Start+0xc0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d022      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1a:	d01d      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a22      	ldr	r2, [pc, #136]	@ (8007bac <HAL_TIM_Base_Start+0xc4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d018      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a21      	ldr	r2, [pc, #132]	@ (8007bb0 <HAL_TIM_Base_Start+0xc8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb4 <HAL_TIM_Base_Start+0xcc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00e      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bb8 <HAL_TIM_Base_Start+0xd0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a1c      	ldr	r2, [pc, #112]	@ (8007bbc <HAL_TIM_Base_Start+0xd4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d004      	beq.n	8007b58 <HAL_TIM_Base_Start+0x70>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc0 <HAL_TIM_Base_Start+0xd8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d115      	bne.n	8007b84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	4b19      	ldr	r3, [pc, #100]	@ (8007bc4 <HAL_TIM_Base_Start+0xdc>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b06      	cmp	r3, #6
 8007b68:	d015      	beq.n	8007b96 <HAL_TIM_Base_Start+0xae>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b70:	d011      	beq.n	8007b96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0201 	orr.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b82:	e008      	b.n	8007b96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e000      	b.n	8007b98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40000c00 	.word	0x40000c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40015000 	.word	0x40015000
 8007bc4:	00010007 	.word	0x00010007

08007bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d001      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e054      	b.n	8007c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a26      	ldr	r2, [pc, #152]	@ (8007c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d022      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0a:	d01d      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a22      	ldr	r2, [pc, #136]	@ (8007c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d018      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a21      	ldr	r2, [pc, #132]	@ (8007ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d013      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00e      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d009      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1c      	ldr	r2, [pc, #112]	@ (8007cac <HAL_TIM_Base_Start_IT+0xe4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0x80>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d115      	bne.n	8007c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d015      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0xbe>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c60:	d011      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	e008      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0201 	orr.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e000      	b.n	8007c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40012c00 	.word	0x40012c00
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40000800 	.word	0x40000800
 8007ca4:	40000c00 	.word	0x40000c00
 8007ca8:	40013400 	.word	0x40013400
 8007cac:	40014000 	.word	0x40014000
 8007cb0:	40015000 	.word	0x40015000
 8007cb4:	00010007 	.word	0x00010007

08007cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e054      	b.n	8007d74 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d111      	bne.n	8007cfa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fe46 	bl	8009970 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a23      	ldr	r2, [pc, #140]	@ (8007d7c <HAL_TIM_PWM_Init+0xc4>)
 8007cf0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f001 f98f 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08007d81 	.word	0x08007d81

08007d80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <HAL_TIM_PWM_Start+0x24>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	e03c      	b.n	8007e32 <HAL_TIM_PWM_Start+0x9e>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d109      	bne.n	8007dd2 <HAL_TIM_PWM_Start+0x3e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	bf14      	ite	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	2300      	moveq	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	e02f      	b.n	8007e32 <HAL_TIM_PWM_Start+0x9e>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d109      	bne.n	8007dec <HAL_TIM_PWM_Start+0x58>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	bf14      	ite	ne
 8007de4:	2301      	movne	r3, #1
 8007de6:	2300      	moveq	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	e022      	b.n	8007e32 <HAL_TIM_PWM_Start+0x9e>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b0c      	cmp	r3, #12
 8007df0:	d109      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x72>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	e015      	b.n	8007e32 <HAL_TIM_PWM_Start+0x9e>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d109      	bne.n	8007e20 <HAL_TIM_PWM_Start+0x8c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	bf14      	ite	ne
 8007e18:	2301      	movne	r3, #1
 8007e1a:	2300      	moveq	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	e008      	b.n	8007e32 <HAL_TIM_PWM_Start+0x9e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bf14      	ite	ne
 8007e2c:	2301      	movne	r3, #1
 8007e2e:	2300      	moveq	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e0a6      	b.n	8007f88 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d104      	bne.n	8007e4a <HAL_TIM_PWM_Start+0xb6>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e48:	e023      	b.n	8007e92 <HAL_TIM_PWM_Start+0xfe>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d104      	bne.n	8007e5a <HAL_TIM_PWM_Start+0xc6>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e58:	e01b      	b.n	8007e92 <HAL_TIM_PWM_Start+0xfe>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d104      	bne.n	8007e6a <HAL_TIM_PWM_Start+0xd6>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e68:	e013      	b.n	8007e92 <HAL_TIM_PWM_Start+0xfe>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b0c      	cmp	r3, #12
 8007e6e:	d104      	bne.n	8007e7a <HAL_TIM_PWM_Start+0xe6>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e78:	e00b      	b.n	8007e92 <HAL_TIM_PWM_Start+0xfe>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d104      	bne.n	8007e8a <HAL_TIM_PWM_Start+0xf6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e88:	e003      	b.n	8007e92 <HAL_TIM_PWM_Start+0xfe>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2201      	movs	r2, #1
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fd42 	bl	8009924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8007f90 <HAL_TIM_PWM_Start+0x1fc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d018      	beq.n	8007edc <HAL_TIM_PWM_Start+0x148>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a39      	ldr	r2, [pc, #228]	@ (8007f94 <HAL_TIM_PWM_Start+0x200>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d013      	beq.n	8007edc <HAL_TIM_PWM_Start+0x148>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a37      	ldr	r2, [pc, #220]	@ (8007f98 <HAL_TIM_PWM_Start+0x204>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00e      	beq.n	8007edc <HAL_TIM_PWM_Start+0x148>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a36      	ldr	r2, [pc, #216]	@ (8007f9c <HAL_TIM_PWM_Start+0x208>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d009      	beq.n	8007edc <HAL_TIM_PWM_Start+0x148>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a34      	ldr	r2, [pc, #208]	@ (8007fa0 <HAL_TIM_PWM_Start+0x20c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d004      	beq.n	8007edc <HAL_TIM_PWM_Start+0x148>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a33      	ldr	r2, [pc, #204]	@ (8007fa4 <HAL_TIM_PWM_Start+0x210>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d101      	bne.n	8007ee0 <HAL_TIM_PWM_Start+0x14c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x14e>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a25      	ldr	r2, [pc, #148]	@ (8007f90 <HAL_TIM_PWM_Start+0x1fc>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d022      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f08:	d01d      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	@ (8007fa8 <HAL_TIM_PWM_Start+0x214>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d018      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a24      	ldr	r2, [pc, #144]	@ (8007fac <HAL_TIM_PWM_Start+0x218>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a23      	ldr	r2, [pc, #140]	@ (8007fb0 <HAL_TIM_PWM_Start+0x21c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a19      	ldr	r2, [pc, #100]	@ (8007f94 <HAL_TIM_PWM_Start+0x200>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	@ (8007f98 <HAL_TIM_PWM_Start+0x204>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x1b2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a18      	ldr	r2, [pc, #96]	@ (8007fa4 <HAL_TIM_PWM_Start+0x210>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d115      	bne.n	8007f72 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	4b19      	ldr	r3, [pc, #100]	@ (8007fb4 <HAL_TIM_PWM_Start+0x220>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b06      	cmp	r3, #6
 8007f56:	d015      	beq.n	8007f84 <HAL_TIM_PWM_Start+0x1f0>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f5e:	d011      	beq.n	8007f84 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f70:	e008      	b.n	8007f84 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e000      	b.n	8007f86 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40013400 	.word	0x40013400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40014400 	.word	0x40014400
 8007fa0:	40014800 	.word	0x40014800
 8007fa4:	40015000 	.word	0x40015000
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	00010007 	.word	0x00010007

08007fb8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e04c      	b.n	8008066 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d111      	bne.n	8007ffc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fcc5 	bl	8009970 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8008070 <HAL_TIM_OnePulse_Init+0xb8>)
 8007ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f001 f80e 	bl	8009030 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0208 	bic.w	r2, r2, #8
 8008022:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6819      	ldr	r1, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	08008075 	.word	0x08008075

08008074 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008098:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080b0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d108      	bne.n	80080ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d105      	bne.n	80080ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080be:	7b7b      	ldrb	r3, [r7, #13]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d102      	bne.n	80080ca <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c4:	7b3b      	ldrb	r3, [r7, #12]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d001      	beq.n	80080ce <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e059      	b.n	8008182 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2202      	movs	r2, #2
 80080d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0202 	orr.w	r2, r2, #2
 80080fc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0204 	orr.w	r2, r2, #4
 800810c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fc04 	bl	8009924 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2201      	movs	r2, #1
 8008122:	2104      	movs	r1, #4
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fbfd 	bl	8009924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a17      	ldr	r2, [pc, #92]	@ (800818c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a15      	ldr	r2, [pc, #84]	@ (8008190 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_TIM_OnePulse_Start_IT+0xde>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a14      	ldr	r2, [pc, #80]	@ (8008194 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a12      	ldr	r2, [pc, #72]	@ (8008198 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a11      	ldr	r2, [pc, #68]	@ (800819c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIM_OnePulse_Start_IT+0xde>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0f      	ldr	r2, [pc, #60]	@ (80081a0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d101      	bne.n	800816a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40013400 	.word	0x40013400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800
 80081a0:	40015000 	.word	0x40015000

080081a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e0a2      	b.n	80082fe <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d111      	bne.n	80081e8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fbcf 	bl	8009970 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a4a      	ldr	r2, [pc, #296]	@ (8008308 <HAL_TIM_Encoder_Init+0x164>)
 80081de:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f000 ff0e 	bl	8009030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800823c:	f023 0303 	bic.w	r3, r3, #3
 8008240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	4313      	orrs	r3, r2
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008266:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800826a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	4313      	orrs	r3, r2
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	4313      	orrs	r3, r2
 800827c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	011a      	lsls	r2, r3, #4
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	031b      	lsls	r3, r3, #12
 800828a:	4313      	orrs	r3, r2
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008298:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80082a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	4313      	orrs	r3, r2
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	08003b71 	.word	0x08003b71

0800830c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800831c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008324:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800832c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008334:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d110      	bne.n	800835e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d102      	bne.n	8008348 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008342:	7b7b      	ldrb	r3, [r7, #13]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d001      	beq.n	800834c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e069      	b.n	8008420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800835c:	e031      	b.n	80083c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d110      	bne.n	8008386 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d102      	bne.n	8008370 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800836a:	7b3b      	ldrb	r3, [r7, #12]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d001      	beq.n	8008374 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e055      	b.n	8008420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008384:	e01d      	b.n	80083c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d108      	bne.n	800839e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d105      	bne.n	800839e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008392:	7b7b      	ldrb	r3, [r7, #13]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d102      	bne.n	800839e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008398:	7b3b      	ldrb	r3, [r7, #12]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d001      	beq.n	80083a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e03e      	b.n	8008420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_TIM_Encoder_Start+0xc4>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d008      	beq.n	80083e0 <HAL_TIM_Encoder_Start+0xd4>
 80083ce:	e00f      	b.n	80083f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2201      	movs	r2, #1
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 faa3 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 80083de:	e016      	b.n	800840e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	2104      	movs	r1, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fa9b 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 80083ee:	e00e      	b.n	800840e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2201      	movs	r2, #1
 80083f6:	2100      	movs	r1, #0
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fa93 	bl	8009924 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2201      	movs	r2, #1
 8008404:	2104      	movs	r1, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fa8c 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 800840c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <HAL_TIM_Encoder_Stop+0x18>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b04      	cmp	r3, #4
 800843c:	d008      	beq.n	8008450 <HAL_TIM_Encoder_Stop+0x28>
 800843e:	e00f      	b.n	8008460 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f001 fa6b 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 800844e:	e016      	b.n	800847e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2200      	movs	r2, #0
 8008456:	2104      	movs	r1, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fa63 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 800845e:	e00e      	b.n	800847e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fa5b 	bl	8009924 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	2104      	movs	r1, #4
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fa54 	bl	8009924 <TIM_CCxChannelCmd>
      break;
 800847c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10f      	bne.n	80084ae <HAL_TIM_Encoder_Stop+0x86>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a1a      	ldr	r2, [r3, #32]
 8008494:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d107      	bne.n	80084ae <HAL_TIM_Encoder_Stop+0x86>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_TIM_Encoder_Stop+0x92>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d148      	bne.n	800854c <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <HAL_TIM_Encoder_Stop+0xa2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084c8:	e023      	b.n	8008512 <HAL_TIM_Encoder_Stop+0xea>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d104      	bne.n	80084da <HAL_TIM_Encoder_Stop+0xb2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084d8:	e01b      	b.n	8008512 <HAL_TIM_Encoder_Stop+0xea>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d104      	bne.n	80084ea <HAL_TIM_Encoder_Stop+0xc2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084e8:	e013      	b.n	8008512 <HAL_TIM_Encoder_Stop+0xea>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b0c      	cmp	r3, #12
 80084ee:	d104      	bne.n	80084fa <HAL_TIM_Encoder_Stop+0xd2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084f8:	e00b      	b.n	8008512 <HAL_TIM_Encoder_Stop+0xea>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d104      	bne.n	800850a <HAL_TIM_Encoder_Stop+0xe2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008508:	e003      	b.n	8008512 <HAL_TIM_Encoder_Stop+0xea>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <HAL_TIM_Encoder_Stop+0xfa>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008520:	e024      	b.n	800856c <HAL_TIM_Encoder_Stop+0x144>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d104      	bne.n	8008532 <HAL_TIM_Encoder_Stop+0x10a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008530:	e01c      	b.n	800856c <HAL_TIM_Encoder_Stop+0x144>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d104      	bne.n	8008542 <HAL_TIM_Encoder_Stop+0x11a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008540:	e014      	b.n	800856c <HAL_TIM_Encoder_Stop+0x144>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800854a:	e00f      	b.n	800856c <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d026      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d021      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f06f 0202 	mvn.w	r2, #2
 80085aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
 80085ca:	e009      	b.n	80085e0 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d026      	beq.n	800863e <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d021      	beq.n	800863e <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f06f 0204 	mvn.w	r2, #4
 8008602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
 8008622:	e009      	b.n	8008638 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d026      	beq.n	8008696 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d021      	beq.n	8008696 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f06f 0208 	mvn.w	r2, #8
 800865a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2204      	movs	r2, #4
 8008660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	e009      	b.n	8008690 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b00      	cmp	r3, #0
 800869e:	d026      	beq.n	80086ee <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d021      	beq.n	80086ee <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0210 	mvn.w	r2, #16
 80086b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2208      	movs	r2, #8
 80086b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	e009      	b.n	80086e8 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f06f 0201 	mvn.w	r2, #1
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00e      	beq.n	8008748 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008758:	2b00      	cmp	r3, #0
 800875a:	d009      	beq.n	8008770 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00e      	beq.n	8008798 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800878c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00e      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d009      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0220 	mvn.w	r2, #32
 80087b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00e      	beq.n	80087e8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80087dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800882c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00e      	beq.n	8008860 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008882:	2302      	movs	r3, #2
 8008884:	e0ff      	b.n	8008a86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b14      	cmp	r3, #20
 8008892:	f200 80f0 	bhi.w	8008a76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	08008a77 	.word	0x08008a77
 80088a4:	08008a77 	.word	0x08008a77
 80088a8:	08008a77 	.word	0x08008a77
 80088ac:	08008931 	.word	0x08008931
 80088b0:	08008a77 	.word	0x08008a77
 80088b4:	08008a77 	.word	0x08008a77
 80088b8:	08008a77 	.word	0x08008a77
 80088bc:	08008973 	.word	0x08008973
 80088c0:	08008a77 	.word	0x08008a77
 80088c4:	08008a77 	.word	0x08008a77
 80088c8:	08008a77 	.word	0x08008a77
 80088cc:	080089b3 	.word	0x080089b3
 80088d0:	08008a77 	.word	0x08008a77
 80088d4:	08008a77 	.word	0x08008a77
 80088d8:	08008a77 	.word	0x08008a77
 80088dc:	080089f5 	.word	0x080089f5
 80088e0:	08008a77 	.word	0x08008a77
 80088e4:	08008a77 	.word	0x08008a77
 80088e8:	08008a77 	.word	0x08008a77
 80088ec:	08008a35 	.word	0x08008a35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fc4e 	bl	8009198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0208 	orr.w	r2, r2, #8
 800890a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0204 	bic.w	r2, r2, #4
 800891a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6999      	ldr	r1, [r3, #24]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	619a      	str	r2, [r3, #24]
      break;
 800892e:	e0a5      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 fcc8 	bl	80092cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800894a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800895a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6999      	ldr	r1, [r3, #24]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	021a      	lsls	r2, r3, #8
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	619a      	str	r2, [r3, #24]
      break;
 8008970:	e084      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fd3b 	bl	80093f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69da      	ldr	r2, [r3, #28]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0208 	orr.w	r2, r2, #8
 800898c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0204 	bic.w	r2, r2, #4
 800899c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69d9      	ldr	r1, [r3, #28]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	61da      	str	r2, [r3, #28]
      break;
 80089b0:	e064      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fdad 	bl	8009518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69d9      	ldr	r1, [r3, #28]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	021a      	lsls	r2, r3, #8
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	61da      	str	r2, [r3, #28]
      break;
 80089f2:	e043      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fe20 	bl	8009640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0208 	orr.w	r2, r2, #8
 8008a0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0204 	bic.w	r2, r2, #4
 8008a1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	691a      	ldr	r2, [r3, #16]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a32:	e023      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fe6a 	bl	8009714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	021a      	lsls	r2, r3, #8
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a74:	e002      	b.n	8008a7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop

08008a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_TIM_ConfigClockSource+0x1c>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e0f6      	b.n	8008c9a <HAL_TIM_ConfigClockSource+0x20a>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a6f      	ldr	r2, [pc, #444]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x214>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f000 80c1 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008aec:	4a6d      	ldr	r2, [pc, #436]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x214>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f200 80c6 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008af4:	4a6c      	ldr	r2, [pc, #432]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x218>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	f000 80b9 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008afc:	4a6a      	ldr	r2, [pc, #424]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x218>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f200 80be 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b04:	4a69      	ldr	r2, [pc, #420]	@ (8008cac <HAL_TIM_ConfigClockSource+0x21c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f000 80b1 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b0c:	4a67      	ldr	r2, [pc, #412]	@ (8008cac <HAL_TIM_ConfigClockSource+0x21c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	f200 80b6 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b14:	4a66      	ldr	r2, [pc, #408]	@ (8008cb0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f000 80a9 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b1c:	4a64      	ldr	r2, [pc, #400]	@ (8008cb0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	f200 80ae 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b24:	4a63      	ldr	r2, [pc, #396]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	f000 80a1 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b2c:	4a61      	ldr	r2, [pc, #388]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f200 80a6 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b34:	4a60      	ldr	r2, [pc, #384]	@ (8008cb8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f000 8099 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8008cb8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	f200 809e 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b48:	f000 8091 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b50:	f200 8096 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b58:	f000 8089 	beq.w	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b60:	f200 808e 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b68:	d03e      	beq.n	8008be8 <HAL_TIM_ConfigClockSource+0x158>
 8008b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b6e:	f200 8087 	bhi.w	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b76:	f000 8086 	beq.w	8008c86 <HAL_TIM_ConfigClockSource+0x1f6>
 8008b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b7e:	d87f      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b80:	2b70      	cmp	r3, #112	@ 0x70
 8008b82:	d01a      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0x12a>
 8008b84:	2b70      	cmp	r3, #112	@ 0x70
 8008b86:	d87b      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b88:	2b60      	cmp	r3, #96	@ 0x60
 8008b8a:	d050      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x19e>
 8008b8c:	2b60      	cmp	r3, #96	@ 0x60
 8008b8e:	d877      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b90:	2b50      	cmp	r3, #80	@ 0x50
 8008b92:	d03c      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0x17e>
 8008b94:	2b50      	cmp	r3, #80	@ 0x50
 8008b96:	d873      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b98:	2b40      	cmp	r3, #64	@ 0x40
 8008b9a:	d058      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x1be>
 8008b9c:	2b40      	cmp	r3, #64	@ 0x40
 8008b9e:	d86f      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba0:	2b30      	cmp	r3, #48	@ 0x30
 8008ba2:	d064      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008ba4:	2b30      	cmp	r3, #48	@ 0x30
 8008ba6:	d86b      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d060      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d867      	bhi.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d05c      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d05a      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x1de>
 8008bb8:	e062      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bca:	f000 fe8b 	bl	80098e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	609a      	str	r2, [r3, #8]
      break;
 8008be6:	e04f      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bf8:	f000 fe74 	bl	80098e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c0a:	609a      	str	r2, [r3, #8]
      break;
 8008c0c:	e03c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 fde6 	bl	80097ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2150      	movs	r1, #80	@ 0x50
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fe3f 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e02c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f000 fe05 	bl	800984a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2160      	movs	r1, #96	@ 0x60
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fe2f 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008c4c:	e01c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f000 fdc6 	bl	80097ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2140      	movs	r1, #64	@ 0x40
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fe1f 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008c6c:	e00c      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f000 fe16 	bl	80098aa <TIM_ITRx_SetConfig>
      break;
 8008c7e:	e003      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
      break;
 8008c84:	e000      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	00100070 	.word	0x00100070
 8008ca8:	00100060 	.word	0x00100060
 8008cac:	00100050 	.word	0x00100050
 8008cb0:	00100040 	.word	0x00100040
 8008cb4:	00100030 	.word	0x00100030
 8008cb8:	00100020 	.word	0x00100020

08008cbc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e14a      	b.n	8009022 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	f040 80dd 	bne.w	8008f54 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	2b1f      	cmp	r3, #31
 8008d9e:	f200 80d6 	bhi.w	8008f4e <HAL_TIM_RegisterCallback+0x1de>
 8008da2:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <HAL_TIM_RegisterCallback+0x38>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008e29 	.word	0x08008e29
 8008dac:	08008e31 	.word	0x08008e31
 8008db0:	08008e39 	.word	0x08008e39
 8008db4:	08008e41 	.word	0x08008e41
 8008db8:	08008e49 	.word	0x08008e49
 8008dbc:	08008e51 	.word	0x08008e51
 8008dc0:	08008e59 	.word	0x08008e59
 8008dc4:	08008e61 	.word	0x08008e61
 8008dc8:	08008e69 	.word	0x08008e69
 8008dcc:	08008e71 	.word	0x08008e71
 8008dd0:	08008e79 	.word	0x08008e79
 8008dd4:	08008e81 	.word	0x08008e81
 8008dd8:	08008e89 	.word	0x08008e89
 8008ddc:	08008e91 	.word	0x08008e91
 8008de0:	08008e9b 	.word	0x08008e9b
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	08008eaf 	.word	0x08008eaf
 8008dec:	08008eb9 	.word	0x08008eb9
 8008df0:	08008ec3 	.word	0x08008ec3
 8008df4:	08008ecd 	.word	0x08008ecd
 8008df8:	08008ed7 	.word	0x08008ed7
 8008dfc:	08008ee1 	.word	0x08008ee1
 8008e00:	08008eeb 	.word	0x08008eeb
 8008e04:	08008ef5 	.word	0x08008ef5
 8008e08:	08008eff 	.word	0x08008eff
 8008e0c:	08008f09 	.word	0x08008f09
 8008e10:	08008f13 	.word	0x08008f13
 8008e14:	08008f1d 	.word	0x08008f1d
 8008e18:	08008f27 	.word	0x08008f27
 8008e1c:	08008f31 	.word	0x08008f31
 8008e20:	08008f3b 	.word	0x08008f3b
 8008e24:	08008f45 	.word	0x08008f45
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008e2e:	e0f7      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008e36:	e0f3      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008e3e:	e0ef      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008e46:	e0eb      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008e4e:	e0e7      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008e56:	e0e3      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008e5e:	e0df      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008e66:	e0db      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008e6e:	e0d7      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008e76:	e0d3      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008e7e:	e0cf      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008e86:	e0cb      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008e8e:	e0c7      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008e98:	e0c2      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008ea2:	e0bd      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008eac:	e0b8      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008eb6:	e0b3      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008ec0:	e0ae      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008eca:	e0a9      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008ed4:	e0a4      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008ede:	e09f      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008ee8:	e09a      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008ef2:	e095      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008efc:	e090      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008f06:	e08b      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008f10:	e086      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008f1a:	e081      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008f24:	e07c      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008f2e:	e077      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008f38:	e072      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008f42:	e06d      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008f4c:	e068      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]
        break;
 8008f52:	e065      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d15d      	bne.n	800901c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	2b0d      	cmp	r3, #13
 8008f64:	d857      	bhi.n	8009016 <HAL_TIM_RegisterCallback+0x2a6>
 8008f66:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <HAL_TIM_RegisterCallback+0x1fc>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008fa5 	.word	0x08008fa5
 8008f70:	08008fad 	.word	0x08008fad
 8008f74:	08008fb5 	.word	0x08008fb5
 8008f78:	08008fbd 	.word	0x08008fbd
 8008f7c:	08008fc5 	.word	0x08008fc5
 8008f80:	08008fcd 	.word	0x08008fcd
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fdd 	.word	0x08008fdd
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08008ff5 	.word	0x08008ff5
 8008f98:	08008ffd 	.word	0x08008ffd
 8008f9c:	08009005 	.word	0x08009005
 8008fa0:	0800900d 	.word	0x0800900d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008faa:	e039      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008fb2:	e035      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008fba:	e031      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008fc2:	e02d      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008fca:	e029      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008fd2:	e025      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008fda:	e021      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008fe2:	e01d      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008fea:	e019      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008ff2:	e015      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008ffa:	e011      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009002:	e00d      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800900a:	e009      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009014:	e004      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
        break;
 800901a:	e001      	b.n	8009020 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop

08009030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a4c      	ldr	r2, [pc, #304]	@ (8009174 <TIM_Base_SetConfig+0x144>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d017      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904e:	d013      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a49      	ldr	r2, [pc, #292]	@ (8009178 <TIM_Base_SetConfig+0x148>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00f      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a48      	ldr	r2, [pc, #288]	@ (800917c <TIM_Base_SetConfig+0x14c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00b      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a47      	ldr	r2, [pc, #284]	@ (8009180 <TIM_Base_SetConfig+0x150>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d007      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a46      	ldr	r2, [pc, #280]	@ (8009184 <TIM_Base_SetConfig+0x154>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_Base_SetConfig+0x48>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a45      	ldr	r2, [pc, #276]	@ (8009188 <TIM_Base_SetConfig+0x158>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d108      	bne.n	800908a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a39      	ldr	r2, [pc, #228]	@ (8009174 <TIM_Base_SetConfig+0x144>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d023      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009098:	d01f      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a36      	ldr	r2, [pc, #216]	@ (8009178 <TIM_Base_SetConfig+0x148>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d01b      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a35      	ldr	r2, [pc, #212]	@ (800917c <TIM_Base_SetConfig+0x14c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d017      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a34      	ldr	r2, [pc, #208]	@ (8009180 <TIM_Base_SetConfig+0x150>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d013      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a33      	ldr	r2, [pc, #204]	@ (8009184 <TIM_Base_SetConfig+0x154>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00f      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a33      	ldr	r2, [pc, #204]	@ (800918c <TIM_Base_SetConfig+0x15c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00b      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a32      	ldr	r2, [pc, #200]	@ (8009190 <TIM_Base_SetConfig+0x160>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d007      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a31      	ldr	r2, [pc, #196]	@ (8009194 <TIM_Base_SetConfig+0x164>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_Base_SetConfig+0xaa>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009188 <TIM_Base_SetConfig+0x158>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d108      	bne.n	80090ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a18      	ldr	r2, [pc, #96]	@ (8009174 <TIM_Base_SetConfig+0x144>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d013      	beq.n	8009140 <TIM_Base_SetConfig+0x110>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a1a      	ldr	r2, [pc, #104]	@ (8009184 <TIM_Base_SetConfig+0x154>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00f      	beq.n	8009140 <TIM_Base_SetConfig+0x110>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a1a      	ldr	r2, [pc, #104]	@ (800918c <TIM_Base_SetConfig+0x15c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00b      	beq.n	8009140 <TIM_Base_SetConfig+0x110>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a19      	ldr	r2, [pc, #100]	@ (8009190 <TIM_Base_SetConfig+0x160>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <TIM_Base_SetConfig+0x110>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a18      	ldr	r2, [pc, #96]	@ (8009194 <TIM_Base_SetConfig+0x164>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d003      	beq.n	8009140 <TIM_Base_SetConfig+0x110>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <TIM_Base_SetConfig+0x158>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d103      	bne.n	8009148 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b01      	cmp	r3, #1
 8009158:	d105      	bne.n	8009166 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f023 0201 	bic.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	611a      	str	r2, [r3, #16]
  }
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	40012c00 	.word	0x40012c00
 8009178:	40000400 	.word	0x40000400
 800917c:	40000800 	.word	0x40000800
 8009180:	40000c00 	.word	0x40000c00
 8009184:	40013400 	.word	0x40013400
 8009188:	40015000 	.word	0x40015000
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800

08009198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	f023 0201 	bic.w	r2, r3, #1
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 0302 	bic.w	r3, r3, #2
 80091e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a30      	ldr	r2, [pc, #192]	@ (80092b4 <TIM_OC1_SetConfig+0x11c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d013      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a2f      	ldr	r2, [pc, #188]	@ (80092b8 <TIM_OC1_SetConfig+0x120>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00f      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a2e      	ldr	r2, [pc, #184]	@ (80092bc <TIM_OC1_SetConfig+0x124>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a2d      	ldr	r2, [pc, #180]	@ (80092c0 <TIM_OC1_SetConfig+0x128>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a2c      	ldr	r2, [pc, #176]	@ (80092c4 <TIM_OC1_SetConfig+0x12c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_OC1_SetConfig+0x88>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a2b      	ldr	r2, [pc, #172]	@ (80092c8 <TIM_OC1_SetConfig+0x130>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10c      	bne.n	800923a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f023 0308 	bic.w	r3, r3, #8
 8009226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f023 0304 	bic.w	r3, r3, #4
 8009238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1d      	ldr	r2, [pc, #116]	@ (80092b4 <TIM_OC1_SetConfig+0x11c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1c      	ldr	r2, [pc, #112]	@ (80092b8 <TIM_OC1_SetConfig+0x120>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00f      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1b      	ldr	r2, [pc, #108]	@ (80092bc <TIM_OC1_SetConfig+0x124>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00b      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1a      	ldr	r2, [pc, #104]	@ (80092c0 <TIM_OC1_SetConfig+0x128>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d007      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a19      	ldr	r2, [pc, #100]	@ (80092c4 <TIM_OC1_SetConfig+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_OC1_SetConfig+0xd2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a18      	ldr	r2, [pc, #96]	@ (80092c8 <TIM_OC1_SetConfig+0x130>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d111      	bne.n	800928e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	621a      	str	r2, [r3, #32]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	40012c00 	.word	0x40012c00
 80092b8:	40013400 	.word	0x40013400
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40014400 	.word	0x40014400
 80092c4:	40014800 	.word	0x40014800
 80092c8:	40015000 	.word	0x40015000

080092cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	f023 0210 	bic.w	r2, r3, #16
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0320 	bic.w	r3, r3, #32
 800931a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a2c      	ldr	r2, [pc, #176]	@ (80093dc <TIM_OC2_SetConfig+0x110>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_OC2_SetConfig+0x74>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a2b      	ldr	r2, [pc, #172]	@ (80093e0 <TIM_OC2_SetConfig+0x114>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC2_SetConfig+0x74>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a2a      	ldr	r2, [pc, #168]	@ (80093e4 <TIM_OC2_SetConfig+0x118>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10d      	bne.n	800935c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800935a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a1f      	ldr	r2, [pc, #124]	@ (80093dc <TIM_OC2_SetConfig+0x110>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d013      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a1e      	ldr	r2, [pc, #120]	@ (80093e0 <TIM_OC2_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00f      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a1e      	ldr	r2, [pc, #120]	@ (80093e8 <TIM_OC2_SetConfig+0x11c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d00b      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a1d      	ldr	r2, [pc, #116]	@ (80093ec <TIM_OC2_SetConfig+0x120>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d007      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1c      	ldr	r2, [pc, #112]	@ (80093f0 <TIM_OC2_SetConfig+0x124>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d003      	beq.n	800938c <TIM_OC2_SetConfig+0xc0>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a17      	ldr	r2, [pc, #92]	@ (80093e4 <TIM_OC2_SetConfig+0x118>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d113      	bne.n	80093b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	40013400 	.word	0x40013400
 80093e4:	40015000 	.word	0x40015000
 80093e8:	40014000 	.word	0x40014000
 80093ec:	40014400 	.word	0x40014400
 80093f0:	40014800 	.word	0x40014800

080093f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a2b      	ldr	r2, [pc, #172]	@ (8009500 <TIM_OC3_SetConfig+0x10c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <TIM_OC3_SetConfig+0x72>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2a      	ldr	r2, [pc, #168]	@ (8009504 <TIM_OC3_SetConfig+0x110>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_OC3_SetConfig+0x72>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a29      	ldr	r2, [pc, #164]	@ (8009508 <TIM_OC3_SetConfig+0x114>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d10d      	bne.n	8009482 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800946c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a1e      	ldr	r2, [pc, #120]	@ (8009500 <TIM_OC3_SetConfig+0x10c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1d      	ldr	r2, [pc, #116]	@ (8009504 <TIM_OC3_SetConfig+0x110>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00f      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1d      	ldr	r2, [pc, #116]	@ (800950c <TIM_OC3_SetConfig+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1c      	ldr	r2, [pc, #112]	@ (8009510 <TIM_OC3_SetConfig+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009514 <TIM_OC3_SetConfig+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_OC3_SetConfig+0xbe>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a16      	ldr	r2, [pc, #88]	@ (8009508 <TIM_OC3_SetConfig+0x114>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d113      	bne.n	80094da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40012c00 	.word	0x40012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	40015000 	.word	0x40015000
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800

08009518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800954a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	031b      	lsls	r3, r3, #12
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a2c      	ldr	r2, [pc, #176]	@ (8009628 <TIM_OC4_SetConfig+0x110>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d007      	beq.n	800958c <TIM_OC4_SetConfig+0x74>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a2b      	ldr	r2, [pc, #172]	@ (800962c <TIM_OC4_SetConfig+0x114>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_OC4_SetConfig+0x74>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a2a      	ldr	r2, [pc, #168]	@ (8009630 <TIM_OC4_SetConfig+0x118>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10d      	bne.n	80095a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	031b      	lsls	r3, r3, #12
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009628 <TIM_OC4_SetConfig+0x110>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1e      	ldr	r2, [pc, #120]	@ (800962c <TIM_OC4_SetConfig+0x114>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00f      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <TIM_OC4_SetConfig+0x11c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009638 <TIM_OC4_SetConfig+0x120>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a1c      	ldr	r2, [pc, #112]	@ (800963c <TIM_OC4_SetConfig+0x124>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_OC4_SetConfig+0xc0>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a17      	ldr	r2, [pc, #92]	@ (8009630 <TIM_OC4_SetConfig+0x118>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d113      	bne.n	8009600 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	019b      	lsls	r3, r3, #6
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	019b      	lsls	r3, r3, #6
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	621a      	str	r2, [r3, #32]
}
 800961a:	bf00      	nop
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40012c00 	.word	0x40012c00
 800962c:	40013400 	.word	0x40013400
 8009630:	40015000 	.word	0x40015000
 8009634:	40014000 	.word	0x40014000
 8009638:	40014400 	.word	0x40014400
 800963c:	40014800 	.word	0x40014800

08009640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800966e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009684:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	041b      	lsls	r3, r3, #16
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a19      	ldr	r2, [pc, #100]	@ (80096fc <TIM_OC5_SetConfig+0xbc>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d013      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a18      	ldr	r2, [pc, #96]	@ (8009700 <TIM_OC5_SetConfig+0xc0>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00f      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a17      	ldr	r2, [pc, #92]	@ (8009704 <TIM_OC5_SetConfig+0xc4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00b      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a16      	ldr	r2, [pc, #88]	@ (8009708 <TIM_OC5_SetConfig+0xc8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d007      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a15      	ldr	r2, [pc, #84]	@ (800970c <TIM_OC5_SetConfig+0xcc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d003      	beq.n	80096c2 <TIM_OC5_SetConfig+0x82>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a14      	ldr	r2, [pc, #80]	@ (8009710 <TIM_OC5_SetConfig+0xd0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d109      	bne.n	80096d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	621a      	str	r2, [r3, #32]
}
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	40012c00 	.word	0x40012c00
 8009700:	40013400 	.word	0x40013400
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800
 8009710:	40015000 	.word	0x40015000

08009714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800975a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	051b      	lsls	r3, r3, #20
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1a      	ldr	r2, [pc, #104]	@ (80097d4 <TIM_OC6_SetConfig+0xc0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d013      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a19      	ldr	r2, [pc, #100]	@ (80097d8 <TIM_OC6_SetConfig+0xc4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00f      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a18      	ldr	r2, [pc, #96]	@ (80097dc <TIM_OC6_SetConfig+0xc8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00b      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a17      	ldr	r2, [pc, #92]	@ (80097e0 <TIM_OC6_SetConfig+0xcc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a16      	ldr	r2, [pc, #88]	@ (80097e4 <TIM_OC6_SetConfig+0xd0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_OC6_SetConfig+0x84>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a15      	ldr	r2, [pc, #84]	@ (80097e8 <TIM_OC6_SetConfig+0xd4>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d109      	bne.n	80097ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800979e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	029b      	lsls	r3, r3, #10
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40012c00 	.word	0x40012c00
 80097d8:	40013400 	.word	0x40013400
 80097dc:	40014000 	.word	0x40014000
 80097e0:	40014400 	.word	0x40014400
 80097e4:	40014800 	.word	0x40014800
 80097e8:	40015000 	.word	0x40015000

080097ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f023 0201 	bic.w	r2, r3, #1
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f023 030a 	bic.w	r3, r3, #10
 8009828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	621a      	str	r2, [r3, #32]
}
 800983e:	bf00      	nop
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984a:	b480      	push	{r7}
 800984c:	b087      	sub	sp, #28
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	f023 0210 	bic.w	r2, r3, #16
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	031b      	lsls	r3, r3, #12
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80098c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f043 0307 	orr.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
}
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	fa01 f303 	lsl.w	r3, r1, r3
 800995c:	431a      	orrs	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a26      	ldr	r2, [pc, #152]	@ (8009a14 <TIM_ResetCallback+0xa4>)
 800997c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a25      	ldr	r2, [pc, #148]	@ (8009a18 <TIM_ResetCallback+0xa8>)
 8009984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a24      	ldr	r2, [pc, #144]	@ (8009a1c <TIM_ResetCallback+0xac>)
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a23      	ldr	r2, [pc, #140]	@ (8009a20 <TIM_ResetCallback+0xb0>)
 8009994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a22      	ldr	r2, [pc, #136]	@ (8009a24 <TIM_ResetCallback+0xb4>)
 800999c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a21      	ldr	r2, [pc, #132]	@ (8009a28 <TIM_ResetCallback+0xb8>)
 80099a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a20      	ldr	r2, [pc, #128]	@ (8009a2c <TIM_ResetCallback+0xbc>)
 80099ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a30 <TIM_ResetCallback+0xc0>)
 80099b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009a34 <TIM_ResetCallback+0xc4>)
 80099bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009a38 <TIM_ResetCallback+0xc8>)
 80099c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a1c      	ldr	r2, [pc, #112]	@ (8009a3c <TIM_ResetCallback+0xcc>)
 80099cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a40 <TIM_ResetCallback+0xd0>)
 80099d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a1a      	ldr	r2, [pc, #104]	@ (8009a44 <TIM_ResetCallback+0xd4>)
 80099dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a19      	ldr	r2, [pc, #100]	@ (8009a48 <TIM_ResetCallback+0xd8>)
 80099e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <TIM_ResetCallback+0xdc>)
 80099ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <TIM_ResetCallback+0xe0>)
 80099f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a16      	ldr	r2, [pc, #88]	@ (8009a54 <TIM_ResetCallback+0xe4>)
 80099fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <TIM_ResetCallback+0xe8>)
 8009a04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	08002f91 	.word	0x08002f91
 8009a18:	08008cbd 	.word	0x08008cbd
 8009a1c:	08008d35 	.word	0x08008d35
 8009a20:	08008d49 	.word	0x08008d49
 8009a24:	08008ce5 	.word	0x08008ce5
 8009a28:	08008cf9 	.word	0x08008cf9
 8009a2c:	08008cd1 	.word	0x08008cd1
 8009a30:	08008d0d 	.word	0x08008d0d
 8009a34:	08008d21 	.word	0x08008d21
 8009a38:	08008d5d 	.word	0x08008d5d
 8009a3c:	08009cb1 	.word	0x08009cb1
 8009a40:	08009cc5 	.word	0x08009cc5
 8009a44:	08009cd9 	.word	0x08009cd9
 8009a48:	08009ced 	.word	0x08009ced
 8009a4c:	08009d01 	.word	0x08009d01
 8009a50:	08009d15 	.word	0x08009d15
 8009a54:	08009d29 	.word	0x08009d29
 8009a58:	08009d3d 	.word	0x08009d3d

08009a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e074      	b.n	8009b5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a34      	ldr	r2, [pc, #208]	@ (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d009      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a33      	ldr	r2, [pc, #204]	@ (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a31      	ldr	r2, [pc, #196]	@ (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d108      	bne.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a21      	ldr	r2, [pc, #132]	@ (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d022      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af4:	d01d      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1f      	ldr	r2, [pc, #124]	@ (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d018      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d013      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00e      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a15      	ldr	r2, [pc, #84]	@ (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a18      	ldr	r2, [pc, #96]	@ (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a11      	ldr	r2, [pc, #68]	@ (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d10c      	bne.n	8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40012c00 	.word	0x40012c00
 8009b70:	40013400 	.word	0x40013400
 8009b74:	40015000 	.word	0x40015000
 8009b78:	40000400 	.word	0x40000400
 8009b7c:	40000800 	.word	0x40000800
 8009b80:	40000c00 	.word	0x40000c00
 8009b84:	40014000 	.word	0x40014000

08009b88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d101      	bne.n	8009ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e078      	b.n	8009c96 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d009      	beq.n	8009c4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d004      	beq.n	8009c4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a19      	ldr	r2, [pc, #100]	@ (8009cac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d11c      	bne.n	8009c84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c54:	051b      	lsls	r3, r3, #20
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c72:	4313      	orrs	r3, r2
 8009c74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	40012c00 	.word	0x40012c00
 8009ca8:	40013400 	.word	0x40013400
 8009cac:	40015000 	.word	0x40015000

08009cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e050      	b.n	8009e04 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d114      	bne.n	8009d96 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fde5 	bl	800a944 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d103      	bne.n	8009d8c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a21      	ldr	r2, [pc, #132]	@ (8009e0c <HAL_UART_Init+0xbc>)
 8009d88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2224      	movs	r2, #36	@ 0x24
 8009d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0201 	bic.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 f912 	bl	800afe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fe13 	bl	800a9e8 <UART_SetConfig>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e01b      	b.n	8009e04 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f991 	bl	800b124 <UART_CheckIdleState>
 8009e02:	4603      	mov	r3, r0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	08003ce9 	.word	0x08003ce9

08009e10 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e09c      	b.n	8009f76 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	d16c      	bne.n	8009f20 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	2b0c      	cmp	r3, #12
 8009e4a:	d85e      	bhi.n	8009f0a <HAL_UART_RegisterCallback+0xfa>
 8009e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <HAL_UART_RegisterCallback+0x44>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e89 	.word	0x08009e89
 8009e58:	08009e93 	.word	0x08009e93
 8009e5c:	08009e9d 	.word	0x08009e9d
 8009e60:	08009ea7 	.word	0x08009ea7
 8009e64:	08009eb1 	.word	0x08009eb1
 8009e68:	08009ebb 	.word	0x08009ebb
 8009e6c:	08009ec5 	.word	0x08009ec5
 8009e70:	08009ecf 	.word	0x08009ecf
 8009e74:	08009ed9 	.word	0x08009ed9
 8009e78:	08009ee3 	.word	0x08009ee3
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	08009ef7 	.word	0x08009ef7
 8009e84:	08009f01 	.word	0x08009f01
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009e90:	e070      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009e9a:	e06b      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009ea4:	e066      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009eae:	e061      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009eb8:	e05c      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009ec2:	e057      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009ecc:	e052      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009ed6:	e04d      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009ee0:	e048      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009eea:	e043      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009ef4:	e03e      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009efe:	e039      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009f08:	e034      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
        break;
 8009f1e:	e029      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d11a      	bne.n	8009f60 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	2b0b      	cmp	r3, #11
 8009f2e:	d002      	beq.n	8009f36 <HAL_UART_RegisterCallback+0x126>
 8009f30:	2b0c      	cmp	r3, #12
 8009f32:	d005      	beq.n	8009f40 <HAL_UART_RegisterCallback+0x130>
 8009f34:	e009      	b.n	8009f4a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009f3e:	e019      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009f48:	e014      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8009f5e:	e009      	b.n	8009f74 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	@ 0x28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d167      	bne.n	800a06c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d002      	beq.n	8009fa8 <HAL_UART_Transmit_DMA+0x24>
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e060      	b.n	800a06e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	88fa      	ldrh	r2, [r7, #6]
 8009fbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2221      	movs	r2, #33	@ 0x21
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d028      	beq.n	800a02c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fde:	4a26      	ldr	r2, [pc, #152]	@ (800a078 <HAL_UART_Transmit_DMA+0xf4>)
 8009fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fe6:	4a25      	ldr	r2, [pc, #148]	@ (800a07c <HAL_UART_Transmit_DMA+0xf8>)
 8009fe8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fee:	4a24      	ldr	r2, [pc, #144]	@ (800a080 <HAL_UART_Transmit_DMA+0xfc>)
 8009ff0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a002:	4619      	mov	r1, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3328      	adds	r3, #40	@ 0x28
 800a00a:	461a      	mov	r2, r3
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	f7fc f869 	bl	80060e4 <HAL_DMA_Start_IT>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d009      	beq.n	800a02c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2210      	movs	r2, #16
 800a01c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e020      	b.n	800a06e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2240      	movs	r2, #64	@ 0x40
 800a032:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3308      	adds	r3, #8
 800a03a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	e853 3f00 	ldrex	r3, [r3]
 800a042:	613b      	str	r3, [r7, #16]
   return(result);
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3308      	adds	r3, #8
 800a052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a054:	623a      	str	r2, [r7, #32]
 800a056:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	69f9      	ldr	r1, [r7, #28]
 800a05a:	6a3a      	ldr	r2, [r7, #32]
 800a05c:	e841 2300 	strex	r3, r2, [r1]
 800a060:	61bb      	str	r3, [r7, #24]
   return(result);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e5      	bne.n	800a034 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	e000      	b.n	800a06e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a06c:	2302      	movs	r3, #2
  }
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3728      	adds	r7, #40	@ 0x28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	0800b5ef 	.word	0x0800b5ef
 800a07c:	0800b68d 	.word	0x0800b68d
 800a080:	0800b827 	.word	0x0800b827

0800a084 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	@ 0x28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a098:	2b20      	cmp	r3, #32
 800a09a:	d137      	bne.n	800a10c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <HAL_UART_Receive_DMA+0x24>
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e030      	b.n	800a10e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a18      	ldr	r2, [pc, #96]	@ (800a118 <HAL_UART_Receive_DMA+0x94>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d01f      	beq.n	800a0fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d018      	beq.n	800a0fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	623b      	str	r3, [r7, #32]
 800a0ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	69f9      	ldr	r1, [r7, #28]
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e6      	bne.n	800a0ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	461a      	mov	r2, r3
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f001 f926 	bl	800b354 <UART_Start_Receive_DMA>
 800a108:	4603      	mov	r3, r0
 800a10a:	e000      	b.n	800a10e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a10c:	2302      	movs	r3, #2
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3728      	adds	r7, #40	@ 0x28
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	40008000 	.word	0x40008000

0800a11c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b0ba      	sub	sp, #232	@ 0xe8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a146:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a14a:	4013      	ands	r3, r2
 800a14c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11b      	bne.n	800a190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d015      	beq.n	800a190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d105      	bne.n	800a17c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 8312 	beq.w	800a7aa <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
      }
      return;
 800a18e:	e30c      	b.n	800a7aa <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8129 	beq.w	800a3ec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a19a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a19e:	4b90      	ldr	r3, [pc, #576]	@ (800a3e0 <HAL_UART_IRQHandler+0x2c4>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a1a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a1aa:	4b8e      	ldr	r3, [pc, #568]	@ (800a3e4 <HAL_UART_IRQHandler+0x2c8>)
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 811c 	beq.w	800a3ec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d011      	beq.n	800a1e4 <HAL_UART_IRQHandler+0xc8>
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1da:	f043 0201 	orr.w	r2, r3, #1
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d011      	beq.n	800a214 <HAL_UART_IRQHandler+0xf8>
 800a1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2202      	movs	r2, #2
 800a202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20a:	f043 0204 	orr.w	r2, r3, #4
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d011      	beq.n	800a244 <HAL_UART_IRQHandler+0x128>
 800a220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2204      	movs	r2, #4
 800a232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a23a:	f043 0202 	orr.w	r2, r3, #2
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d017      	beq.n	800a280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a254:	f003 0320 	and.w	r3, r3, #32
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a25c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a260:	4b5f      	ldr	r3, [pc, #380]	@ (800a3e0 <HAL_UART_IRQHandler+0x2c4>)
 800a262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2208      	movs	r2, #8
 800a26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a276:	f043 0208 	orr.w	r2, r3, #8
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d012      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x196>
 800a28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00c      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a8:	f043 0220 	orr.w	r2, r3, #32
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8278 	beq.w	800a7ae <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d013      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d105      	bne.n	800a2e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d007      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a306:	2b40      	cmp	r3, #64	@ 0x40
 800a308:	d005      	beq.n	800a316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a30a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a30e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a312:	2b00      	cmp	r3, #0
 800a314:	d058      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 f903 	bl	800b522 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a326:	2b40      	cmp	r3, #64	@ 0x40
 800a328:	d148      	bne.n	800a3bc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3308      	adds	r3, #8
 800a330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a35a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a36e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1d9      	bne.n	800a32a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a386:	4a18      	ldr	r2, [pc, #96]	@ (800a3e8 <HAL_UART_IRQHandler+0x2cc>)
 800a388:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a390:	4618      	mov	r0, r3
 800a392:	f7fb ff7b 	bl	800628c <HAL_DMA_Abort_IT>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01f      	beq.n	800a3dc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ae:	e015      	b.n	800a3dc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ba:	e00f      	b.n	800a3dc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3c6:	e009      	b.n	800a3dc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a3da:	e1e8      	b.n	800a7ae <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3dc:	bf00      	nop
    return;
 800a3de:	e1e6      	b.n	800a7ae <HAL_UART_IRQHandler+0x692>
 800a3e0:	10000001 	.word	0x10000001
 800a3e4:	04000120 	.word	0x04000120
 800a3e8:	0800b8ab 	.word	0x0800b8ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	f040 8176 	bne.w	800a6e2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 816f 	beq.w	800a6e2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8168 	beq.w	800a6e2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2210      	movs	r2, #16
 800a418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a424:	2b40      	cmp	r3, #64	@ 0x40
 800a426:	f040 80dc 	bne.w	800a5e2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 80b1 	beq.w	800a5a4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a44c:	429a      	cmp	r2, r3
 800a44e:	f080 80a9 	bcs.w	800a5a4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a458:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f040 8087 	bne.w	800a57e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a48c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a49a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a49e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a4a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a4b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1da      	bne.n	800a470 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
 800a4d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a4de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a4e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a4e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e1      	bne.n	800a4ba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a50c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a51a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a51c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e3      	bne.n	800a4f6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54c:	f023 0310 	bic.w	r3, r3, #16
 800a550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a55e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a560:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e4      	bne.n	800a53c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fb fe2e 	bl	80061da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a596:	b292      	uxth	r2, r2
 800a598:	1a8a      	subs	r2, r1, r2
 800a59a:	b292      	uxth	r2, r2
 800a59c:	4611      	mov	r1, r2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a5a2:	e106      	b.n	800a7b2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	f040 80ff 	bne.w	800a7b2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	f040 80f5 	bne.w	800a7b2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a5da:	4611      	mov	r1, r2
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
      return;
 800a5e0:	e0e7      	b.n	800a7b2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80d9 	beq.w	800a7b6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80d4 	beq.w	800a7b6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a630:	647b      	str	r3, [r7, #68]	@ 0x44
 800a632:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e4      	bne.n	800a60e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	623b      	str	r3, [r7, #32]
   return(result);
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a65a:	f023 0301 	bic.w	r3, r3, #1
 800a65e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3308      	adds	r3, #8
 800a668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a66c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e1      	bne.n	800a644 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	e853 3f00 	ldrex	r3, [r3]
 800a6a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f023 0310 	bic.w	r3, r3, #16
 800a6a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6b6:	61fb      	str	r3, [r7, #28]
 800a6b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	69b9      	ldr	r1, [r7, #24]
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e4      	bne.n	800a694 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6d6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a6da:	4611      	mov	r1, r2
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6e0:	e069      	b.n	800a7b6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d010      	beq.n	800a710 <HAL_UART_IRQHandler+0x5f4>
 800a6ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a702:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a70e:	e055      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d014      	beq.n	800a746 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a72c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d008      	beq.n	800a746 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d03e      	beq.n	800a7ba <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
    }
    return;
 800a744:	e039      	b.n	800a7ba <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a74a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <HAL_UART_IRQHandler+0x64a>
 800a752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 f8b7 	bl	800b8d2 <UART_EndTransmit_IT>
    return;
 800a764:	e02a      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_UART_IRQHandler+0x66e>
 800a772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a776:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a788:	e018      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d012      	beq.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
 800a796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	da0e      	bge.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7a8:	e008      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a7aa:	bf00      	nop
 800a7ac:	e006      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
    return;
 800a7ae:	bf00      	nop
 800a7b0:	e004      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a7b2:	bf00      	nop
 800a7b4:	e002      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
      return;
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <HAL_UART_IRQHandler+0x6a0>
    return;
 800a7ba:	bf00      	nop
  }
}
 800a7bc:	37e8      	adds	r7, #232	@ 0xe8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop

0800a7c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a09      	ldr	r2, [pc, #36]	@ (800a8b0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	615a      	str	r2, [r3, #20]
  }
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	40008000 	.word	0x40008000

0800a8b4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a18      	ldr	r2, [pc, #96]	@ (800a924 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d027      	beq.n	800a916 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	d120      	bne.n	800a912 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <HAL_UART_EnableReceiverTimeout+0x2a>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e01c      	b.n	800a918 <HAL_UART_EnableReceiverTimeout+0x64>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2224      	movs	r2, #36	@ 0x24
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a8fc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2220      	movs	r2, #32
 800a902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	e002      	b.n	800a918 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a912:	2302      	movs	r3, #2
 800a914:	e000      	b.n	800a918 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	40008000 	.word	0x40008000

0800a928 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9b8 <UART_InitCallbacksToDefault+0x74>)
 800a950:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a19      	ldr	r2, [pc, #100]	@ (800a9bc <UART_InitCallbacksToDefault+0x78>)
 800a958:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a18      	ldr	r2, [pc, #96]	@ (800a9c0 <UART_InitCallbacksToDefault+0x7c>)
 800a960:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a17      	ldr	r2, [pc, #92]	@ (800a9c4 <UART_InitCallbacksToDefault+0x80>)
 800a968:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a16      	ldr	r2, [pc, #88]	@ (800a9c8 <UART_InitCallbacksToDefault+0x84>)
 800a970:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a15      	ldr	r2, [pc, #84]	@ (800a9cc <UART_InitCallbacksToDefault+0x88>)
 800a978:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a14      	ldr	r2, [pc, #80]	@ (800a9d0 <UART_InitCallbacksToDefault+0x8c>)
 800a980:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a13      	ldr	r2, [pc, #76]	@ (800a9d4 <UART_InitCallbacksToDefault+0x90>)
 800a988:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a12      	ldr	r2, [pc, #72]	@ (800a9d8 <UART_InitCallbacksToDefault+0x94>)
 800a990:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a11      	ldr	r2, [pc, #68]	@ (800a9dc <UART_InitCallbacksToDefault+0x98>)
 800a998:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a10      	ldr	r2, [pc, #64]	@ (800a9e0 <UART_InitCallbacksToDefault+0x9c>)
 800a9a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a9e4 <UART_InitCallbacksToDefault+0xa0>)
 800a9a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	0800a7d9 	.word	0x0800a7d9
 800a9bc:	0800a7c5 	.word	0x0800a7c5
 800a9c0:	0800a801 	.word	0x0800a801
 800a9c4:	0800a7ed 	.word	0x0800a7ed
 800a9c8:	0800a815 	.word	0x0800a815
 800a9cc:	0800a829 	.word	0x0800a829
 800a9d0:	0800a83d 	.word	0x0800a83d
 800a9d4:	0800a851 	.word	0x0800a851
 800a9d8:	0800b92d 	.word	0x0800b92d
 800a9dc:	0800b941 	.word	0x0800b941
 800a9e0:	0800b955 	.word	0x0800b955
 800a9e4:	0800a865 	.word	0x0800a865

0800a9e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9ec:	b08c      	sub	sp, #48	@ 0x30
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	431a      	orrs	r2, r3
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4baa      	ldr	r3, [pc, #680]	@ (800acc0 <UART_SetConfig+0x2d8>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa20:	430b      	orrs	r3, r1
 800aa22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a9f      	ldr	r2, [pc, #636]	@ (800acc4 <UART_SetConfig+0x2dc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d004      	beq.n	800aa54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa50:	4313      	orrs	r3, r2
 800aa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aa5e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa72:	f023 010f 	bic.w	r1, r3, #15
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a90      	ldr	r2, [pc, #576]	@ (800acc8 <UART_SetConfig+0x2e0>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d125      	bne.n	800aad8 <UART_SetConfig+0xf0>
 800aa8c:	4b8f      	ldr	r3, [pc, #572]	@ (800accc <UART_SetConfig+0x2e4>)
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d81a      	bhi.n	800aad0 <UART_SetConfig+0xe8>
 800aa9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa0 <UART_SetConfig+0xb8>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aab1 	.word	0x0800aab1
 800aaa4:	0800aac1 	.word	0x0800aac1
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800aac9 	.word	0x0800aac9
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab6:	e116      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aab8:	2302      	movs	r3, #2
 800aaba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aabe:	e112      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aac0:	2304      	movs	r3, #4
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac6:	e10e      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aac8:	2308      	movs	r3, #8
 800aaca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aace:	e10a      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aad0:	2310      	movs	r3, #16
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad6:	e106      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a7c      	ldr	r2, [pc, #496]	@ (800acd0 <UART_SetConfig+0x2e8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d138      	bne.n	800ab54 <UART_SetConfig+0x16c>
 800aae2:	4b7a      	ldr	r3, [pc, #488]	@ (800accc <UART_SetConfig+0x2e4>)
 800aae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae8:	f003 030c 	and.w	r3, r3, #12
 800aaec:	2b0c      	cmp	r3, #12
 800aaee:	d82d      	bhi.n	800ab4c <UART_SetConfig+0x164>
 800aaf0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <UART_SetConfig+0x110>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab2d 	.word	0x0800ab2d
 800aafc:	0800ab4d 	.word	0x0800ab4d
 800ab00:	0800ab4d 	.word	0x0800ab4d
 800ab04:	0800ab4d 	.word	0x0800ab4d
 800ab08:	0800ab3d 	.word	0x0800ab3d
 800ab0c:	0800ab4d 	.word	0x0800ab4d
 800ab10:	0800ab4d 	.word	0x0800ab4d
 800ab14:	0800ab4d 	.word	0x0800ab4d
 800ab18:	0800ab35 	.word	0x0800ab35
 800ab1c:	0800ab4d 	.word	0x0800ab4d
 800ab20:	0800ab4d 	.word	0x0800ab4d
 800ab24:	0800ab4d 	.word	0x0800ab4d
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab32:	e0d8      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab34:	2302      	movs	r3, #2
 800ab36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3a:	e0d4      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab42:	e0d0      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab44:	2308      	movs	r3, #8
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab4a:	e0cc      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab52:	e0c8      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a5e      	ldr	r2, [pc, #376]	@ (800acd4 <UART_SetConfig+0x2ec>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d125      	bne.n	800abaa <UART_SetConfig+0x1c2>
 800ab5e:	4b5b      	ldr	r3, [pc, #364]	@ (800accc <UART_SetConfig+0x2e4>)
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab68:	2b30      	cmp	r3, #48	@ 0x30
 800ab6a:	d016      	beq.n	800ab9a <UART_SetConfig+0x1b2>
 800ab6c:	2b30      	cmp	r3, #48	@ 0x30
 800ab6e:	d818      	bhi.n	800aba2 <UART_SetConfig+0x1ba>
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d00a      	beq.n	800ab8a <UART_SetConfig+0x1a2>
 800ab74:	2b20      	cmp	r3, #32
 800ab76:	d814      	bhi.n	800aba2 <UART_SetConfig+0x1ba>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <UART_SetConfig+0x19a>
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d008      	beq.n	800ab92 <UART_SetConfig+0x1aa>
 800ab80:	e00f      	b.n	800aba2 <UART_SetConfig+0x1ba>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab88:	e0ad      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab90:	e0a9      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab92:	2304      	movs	r3, #4
 800ab94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab98:	e0a5      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba0:	e0a1      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aba2:	2310      	movs	r3, #16
 800aba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba8:	e09d      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a4a      	ldr	r2, [pc, #296]	@ (800acd8 <UART_SetConfig+0x2f0>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d125      	bne.n	800ac00 <UART_SetConfig+0x218>
 800abb4:	4b45      	ldr	r3, [pc, #276]	@ (800accc <UART_SetConfig+0x2e4>)
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800abbe:	2bc0      	cmp	r3, #192	@ 0xc0
 800abc0:	d016      	beq.n	800abf0 <UART_SetConfig+0x208>
 800abc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800abc4:	d818      	bhi.n	800abf8 <UART_SetConfig+0x210>
 800abc6:	2b80      	cmp	r3, #128	@ 0x80
 800abc8:	d00a      	beq.n	800abe0 <UART_SetConfig+0x1f8>
 800abca:	2b80      	cmp	r3, #128	@ 0x80
 800abcc:	d814      	bhi.n	800abf8 <UART_SetConfig+0x210>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <UART_SetConfig+0x1f0>
 800abd2:	2b40      	cmp	r3, #64	@ 0x40
 800abd4:	d008      	beq.n	800abe8 <UART_SetConfig+0x200>
 800abd6:	e00f      	b.n	800abf8 <UART_SetConfig+0x210>
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e082      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800abe0:	2302      	movs	r3, #2
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe6:	e07e      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800abe8:	2304      	movs	r3, #4
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abee:	e07a      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800abf0:	2308      	movs	r3, #8
 800abf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf6:	e076      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800abf8:	2310      	movs	r3, #16
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abfe:	e072      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a35      	ldr	r2, [pc, #212]	@ (800acdc <UART_SetConfig+0x2f4>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d12a      	bne.n	800ac60 <UART_SetConfig+0x278>
 800ac0a:	4b30      	ldr	r3, [pc, #192]	@ (800accc <UART_SetConfig+0x2e4>)
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac18:	d01a      	beq.n	800ac50 <UART_SetConfig+0x268>
 800ac1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac1e:	d81b      	bhi.n	800ac58 <UART_SetConfig+0x270>
 800ac20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac24:	d00c      	beq.n	800ac40 <UART_SetConfig+0x258>
 800ac26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac2a:	d815      	bhi.n	800ac58 <UART_SetConfig+0x270>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <UART_SetConfig+0x250>
 800ac30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac34:	d008      	beq.n	800ac48 <UART_SetConfig+0x260>
 800ac36:	e00f      	b.n	800ac58 <UART_SetConfig+0x270>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e052      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac40:	2302      	movs	r3, #2
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	e04e      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac48:	2304      	movs	r3, #4
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4e:	e04a      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac50:	2308      	movs	r3, #8
 800ac52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac56:	e046      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac58:	2310      	movs	r3, #16
 800ac5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac5e:	e042      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a17      	ldr	r2, [pc, #92]	@ (800acc4 <UART_SetConfig+0x2dc>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d13a      	bne.n	800ace0 <UART_SetConfig+0x2f8>
 800ac6a:	4b18      	ldr	r3, [pc, #96]	@ (800accc <UART_SetConfig+0x2e4>)
 800ac6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac78:	d01a      	beq.n	800acb0 <UART_SetConfig+0x2c8>
 800ac7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac7e:	d81b      	bhi.n	800acb8 <UART_SetConfig+0x2d0>
 800ac80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac84:	d00c      	beq.n	800aca0 <UART_SetConfig+0x2b8>
 800ac86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac8a:	d815      	bhi.n	800acb8 <UART_SetConfig+0x2d0>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <UART_SetConfig+0x2b0>
 800ac90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac94:	d008      	beq.n	800aca8 <UART_SetConfig+0x2c0>
 800ac96:	e00f      	b.n	800acb8 <UART_SetConfig+0x2d0>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9e:	e022      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aca0:	2302      	movs	r3, #2
 800aca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca6:	e01e      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acae:	e01a      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb6:	e016      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acbe:	e012      	b.n	800ace6 <UART_SetConfig+0x2fe>
 800acc0:	cfff69f3 	.word	0xcfff69f3
 800acc4:	40008000 	.word	0x40008000
 800acc8:	40013800 	.word	0x40013800
 800accc:	40021000 	.word	0x40021000
 800acd0:	40004400 	.word	0x40004400
 800acd4:	40004800 	.word	0x40004800
 800acd8:	40004c00 	.word	0x40004c00
 800acdc:	40005000 	.word	0x40005000
 800ace0:	2310      	movs	r3, #16
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4aae      	ldr	r2, [pc, #696]	@ (800afa4 <UART_SetConfig+0x5bc>)
 800acec:	4293      	cmp	r3, r2
 800acee:	f040 8097 	bne.w	800ae20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	d823      	bhi.n	800ad42 <UART_SetConfig+0x35a>
 800acfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ad00 <UART_SetConfig+0x318>)
 800acfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad00:	0800ad25 	.word	0x0800ad25
 800ad04:	0800ad43 	.word	0x0800ad43
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad43 	.word	0x0800ad43
 800ad10:	0800ad33 	.word	0x0800ad33
 800ad14:	0800ad43 	.word	0x0800ad43
 800ad18:	0800ad43 	.word	0x0800ad43
 800ad1c:	0800ad43 	.word	0x0800ad43
 800ad20:	0800ad3b 	.word	0x0800ad3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad24:	f7fc fbbc 	bl	80074a0 <HAL_RCC_GetPCLK1Freq>
 800ad28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad2a:	e010      	b.n	800ad4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad2c:	4b9e      	ldr	r3, [pc, #632]	@ (800afa8 <UART_SetConfig+0x5c0>)
 800ad2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad30:	e00d      	b.n	800ad4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad32:	f7fc fb47 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800ad36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad38:	e009      	b.n	800ad4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad40:	e005      	b.n	800ad4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 8130 	beq.w	800afb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5a:	4a94      	ldr	r2, [pc, #592]	@ (800afac <UART_SetConfig+0x5c4>)
 800ad5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad60:	461a      	mov	r2, r3
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d305      	bcc.n	800ad86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d903      	bls.n	800ad8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad8c:	e113      	b.n	800afb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	2200      	movs	r2, #0
 800ad92:	60bb      	str	r3, [r7, #8]
 800ad94:	60fa      	str	r2, [r7, #12]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9a:	4a84      	ldr	r2, [pc, #528]	@ (800afac <UART_SetConfig+0x5c4>)
 800ad9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	2200      	movs	r2, #0
 800ada4:	603b      	str	r3, [r7, #0]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adb0:	f7f5 ff20 	bl	8000bf4 <__aeabi_uldivmod>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4610      	mov	r0, r2
 800adba:	4619      	mov	r1, r3
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	020b      	lsls	r3, r1, #8
 800adc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adca:	0202      	lsls	r2, r0, #8
 800adcc:	6979      	ldr	r1, [r7, #20]
 800adce:	6849      	ldr	r1, [r1, #4]
 800add0:	0849      	lsrs	r1, r1, #1
 800add2:	2000      	movs	r0, #0
 800add4:	460c      	mov	r4, r1
 800add6:	4605      	mov	r5, r0
 800add8:	eb12 0804 	adds.w	r8, r2, r4
 800addc:	eb43 0905 	adc.w	r9, r3, r5
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	469a      	mov	sl, r3
 800ade8:	4693      	mov	fp, r2
 800adea:	4652      	mov	r2, sl
 800adec:	465b      	mov	r3, fp
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	f7f5 feff 	bl	8000bf4 <__aeabi_uldivmod>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4613      	mov	r3, r2
 800adfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae04:	d308      	bcc.n	800ae18 <UART_SetConfig+0x430>
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae0c:	d204      	bcs.n	800ae18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6a3a      	ldr	r2, [r7, #32]
 800ae14:	60da      	str	r2, [r3, #12]
 800ae16:	e0ce      	b.n	800afb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae1e:	e0ca      	b.n	800afb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae28:	d166      	bne.n	800aef8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ae2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae2e:	2b08      	cmp	r3, #8
 800ae30:	d827      	bhi.n	800ae82 <UART_SetConfig+0x49a>
 800ae32:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x450>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae65 	.word	0x0800ae65
 800ae40:	0800ae6d 	.word	0x0800ae6d
 800ae44:	0800ae83 	.word	0x0800ae83
 800ae48:	0800ae73 	.word	0x0800ae73
 800ae4c:	0800ae83 	.word	0x0800ae83
 800ae50:	0800ae83 	.word	0x0800ae83
 800ae54:	0800ae83 	.word	0x0800ae83
 800ae58:	0800ae7b 	.word	0x0800ae7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae5c:	f7fc fb20 	bl	80074a0 <HAL_RCC_GetPCLK1Freq>
 800ae60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae62:	e014      	b.n	800ae8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae64:	f7fc fb32 	bl	80074cc <HAL_RCC_GetPCLK2Freq>
 800ae68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae6a:	e010      	b.n	800ae8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae6c:	4b4e      	ldr	r3, [pc, #312]	@ (800afa8 <UART_SetConfig+0x5c0>)
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae70:	e00d      	b.n	800ae8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae72:	f7fc faa7 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800ae76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae78:	e009      	b.n	800ae8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae80:	e005      	b.n	800ae8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 8090 	beq.w	800afb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	4a44      	ldr	r2, [pc, #272]	@ (800afac <UART_SetConfig+0x5c4>)
 800ae9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aea8:	005a      	lsls	r2, r3, #1
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	441a      	add	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	2b0f      	cmp	r3, #15
 800aec0:	d916      	bls.n	800aef0 <UART_SetConfig+0x508>
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aec8:	d212      	bcs.n	800aef0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f023 030f 	bic.w	r3, r3, #15
 800aed2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f003 0307 	and.w	r3, r3, #7
 800aede:	b29a      	uxth	r2, r3
 800aee0:	8bfb      	ldrh	r3, [r7, #30]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	8bfa      	ldrh	r2, [r7, #30]
 800aeec:	60da      	str	r2, [r3, #12]
 800aeee:	e062      	b.n	800afb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aef6:	e05e      	b.n	800afb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aef8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d828      	bhi.n	800af52 <UART_SetConfig+0x56a>
 800af00:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <UART_SetConfig+0x520>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af3d 	.word	0x0800af3d
 800af14:	0800af53 	.word	0x0800af53
 800af18:	0800af43 	.word	0x0800af43
 800af1c:	0800af53 	.word	0x0800af53
 800af20:	0800af53 	.word	0x0800af53
 800af24:	0800af53 	.word	0x0800af53
 800af28:	0800af4b 	.word	0x0800af4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af2c:	f7fc fab8 	bl	80074a0 <HAL_RCC_GetPCLK1Freq>
 800af30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af32:	e014      	b.n	800af5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af34:	f7fc faca 	bl	80074cc <HAL_RCC_GetPCLK2Freq>
 800af38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af3a:	e010      	b.n	800af5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af3c:	4b1a      	ldr	r3, [pc, #104]	@ (800afa8 <UART_SetConfig+0x5c0>)
 800af3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af40:	e00d      	b.n	800af5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af42:	f7fc fa3f 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 800af46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af48:	e009      	b.n	800af5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af50:	e005      	b.n	800af5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af52:	2300      	movs	r3, #0
 800af54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af5c:	bf00      	nop
    }

    if (pclk != 0U)
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	2b00      	cmp	r3, #0
 800af62:	d028      	beq.n	800afb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af68:	4a10      	ldr	r2, [pc, #64]	@ (800afac <UART_SetConfig+0x5c4>)
 800af6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af6e:	461a      	mov	r2, r3
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	fbb3 f2f2 	udiv	r2, r3, r2
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	441a      	add	r2, r3
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	2b0f      	cmp	r3, #15
 800af8c:	d910      	bls.n	800afb0 <UART_SetConfig+0x5c8>
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af94:	d20c      	bcs.n	800afb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	b29a      	uxth	r2, r3
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60da      	str	r2, [r3, #12]
 800afa0:	e009      	b.n	800afb6 <UART_SetConfig+0x5ce>
 800afa2:	bf00      	nop
 800afa4:	40008000 	.word	0x40008000
 800afa8:	00f42400 	.word	0x00f42400
 800afac:	0800bdd0 	.word	0x0800bdd0
      }
      else
      {
        ret = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2200      	movs	r2, #0
 800afca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2200      	movs	r2, #0
 800afd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3730      	adds	r7, #48	@ 0x30
 800afda:	46bd      	mov	sp, r7
 800afdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800afe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afec:	f003 0308 	and.w	r3, r3, #8
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01a      	beq.n	800b0f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0de:	d10a      	bne.n	800b0f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	605a      	str	r2, [r3, #4]
  }
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b098      	sub	sp, #96	@ 0x60
 800b128:	af02      	add	r7, sp, #8
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b134:	f7f8 fff0 	bl	8004118 <HAL_GetTick>
 800b138:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b08      	cmp	r3, #8
 800b146:	d12f      	bne.n	800b1a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b150:	2200      	movs	r2, #0
 800b152:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f88e 	bl	800b278 <UART_WaitOnFlagUntilTimeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d022      	beq.n	800b1a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b176:	653b      	str	r3, [r7, #80]	@ 0x50
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b180:	647b      	str	r3, [r7, #68]	@ 0x44
 800b182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b188:	e841 2300 	strex	r3, r2, [r1]
 800b18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e6      	bne.n	800b162 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2220      	movs	r2, #32
 800b198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e063      	b.n	800b270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d149      	bne.n	800b24a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f857 	bl	800b278 <UART_WaitOnFlagUntilTimeout>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d03c      	beq.n	800b24a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e6      	bne.n	800b1d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3308      	adds	r3, #8
 800b208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	60fb      	str	r3, [r7, #12]
   return(result);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f023 0301 	bic.w	r3, r3, #1
 800b218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b222:	61fa      	str	r2, [r7, #28]
 800b224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	69fa      	ldr	r2, [r7, #28]
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	617b      	str	r3, [r7, #20]
   return(result);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e5      	bne.n	800b202 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e012      	b.n	800b270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2220      	movs	r2, #32
 800b24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3758      	adds	r7, #88	@ 0x58
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b288:	e04f      	b.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d04b      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b292:	f7f8 ff41 	bl	8004118 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d302      	bcc.n	800b2a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e04e      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d037      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b80      	cmp	r3, #128	@ 0x80
 800b2be:	d034      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b40      	cmp	r3, #64	@ 0x40
 800b2c4:	d031      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d110      	bne.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2208      	movs	r2, #8
 800b2da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 f920 	bl	800b522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2208      	movs	r2, #8
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e029      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b304:	d111      	bne.n	800b32a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f906 	bl	800b522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e00f      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69da      	ldr	r2, [r3, #28]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4013      	ands	r3, r2
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	bf0c      	ite	eq
 800b33a:	2301      	moveq	r3, #1
 800b33c:	2300      	movne	r3, #0
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	461a      	mov	r2, r3
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	429a      	cmp	r2, r3
 800b346:	d0a0      	beq.n	800b28a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b096      	sub	sp, #88	@ 0x58
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2222      	movs	r2, #34	@ 0x22
 800b37c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b386:	2b00      	cmp	r3, #0
 800b388:	d02d      	beq.n	800b3e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b390:	4a40      	ldr	r2, [pc, #256]	@ (800b494 <UART_Start_Receive_DMA+0x140>)
 800b392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b39a:	4a3f      	ldr	r2, [pc, #252]	@ (800b498 <UART_Start_Receive_DMA+0x144>)
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3a4:	4a3d      	ldr	r2, [pc, #244]	@ (800b49c <UART_Start_Receive_DMA+0x148>)
 800b3a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3324      	adds	r3, #36	@ 0x24
 800b3be:	4619      	mov	r1, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	f7fa fe8c 	bl	80060e4 <HAL_DMA_Start_IT>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e051      	b.n	800b48a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d018      	beq.n	800b420 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b402:	657b      	str	r3, [r7, #84]	@ 0x54
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b40e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e6      	bne.n	800b3ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3308      	adds	r3, #8
 800b426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	f043 0301 	orr.w	r3, r3, #1
 800b436:	653b      	str	r3, [r7, #80]	@ 0x50
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b440:	637a      	str	r2, [r7, #52]	@ 0x34
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e5      	bne.n	800b420 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	613b      	str	r3, [r7, #16]
   return(result);
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3308      	adds	r3, #8
 800b472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b474:	623a      	str	r2, [r7, #32]
 800b476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	69f9      	ldr	r1, [r7, #28]
 800b47a:	6a3a      	ldr	r2, [r7, #32]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	61bb      	str	r3, [r7, #24]
   return(result);
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e5      	bne.n	800b454 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3758      	adds	r7, #88	@ 0x58
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0800b6ad 	.word	0x0800b6ad
 800b498:	0800b7e1 	.word	0x0800b7e1
 800b49c:	0800b827 	.word	0x0800b827

0800b4a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b08f      	sub	sp, #60	@ 0x3c
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b4f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fa:	61ba      	str	r2, [r7, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6979      	ldr	r1, [r7, #20]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	613b      	str	r3, [r7, #16]
   return(result);
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b516:	bf00      	nop
 800b518:	373c      	adds	r7, #60	@ 0x3c
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b522:	b480      	push	{r7}
 800b524:	b095      	sub	sp, #84	@ 0x54
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b548:	643b      	str	r3, [r7, #64]	@ 0x40
 800b54a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b54e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e6      	bne.n	800b52a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3308      	adds	r3, #8
 800b562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b572:	f023 0301 	bic.w	r3, r3, #1
 800b576:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3308      	adds	r3, #8
 800b57e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e3      	bne.n	800b55c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d118      	bne.n	800b5ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	f023 0310 	bic.w	r3, r3, #16
 800b5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ba:	61bb      	str	r3, [r7, #24]
 800b5bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6979      	ldr	r1, [r7, #20]
 800b5c0:	69ba      	ldr	r2, [r7, #24]
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e6      	bne.n	800b59c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5e2:	bf00      	nop
 800b5e4:	3754      	adds	r7, #84	@ 0x54
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b090      	sub	sp, #64	@ 0x40
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0320 	and.w	r3, r3, #32
 800b606:	2b00      	cmp	r3, #0
 800b608:	d137      	bne.n	800b67a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3308      	adds	r3, #8
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	623b      	str	r3, [r7, #32]
   return(result);
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3308      	adds	r3, #8
 800b630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b632:	633a      	str	r2, [r7, #48]	@ 0x30
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e5      	bne.n	800b612 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	60fb      	str	r3, [r7, #12]
   return(result);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	69b9      	ldr	r1, [r7, #24]
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	617b      	str	r3, [r7, #20]
   return(result);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e6      	bne.n	800b646 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b678:	e004      	b.n	800b684 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b680:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b682:	4798      	blx	r3
}
 800b684:	bf00      	nop
 800b686:	3740      	adds	r7, #64	@ 0x40
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b698:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6a4:	bf00      	nop
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b09c      	sub	sp, #112	@ 0x70
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d171      	bne.n	800b7ac <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6f6:	e841 2300 	strex	r3, r2, [r1]
 800b6fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1e6      	bne.n	800b6d0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3308      	adds	r3, #8
 800b708:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b714:	f023 0301 	bic.w	r3, r3, #1
 800b718:	667b      	str	r3, [r7, #100]	@ 0x64
 800b71a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b722:	647a      	str	r2, [r7, #68]	@ 0x44
 800b724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b72a:	e841 2300 	strex	r3, r2, [r1]
 800b72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e5      	bne.n	800b702 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	623b      	str	r3, [r7, #32]
   return(result);
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b74c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3308      	adds	r3, #8
 800b754:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b756:	633a      	str	r2, [r7, #48]	@ 0x30
 800b758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b75c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b75e:	e841 2300 	strex	r3, r2, [r1]
 800b762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1e5      	bne.n	800b736 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b76a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b76c:	2220      	movs	r2, #32
 800b76e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b776:	2b01      	cmp	r3, #1
 800b778:	d118      	bne.n	800b7ac <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b77a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	60fb      	str	r3, [r7, #12]
   return(result);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0310 	bic.w	r3, r3, #16
 800b78e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79c:	69b9      	ldr	r1, [r7, #24]
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	e841 2300 	strex	r3, r2, [r1]
 800b7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e6      	bne.n	800b77a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d109      	bne.n	800b7ce <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b7ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b7c2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7ca:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7cc:	e004      	b.n	800b7d8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b7ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b7d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7d6:	4798      	blx	r3
}
 800b7d8:	bf00      	nop
 800b7da:	3770      	adds	r7, #112	@ 0x70
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d10b      	bne.n	800b814 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b808:	0852      	lsrs	r2, r2, #1
 800b80a:	b292      	uxth	r2, r2
 800b80c:	4611      	mov	r1, r2
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b812:	e004      	b.n	800b81e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	4798      	blx	r3
}
 800b81e:	bf00      	nop
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b086      	sub	sp, #24
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b832:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b83a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b842:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b84e:	2b80      	cmp	r3, #128	@ 0x80
 800b850:	d109      	bne.n	800b866 <UART_DMAError+0x40>
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2b21      	cmp	r3, #33	@ 0x21
 800b856:	d106      	bne.n	800b866 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b860:	6978      	ldr	r0, [r7, #20]
 800b862:	f7ff fe1d 	bl	800b4a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b870:	2b40      	cmp	r3, #64	@ 0x40
 800b872:	d109      	bne.n	800b888 <UART_DMAError+0x62>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b22      	cmp	r3, #34	@ 0x22
 800b878:	d106      	bne.n	800b888 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b882:	6978      	ldr	r0, [r7, #20]
 800b884:	f7ff fe4d 	bl	800b522 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b88e:	f043 0210 	orr.w	r2, r3, #16
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b89e:	6978      	ldr	r0, [r7, #20]
 800b8a0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8a2:	bf00      	nop
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b088      	sub	sp, #32
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	e853 3f00 	ldrex	r3, [r3]
 800b8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	61bb      	str	r3, [r7, #24]
 800b8fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fc:	6979      	ldr	r1, [r7, #20]
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	e841 2300 	strex	r3, r2, [r1]
 800b904:	613b      	str	r3, [r7, #16]
   return(result);
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e6      	bne.n	800b8da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b924:	bf00      	nop
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b976:	2b01      	cmp	r3, #1
 800b978:	d101      	bne.n	800b97e <HAL_UARTEx_DisableFifoMode+0x16>
 800b97a:	2302      	movs	r3, #2
 800b97c:	e027      	b.n	800b9ce <HAL_UARTEx_DisableFifoMode+0x66>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2224      	movs	r2, #36	@ 0x24
 800b98a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f022 0201 	bic.w	r2, r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e02d      	b.n	800ba4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2224      	movs	r2, #36	@ 0x24
 800b9fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f022 0201 	bic.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f850 	bl	800bad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d101      	bne.n	800ba6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e02d      	b.n	800baca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2224      	movs	r2, #36	@ 0x24
 800ba7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 0201 	bic.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f812 	bl	800bad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2220      	movs	r2, #32
 800babc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800baf4:	e031      	b.n	800bb5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baf6:	2308      	movs	r3, #8
 800baf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bafa:	2308      	movs	r3, #8
 800bafc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	0e5b      	lsrs	r3, r3, #25
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	0f5b      	lsrs	r3, r3, #29
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	7b3a      	ldrb	r2, [r7, #12]
 800bb22:	4911      	ldr	r1, [pc, #68]	@ (800bb68 <UARTEx_SetNbDataToProcess+0x94>)
 800bb24:	5c8a      	ldrb	r2, [r1, r2]
 800bb26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb2a:	7b3a      	ldrb	r2, [r7, #12]
 800bb2c:	490f      	ldr	r1, [pc, #60]	@ (800bb6c <UARTEx_SetNbDataToProcess+0x98>)
 800bb2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb30:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	7b7a      	ldrb	r2, [r7, #13]
 800bb40:	4909      	ldr	r1, [pc, #36]	@ (800bb68 <UARTEx_SetNbDataToProcess+0x94>)
 800bb42:	5c8a      	ldrb	r2, [r1, r2]
 800bb44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb48:	7b7a      	ldrb	r2, [r7, #13]
 800bb4a:	4908      	ldr	r1, [pc, #32]	@ (800bb6c <UARTEx_SetNbDataToProcess+0x98>)
 800bb4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb5a:	bf00      	nop
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	0800bde8 	.word	0x0800bde8
 800bb6c:	0800bdf0 	.word	0x0800bdf0

0800bb70 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	edd3 7a07 	vldr	s15, [r3, #28]
 800bb86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	edd3 7a08 	vldr	s15, [r3, #32]
 800bb90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	edd3 7a06 	vldr	s15, [r3, #24]
 800bba0:	eeb1 7a67 	vneg.f32	s14, s15
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	edd3 7a08 	vldr	s15, [r3, #32]
 800bbaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bbae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a1a      	ldr	r2, [r3, #32]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d006      	beq.n	800bbd4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	330c      	adds	r3, #12
 800bbca:	220c      	movs	r2, #12
 800bbcc:	2100      	movs	r1, #0
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f86c 	bl	800bcac <memset>
  }

}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	817b      	strh	r3, [r7, #10]
 800bbea:	4613      	mov	r3, r2
 800bbec:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	897a      	ldrh	r2, [r7, #10]
 800bbf2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	893a      	ldrh	r2, [r7, #8]
 800bbf8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	605a      	str	r2, [r3, #4]
}
 800bc00:	bf00      	nop
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b08b      	sub	sp, #44	@ 0x2c
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	60fb      	str	r3, [r7, #12]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	817b      	strh	r3, [r7, #10]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	885b      	ldrh	r3, [r3, #2]
 800bc2c:	813b      	strh	r3, [r7, #8]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800bc2e:	897b      	ldrh	r3, [r7, #10]
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
  arm_status status;                             /* status of matrix transpose */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrc->numRows != pDst->numCols) ||
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	885b      	ldrh	r3, [r3, #2]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d105      	bne.n	800bc4e <arm_mat_trans_f32+0x42>
      (pSrc->numCols != pDst->numRows)   )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	885a      	ldrh	r2, [r3, #2]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	881b      	ldrh	r3, [r3, #0]
  if ((pSrc->numRows != pDst->numCols) ||
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d002      	beq.n	800bc54 <arm_mat_trans_f32+0x48>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800bc4e:	23fd      	movs	r3, #253	@ 0xfd
 800bc50:	74fb      	strb	r3, [r7, #19]
 800bc52:	e023      	b.n	800bc9c <arm_mat_trans_f32+0x90>
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800bc5e:	893b      	ldrh	r3, [r7, #8]
 800bc60:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800bc62:	e00d      	b.n	800bc80 <arm_mat_trans_f32+0x74>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	1d1a      	adds	r2, r3, #4
 800bc68:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800bc70:	897b      	ldrh	r3, [r7, #10]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	6a3a      	ldr	r2, [r7, #32]
 800bc76:	4413      	add	r3, r2
 800bc78:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1ee      	bne.n	800bc64 <arm_mat_trans_f32+0x58>
      }

      i++;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1dd      	bne.n	800bc54 <arm_mat_trans_f32+0x48>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bc9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	372c      	adds	r7, #44	@ 0x2c
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <memset>:
 800bcac:	4402      	add	r2, r0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d100      	bne.n	800bcb6 <memset+0xa>
 800bcb4:	4770      	bx	lr
 800bcb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcba:	e7f9      	b.n	800bcb0 <memset+0x4>

0800bcbc <__libc_init_array>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	4d0d      	ldr	r5, [pc, #52]	@ (800bcf4 <__libc_init_array+0x38>)
 800bcc0:	4c0d      	ldr	r4, [pc, #52]	@ (800bcf8 <__libc_init_array+0x3c>)
 800bcc2:	1b64      	subs	r4, r4, r5
 800bcc4:	10a4      	asrs	r4, r4, #2
 800bcc6:	2600      	movs	r6, #0
 800bcc8:	42a6      	cmp	r6, r4
 800bcca:	d109      	bne.n	800bce0 <__libc_init_array+0x24>
 800bccc:	4d0b      	ldr	r5, [pc, #44]	@ (800bcfc <__libc_init_array+0x40>)
 800bcce:	4c0c      	ldr	r4, [pc, #48]	@ (800bd00 <__libc_init_array+0x44>)
 800bcd0:	f000 f826 	bl	800bd20 <_init>
 800bcd4:	1b64      	subs	r4, r4, r5
 800bcd6:	10a4      	asrs	r4, r4, #2
 800bcd8:	2600      	movs	r6, #0
 800bcda:	42a6      	cmp	r6, r4
 800bcdc:	d105      	bne.n	800bcea <__libc_init_array+0x2e>
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bce4:	4798      	blx	r3
 800bce6:	3601      	adds	r6, #1
 800bce8:	e7ee      	b.n	800bcc8 <__libc_init_array+0xc>
 800bcea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcee:	4798      	blx	r3
 800bcf0:	3601      	adds	r6, #1
 800bcf2:	e7f2      	b.n	800bcda <__libc_init_array+0x1e>
 800bcf4:	0800be00 	.word	0x0800be00
 800bcf8:	0800be00 	.word	0x0800be00
 800bcfc:	0800be00 	.word	0x0800be00
 800bd00:	0800be04 	.word	0x0800be04

0800bd04 <memcpy>:
 800bd04:	440a      	add	r2, r1
 800bd06:	4291      	cmp	r1, r2
 800bd08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd0c:	d100      	bne.n	800bd10 <memcpy+0xc>
 800bd0e:	4770      	bx	lr
 800bd10:	b510      	push	{r4, lr}
 800bd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd1a:	4291      	cmp	r1, r2
 800bd1c:	d1f9      	bne.n	800bd12 <memcpy+0xe>
 800bd1e:	bd10      	pop	{r4, pc}

0800bd20 <_init>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	bf00      	nop
 800bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd26:	bc08      	pop	{r3}
 800bd28:	469e      	mov	lr, r3
 800bd2a:	4770      	bx	lr

0800bd2c <_fini>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

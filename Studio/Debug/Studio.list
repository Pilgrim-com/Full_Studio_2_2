
Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  0800d1b8  0800d1b8  0000e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1f0  0800e1f0  00010280  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e1f0  0800e1f0  0000f1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1f8  0800e1f8  00010280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1f8  0800e1f8  0000f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1fc  0800e1fc  0000f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800e200  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ec  20000280  0800e480  00010280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000146c  0800e480  0001046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc9b  00000000  00000000  000102b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003793  00000000  00000000  0002df4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  000316e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e4  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bfd  00000000  00000000  00033fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c39c  00000000  00000000  0005bbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011612a  00000000  00000000  00077f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006790  00000000  00000000  0018e0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00194854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000280 	.word	0x20000280
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d1a0 	.word	0x0800d1a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000284 	.word	0x20000284
 8000214:	0800d1a0 	.word	0x0800d1a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b988 	b.w	8000f48 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	468e      	mov	lr, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	4688      	mov	r8, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14a      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d962      	bls.n	8000d2c <__udivmoddi4+0xdc>
 8000c66:	fab2 f682 	clz	r6, r2
 8000c6a:	b14e      	cbz	r6, 8000c80 <__udivmoddi4+0x30>
 8000c6c:	f1c6 0320 	rsb	r3, r6, #32
 8000c70:	fa01 f806 	lsl.w	r8, r1, r6
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	ea43 0808 	orr.w	r8, r3, r8
 8000c7e:	40b4      	lsls	r4, r6
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c8c:	0c23      	lsrs	r3, r4, #16
 8000c8e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c96:	fb01 f20c 	mul.w	r2, r1, ip
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x62>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ca4:	f080 80ea 	bcs.w	8000e7c <__udivmoddi4+0x22c>
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f240 80e7 	bls.w	8000e7c <__udivmoddi4+0x22c>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	443b      	add	r3, r7
 8000cb2:	1a9a      	subs	r2, r3, r2
 8000cb4:	b2a3      	uxth	r3, r4
 8000cb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc6:	459c      	cmp	ip, r3
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x8e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	f080 80d6 	bcs.w	8000e80 <__udivmoddi4+0x230>
 8000cd4:	459c      	cmp	ip, r3
 8000cd6:	f240 80d3 	bls.w	8000e80 <__udivmoddi4+0x230>
 8000cda:	443b      	add	r3, r7
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce2:	eba3 030c 	sub.w	r3, r3, ip
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11d      	cbz	r5, 8000cf2 <__udivmoddi4+0xa2>
 8000cea:	40f3      	lsrs	r3, r6
 8000cec:	2200      	movs	r2, #0
 8000cee:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d905      	bls.n	8000d06 <__udivmoddi4+0xb6>
 8000cfa:	b10d      	cbz	r5, 8000d00 <__udivmoddi4+0xb0>
 8000cfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000d00:	2100      	movs	r1, #0
 8000d02:	4608      	mov	r0, r1
 8000d04:	e7f5      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d06:	fab3 f183 	clz	r1, r3
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d146      	bne.n	8000d9c <__udivmoddi4+0x14c>
 8000d0e:	4573      	cmp	r3, lr
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xc8>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 8105 	bhi.w	8000f22 <__udivmoddi4+0x2d2>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4690      	mov	r8, r2
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0e5      	beq.n	8000cf2 <__udivmoddi4+0xa2>
 8000d26:	e9c5 4800 	strd	r4, r8, [r5]
 8000d2a:	e7e2      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f000 8090 	beq.w	8000e52 <__udivmoddi4+0x202>
 8000d32:	fab2 f682 	clz	r6, r2
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f040 80a4 	bne.w	8000e84 <__udivmoddi4+0x234>
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	0c03      	lsrs	r3, r0, #16
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	b280      	uxth	r0, r0
 8000d46:	b2bc      	uxth	r4, r7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d4e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d56:	fb04 f20c 	mul.w	r2, r4, ip
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x11e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x11c>
 8000d66:	429a      	cmp	r2, r3
 8000d68:	f200 80e0 	bhi.w	8000f2c <__udivmoddi4+0x2dc>
 8000d6c:	46c4      	mov	ip, r8
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d74:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d78:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d7c:	fb02 f404 	mul.w	r4, r2, r4
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x144>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x142>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f200 80ca 	bhi.w	8000f26 <__udivmoddi4+0x2d6>
 8000d92:	4602      	mov	r2, r0
 8000d94:	1b1b      	subs	r3, r3, r4
 8000d96:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000d9c:	f1c1 0620 	rsb	r6, r1, #32
 8000da0:	408b      	lsls	r3, r1
 8000da2:	fa22 f706 	lsr.w	r7, r2, r6
 8000da6:	431f      	orrs	r7, r3
 8000da8:	fa0e f401 	lsl.w	r4, lr, r1
 8000dac:	fa20 f306 	lsr.w	r3, r0, r6
 8000db0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000db4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db8:	4323      	orrs	r3, r4
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	fa1f fc87 	uxth.w	ip, r7
 8000dc2:	fbbe f0f9 	udiv	r0, lr, r9
 8000dc6:	0c1c      	lsrs	r4, r3, #16
 8000dc8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dcc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x1a0>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 3aff 	add.w	sl, r0, #4294967295
 8000de2:	f080 809c 	bcs.w	8000f1e <__udivmoddi4+0x2ce>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8099 	bls.w	8000f1e <__udivmoddi4+0x2ce>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	eba4 040e 	sub.w	r4, r4, lr
 8000df4:	fa1f fe83 	uxth.w	lr, r3
 8000df8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000e00:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e04:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1ce>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e12:	f080 8082 	bcs.w	8000f1a <__udivmoddi4+0x2ca>
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d97f      	bls.n	8000f1a <__udivmoddi4+0x2ca>
 8000e1a:	3b02      	subs	r3, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e2a:	4564      	cmp	r4, ip
 8000e2c:	4673      	mov	r3, lr
 8000e2e:	46e1      	mov	r9, ip
 8000e30:	d362      	bcc.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e32:	d05f      	beq.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x1fe>
 8000e36:	ebb8 0203 	subs.w	r2, r8, r3
 8000e3a:	eb64 0409 	sbc.w	r4, r4, r9
 8000e3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e42:	fa22 f301 	lsr.w	r3, r2, r1
 8000e46:	431e      	orrs	r6, r3
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	e74f      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000e52:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e56:	0c01      	lsrs	r1, r0, #16
 8000e58:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e62:	463b      	mov	r3, r7
 8000e64:	4638      	mov	r0, r7
 8000e66:	463c      	mov	r4, r7
 8000e68:	46b8      	mov	r8, r7
 8000e6a:	46be      	mov	lr, r7
 8000e6c:	2620      	movs	r6, #32
 8000e6e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e72:	eba2 0208 	sub.w	r2, r2, r8
 8000e76:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e7a:	e766      	b.n	8000d4a <__udivmoddi4+0xfa>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	e718      	b.n	8000cb2 <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e72c      	b.n	8000cde <__udivmoddi4+0x8e>
 8000e84:	f1c6 0220 	rsb	r2, r6, #32
 8000e88:	fa2e f302 	lsr.w	r3, lr, r2
 8000e8c:	40b7      	lsls	r7, r6
 8000e8e:	40b1      	lsls	r1, r6
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e9e:	b2bc      	uxth	r4, r7
 8000ea0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ea4:	0c11      	lsrs	r1, r2, #16
 8000ea6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eaa:	fb08 f904 	mul.w	r9, r8, r4
 8000eae:	40b0      	lsls	r0, r6
 8000eb0:	4589      	cmp	r9, r1
 8000eb2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eb6:	b280      	uxth	r0, r0
 8000eb8:	d93e      	bls.n	8000f38 <__udivmoddi4+0x2e8>
 8000eba:	1879      	adds	r1, r7, r1
 8000ebc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec0:	d201      	bcs.n	8000ec6 <__udivmoddi4+0x276>
 8000ec2:	4589      	cmp	r9, r1
 8000ec4:	d81f      	bhi.n	8000f06 <__udivmoddi4+0x2b6>
 8000ec6:	eba1 0109 	sub.w	r1, r1, r9
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000edc:	4542      	cmp	r2, r8
 8000ede:	d229      	bcs.n	8000f34 <__udivmoddi4+0x2e4>
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ee6:	d2c4      	bcs.n	8000e72 <__udivmoddi4+0x222>
 8000ee8:	4542      	cmp	r2, r8
 8000eea:	d2c2      	bcs.n	8000e72 <__udivmoddi4+0x222>
 8000eec:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef0:	443a      	add	r2, r7
 8000ef2:	e7be      	b.n	8000e72 <__udivmoddi4+0x222>
 8000ef4:	45f0      	cmp	r8, lr
 8000ef6:	d29d      	bcs.n	8000e34 <__udivmoddi4+0x1e4>
 8000ef8:	ebbe 0302 	subs.w	r3, lr, r2
 8000efc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f00:	3801      	subs	r0, #1
 8000f02:	46e1      	mov	r9, ip
 8000f04:	e796      	b.n	8000e34 <__udivmoddi4+0x1e4>
 8000f06:	eba7 0909 	sub.w	r9, r7, r9
 8000f0a:	4449      	add	r1, r9
 8000f0c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f10:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f14:	fb09 f804 	mul.w	r8, r9, r4
 8000f18:	e7db      	b.n	8000ed2 <__udivmoddi4+0x282>
 8000f1a:	4673      	mov	r3, lr
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1ce>
 8000f1e:	4650      	mov	r0, sl
 8000f20:	e766      	b.n	8000df0 <__udivmoddi4+0x1a0>
 8000f22:	4608      	mov	r0, r1
 8000f24:	e6fd      	b.n	8000d22 <__udivmoddi4+0xd2>
 8000f26:	443b      	add	r3, r7
 8000f28:	3a02      	subs	r2, #2
 8000f2a:	e733      	b.n	8000d94 <__udivmoddi4+0x144>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	443b      	add	r3, r7
 8000f32:	e71c      	b.n	8000d6e <__udivmoddi4+0x11e>
 8000f34:	4649      	mov	r1, r9
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x222>
 8000f38:	eba1 0109 	sub.w	r1, r1, r9
 8000f3c:	46c4      	mov	ip, r8
 8000f3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f42:	fb09 f804 	mul.w	r8, r9, r4
 8000f46:	e7c4      	b.n	8000ed2 <__udivmoddi4+0x282>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000029c 	.word	0x2000029c

08000f8c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <modbus_3t5_Timeout+0x1c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	755a      	strb	r2, [r3, #21]

}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000029c 	.word	0x2000029c

08000fac <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f00a fbc9 	bl	800b74c <HAL_UART_GetError>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	d101      	bne.n	8000fc4 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000fc0:	f7ff ffc4 	bl	8000f4c <modbus_1t5_Timeout>

	}
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fd6:	4a25      	ldr	r2, [pc, #148]	@ (800106c <Modbus_init+0xa0>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <Modbus_init+0xa0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <Modbus_init+0xa4>)
 8000fea:	210e      	movs	r1, #14
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fdd1 	bl	8009b94 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00a fb51 	bl	800b6a0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fb68 	bl	800b6d8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <Modbus_init+0xa8>)
 800100e:	2104      	movs	r1, #4
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fe0f 	bl	800ac34 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <Modbus_init+0xa0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <Modbus_init+0xa0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <Modbus_init+0xa0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001028:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800102c:	4413      	add	r3, r2
 800102e:	3302      	adds	r3, #2
 8001030:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001034:	4619      	mov	r1, r3
 8001036:	f009 ff37 	bl	800aea8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <Modbus_init+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10c      	bne.n	8001064 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <Modbus_init+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4618      	mov	r0, r3
 8001052:	f007 fccb 	bl	80089ec <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <Modbus_init+0xa0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f007 ff24 	bl	8008eac <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000029c 	.word	0x2000029c
 8001070:	08000f8d 	.word	0x08000f8d
 8001074:	08000fad 	.word	0x08000fad

08001078 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001088:	23ff      	movs	r3, #255	@ 0xff
 800108a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800108c:	e013      	b.n	80010b6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	4053      	eors	r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <CRC16+0x68>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4053      	eors	r3, r2
 80010aa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <CRC16+0x6c>)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010b6:	883b      	ldrh	r3, [r7, #0]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	803a      	strh	r2, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e6      	bne.n	800108e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	b29b      	uxth	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000100 	.word	0x20000100
 80010e4:	20000000 	.word	0x20000000

080010e8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010ee:	4b7e      	ldr	r3, [pc, #504]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7ddb      	ldrb	r3, [r3, #23]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80a      	bhi.n	8001110 <Modbus_Protocal_Worker+0x28>
 80010fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001100 <Modbus_Protocal_Worker+0x18>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	0800111b 	.word	0x0800111b
 8001104:	080012af 	.word	0x080012af
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011eb 	.word	0x080011eb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001110:	4b75      	ldr	r3, [pc, #468]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	75da      	strb	r2, [r3, #23]
		break;
 8001118:	e0e1      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800111a:	4b73      	ldr	r3, [pc, #460]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001126:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800112e:	f000 f9cd 	bl	80014cc <Modbus_Emission>
 8001132:	e018      	b.n	8001166 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001134:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001148:	b29b      	uxth	r3, r3
 800114a:	429a      	cmp	r2, r3
 800114c:	d00b      	beq.n	8001166 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800114e:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001156:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800115e:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2203      	movs	r2, #3
 8001164:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001166:	4b60      	ldr	r3, [pc, #384]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001170:	2b20      	cmp	r3, #32
 8001172:	f040 80ad 	bne.w	80012d0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001176:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001180:	4b59      	ldr	r3, [pc, #356]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b57      	ldr	r3, [pc, #348]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001192:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001196:	4413      	add	r3, r2
 8001198:	3302      	adds	r3, #2
 800119a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800119e:	4619      	mov	r1, r3
 80011a0:	f009 fe82 	bl	800aea8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80011a4:	e094      	b.n	80012d0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80011a6:	4b50      	ldr	r3, [pc, #320]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7d1b      	ldrb	r3, [r3, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8091 	beq.w	80012d4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22fe      	movs	r2, #254	@ 0xfe
 80011b8:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011ba:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80011c4:	4b48      	ldr	r3, [pc, #288]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80011d4:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80011dc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011e0:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2204      	movs	r2, #4
 80011e6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011e8:	e074      	b.n	80012d4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011ea:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011f2:	f113 0f02 	cmn.w	r3, #2
 80011f6:	d150      	bne.n	800129a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001200:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001210:	3b02      	subs	r3, #2
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff ff2f 	bl	8001078 <CRC16>
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800121e:	793a      	ldrb	r2, [r7, #4]
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800122c:	3b02      	subs	r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001234:	429a      	cmp	r2, r3
 8001236:	d10c      	bne.n	8001252 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001238:	797a      	ldrb	r2, [r7, #5]
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001246:	3b01      	subs	r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800124e:	429a      	cmp	r2, r3
 8001250:	d004      	beq.n	800125c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	759a      	strb	r2, [r3, #22]
				break;
 800125a:	e040      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001264:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d113      	bne.n	8001296 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800127e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001288:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800128a:	461a      	mov	r2, r3
 800128c:	f00b fbea 	bl	800ca64 <memcpy>

			//execute command
			Modbus_frame_response();
 8001290:	f000 f904 	bl	800149c <Modbus_frame_response>
 8001294:	e001      	b.n	800129a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001296:	bf00      	nop
					}
		break;


	}
}
 8001298:	e021      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	7d5b      	ldrb	r3, [r3, #21]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d019      	beq.n	80012d8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	75da      	strb	r2, [r3, #23]
		break;
 80012ac:	e014      	b.n	80012d8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d10f      	bne.n	80012dc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	75da      	strb	r2, [r3, #23]
		break;
 80012ce:	e005      	b.n	80012dc <Modbus_Protocal_Worker+0x1f4>
		break;
 80012d0:	bf00      	nop
 80012d2:	e004      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012d4:	bf00      	nop
 80012d6:	e002      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012dc:	bf00      	nop
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000029c 	.word	0x2000029c

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <modbusWrite1Register+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e5b      	ldrb	r3, [r3, #25]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001368 <modbusWrite1Register+0x7c>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	7e92      	ldrb	r2, [r2, #26]
 8001302:	4413      	add	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <modbusWrite1Register+0x7c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	429a      	cmp	r2, r3
 8001310:	d903      	bls.n	800131a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001312:	2002      	movs	r0, #2
 8001314:	f000 f8a0 	bl	8001458 <ModbusErrorReply>
			 return;
 8001318:	e023      	b.n	8001362 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <modbusWrite1Register+0x7c>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	7ed2      	ldrb	r2, [r2, #27]
 800132c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	440b      	add	r3, r1
 800133e:	7f12      	ldrb	r2, [r2, #28]
 8001340:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <modbusWrite1Register+0x7c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001350:	2208      	movs	r2, #8
 8001352:	4619      	mov	r1, r3
 8001354:	f00b fb86 	bl	800ca64 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <modbusWrite1Register+0x7c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000029c 	.word	0x2000029c

0800136c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001372:	4b38      	ldr	r3, [pc, #224]	@ (8001454 <modbusRead1Register+0xe8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7edb      	ldrb	r3, [r3, #27]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <modbusRead1Register+0xe8>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	7f12      	ldrb	r2, [r2, #28]
 8001382:	4413      	add	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001386:	4b33      	ldr	r3, [pc, #204]	@ (8001454 <modbusRead1Register+0xe8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	7e5b      	ldrb	r3, [r3, #25]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	4a30      	ldr	r2, [pc, #192]	@ (8001454 <modbusRead1Register+0xe8>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	7e92      	ldrb	r2, [r2, #26]
 8001396:	4413      	add	r3, r2
 8001398:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <modbusRead1Register+0x3a>
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2b7d      	cmp	r3, #125	@ 0x7d
 80013a4:	d903      	bls.n	80013ae <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f856 	bl	8001458 <ModbusErrorReply>
		 return;
 80013ac:	e04e      	b.n	800144c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <modbusRead1Register+0xe8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d808      	bhi.n	80013cc <modbusRead1Register+0x60>
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4413      	add	r3, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <modbusRead1Register+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d903      	bls.n	80013d4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 f843 	bl	8001458 <ModbusErrorReply>
		 return;
 80013d2:	e03b      	b.n	800144c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <modbusRead1Register+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <modbusRead1Register+0xe8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013ee:	2400      	movs	r4, #0
 80013f0:	e020      	b.n	8001434 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <modbusRead1Register+0xe8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	4423      	add	r3, r4
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	18d1      	adds	r1, r2, r3
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <modbusRead1Register+0xe8>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	1c63      	adds	r3, r4, #1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	7849      	ldrb	r1, [r1, #1]
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <modbusRead1Register+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	4423      	add	r3, r4
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	18d1      	adds	r1, r2, r3
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <modbusRead1Register+0xe8>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	0063      	lsls	r3, r4, #1
 8001426:	3303      	adds	r3, #3
 8001428:	7809      	ldrb	r1, [r1, #0]
 800142a:	4413      	add	r3, r2
 800142c:	460a      	mov	r2, r1
 800142e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001432:	3401      	adds	r4, #1
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	429c      	cmp	r4, r3
 8001438:	dbdb      	blt.n	80013f2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <modbusRead1Register+0xe8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	2000029c 	.word	0x2000029c

08001458 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <ModbusErrorReply+0x40>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	7e1a      	ldrb	r2, [r3, #24]
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <ModbusErrorReply+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <ModbusErrorReply+0x40>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <ModbusErrorReply+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000029c 	.word	0x2000029c

0800149c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <Modbus_frame_response+0x2c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	7e1b      	ldrb	r3, [r3, #24]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d004      	beq.n	80014b4 <Modbus_frame_response+0x18>
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d105      	bne.n	80014ba <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ae:	f7ff ff1d 	bl	80012ec <modbusWrite1Register>
		break;
 80014b2:	e006      	b.n	80014c2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014b4:	f7ff ff5a 	bl	800136c <modbusRead1Register>
		break;
 80014b8:	e003      	b.n	80014c2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff ffcc 	bl	8001458 <ModbusErrorReply>
		break;
 80014c0:	bf00      	nop

	}
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000029c 	.word	0x2000029c

080014cc <Modbus_Emission>:

void Modbus_Emission()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d15d      	bne.n	800159c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014e0:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014ee:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014f6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001508:	461a      	mov	r2, r3
 800150a:	f00b faab 	bl	800ca64 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001516:	461a      	mov	r2, r3
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <Modbus_Emission+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3203      	adds	r2, #3
 800151e:	b292      	uxth	r2, r2
 8001520:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <Modbus_Emission+0xe8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001534:	3b02      	subs	r3, #2
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fd9d 	bl	8001078 <CRC16>
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800154e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001550:	7939      	ldrb	r1, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	460a      	mov	r2, r1
 8001556:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <Modbus_Emission+0xe8>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001566:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001568:	7979      	ldrb	r1, [r7, #5]
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157c:	2b20      	cmp	r3, #32
 800157e:	d10d      	bne.n	800159c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001592:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001596:	461a      	mov	r2, r3
 8001598:	f009 fc06 	bl	800ada8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <Modbus_Emission+0xe8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <Modbus_Emission+0xe8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	755a      	strb	r2, [r3, #21]

}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000029c 	.word	0x2000029c

080015b8 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015c4:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	615a      	str	r2, [r3, #20]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PIDCompute>:

float PIDCompute(CONTROLLER* controller , float kp, float ki, float kd, float error)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6178      	str	r0, [r7, #20]
 80015e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80015ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80015f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80015f4:	edc7 1a01 	vstr	s3, [r7, #4]

	controller -> kp = kp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]
	controller -> kd = kd;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	609a      	str	r2, [r3, #8]
	controller -> ki = ki;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]

    // Anti-windup: only integrate if not saturated
    if (!((controller->u >= controller->u_max && error > 0) ||
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	edd3 7a04 	vldr	s15, [r3, #16]
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	bfac      	ite	ge
 8001620:	2301      	movge	r3, #1
 8001622:	2300      	movlt	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10e      	bne.n	800164e <PIDCompute+0x6e>
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f083 0301 	eor.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d059      	beq.n	8001702 <PIDCompute+0x122>
          (controller->u <= controller->u_min && error < 0)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	ed93 7a03 	vldr	s14, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	edd3 7a05 	vldr	s15, [r3, #20]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
    if (!((controller->u >= controller->u_max && error > 0) ||
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10e      	bne.n	8001692 <PIDCompute+0xb2>
          (controller->u <= controller->u_min && error < 0)))
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	bf4c      	ite	mi
 8001682:	2301      	movmi	r3, #1
 8001684:	2300      	movpl	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d037      	beq.n	8001702 <PIDCompute+0x122>
    {
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	edd3 7a01 	vldr	s15, [r3, #4]
 800169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
                      - (controller->kp + 2 * controller->kd) * controller->prev_error_one
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee37 7a67 	vsub.f32	s14, s14, s15
                      + (controller->kd * controller->prev_error_two);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	edd3 7a07 	vldr	s15, [r3, #28]
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 80016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ea:	edc7 7a07 	vstr	s15, [r7, #28]

        controller->u += delta_u;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80016f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (controller->u > controller->u_max) {controller->u = controller->u_max;}
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	ed93 7a03 	vldr	s14, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	edd3 7a04 	vldr	s15, [r3, #16]
 800170e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd04      	ble.n	8001722 <PIDCompute+0x142>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e00e      	b.n	8001740 <PIDCompute+0x160>
    else if (controller->u < controller->u_min) {controller->u = controller->u_min;}
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	ed93 7a03 	vldr	s14, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	edd3 7a05 	vldr	s15, [r3, #20]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d503      	bpl.n	8001740 <PIDCompute+0x160>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	60da      	str	r2, [r3, #12]

    // Shift error history
    controller->prev_error_two = controller->prev_error_one;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	61da      	str	r2, [r3, #28]
    controller->prev_error_one = error;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]

    return controller->u;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	ee07 3a90 	vmov	s15, r3
}
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	3724      	adds	r7, #36	@ 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6178      	str	r0, [r7, #20]
 800176c:	6139      	str	r1, [r7, #16]
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	ed87 0a02 	vstr	s0, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 80017b8:	213c      	movs	r1, #60	@ 0x3c
 80017ba:	6938      	ldr	r0, [r7, #16]
 80017bc:	f007 fcb8 	bl	8009130 <HAL_TIM_Encoder_Start>

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0fd9      	lsrs	r1, r3, #31
 80017f6:	440b      	add	r3, r1
 80017f8:	105b      	asrs	r3, r3, #1
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd07      	ble.n	800180e <QEIPosVelUpdate+0x46>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1a      	ldr	r2, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	621a      	str	r2, [r3, #32]
 800180c:	e010      	b.n	8001830 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	0fd9      	lsrs	r1, r3, #31
 8001818:	440b      	add	r3, r1
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	425b      	negs	r3, r3
 800181e:	429a      	cmp	r2, r3
 8001820:	da06      	bge.n	8001830 <QEIPosVelUpdate+0x68>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	441a      	add	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	441a      	add	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	edd3 7a05 	vldr	s15, [r3, #20]
 8001866:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800186a:	ee17 0a90 	vmov	r0, s15
 800186e:	f7fe fe37 	bl	80004e0 <__aeabi_f2d>
 8001872:	a323      	add	r3, pc, #140	@ (adr r3, 8001900 <QEIPosVelUpdate+0x138>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fe8a 	bl	8000590 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f97c 	bl	8000b80 <__aeabi_d2f>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a8:	ee17 0a90 	vmov	r0, s15
 80018ac:	f7fe fe18 	bl	80004e0 <__aeabi_f2d>
 80018b0:	a313      	add	r3, pc, #76	@ (adr r3, 8001900 <QEIPosVelUpdate+0x138>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe6b 	bl	8000590 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fdf8 	bl	80004bc <__aeabi_i2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ff86 	bl	80007e4 <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f94e 	bl	8000b80 <__aeabi_d2f>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	54442d18 	.word	0x54442d18
 8001904:	400921fb 	.word	0x400921fb

08001908 <QEI_Reset>:

void QEI_Reset(QEI *qei)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    // 1) stop encoder (optional)
    HAL_TIM_Encoder_Stop(qei->htim_qei, TIM_CHANNEL_ALL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	213c      	movs	r1, #60	@ 0x3c
 8001916:	4618      	mov	r0, r3
 8001918:	f007 fc98 	bl	800924c <HAL_TIM_Encoder_Stop>

    // 2) clear the hardware counter
    __HAL_TIM_SET_COUNTER(qei->htim_qei, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

    // 3) clear your software state
    qei->new_val   = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->old_val   = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->pulses    = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
    qei->revs      = 0.0f;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    qei->rads      = 0.0f;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    qei->radps     = 0.0f;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) restart encoder
    HAL_TIM_Encoder_Start(qei->htim_qei, TIM_CHANNEL_ALL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	213c      	movs	r1, #60	@ 0x3c
 8001956:	4618      	mov	r0, r3
 8001958:	f007 fbea 	bl	8009130 <HAL_TIM_Encoder_Start>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <Trapezoidal_Update>:
 * @brief  Advance the profile by dt seconds, always in a local (0 → distance_total) frame.
 *         current_velocity and current_position are non-negative.  You only apply
 *         the ±1 sign when converting to “absolute” outside.
 */
void Trapezoidal_Update(VELO_PROFILE *profile, float dt)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7f1b      	ldrb	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8099 	bne.w	8001aac <Trapezoidal_Update+0x148>
        return;
    }

    // 1) How much remains in the local frame?
    //    (local coordinates always go from 0 → distance_total)
    float remaining = profile->target_position - profile->current_position;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a03 	vldr	s15, [r3, #12]
 8001986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198a:	edc7 7a03 	vstr	s15, [r7, #12]
    if (remaining < 0.0f) {
 800198e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	d502      	bpl.n	80019a2 <Trapezoidal_Update+0x3e>
        remaining = 0.0f;
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
    }

    // 2) Compute stopping distance in local frame: v^2/(2a)
    float stopping_dist = (profile->current_velocity * profile->current_velocity)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80019ae:	ee67 6a27 	vmul.f32	s13, s14, s15
                          / (2.0f * profile->a_max);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
    float stopping_dist = (profile->current_velocity * profile->current_velocity)
 80019bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c0:	edc7 7a02 	vstr	s15, [r7, #8]

    // 3) Decide “accelerate” vs “decelerate” (all in positive magnitude)
    if (remaining <= stopping_dist) {
 80019c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d81b      	bhi.n	8001a0e <Trapezoidal_Update+0xaa>
        // We are within braking distance → decelerate
        profile->current_velocity -= profile->a_max * dt;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edd3 6a02 	vldr	s13, [r3, #8]
 80019e2:	edd7 7a00 	vldr	s15, [r7]
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edc3 7a04 	vstr	s15, [r3, #16]
        if (profile->current_velocity < 0.0f) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d52d      	bpl.n	8001a60 <Trapezoidal_Update+0xfc>
            profile->current_velocity = 0.0f;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	e028      	b.n	8001a60 <Trapezoidal_Update+0xfc>
        }
    }
    else {
        // Not yet at braking zone → accelerate up to v_peak
        if (profile->current_velocity < profile->v_peak) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d51d      	bpl.n	8001a60 <Trapezoidal_Update+0xfc>
            profile->current_velocity += profile->a_max * dt;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a04 	vstr	s15, [r3, #16]
            if (profile->current_velocity > profile->v_peak) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	dd03      	ble.n	8001a60 <Trapezoidal_Update+0xfc>
                profile->current_velocity = profile->v_peak;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
        }
        // Once we hit v_peak, we just hold it (no extra “cruise” logic needed)
    }

    // 4) Integrate position in local frame (always positive)
    profile->current_position += profile->current_velocity * dt;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a6c:	edd7 7a00 	vldr	s15, [r7]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edc3 7a03 	vstr	s15, [r3, #12]

    // 5) If we've reached (or overshot) distance_total, clamp & finish
    if (profile->current_position >= profile->target_position) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	db0c      	blt.n	8001aae <Trapezoidal_Update+0x14a>
        profile->current_position = profile->target_position;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
        profile->current_velocity = 0.0f;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
        profile->finished = 1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	771a      	strb	r2, [r3, #28]
 8001aaa:	e000      	b.n	8001aae <Trapezoidal_Update+0x14a>
        return;
 8001aac:	bf00      	nop
    }
}
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <Trapezoidal_Init>:
void Trapezoidal_Init(VELO_PROFILE *profile,
                      float abs_start,
                      float abs_goal,
                      float v_max,
                      float a_max)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6178      	str	r0, [r7, #20]
 8001ac0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ac4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ac8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001acc:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->start_offset    = abs_start;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	621a      	str	r2, [r3, #32]
    float delta              = abs_goal - abs_start;
 8001ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae2:	edc7 7a07 	vstr	s15, [r7, #28]
    profile->distance_total  = fabsf(delta);
 8001ae6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aea:	eef0 7ae7 	vabs.f32	s15, s15
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	edc3 7a00 	vstr	s15, [r3]
    profile->direction       = (delta >= 0.0f) ? +1.0f : -1.0f;
 8001af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	db02      	blt.n	8001b08 <Trapezoidal_Init+0x50>
 8001b02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b06:	e000      	b.n	8001b0a <Trapezoidal_Init+0x52>
 8001b08:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <Trapezoidal_Init+0x108>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	619a      	str	r2, [r3, #24]

    profile->current_position = 0.0f;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    profile->current_velocity = 0.0f;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
    profile->target_position  = profile->distance_total;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	615a      	str	r2, [r3, #20]
    profile->finished         = 0;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]

    profile->v_max = fabsf(v_max);
 8001b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b30:	eef0 7ae7 	vabs.f32	s15, s15
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	edc3 7a02 	vstr	s15, [r3, #8]

    float d_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b62:	edc7 7a06 	vstr	s15, [r7, #24]
    if (profile->distance_total < d_min) {
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd15      	ble.n	8001ba6 <Trapezoidal_Init+0xee>
        profile->is_triangular = 1;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        profile->v_peak        = sqrtf(profile->a_max * profile->distance_total);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	eeb0 0a67 	vmov.f32	s0, s15
 8001b96:	f00a ffa1 	bl	800cadc <sqrtf>
 8001b9a:	eef0 7a40 	vmov.f32	s15, s0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    } else {
        profile->is_triangular = 0;
        profile->v_peak        = profile->v_max;
    }
}
 8001ba4:	e007      	b.n	8001bb6 <Trapezoidal_Init+0xfe>
        profile->is_triangular = 0;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        profile->v_peak        = profile->v_max;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	bf800000 	.word	0xbf800000

08001bc4 <Trapezoidal_GetCurrentAbsolute>:
 *
 * In other words, if you called Trapezoidal_Init(&p, 100.0f, 150.0f, …),
 * then GetCurrentAbsolute(p) goes 100 → 150 as current_position goes 0 → 50.
 */
static inline float Trapezoidal_GetCurrentAbsolute(VELO_PROFILE *profile)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    return profile->start_offset
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 7a08 	vldr	s14, [r3, #32]
         + (profile->direction * profile->current_position);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bfa:	f003 f93a 	bl	8004e72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bfe:	f000 f8d5 	bl	8001dac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c02:	f000 fd81 	bl	8002708 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c06:	f000 fd3d 	bl	8002684 <MX_DMA_Init>
	MX_TIM1_Init();
 8001c0a:	f000 fa09 	bl	8002020 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c0e:	f000 fac3 	bl	8002198 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001c12:	f000 fb65 	bl	80022e0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001c16:	f000 fbb9 	bl	800238c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001c1a:	f000 fb0b 	bl	8002234 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001c1e:	f000 f911 	bl	8001e44 <MX_ADC1_Init>
	MX_TIM16_Init();
 8001c22:	f000 fcb1 	bl	8002588 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001c26:	f000 fcdf 	bl	80025e8 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8001c2a:	f000 f993 	bl	8001f54 <MX_ADC2_Init>
	MX_TIM8_Init();
 8001c2e:	f000 fbfb 	bl	8002428 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <main+0x138>)
 8001c34:	4a3e      	ldr	r2, [pc, #248]	@ (8001d30 <main+0x13c>)
 8001c36:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <main+0x138>)
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d34 <main+0x140>)
 8001c3c:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <main+0x138>)
 8001c40:	2215      	movs	r2, #21
 8001c42:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <main+0x138>)
 8001c46:	2246      	movs	r2, #70	@ 0x46
 8001c48:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, &registerFrame);
 8001c4a:	493b      	ldr	r1, [pc, #236]	@ (8001d38 <main+0x144>)
 8001c4c:	4837      	ldr	r0, [pc, #220]	@ (8001d2c <main+0x138>)
 8001c4e:	f7ff f9bd 	bl	8000fcc <Modbus_init>

	PID_POS_pris.Kp = Kp_pos_pris;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <main+0x148>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <main+0x14c>)
 8001c58:	6193      	str	r3, [r2, #24]
	PID_POS_pris.Ki = Ki_pos_pris;
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <main+0x150>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a38      	ldr	r2, [pc, #224]	@ (8001d40 <main+0x14c>)
 8001c60:	61d3      	str	r3, [r2, #28]
	PID_POS_pris.Kd = Kd_pos_pris;
 8001c62:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <main+0x154>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <main+0x14c>)
 8001c68:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_pris, 0);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4834      	ldr	r0, [pc, #208]	@ (8001d40 <main+0x14c>)
 8001c6e:	f00a fe91 	bl	800c994 <arm_pid_init_f32>

	PID_POS_re.Kp = Kp_pos_re;
 8001c72:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <main+0x158>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a36      	ldr	r2, [pc, #216]	@ (8001d50 <main+0x15c>)
 8001c78:	6193      	str	r3, [r2, #24]
	PID_POS_re.Ki = Ki_pos_re;
 8001c7a:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <main+0x160>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <main+0x15c>)
 8001c80:	61d3      	str	r3, [r2, #28]
	PID_POS_re.Kd = Kd_pos_re;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <main+0x164>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <main+0x15c>)
 8001c88:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_re, 0);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4830      	ldr	r0, [pc, #192]	@ (8001d50 <main+0x15c>)
 8001c8e:	f00a fe81 	bl	800c994 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <main+0x168>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4931      	ldr	r1, [pc, #196]	@ (8001d60 <main+0x16c>)
 8001c9c:	4831      	ldr	r0, [pc, #196]	@ (8001d64 <main+0x170>)
 8001c9e:	f002 fb23 	bl	80042e8 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8001ca2:	2340      	movs	r3, #64	@ 0x40
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <main+0x168>)
 8001ca8:	2204      	movs	r2, #4
 8001caa:	492d      	ldr	r1, [pc, #180]	@ (8001d60 <main+0x16c>)
 8001cac:	482e      	ldr	r0, [pc, #184]	@ (8001d68 <main+0x174>)
 8001cae:	f002 fb1b 	bl	80042e8 <MotorInit>
	HAL_TIM_Base_Start(&htim8);
 8001cb2:	482e      	ldr	r0, [pc, #184]	@ (8001d6c <main+0x178>)
 8001cb4:	f006 fe2a 	bl	800890c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	482c      	ldr	r0, [pc, #176]	@ (8001d6c <main+0x178>)
 8001cbc:	f006 ff7c 	bl	8008bb8 <HAL_TIM_PWM_Start>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8001cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001d70 <main+0x17c>
 8001cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ccc:	4929      	ldr	r1, [pc, #164]	@ (8001d74 <main+0x180>)
 8001cce:	482a      	ldr	r0, [pc, #168]	@ (8001d78 <main+0x184>)
 8001cd0:	f7ff fd48 	bl	8001764 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8001cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd8:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001d70 <main+0x17c>
 8001cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce0:	4926      	ldr	r1, [pc, #152]	@ (8001d7c <main+0x188>)
 8001ce2:	4827      	ldr	r0, [pc, #156]	@ (8001d80 <main+0x18c>)
 8001ce4:	f7ff fd3e 	bl	8001764 <QEIInit>

	PIDInit(&prismatic_vel_control, 65535, -65535);
 8001ce8:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001d84 <main+0x190>
 8001cec:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001d88 <main+0x194>
 8001cf0:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <main+0x198>)
 8001cf2:	f7ff fc61 	bl	80015b8 <PIDInit>
	PIDInit(&revolute_vel_control, 65535, -65535);
 8001cf6:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001d84 <main+0x190>
 8001cfa:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001d88 <main+0x194>
 8001cfe:	4824      	ldr	r0, [pc, #144]	@ (8001d90 <main+0x19c>)
 8001d00:	f7ff fc5a 	bl	80015b8 <PIDInit>

	HAL_TIM_Base_Start_IT(&htim5);
 8001d04:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <main+0x1a0>)
 8001d06:	f006 fe71 	bl	80089ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d0a:	4823      	ldr	r0, [pc, #140]	@ (8001d98 <main+0x1a4>)
 8001d0c:	f006 fe6e 	bl	80089ec <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
 8001d10:	2214      	movs	r2, #20
 8001d12:	4922      	ldr	r1, [pc, #136]	@ (8001d9c <main+0x1a8>)
 8001d14:	4822      	ldr	r0, [pc, #136]	@ (8001da0 <main+0x1ac>)
 8001d16:	f003 fd19 	bl	800574c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, Prox_RawRead, 10);
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	4921      	ldr	r1, [pc, #132]	@ (8001da4 <main+0x1b0>)
 8001d1e:	4822      	ldr	r0, [pc, #136]	@ (8001da8 <main+0x1b4>)
 8001d20:	f003 fd14 	bl	800574c <HAL_ADC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8001d24:	f7ff f9e0 	bl	80010e8 <Modbus_Protocal_Worker>
 8001d28:	e7fc      	b.n	8001d24 <main+0x130>
 8001d2a:	bf00      	nop
 8001d2c:	20000bb0 	.word	0x20000bb0
 8001d30:	200009cc 	.word	0x200009cc
 8001d34:	20000900 	.word	0x20000900
 8001d38:	20001088 	.word	0x20001088
 8001d3c:	20000208 	.word	0x20000208
 8001d40:	20001174 	.word	0x20001174
 8001d44:	20001164 	.word	0x20001164
 8001d48:	20001168 	.word	0x20001168
 8001d4c:	2000020c 	.word	0x2000020c
 8001d50:	20001198 	.word	0x20001198
 8001d54:	20001294 	.word	0x20001294
 8001d58:	20000210 	.word	0x20000210
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	20000438 	.word	0x20000438
 8001d64:	2000111c 	.word	0x2000111c
 8001d68:	20001138 	.word	0x20001138
 8001d6c:	20000834 	.word	0x20000834
 8001d70:	447a0000 	.word	0x447a0000
 8001d74:	2000069c 	.word	0x2000069c
 8001d78:	200011c4 	.word	0x200011c4
 8001d7c:	200005d0 	.word	0x200005d0
 8001d80:	2000123c 	.word	0x2000123c
 8001d84:	c77fff00 	.word	0xc77fff00
 8001d88:	477fff00 	.word	0x477fff00
 8001d8c:	200011f4 	.word	0x200011f4
 8001d90:	20001270 	.word	0x20001270
 8001d94:	20000768 	.word	0x20000768
 8001d98:	20000504 	.word	0x20000504
 8001d9c:	200012cc 	.word	0x200012cc
 8001da0:	200002a0 	.word	0x200002a0
 8001da4:	20001300 	.word	0x20001300
 8001da8:	2000030c 	.word	0x2000030c

08001dac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	@ 0x50
 8001db0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a fe20 	bl	800ca00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f005 fd08 	bl	80077e4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dde:	2340      	movs	r3, #64	@ 0x40
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2302      	movs	r3, #2
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de6:	2302      	movs	r3, #2
 8001de8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dea:	2304      	movs	r3, #4
 8001dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001dee:	2355      	movs	r3, #85	@ 0x55
 8001df0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df2:	2302      	movs	r3, #2
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fda2 	bl	800794c <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x66>
		Error_Handler();
 8001e0e:	f002 fa65 	bl	80042dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 f8a0 	bl	8007f70 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x8e>
		Error_Handler();
 8001e36:	f002 fa51 	bl	80042dc <Error_Handler>
	}
}
 8001e3a:	bf00      	nop
 8001e3c:	3750      	adds	r7, #80	@ 0x50
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	@ 0x30
 8001e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2220      	movs	r2, #32
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00a fdcf 	bl	800ca00 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001e62:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e68:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e70:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e72:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001e7e:	4b32      	ldr	r3, [pc, #200]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e84:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 2;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ecc:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ece:	f003 fa81 	bl	80053d4 <HAL_ADC_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC1_Init+0x98>
		Error_Handler();
 8001ed8:	f002 fa00 	bl	80042dc <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4818      	ldr	r0, [pc, #96]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ee8:	f004 fd4e 	bl	8006988 <HAL_ADCEx_MultiModeConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001ef2:	f002 f9f3 	bl	80042dc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <MX_ADC1_Init+0x108>)
 8001ef8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001efa:	2306      	movs	r3, #6
 8001efc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001efe:	2307      	movs	r3, #7
 8001f00:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f02:	237f      	movs	r3, #127	@ 0x7f
 8001f04:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f06:	2304      	movs	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001f14:	f003 ff76 	bl	8005e04 <HAL_ADC_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0xde>
		Error_Handler();
 8001f1e:	f002 f9dd 	bl	80042dc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <MX_ADC1_Init+0x10c>)
 8001f24:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f26:	230c      	movs	r3, #12
 8001f28:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001f30:	f003 ff68 	bl	8005e04 <HAL_ADC_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_ADC1_Init+0xfa>
		Error_Handler();
 8001f3a:	f002 f9cf 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	@ 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200002a0 	.word	0x200002a0
 8001f4c:	1d500080 	.word	0x1d500080
 8001f50:	21800100 	.word	0x21800100

08001f54 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00a fd4d 	bl	800ca00 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001f66:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <MX_ADC2_Init+0xc4>)
 8001f6a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f6c:	4b29      	ldr	r3, [pc, #164]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f72:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f86:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fd0:	f003 fa00 	bl	80053d4 <HAL_ADC_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC2_Init+0x8a>
		Error_Handler();
 8001fda:	f002 f97f 	bl	80042dc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_ADC2_Init+0xc8>)
 8001fe0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fea:	237f      	movs	r3, #127	@ 0x7f
 8001fec:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001ffc:	f003 ff02 	bl	8005e04 <HAL_ADC_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_ADC2_Init+0xb6>
		Error_Handler();
 8002006:	f002 f969 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000030c 	.word	0x2000030c
 8002018:	50000100 	.word	0x50000100
 800201c:	19200040 	.word	0x19200040

08002020 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b09c      	sub	sp, #112	@ 0x70
 8002024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002026:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2234      	movs	r2, #52	@ 0x34
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f00a fcd0 	bl	800ca00 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002062:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <MX_TIM1_Init+0x174>)
 8002064:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002068:	22a9      	movs	r2, #169	@ 0xa9
 800206a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b48      	ldr	r3, [pc, #288]	@ (8002190 <MX_TIM1_Init+0x170>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002074:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002078:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b45      	ldr	r3, [pc, #276]	@ (8002190 <MX_TIM1_Init+0x170>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b42      	ldr	r3, [pc, #264]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800208c:	4840      	ldr	r0, [pc, #256]	@ (8002190 <MX_TIM1_Init+0x170>)
 800208e:	f006 fbd9 	bl	8008844 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002098:	f002 f920 	bl	80042dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80020a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020a6:	4619      	mov	r1, r3
 80020a8:	4839      	ldr	r0, [pc, #228]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020aa:	f007 fc03 	bl	80098b4 <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x98>
		Error_Handler();
 80020b4:	f002 f912 	bl	80042dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80020b8:	4835      	ldr	r0, [pc, #212]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020ba:	f006 fd0f 	bl	8008adc <HAL_TIM_PWM_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0xa8>
		Error_Handler();
 80020c4:	f002 f90a 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80020d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020d8:	4619      	mov	r1, r3
 80020da:	482d      	ldr	r0, [pc, #180]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020dc:	f008 fbd0 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80020e6:	f002 f8f9 	bl	80042dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ea:	2360      	movs	r3, #96	@ 0x60
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002106:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800210a:	2204      	movs	r2, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4820      	ldr	r0, [pc, #128]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002110:	f007 fabc 	bl	800968c <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 800211a:	f002 f8df 	bl	80042dc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800211e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002122:	2208      	movs	r2, #8
 8002124:	4619      	mov	r1, r3
 8002126:	481a      	ldr	r0, [pc, #104]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002128:	f007 fab0 	bl	800968c <HAL_TIM_PWM_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8002132:	f002 f8d3 	bl	80042dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800214a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800215c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4807      	ldr	r0, [pc, #28]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002174:	f008 fc1a 	bl	800a9ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x162>
			!= HAL_OK) {
		Error_Handler();
 800217e:	f002 f8ad 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002182:	4803      	ldr	r0, [pc, #12]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002184:	f002 fc6c 	bl	8004a60 <HAL_TIM_MspPostInit>

}
 8002188:	bf00      	nop
 800218a:	3770      	adds	r7, #112	@ 0x70
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000438 	.word	0x20000438
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021c0:	22a9      	movs	r2, #169	@ 0xa9
 80021c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80021de:	4814      	ldr	r0, [pc, #80]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021e0:	f006 fb30 	bl	8008844 <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x56>
		Error_Handler();
 80021ea:	f002 f877 	bl	80042dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021fc:	f007 fb5a 	bl	80098b4 <HAL_TIM_ConfigClockSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x72>
		Error_Handler();
 8002206:	f002 f869 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_TIM2_Init+0x98>)
 8002218:	f008 fb32 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8002222:	f002 f85b 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000504 	.word	0x20000504

08002234 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	@ 0x30
 8002238:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f00a fbdc 	bl	800ca00 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <MX_TIM3_Init+0xa8>)
 8002256:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002264:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800226a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002278:	2303      	movs	r3, #3
 800227a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002280:	2301      	movs	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002290:	2301      	movs	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 80022a4:	f006 fe90 	bl	8008fc8 <HAL_TIM_Encoder_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80022ae:	f002 f815 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 80022c0:	f008 fade 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80022ca:	f002 f807 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	@ 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200005d0 	.word	0x200005d0
 80022dc:	40000400 	.word	0x40000400

080022e0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00a fb86 	bl	800ca00 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002300:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <MX_TIM4_Init+0xa8>)
 8002302:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002310:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002316:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002324:	2303      	movs	r3, #3
 8002326:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002350:	f006 fe3a 	bl	8008fc8 <HAL_TIM_Encoder_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM4_Init+0x7e>
		Error_Handler();
 800235a:	f001 ffbf 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800236c:	f008 fa88 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002376:	f001 ffb1 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3730      	adds	r7, #48	@ 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000069c 	.word	0x2000069c
 8002388:	40000800 	.word	0x40000800

0800238c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <MX_TIM5_Init+0x98>)
 80023ae:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023b2:	22a9      	movs	r2, #169	@ 0xa9
 80023b4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023c2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c4:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80023d0:	4813      	ldr	r0, [pc, #76]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023d2:	f006 fa37 	bl	8008844 <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM5_Init+0x54>
		Error_Handler();
 80023dc:	f001 ff7e 	bl	80042dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4619      	mov	r1, r3
 80023ec:	480c      	ldr	r0, [pc, #48]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023ee:	f007 fa61 	bl	80098b4 <HAL_TIM_ConfigClockSource>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM5_Init+0x70>
		Error_Handler();
 80023f8:	f001 ff70 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_TIM5_Init+0x94>)
 800240a:	f008 fa39 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002414:	f001 ff62 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000768 	.word	0x20000768
 8002424:	40000c00 	.word	0x40000c00

08002428 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b09c      	sub	sp, #112	@ 0x70
 800242c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800242e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800243c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002448:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2234      	movs	r2, #52	@ 0x34
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00a facc 	bl	800ca00 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002468:	4b45      	ldr	r3, [pc, #276]	@ (8002580 <MX_TIM8_Init+0x158>)
 800246a:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <MX_TIM8_Init+0x15c>)
 800246c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002470:	22a9      	movs	r2, #169	@ 0xa9
 8002472:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 19999;
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <MX_TIM8_Init+0x158>)
 800247c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002480:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b3f      	ldr	r3, [pc, #252]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002488:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <MX_TIM8_Init+0x158>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b3c      	ldr	r3, [pc, #240]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002494:	483a      	ldr	r0, [pc, #232]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002496:	f006 f9d5 	bl	8008844 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM8_Init+0x7c>
		Error_Handler();
 80024a0:	f001 ff1c 	bl	80042dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a8:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80024aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ae:	4619      	mov	r1, r3
 80024b0:	4833      	ldr	r0, [pc, #204]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024b2:	f007 f9ff 	bl	80098b4 <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM8_Init+0x98>
		Error_Handler();
 80024bc:	f001 ff0e 	bl	80042dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80024c0:	482f      	ldr	r0, [pc, #188]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024c2:	f006 fb0b 	bl	8008adc <HAL_TIM_PWM_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM8_Init+0xa8>
		Error_Handler();
 80024cc:	f001 ff06 	bl	80042dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80024dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e0:	4619      	mov	r1, r3
 80024e2:	4827      	ldr	r0, [pc, #156]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024e4:	f008 f9cc 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80024ee:	f001 fef5 	bl	80042dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	@ 0x60
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 800250e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	481a      	ldr	r0, [pc, #104]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002518:	f007 f8b8 	bl	800968c <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM8_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8002522:	f001 fedb 	bl	80042dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800253e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4807      	ldr	r0, [pc, #28]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002564:	f008 fa22 	bl	800a9ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM8_Init+0x14a>
			!= HAL_OK) {
		Error_Handler();
 800256e:	f001 feb5 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8002572:	4803      	ldr	r0, [pc, #12]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002574:	f002 fa74 	bl	8004a60 <HAL_TIM_MspPostInit>

}
 8002578:	bf00      	nop
 800257a:	3770      	adds	r7, #112	@ 0x70
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000834 	.word	0x20000834
 8002584:	40013400 	.word	0x40013400

08002588 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <MX_TIM16_Init+0x58>)
 800258e:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <MX_TIM16_Init+0x5c>)
 8002590:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <MX_TIM16_Init+0x58>)
 8002594:	22a9      	movs	r2, #169	@ 0xa9
 8002596:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <MX_TIM16_Init+0x58>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025a0:	f240 4279 	movw	r2, #1145	@ 0x479
 80025a4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80025b8:	4809      	ldr	r0, [pc, #36]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025ba:	f006 f943 	bl	8008844 <HAL_TIM_Base_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM16_Init+0x40>
		Error_Handler();
 80025c4:	f001 fe8a 	bl	80042dc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80025c8:	2108      	movs	r1, #8
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025cc:	f006 fc06 	bl	8008ddc <HAL_TIM_OnePulse_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM16_Init+0x52>
		Error_Handler();
 80025d6:	f001 fe81 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000900 	.word	0x20000900
 80025e4:	40014400 	.word	0x40014400

080025e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025ee:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <MX_USART2_UART_Init+0x98>)
 80025f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002600:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800260a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002634:	4811      	ldr	r0, [pc, #68]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002636:	f008 fa9d 	bl	800ab74 <HAL_UART_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8002640:	f001 fe4c 	bl	80042dc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8002644:	2100      	movs	r1, #0
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002648:	f00a f8d9 	bl	800c7fe <HAL_UARTEx_SetTxFifoThreshold>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8002652:	f001 fe43 	bl	80042dc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002656:	2100      	movs	r1, #0
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800265a:	f00a f90e 	bl	800c87a <HAL_UARTEx_SetRxFifoThreshold>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8002664:	f001 fe3a 	bl	80042dc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002668:	4804      	ldr	r0, [pc, #16]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800266a:	f00a f88f 	bl	800c78c <HAL_UARTEx_DisableFifoMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8002674:	f001 fe32 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200009cc 	.word	0x200009cc
 8002680:	40004400 	.word	0x40004400

08002684 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <MX_DMA_Init+0x80>)
 800268c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268e:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <MX_DMA_Init+0x80>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6493      	str	r3, [r2, #72]	@ 0x48
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <MX_DMA_Init+0x80>)
 8002698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <MX_DMA_Init+0x80>)
 80026a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a6:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <MX_DMA_Init+0x80>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_DMA_Init+0x80>)
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	200b      	movs	r0, #11
 80026c0:	f004 fb45 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026c4:	200b      	movs	r0, #11
 80026c6:	f004 fb5c 	bl	8006d82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	200c      	movs	r0, #12
 80026d0:	f004 fb3d 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026d4:	200c      	movs	r0, #12
 80026d6:	f004 fb54 	bl	8006d82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	200d      	movs	r0, #13
 80026e0:	f004 fb35 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80026e4:	200d      	movs	r0, #13
 80026e6:	f004 fb4c 	bl	8006d82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	200e      	movs	r0, #14
 80026f0:	f004 fb2d 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026f4:	200e      	movs	r0, #14
 80026f6:	f004 fb44 	bl	8006d82 <HAL_NVIC_EnableIRQ>

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000

08002708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b65      	ldr	r3, [pc, #404]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a64      	ldr	r2, [pc, #400]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	4a5e      	ldr	r2, [pc, #376]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002742:	4b5c      	ldr	r3, [pc, #368]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b59      	ldr	r3, [pc, #356]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	4a58      	ldr	r2, [pc, #352]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275a:	4b56      	ldr	r3, [pc, #344]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b53      	ldr	r3, [pc, #332]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a52      	ldr	r2, [pc, #328]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b50      	ldr	r3, [pc, #320]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002786:	f004 ffe3 	bl	8007750 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10,
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 8002790:	4849      	ldr	r0, [pc, #292]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 8002792:	f004 ffdd 	bl	8007750 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800279a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800279c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4842      	ldr	r0, [pc, #264]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 80027ae:	f004 fe35 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC3 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_9;
 80027b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80027b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	483b      	ldr	r0, [pc, #236]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 80027ca:	f004 fe27 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
	GPIO_InitStruct.Pin = RUN_Joy_Pin | Save_Joy_Pin;
 80027ce:	2303      	movs	r3, #3
 80027d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f004 fe1a 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027e8:	2310      	movs	r3, #16
 80027ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fe:	f004 fe0d 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002802:	2320      	movs	r3, #32
 8002804:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281c:	f004 fdfe 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8002820:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002824:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4821      	ldr	r0, [pc, #132]	@ (80028bc <MX_GPIO_Init+0x1b4>)
 8002836:	f004 fdf1 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800283a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800283e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002844:	2302      	movs	r3, #2
 8002846:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	481b      	ldr	r0, [pc, #108]	@ (80028bc <MX_GPIO_Init+0x1b4>)
 8002850:	f004 fde4 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002854:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002858:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4812      	ldr	r0, [pc, #72]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 800286e:	f004 fdd5 	bl	800741c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002876:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 8002888:	f004 fdc8 	bl	800741c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2009      	movs	r0, #9
 8002892:	f004 fa5c 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002896:	2009      	movs	r0, #9
 8002898:	f004 fa73 	bl	8006d82 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2028      	movs	r0, #40	@ 0x28
 80028a2:	f004 fa54 	bl	8006d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028a6:	2028      	movs	r0, #40	@ 0x28
 80028a8:	f004 fa6b 	bl	8006d82 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000400 	.word	0x48000400

080028c0 <Prismatic_CasCadeControl>:

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
	float setpoint_pris_abs = Trapezoidal_GetCurrentAbsolute(&prisProfile);
 80028c6:	4872      	ldr	r0, [pc, #456]	@ (8002a90 <Prismatic_CasCadeControl+0x1d0>)
 80028c8:	f7ff f97c 	bl	8001bc4 <Trapezoidal_GetCurrentAbsolute>
 80028cc:	ed87 0a03 	vstr	s0, [r7, #12]

	error_pos_pris = setpoint_pris_abs - (float) ball_screw_pos;
 80028d0:	4b70      	ldr	r3, [pc, #448]	@ (8002a94 <Prismatic_CasCadeControl+0x1d4>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f951 	bl	8000b80 <__aeabi_d2f>
 80028de:	ee07 0a10 	vmov	s14, r0
 80028e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);
 80028f0:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a69      	ldr	r2, [pc, #420]	@ (8002a9c <Prismatic_CasCadeControl+0x1dc>)
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	607b      	str	r3, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	ed93 7a00 	vldr	s14, [r3]
 8002900:	edd7 7a01 	vldr	s15, [r7, #4]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	edd3 6a01 	vldr	s13, [r3, #4]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	edd3 7a03 	vldr	s15, [r3, #12]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	edd3 7a04 	vldr	s15, [r3, #16]
 8002928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002956:	6013      	str	r3, [r2, #0]

	if (output_pos_pris > 550) {
 8002958:	4b51      	ldr	r3, [pc, #324]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002aa4 <Prismatic_CasCadeControl+0x1e4>
 8002962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	dd03      	ble.n	8002974 <Prismatic_CasCadeControl+0xb4>
		output_pos_pris = 550;
 800296c:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800296e:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa8 <Prismatic_CasCadeControl+0x1e8>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e00c      	b.n	800298e <Prismatic_CasCadeControl+0xce>
	} else if (output_pos_pris < -550) {
 8002974:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002aac <Prismatic_CasCadeControl+0x1ec>
 800297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d502      	bpl.n	800298e <Prismatic_CasCadeControl+0xce>
		output_pos_pris = -550;
 8002988:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800298a:	4a49      	ldr	r2, [pc, #292]	@ (8002ab0 <Prismatic_CasCadeControl+0x1f0>)
 800298c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
 800298e:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fda4 	bl	80004e0 <__aeabi_f2d>
 8002998:	4b46      	ldr	r3, [pc, #280]	@ (8002ab4 <Prismatic_CasCadeControl+0x1f4>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fc3f 	bl	8000220 <__aeabi_dsub>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fe f8e9 	bl	8000b80 <__aeabi_d2f>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a41      	ldr	r2, [pc, #260]	@ (8002ab8 <Prismatic_CasCadeControl+0x1f8>)
 80029b2:	6013      	str	r3, [r2, #0]
	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <Prismatic_CasCadeControl+0x1fc>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <Prismatic_CasCadeControl+0x200>)
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <Prismatic_CasCadeControl+0x204>)
 80029c2:	edd3 6a00 	vldr	s13, [r3]
 80029c6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <Prismatic_CasCadeControl+0x1f8>)
 80029c8:	ed93 6a00 	vldr	s12, [r3]
 80029cc:	eef0 1a46 	vmov.f32	s3, s12
 80029d0:	eeb0 1a66 	vmov.f32	s2, s13
 80029d4:	eef0 0a47 	vmov.f32	s1, s14
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	483a      	ldr	r0, [pc, #232]	@ (8002ac8 <Prismatic_CasCadeControl+0x208>)
 80029de:	f7fe fdff 	bl	80015e0 <PIDCompute>
 80029e2:	eef0 7a40 	vmov.f32	s15, s0
 80029e6:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <Prismatic_CasCadeControl+0x20c>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	if (limit_r == 1 && output_prismatic < 0) {
 80029ec:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <Prismatic_CasCadeControl+0x210>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <Prismatic_CasCadeControl+0x14e>
 80029f4:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d504      	bpl.n	8002a0e <Prismatic_CasCadeControl+0x14e>
		output_prismatic = 0;
 8002a04:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <Prismatic_CasCadeControl+0x16e>
	} else if (limit_l == 1 && output_prismatic > 0) {
 8002a0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <Prismatic_CasCadeControl+0x218>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10b      	bne.n	8002a2e <Prismatic_CasCadeControl+0x16e>
 8002a16:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	dd03      	ble.n	8002a2e <Prismatic_CasCadeControl+0x16e>
		output_prismatic = 0;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
	}

	// Motor control}
	if (error_pos_pris <= 0.1 && error_pos_pris >= -0.1) {
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd54 	bl	80004e0 <__aeabi_f2d>
 8002a38:	a311      	add	r3, pc, #68	@ (adr r3, 8002a80 <Prismatic_CasCadeControl+0x1c0>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fe f823 	bl	8000a88 <__aeabi_dcmple>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <Prismatic_CasCadeControl+0x1ac>
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd47 	bl	80004e0 <__aeabi_f2d>
 8002a52:	a30d      	add	r3, pc, #52	@ (adr r3, 8002a88 <Prismatic_CasCadeControl+0x1c8>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fe f820 	bl	8000a9c <__aeabi_dcmpge>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <Prismatic_CasCadeControl+0x1ac>
		output_prismatic = 0;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e004      	b.n	8002a76 <Prismatic_CasCadeControl+0x1b6>
	} else {
		output_prismatic = output_velo_pris;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <Prismatic_CasCadeControl+0x20c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a72:	6013      	str	r3, [r2, #0]
	}
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	9999999a 	.word	0x9999999a
 8002a84:	3fb99999 	.word	0x3fb99999
 8002a88:	9999999a 	.word	0x9999999a
 8002a8c:	bfb99999 	.word	0xbfb99999
 8002a90:	20000b58 	.word	0x20000b58
 8002a94:	20001228 	.word	0x20001228
 8002a98:	20001170 	.word	0x20001170
 8002a9c:	20001174 	.word	0x20001174
 8002aa0:	2000116c 	.word	0x2000116c
 8002aa4:	44098000 	.word	0x44098000
 8002aa8:	44098000 	.word	0x44098000
 8002aac:	c4098000 	.word	0xc4098000
 8002ab0:	c4098000 	.word	0xc4098000
 8002ab4:	20001230 	.word	0x20001230
 8002ab8:	20001160 	.word	0x20001160
 8002abc:	20000200 	.word	0x20000200
 8002ac0:	20000204 	.word	0x20000204
 8002ac4:	20001158 	.word	0x20001158
 8002ac8:	200011f4 	.word	0x200011f4
 8002acc:	2000115c 	.word	0x2000115c
 8002ad0:	20001290 	.word	0x20001290
 8002ad4:	200011bc 	.word	0x200011bc
 8002ad8:	20001291 	.word	0x20001291
 8002adc:	00000000 	.word	0x00000000

08002ae0 <Revolute_CasCadeControl>:

void Revolute_CasCadeControl() {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
	float setpoint_rev_abs = Trapezoidal_GetCurrentAbsolute(&revProfile);
 8002ae6:	4874      	ldr	r0, [pc, #464]	@ (8002cb8 <Revolute_CasCadeControl+0x1d8>)
 8002ae8:	f7ff f86c 	bl	8001bc4 <Trapezoidal_GetCurrentAbsolute>
 8002aec:	ed87 0a03 	vstr	s0, [r7, #12]
	error_pos_re = setpoint_rev_abs - revolute_encoder.rads;
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002af2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b70      	ldr	r3, [pc, #448]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);
 8002b04:	4b6e      	ldr	r3, [pc, #440]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc4 <Revolute_CasCadeControl+0x1e4>)
 8002b0a:	60ba      	str	r2, [r7, #8]
 8002b0c:	607b      	str	r3, [r7, #4]
    out = (S->A0 * in) +
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b18:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	615a      	str	r2, [r3, #20]
    return (out);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4a57      	ldr	r2, [pc, #348]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b6a:	6013      	str	r3, [r2, #0]

	if (output_pos_re > 300) {
 8002b6c:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002ccc <Revolute_CasCadeControl+0x1ec>
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	dd03      	ble.n	8002b88 <Revolute_CasCadeControl+0xa8>
		output_pos_re = 300;
 8002b80:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b82:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <Revolute_CasCadeControl+0x1f0>)
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <Revolute_CasCadeControl+0xc2>
	} else if (output_pos_re < -300) {
 8002b88:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002cd4 <Revolute_CasCadeControl+0x1f4>
 8002b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d502      	bpl.n	8002ba2 <Revolute_CasCadeControl+0xc2>
		output_pos_re = -300;
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd8 <Revolute_CasCadeControl+0x1f8>)
 8002ba0:	601a      	str	r2, [r3, #0]
	}

	error_velo_re = output_pos_re - (revolute_encoder.radps / 2);
 8002ba2:	4b49      	ldr	r3, [pc, #292]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	4b44      	ldr	r3, [pc, #272]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002baa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002bae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002bb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <Revolute_CasCadeControl+0x1fc>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re, Ki_velo_re,
 8002bc0:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <Revolute_CasCadeControl+0x200>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <Revolute_CasCadeControl+0x204>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <Revolute_CasCadeControl+0x208>)
 8002bce:	edd3 6a00 	vldr	s13, [r3]
 8002bd2:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <Revolute_CasCadeControl+0x1fc>)
 8002bd4:	ed93 6a00 	vldr	s12, [r3]
 8002bd8:	eef0 1a46 	vmov.f32	s3, s12
 8002bdc:	eeb0 1a66 	vmov.f32	s2, s13
 8002be0:	eef0 0a47 	vmov.f32	s1, s14
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	4840      	ldr	r0, [pc, #256]	@ (8002cec <Revolute_CasCadeControl+0x20c>)
 8002bea:	f7fe fcf9 	bl	80015e0 <PIDCompute>
 8002bee:	eef0 7a40 	vmov.f32	s15, s0
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <Revolute_CasCadeControl+0x210>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
			Kd_velo_re, error_velo_re);

	if (revolute_flag == 1 && output_revolute > 0) {
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <Revolute_CasCadeControl+0x214>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10c      	bne.n	8002c1a <Revolute_CasCadeControl+0x13a>
 8002c00:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd04      	ble.n	8002c1a <Revolute_CasCadeControl+0x13a>
		output_revolute = 0;
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e018      	b.n	8002c4c <Revolute_CasCadeControl+0x16c>
	} else if (revolute_encoder.rads >= (2 * M_PI) && output_revolute < 0) {
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc5e 	bl	80004e0 <__aeabi_f2d>
 8002c24:	a31e      	add	r3, pc, #120	@ (adr r3, 8002ca0 <Revolute_CasCadeControl+0x1c0>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd ff37 	bl	8000a9c <__aeabi_dcmpge>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <Revolute_CasCadeControl+0x16c>
 8002c34:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d503      	bpl.n	8002c4c <Revolute_CasCadeControl+0x16c>
		output_revolute = 0;
 8002c44:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
	}
	// Motor control
	if (error_pos_re <= 0.15 && error_pos_re >= -0.15) {
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc45 	bl	80004e0 <__aeabi_f2d>
 8002c56:	a314      	add	r3, pc, #80	@ (adr r3, 8002ca8 <Revolute_CasCadeControl+0x1c8>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd ff14 	bl	8000a88 <__aeabi_dcmple>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d011      	beq.n	8002c8a <Revolute_CasCadeControl+0x1aa>
 8002c66:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc38 	bl	80004e0 <__aeabi_f2d>
 8002c70:	a30f      	add	r3, pc, #60	@ (adr r3, 8002cb0 <Revolute_CasCadeControl+0x1d0>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd ff11 	bl	8000a9c <__aeabi_dcmpge>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <Revolute_CasCadeControl+0x1aa>
		output_revolute = 0;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e004      	b.n	8002c94 <Revolute_CasCadeControl+0x1b4>
	} else {
		output_revolute = output_velo_re;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <Revolute_CasCadeControl+0x210>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c90:	6013      	str	r3, [r2, #0]
	}
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	54442d18 	.word	0x54442d18
 8002ca4:	401921fb 	.word	0x401921fb
 8002ca8:	33333333 	.word	0x33333333
 8002cac:	3fc33333 	.word	0x3fc33333
 8002cb0:	33333333 	.word	0x33333333
 8002cb4:	bfc33333 	.word	0xbfc33333
 8002cb8:	20000b84 	.word	0x20000b84
 8002cbc:	2000123c 	.word	0x2000123c
 8002cc0:	2000129c 	.word	0x2000129c
 8002cc4:	20001198 	.word	0x20001198
 8002cc8:	20001298 	.word	0x20001298
 8002ccc:	43960000 	.word	0x43960000
 8002cd0:	43960000 	.word	0x43960000
 8002cd4:	c3960000 	.word	0xc3960000
 8002cd8:	c3960000 	.word	0xc3960000
 8002cdc:	200012a8 	.word	0x200012a8
 8002ce0:	20000214 	.word	0x20000214
 8002ce4:	20000218 	.word	0x20000218
 8002ce8:	200012a0 	.word	0x200012a0
 8002cec:	20001270 	.word	0x20001270
 8002cf0:	200012a4 	.word	0x200012a4
 8002cf4:	2000126c 	.word	0x2000126c
 8002cf8:	200011c0 	.word	0x200011c0
 8002cfc:	00000000 	.word	0x00000000

08002d00 <ball_screw_converter>:

void ball_screw_converter() {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <ball_screw_converter+0x50>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fbe9 	bl	80004e0 <__aeabi_f2d>
 8002d0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002d48 <ball_screw_converter+0x48>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fc3c 	bl	8000590 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	490d      	ldr	r1, [pc, #52]	@ (8002d54 <ball_screw_converter+0x54>)
 8002d1e:	e9c1 2300 	strd	r2, r3, [r1]
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <ball_screw_converter+0x58>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbda 	bl	80004e0 <__aeabi_f2d>
 8002d2c:	a306      	add	r3, pc, #24	@ (adr r3, 8002d48 <ball_screw_converter+0x48>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc2d 	bl	8000590 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <ball_screw_converter+0x5c>)
 8002d3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	f3af 8000 	nop.w
 8002d48:	6dc9c883 	.word	0x6dc9c883
 8002d4c:	40045f30 	.word	0x40045f30
 8002d50:	200011c4 	.word	0x200011c4
 8002d54:	20001228 	.word	0x20001228
 8002d58:	20001218 	.word	0x20001218
 8002d5c:	20001230 	.word	0x20001230

08002d60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d70:	d105      	bne.n	8002d7e <HAL_GPIO_EXTI_Callback+0x1e>
		current_state = STATE_ERROR;
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d74:	2206      	movs	r2, #6
 8002d76:	701a      	strb	r2, [r3, #0]
		registerFrame[1].U16 = STATUS_IDLE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0x30>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	805a      	strh	r2, [r3, #2]
	}
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20001114 	.word	0x20001114
 8002d90:	20001088 	.word	0x20001088

08002d94 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	1a8a      	subs	r2, r1, r2
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4413      	add	r3, r2
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <mapf>:

float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002dd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002dda:	ed87 1a03 	vstr	s2, [r7, #12]
 8002dde:	edc7 1a02 	vstr	s3, [r7, #8]
 8002de2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002de6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dfe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e02:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b094      	sub	sp, #80	@ 0x50
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	6078      	str	r0, [r7, #4]

	// sensor timer 1000 hz
	if (htim == &htim2) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4ab2      	ldr	r2, [pc, #712]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f040 81ee 	bne.w	8003218 <HAL_TIM_PeriodElapsedCallback+0x3f0>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e42:	f004 fc9d 	bl	8007780 <HAL_GPIO_TogglePin>
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002e46:	48af      	ldr	r0, [pc, #700]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002e48:	f7fe fcbe 	bl	80017c8 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002e4c:	48ae      	ldr	r0, [pc, #696]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e4e:	f7fe fcbb 	bl	80017c8 <QEIPosVelUpdate>
		//Limit Switch check
		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8002e52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e56:	48ad      	ldr	r0, [pc, #692]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e58:	f004 fc62 	bl	8007720 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4bab      	ldr	r3, [pc, #684]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002e62:	701a      	strb	r2, [r3, #0]
		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8002e64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e68:	48a8      	ldr	r0, [pc, #672]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e6a:	f004 fc59 	bl	8007720 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4ba8      	ldr	r3, [pc, #672]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e74:	701a      	strb	r2, [r3, #0]
		limit_plot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e7a:	48a4      	ldr	r0, [pc, #656]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e7c:	f004 fc50 	bl	8007720 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	4ba4      	ldr	r3, [pc, #656]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e86:	701a      	strb	r2, [r3, #0]
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	@ 0x40
		for (int i = 0; i < 20; i++) {
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e94:	e018      	b.n	8002ec8 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if ((i & 1) == 0)
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x8a>
				sum_y += JOY_RawRead[i];
 8002ea0:	4a9e      	ldr	r2, [pc, #632]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eac:	4413      	add	r3, r2
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PeriodElapsedCallback+0x9a>
			else
				sum_x += JOY_RawRead[i];
 8002eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebe:	4413      	add	r3, r2
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 20; i++) {
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eca:	2b13      	cmp	r3, #19
 8002ecc:	dde3      	ble.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x6e>
		}

		int32_t raw_x = sum_x / 10;
 8002ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed0:	4a93      	ldr	r2, [pc, #588]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed6:	1092      	asrs	r2, r2, #2
 8002ed8:	17db      	asrs	r3, r3, #31
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
		int32_t raw_y = sum_y / 10;
 8002ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee6:	1092      	asrs	r2, r2, #2
 8002ee8:	17db      	asrs	r3, r3, #31
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34

		if (raw_x < 1700 && raw_x > 1500) {
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	dc07      	bgt.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002efe:	4293      	cmp	r3, r2
 8002f00:	dd02      	ble.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0xe0>
			raw_x = 3400 / 2;
 8002f02:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		if (raw_y < 1700 && raw_y > 1500) {
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	dc07      	bgt.n	8002f22 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	dd02      	ble.n	8002f22 <HAL_TIM_PeriodElapsedCallback+0xfa>
			raw_y = 3400 / 2;
 8002f1c:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002f22:	2364      	movs	r3, #100	@ 0x64
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002f2a:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002f2e:	2100      	movs	r1, #0
 8002f30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f32:	f7ff ff2f 	bl	8002d94 <map>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f3c:	801a      	strh	r2, [r3, #0]
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002f3e:	2364      	movs	r3, #100	@ 0x64
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002f46:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f4e:	f7ff ff21 	bl	8002d94 <map>
 8002f52:	4603      	mov	r3, r0
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f58:	801a      	strh	r2, [r3, #0]
//		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

		//Prismatic Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f5c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
								- prismatic_radps_lowpass_prev);
 8002f60:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_encoder.radps
 8002f6a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002f6e:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002f72:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f7e:	edc3 7a00 	vstr	s15, [r3]

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f84:	ed93 7a00 	vldr	s14, [r3]
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f92:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003138 <HAL_TIM_PeriodElapsedCallback+0x310>
 8002f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
		prismatic_acceleration = ((prismatic_radps_lowpass
 8002f9a:	4b68      	ldr	r3, [pc, #416]	@ (800313c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002f9c:	edc3 7a00 	vstr	s15, [r3]
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
 8002fa0:	4b64      	ldr	r3, [pc, #400]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a61      	ldr	r2, [pc, #388]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002fa6:	6013      	str	r3, [r2, #0]
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002faa:	ed93 7a00 	vldr	s14, [r3]
 8002fae:	4b64      	ldr	r3, [pc, #400]	@ (8003140 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_acceleration
 8002fb8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
 8002fca:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
		ball_screw_converter();
 8002fd0:	f7ff fe96 	bl	8002d00 <ball_screw_converter>
		// ==== Revolute Low‐Pass Filter ====
		// 1) กรองความเร็ว (rad/s) ของแกน Revolute
		revolute_radps_lowpass =
				revolute_radps_lowpass_prev
						+ alpha
								* (revolute_encoder.radps
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002fd6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
										- revolute_radps_lowpass_prev);
 8002fda:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
								* (revolute_encoder.radps
 8002fe4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
						+ alpha
 8002fec:	4b56      	ldr	r3, [pc, #344]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_radps_lowpass =
 8002ff6:	4b55      	ldr	r3, [pc, #340]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
		// 2) คำนวณอัตราเร่งดิบ (rad/s^2) จากความเปลี่ยนแปลงของค่าที่กรองแล้ว
		revolute_acceleration = (revolute_radps_lowpass
				- revolute_radps_lowpass_prev) / dt;
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ffe:	ed93 7a00 	vldr	s14, [r3]
 8003002:	4b51      	ldr	r3, [pc, #324]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800300c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003138 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003010:	eec7 7a26 	vdiv.f32	s15, s14, s13
		revolute_acceleration = (revolute_radps_lowpass
 8003014:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
		// 3) กรองอัตราเร่งให้ลื่น (หากต้องการใช้ค่าเร่งหลังกรอง)
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
				+ alpha
						* (revolute_acceleration
								- revolute_acceleration_lowpass_prev);
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800301c:	ed93 7a00 	vldr	s14, [r3]
 8003020:	4b4c      	ldr	r3, [pc, #304]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (revolute_acceleration
 800302a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 800302e:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8003032:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
 800303c:	4b46      	ldr	r3, [pc, #280]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800303e:	edc3 7a00 	vstr	s15, [r3]
		// 4) เก็บสถานะย้อนกลับไว้ใช้รอบถัดไป
		revolute_radps_lowpass_prev = revolute_radps_lowpass;
 8003042:	4b42      	ldr	r3, [pc, #264]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a40      	ldr	r2, [pc, #256]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003048:	6013      	str	r3, [r2, #0]
		revolute_acceleration_lowpass_prev = revolute_acceleration_lowpass;
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a41      	ldr	r2, [pc, #260]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003050:	6013      	str	r3, [r2, #0]

		// Prox shimttrigger
//		revolute_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
		if (Prox_RawRead[0] > 3000) {
 8003052:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800305a:	4293      	cmp	r3, r2
 800305c:	d903      	bls.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x23e>
			revolute_flag = 0;
 800305e:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x250>
		} else if (Prox_RawRead[0] < 1500) {
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800306e:	4293      	cmp	r3, r2
 8003070:	d802      	bhi.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x250>
			revolute_flag = 1;
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
		}

		//Servo
		if (registerFrame[4].U16 == 1) {
 8003078:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800307a:	891b      	ldrh	r3, [r3, #8]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_TIM_PeriodElapsedCallback+0x266>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1600);
 8003082:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800308a:	635a      	str	r2, [r3, #52]	@ 0x34
 800308c:	e009      	b.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0x27a>
		} else if (registerFrame[5].U16 == 1) {
 800308e:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003090:	895b      	ldrh	r3, [r3, #10]
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0x27a>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2200);
 8003098:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f640 0298 	movw	r2, #2200	@ 0x898
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_voltage);
		//button
		Joy_save = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80030a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030a6:	4819      	ldr	r0, [pc, #100]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030a8:	f004 fb3a 	bl	8007720 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80030b2:	701a      	strb	r2, [r3, #0]
		Joy_run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80030b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030b8:	4814      	ldr	r0, [pc, #80]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030ba:	f004 fb31 	bl	8007720 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003170 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80030c4:	701a      	strb	r2, [r3, #0]
		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;
 80030c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ca:	482a      	ldr	r0, [pc, #168]	@ (8003174 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80030cc:	f004 fb28 	bl	8007720 <HAL_GPIO_ReadPin>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
		button_emer =
 80030de:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80030e0:	701a      	strb	r2, [r3, #0]

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 80030e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030e6:	4809      	ldr	r0, [pc, #36]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030e8:	f004 fb1a 	bl	8007720 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
						&& button_emer == 1) ? 1 : 0;
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d144      	bne.n	800317c <HAL_TIM_PeriodElapsedCallback+0x354>
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d140      	bne.n	800317c <HAL_TIM_PeriodElapsedCallback+0x354>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e03f      	b.n	800317e <HAL_TIM_PeriodElapsedCallback+0x356>
 80030fe:	bf00      	nop
 8003100:	20000504 	.word	0x20000504
 8003104:	200011c4 	.word	0x200011c4
 8003108:	2000123c 	.word	0x2000123c
 800310c:	48000400 	.word	0x48000400
 8003110:	20001291 	.word	0x20001291
 8003114:	20001290 	.word	0x20001290
 8003118:	20001293 	.word	0x20001293
 800311c:	200012cc 	.word	0x200012cc
 8003120:	66666667 	.word	0x66666667
 8003124:	200012f4 	.word	0x200012f4
 8003128:	200012f6 	.word	0x200012f6
 800312c:	20001214 	.word	0x20001214
 8003130:	3cf98536 	.word	0x3cf98536
 8003134:	20001218 	.word	0x20001218
 8003138:	3a83126f 	.word	0x3a83126f
 800313c:	2000121c 	.word	0x2000121c
 8003140:	20001224 	.word	0x20001224
 8003144:	20001220 	.word	0x20001220
 8003148:	200012ac 	.word	0x200012ac
 800314c:	200012b0 	.word	0x200012b0
 8003150:	200012b4 	.word	0x200012b4
 8003154:	200012b8 	.word	0x200012b8
 8003158:	200012bc 	.word	0x200012bc
 800315c:	20001300 	.word	0x20001300
 8003160:	2000126c 	.word	0x2000126c
 8003164:	20001088 	.word	0x20001088
 8003168:	20000834 	.word	0x20000834
 800316c:	200012f9 	.word	0x200012f9
 8003170:	200012f8 	.word	0x200012f8
 8003174:	48000800 	.word	0x48000800
 8003178:	20001318 	.word	0x20001318
 800317c:	2300      	movs	r3, #0
		button_reset =
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b90      	ldr	r3, [pc, #576]	@ (80033c4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8003182:	701a      	strb	r2, [r3, #0]

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
 8003184:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003188:	488f      	ldr	r0, [pc, #572]	@ (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800318a:	f004 fac9 	bl	8007720 <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
						&& button_emer) ? 1 : 0;
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003194:	4b8d      	ldr	r3, [pc, #564]	@ (80033cc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_PeriodElapsedCallback+0x378>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_TIM_PeriodElapsedCallback+0x37a>
 80031a0:	2300      	movs	r3, #0
		button_run =
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b8a      	ldr	r3, [pc, #552]	@ (80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80031a6:	701a      	strb	r2, [r3, #0]

		MotorSet(&prismatic_motor, 1000, output_prismatic);
 80031a8:	4b8a      	ldr	r3, [pc, #552]	@ (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eef0 0a67 	vmov.f32	s1, s15
 80031b2:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 80033d8 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 80031b6:	4889      	ldr	r0, [pc, #548]	@ (80033dc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80031b8:	f001 f8be 	bl	8004338 <MotorSet>
		MotorSet(&revolute_motor, 1000, output_revolute);
 80031bc:	4b88      	ldr	r3, [pc, #544]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80033d8 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 80031ca:	4886      	ldr	r0, [pc, #536]	@ (80033e4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80031cc:	f001 f8b4 	bl	8004338 <MotorSet>

		// Protocal
		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 80031d0:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80031da:	428a      	cmp	r2, r1
 80031dc:	f173 0300 	sbcs.w	r3, r3, #0
 80031e0:	d311      	bcc.n	8003206 <HAL_TIM_PeriodElapsedCallback+0x3de>
			heartbeat_counter = 0;
 80031e2:	4981      	ldr	r1, [pc, #516]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0x00].U16 =
					(registerFrame[0X00].U16 == 0) ? 22881 : 0;
 80031f0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
			registerFrame[0x00].U16 =
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 80031fa:	f645 1261 	movw	r2, #22881	@ 0x5961
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PeriodElapsedCallback+0x3da>
 8003200:	2200      	movs	r2, #0
 8003202:	4b7a      	ldr	r3, [pc, #488]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003204:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 8003206:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	1c54      	adds	r4, r2, #1
 800320e:	f143 0500 	adc.w	r5, r3, #0
 8003212:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8003214:	e9c3 4500 	strd	r4, r5, [r3]
	}
	// state timer 1000 hz
	if (htim == &htim5) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a75      	ldr	r2, [pc, #468]	@ (80033f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f041 8019 	bne.w	8004254 <HAL_TIM_PeriodElapsedCallback+0x142c>
		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
 8003222:	4b72      	ldr	r3, [pc, #456]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003224:	885b      	ldrh	r3, [r3, #2]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_TIM_PeriodElapsedCallback+0x40e>
			current_state = STATE_STOPPING;
 8003230:	4b70      	ldr	r3, [pc, #448]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003232:	2205      	movs	r2, #5
 8003234:	701a      	strb	r2, [r3, #0]
		}
		if ((registerFrame[1].U16 & STATUS_HOME) && pain_flang == 0) {
 8003236:	4b6d      	ldr	r3, [pc, #436]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003238:	885b      	ldrh	r3, [r3, #2]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_PeriodElapsedCallback+0x42c>
 8003244:	4b6c      	ldr	r3, [pc, #432]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <HAL_TIM_PeriodElapsedCallback+0x42c>
			current_state = STATE_HOMING;
 800324c:	4b69      	ldr	r3, [pc, #420]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e032      	b.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x492>
		} else if ((registerFrame[1].U16 & STATUS_JOG) && running_flang == 0) {
 8003254:	4b65      	ldr	r3, [pc, #404]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003256:	885b      	ldrh	r3, [r3, #2]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_TIM_PeriodElapsedCallback+0x450>
 8003262:	4b66      	ldr	r3, [pc, #408]	@ (80033fc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_TIM_PeriodElapsedCallback+0x450>
			current_state = STATE_JOGGING;
 800326a:	4b62      	ldr	r3, [pc, #392]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800326c:	2202      	movs	r2, #2
 800326e:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_JOG;
 8003270:	4b5e      	ldr	r3, [pc, #376]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003272:	2202      	movs	r2, #2
 8003274:	829a      	strh	r2, [r3, #20]
 8003276:	e020      	b.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x492>
		} else if (registerFrame[1].U16 & STATUS_POINT) {
 8003278:	4b5c      	ldr	r3, [pc, #368]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800327a:	885b      	ldrh	r3, [r3, #2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_TIM_PeriodElapsedCallback+0x472>
			current_state = STATE_POINT_MOVING;
 8003286:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003288:	2203      	movs	r2, #3
 800328a:	701a      	strb	r2, [r3, #0]
			pointMoveNeedsInit = 1;
 800328c:	4b5c      	ldr	r3, [pc, #368]	@ (8003400 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_POINT;
 8003292:	4b56      	ldr	r3, [pc, #344]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003294:	2204      	movs	r2, #4
 8003296:	829a      	strh	r2, [r3, #20]
 8003298:	e00f      	b.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x492>
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
 800329a:	4b54      	ldr	r3, [pc, #336]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800329c:	885b      	ldrh	r3, [r3, #2]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_TIM_PeriodElapsedCallback+0x48e>
			current_state = STATE_GO_TO_TARGET;
 80032a8:	4b52      	ldr	r3, [pc, #328]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
 80032ae:	4b4f      	ldr	r3, [pc, #316]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032b0:	2208      	movs	r2, #8
 80032b2:	829a      	strh	r2, [r3, #20]
 80032b4:	e001      	b.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x492>
		} else if (registerFrame[1].U16 & STATUS_IDLE) {
 80032b6:	4b4d      	ldr	r3, [pc, #308]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032b8:	885b      	ldrh	r3, [r3, #2]
			current_state = STATE_IDLE;
		}
		if (registerFrame[4].U16 == 1 && registerFrame[5].U16 == 0) {
 80032ba:	4b4c      	ldr	r3, [pc, #304]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032bc:	891b      	ldrh	r3, [r3, #8]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d108      	bne.n	80032d6 <HAL_TIM_PeriodElapsedCallback+0x4ae>
 80032c4:	4b49      	ldr	r3, [pc, #292]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032c6:	895b      	ldrh	r3, [r3, #10]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <HAL_TIM_PeriodElapsedCallback+0x4ae>
			//Pen Up Servo On
			registerFrame[3].U16 = 1 << 0;
 80032ce:	4b47      	ldr	r3, [pc, #284]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	80da      	strh	r2, [r3, #6]
 80032d4:	e002      	b.n	80032dc <HAL_TIM_PeriodElapsedCallback+0x4b4>
		} else {
			//Pen Doen Servo Off
			registerFrame[3].U16 = 1 << 1;
 80032d6:	4b45      	ldr	r3, [pc, #276]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032d8:	2202      	movs	r2, #2
 80032da:	80da      	strh	r2, [r3, #6]
		}

		if (button_reset == 1
 80032dc:	4b39      	ldr	r3, [pc, #228]	@ (80033c4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10e      	bne.n	8003302 <HAL_TIM_PeriodElapsedCallback+0x4da>
				&& (current_state == STATE_ERROR || current_state == STATE_IDLE)
 80032e4:	4b43      	ldr	r3, [pc, #268]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d003      	beq.n	80032f4 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 80032ec:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_TIM_PeriodElapsedCallback+0x4da>
				&& button_emer == 1) {
 80032f4:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_TIM_PeriodElapsedCallback+0x4da>
			registerFrame[1].U16 = STATUS_HOME;
 80032fc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80032fe:	2201      	movs	r2, #1
 8003300:	805a      	strh	r2, [r3, #2]
		}

		switch (current_state) {
 8003302:	4b3c      	ldr	r3, [pc, #240]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	2b07      	cmp	r3, #7
 800330a:	f200 879b 	bhi.w	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
 800330e:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003335 	.word	0x08003335
 8003318:	0800385b 	.word	0x0800385b
 800331c:	08003d4b 	.word	0x08003d4b
 8003320:	08003ffd 	.word	0x08003ffd
 8003324:	080041eb 	.word	0x080041eb
 8003328:	08004215 	.word	0x08004215
 800332c:	08003b79 	.word	0x08003b79
 8003330:	08003499 	.word	0x08003499
		case STATE_HOMING:

			if (pen_flag == 0) {
 8003334:	4b33      	ldr	r3, [pc, #204]	@ (8003404 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_TIM_PeriodElapsedCallback+0x520>
				pen_flag = 1;
 800333c:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
				count_run = 0;
 8003342:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
			}

			if (count_run <= 1500) {
 8003348:	4b2f      	ldr	r3, [pc, #188]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003350:	4293      	cmp	r3, r2
 8003352:	dc0e      	bgt.n	8003372 <HAL_TIM_PeriodElapsedCallback+0x54a>
				output_prismatic = 0;
 8003354:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
				output_revolute = 0;
 800335c:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
//				registerFrame[4].U16 = 1;
//				registerFrame[5].U16 = 0;

				count_run++;
 8003364:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800336c:	6013      	str	r3, [r2, #0]
				if (button_run == 1) {
					current_state = STATE_PAIN;
					pain_flang = 1;
				}
			}
			break;
 800336e:	f000 bf66 	b.w	800423e <HAL_TIM_PeriodElapsedCallback+0x1416>
				if (limit_r != 1) {
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d003      	beq.n	8003382 <HAL_TIM_PeriodElapsedCallback+0x55a>
					output_prismatic = -(65535 / 2.0);
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800337c:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e017      	b.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x58a>
				} else if (limit_r == 1) {
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d113      	bne.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x58a>
					limit_l_prev = 1;
 800338a:	4b22      	ldr	r3, [pc, #136]	@ (8003414 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
					output_prismatic = 0;
 8003390:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
					QEI_Reset(&prismatic_encoder);
 8003398:	481f      	ldr	r0, [pc, #124]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800339a:	f7fe fab5 	bl	8001908 <QEI_Reset>
					QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800339e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80033d8 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 80033a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033aa:	491c      	ldr	r1, [pc, #112]	@ (800341c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80033ac:	481a      	ldr	r0, [pc, #104]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80033ae:	f7fe f9d9 	bl	8001764 <QEIInit>
				if (revolute_flag != 1) {
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d036      	beq.n	8003428 <HAL_TIM_PeriodElapsedCallback+0x600>
					output_revolute = -60000;
 80033ba:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80033bc:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e04a      	b.n	8003458 <HAL_TIM_PeriodElapsedCallback+0x630>
 80033c2:	bf00      	nop
 80033c4:	20001315 	.word	0x20001315
 80033c8:	48000400 	.word	0x48000400
 80033cc:	20001318 	.word	0x20001318
 80033d0:	20001317 	.word	0x20001317
 80033d4:	200011bc 	.word	0x200011bc
 80033d8:	447a0000 	.word	0x447a0000
 80033dc:	2000111c 	.word	0x2000111c
 80033e0:	200011c0 	.word	0x200011c0
 80033e4:	20001138 	.word	0x20001138
 80033e8:	200012c0 	.word	0x200012c0
 80033ec:	20001088 	.word	0x20001088
 80033f0:	20000768 	.word	0x20000768
 80033f4:	20001114 	.word	0x20001114
 80033f8:	20001322 	.word	0x20001322
 80033fc:	20001321 	.word	0x20001321
 8003400:	20001320 	.word	0x20001320
 8003404:	20001324 	.word	0x20001324
 8003408:	2000021c 	.word	0x2000021c
 800340c:	20001290 	.word	0x20001290
 8003410:	c6ffff00 	.word	0xc6ffff00
 8003414:	20001292 	.word	0x20001292
 8003418:	200011c4 	.word	0x200011c4
 800341c:	2000069c 	.word	0x2000069c
 8003420:	2000126c 	.word	0x2000126c
 8003424:	c76a6000 	.word	0xc76a6000
				} else if (revolute_flag == 1) {
 8003428:	4b7b      	ldr	r3, [pc, #492]	@ (8003618 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d113      	bne.n	8003458 <HAL_TIM_PeriodElapsedCallback+0x630>
					revolute_homed = 1; // Check Proximity trick
 8003430:	4b7a      	ldr	r3, [pc, #488]	@ (800361c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
					output_revolute = 0;
 8003436:	4b7a      	ldr	r3, [pc, #488]	@ (8003620 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
					QEI_Reset(&revolute_encoder);
 800343e:	4879      	ldr	r0, [pc, #484]	@ (8003624 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8003440:	f7fe fa62 	bl	8001908 <QEI_Reset>
					QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8003444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003448:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8003628 <HAL_TIM_PeriodElapsedCallback+0x800>
 800344c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003450:	4976      	ldr	r1, [pc, #472]	@ (800362c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8003452:	4874      	ldr	r0, [pc, #464]	@ (8003624 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8003454:	f7fe f986 	bl	8001764 <QEIInit>
				target_position_prismatic = 0;
 8003458:	4b75      	ldr	r3, [pc, #468]	@ (8003630 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
				target_position_revolute = 0;
 8003460:	4b74      	ldr	r3, [pc, #464]	@ (8003634 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
				error_pos_re = 0;
 8003468:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <HAL_TIM_PeriodElapsedCallback+0x810>)
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
				error_pos_pris = 0;
 8003470:	4b72      	ldr	r3, [pc, #456]	@ (800363c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
				registerFrame[10].U16 = STATUS_HOME;
 8003478:	4b71      	ldr	r3, [pc, #452]	@ (8003640 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800347a:	2201      	movs	r2, #1
 800347c:	829a      	strh	r2, [r3, #20]
				if (button_run == 1) {
 800347e:	4b71      	ldr	r3, [pc, #452]	@ (8003644 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 86db 	bne.w	800423e <HAL_TIM_PeriodElapsedCallback+0x1416>
					current_state = STATE_PAIN;
 8003488:	4b6f      	ldr	r3, [pc, #444]	@ (8003648 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800348a:	2208      	movs	r2, #8
 800348c:	701a      	strb	r2, [r3, #0]
					pain_flang = 1;
 800348e:	4b6f      	ldr	r3, [pc, #444]	@ (800364c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
			break;
 8003494:	f000 bed3 	b.w	800423e <HAL_TIM_PeriodElapsedCallback+0x1416>
		case STATE_PAIN:
			// ถ้าวิ่งจนครบทุกจุด ให้ข้ามไปโฮมมิ่ง
			if (path_idx >= PATH_POINTS) {
 8003498:	4b6d      	ldr	r3, [pc, #436]	@ (8003650 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 80034a0:	d90d      	bls.n	80034be <HAL_TIM_PeriodElapsedCallback+0x696>
				registerFrame[4].U16 = 1;
 80034a2:	4b67      	ldr	r3, [pc, #412]	@ (8003640 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	811a      	strh	r2, [r3, #8]
				registerFrame[5].U16 = 0;
 80034a8:	4b65      	ldr	r3, [pc, #404]	@ (8003640 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	815a      	strh	r2, [r3, #10]
				pain_flang = 0;
 80034ae:	4b67      	ldr	r3, [pc, #412]	@ (800364c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
				current_state = STATE_HOMING;
 80034b4:	4b64      	ldr	r3, [pc, #400]	@ (8003648 <HAL_TIM_PeriodElapsedCallback+0x820>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
				break;
 80034ba:	f000 bec3 	b.w	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
			}

			if (painInit) {
 80034be:	4b65      	ldr	r3, [pc, #404]	@ (8003654 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8147 	beq.w	8003756 <HAL_TIM_PeriodElapsedCallback+0x92e>
				float x_mm = path[path_idx][0];
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4a62      	ldr	r2, [pc, #392]	@ (8003658 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	633b      	str	r3, [r7, #48]	@ 0x30
				float y_mm = path[path_idx][1];
 80034d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	4a5f      	ldr	r2, [pc, #380]	@ (8003658 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	3304      	adds	r3, #4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

				if (x_mm == -1 && y_mm == -1) {
 80034e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80034ee:	eef4 7a47 	vcmp.f32	s15, s14
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	d10f      	bne.n	8003518 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 80034f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034fc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003500:	eef4 7a47 	vcmp.f32	s15, s14
 8003504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003508:	d106      	bne.n	8003518 <HAL_TIM_PeriodElapsedCallback+0x6f0>
					path_idx++;
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	4b4f      	ldr	r3, [pc, #316]	@ (8003650 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	e005      	b.n	8003524 <HAL_TIM_PeriodElapsedCallback+0x6fc>
				} else {
					registerFrame[4].U16 = 0;
 8003518:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800351a:	2200      	movs	r2, #0
 800351c:	811a      	strh	r2, [r3, #8]
					registerFrame[5].U16 = 1;
 800351e:	4b48      	ldr	r3, [pc, #288]	@ (8003640 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8003520:	2201      	movs	r2, #1
 8003522:	815a      	strh	r2, [r3, #10]
				}

				theta = atan2(y_mm, x_mm);
 8003524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003526:	f7fc ffdb 	bl	80004e0 <__aeabi_f2d>
 800352a:	4604      	mov	r4, r0
 800352c:	460d      	mov	r5, r1
 800352e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003530:	f7fc ffd6 	bl	80004e0 <__aeabi_f2d>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	ec43 2b11 	vmov	d1, r2, r3
 800353c:	ec45 4b10 	vmov	d0, r4, r5
 8003540:	f009 fa9e 	bl	800ca80 <atan2>
 8003544:	ec53 2b10 	vmov	r2, r3, d0
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f7fd fb18 	bl	8000b80 <__aeabi_d2f>
 8003550:	4603      	mov	r3, r0
 8003552:	4a42      	ldr	r2, [pc, #264]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003554:	6013      	str	r3, [r2, #0]
				if (theta < 0.0f)
 8003556:	4b41      	ldr	r3, [pc, #260]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	d512      	bpl.n	800358c <HAL_TIM_PeriodElapsedCallback+0x764>
					theta += 2.0f * M_PI;
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc ffb8 	bl	80004e0 <__aeabi_f2d>
 8003570:	a325      	add	r3, pc, #148	@ (adr r3, 8003608 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fc fe55 	bl	8000224 <__adddf3>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f7fd fafd 	bl	8000b80 <__aeabi_d2f>
 8003586:	4603      	mov	r3, r0
 8003588:	4a34      	ldr	r2, [pc, #208]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 800358a:	6013      	str	r3, [r2, #0]

				theta *= 2.0;
 800358c:	4b33      	ldr	r3, [pc, #204]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003596:	4b31      	ldr	r3, [pc, #196]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003598:	edc3 7a00 	vstr	s15, [r3]

				if (theta <= 2.0 * M_PI) {
 800359c:	4b2f      	ldr	r3, [pc, #188]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ff9d 	bl	80004e0 <__aeabi_f2d>
 80035a6:	a318      	add	r3, pc, #96	@ (adr r3, 8003608 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd fa6c 	bl	8000a88 <__aeabi_dcmple>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d054      	beq.n	8003660 <HAL_TIM_PeriodElapsedCallback+0x838>
					target_position_revolute = theta;
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_TIM_PeriodElapsedCallback+0x834>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 80035bc:	6013      	str	r3, [r2, #0]
					target_position_prismatic = 300
							+ (sqrt((x_mm * x_mm) + (y_mm * y_mm)));
 80035be:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80035ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d2:	ee17 0a90 	vmov	r0, s15
 80035d6:	f7fc ff83 	bl	80004e0 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	ec43 2b10 	vmov	d0, r2, r3
 80035e2:	f009 fa4f 	bl	800ca84 <sqrt>
 80035e6:	ec51 0b10 	vmov	r0, r1, d0
 80035ea:	a309      	add	r3, pc, #36	@ (adr r3, 8003610 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f7fc fe18 	bl	8000224 <__adddf3>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7fd fac0 	bl	8000b80 <__aeabi_d2f>
 8003600:	4603      	mov	r3, r0
					target_position_prismatic = 300
 8003602:	4a0b      	ldr	r2, [pc, #44]	@ (8003630 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e07c      	b.n	8003702 <HAL_TIM_PeriodElapsedCallback+0x8da>
 8003608:	54442d18 	.word	0x54442d18
 800360c:	401921fb 	.word	0x401921fb
 8003610:	00000000 	.word	0x00000000
 8003614:	4072c000 	.word	0x4072c000
 8003618:	2000126c 	.word	0x2000126c
 800361c:	20001314 	.word	0x20001314
 8003620:	200011c0 	.word	0x200011c0
 8003624:	2000123c 	.word	0x2000123c
 8003628:	447a0000 	.word	0x447a0000
 800362c:	200005d0 	.word	0x200005d0
 8003630:	20001154 	.word	0x20001154
 8003634:	20001238 	.word	0x20001238
 8003638:	2000129c 	.word	0x2000129c
 800363c:	20001170 	.word	0x20001170
 8003640:	20001088 	.word	0x20001088
 8003644:	20001317 	.word	0x20001317
 8003648:	20001114 	.word	0x20001114
 800364c:	20001322 	.word	0x20001322
 8003650:	20001326 	.word	0x20001326
 8003654:	20000220 	.word	0x20000220
 8003658:	0800d1b8 	.word	0x0800d1b8
 800365c:	2000131c 	.word	0x2000131c
				} else if (theta > 2.0 * M_PI) {
 8003660:	4bb1      	ldr	r3, [pc, #708]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff3b 	bl	80004e0 <__aeabi_f2d>
 800366a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8003910 <HAL_TIM_PeriodElapsedCallback+0xae8>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fd fa1e 	bl	8000ab0 <__aeabi_dcmpgt>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d043      	beq.n	8003702 <HAL_TIM_PeriodElapsedCallback+0x8da>
					target_position_revolute = (float) (fabs(M_PI - theta));
 800367a:	4bab      	ldr	r3, [pc, #684]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff2e 	bl	80004e0 <__aeabi_f2d>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	a1a3      	add	r1, pc, #652	@ (adr r1, 8003918 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 800368a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800368e:	f7fc fdc7 	bl	8000220 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4692      	mov	sl, r2
 8003698:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800369c:	4650      	mov	r0, sl
 800369e:	4659      	mov	r1, fp
 80036a0:	f7fd fa6e 	bl	8000b80 <__aeabi_d2f>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4aa1      	ldr	r2, [pc, #644]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80036a8:	6013      	str	r3, [r2, #0]
					target_position_prismatic = mapf(
							sqrt((x_mm * x_mm) + (y_mm * y_mm)), -300, 0, 300,
 80036aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80036ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80036b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036be:	ee17 0a90 	vmov	r0, s15
 80036c2:	f7fc ff0d 	bl	80004e0 <__aeabi_f2d>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ec43 2b10 	vmov	d0, r2, r3
 80036ce:	f009 f9d9 	bl	800ca84 <sqrt>
 80036d2:	ec53 2b10 	vmov	r2, r3, d0
					target_position_prismatic = mapf(
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa51 	bl	8000b80 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 8003930 <HAL_TIM_PeriodElapsedCallback+0xb08>
 80036e4:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8003934 <HAL_TIM_PeriodElapsedCallback+0xb0c>
 80036e8:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8003938 <HAL_TIM_PeriodElapsedCallback+0xb10>
 80036ec:	eddf 0a93 	vldr	s1, [pc, #588]	@ 800393c <HAL_TIM_PeriodElapsedCallback+0xb14>
 80036f0:	ee00 3a10 	vmov	s0, r3
 80036f4:	f7ff fb6a 	bl	8002dcc <mapf>
 80036f8:	eef0 7a40 	vmov.f32	s15, s0
 80036fc:	4b90      	ldr	r3, [pc, #576]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 80036fe:	edc3 7a00 	vstr	s15, [r3]
							600);
				}

				Trapezoidal_Init(&prisProfile, (float) ball_screw_pos,
 8003702:	4b90      	ldr	r3, [pc, #576]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f7fd fa38 	bl	8000b80 <__aeabi_d2f>
 8003710:	4602      	mov	r2, r0
 8003712:	4b8b      	ldr	r3, [pc, #556]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8003948 <HAL_TIM_PeriodElapsedCallback+0xb20>
 800371c:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 800394c <HAL_TIM_PeriodElapsedCallback+0xb24>
 8003720:	eef0 0a67 	vmov.f32	s1, s15
 8003724:	ee00 2a10 	vmov	s0, r2
 8003728:	4889      	ldr	r0, [pc, #548]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 800372a:	f7fe f9c5 	bl	8001ab8 <Trapezoidal_Init>
						target_position_prismatic, 550.0f, 250.0f);
				Trapezoidal_Init(&revProfile, revolute_encoder.rads,
 800372e:	4b89      	ldr	r3, [pc, #548]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8003730:	edd3 7a06 	vldr	s15, [r3, #24]
 8003734:	4b7d      	ldr	r3, [pc, #500]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003736:	ed93 7a00 	vldr	s14, [r3]
 800373a:	eddf 1a87 	vldr	s3, [pc, #540]	@ 8003958 <HAL_TIM_PeriodElapsedCallback+0xb30>
 800373e:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003742:	eef0 0a47 	vmov.f32	s1, s14
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	4884      	ldr	r0, [pc, #528]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 800374c:	f7fe f9b4 	bl	8001ab8 <Trapezoidal_Init>
						target_position_revolute, 2.0f, 0.4f);

				painInit = 0;
 8003750:	4b83      	ldr	r3, [pc, #524]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
			}

			if (!prisProfile.finished)
 8003756:	4b7e      	ldr	r3, [pc, #504]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8003758:	7f1b      	ldrb	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_TIM_PeriodElapsedCallback+0x944>
				Trapezoidal_Update(&prisProfile, dt);
 800375e:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8003964 <HAL_TIM_PeriodElapsedCallback+0xb3c>
 8003762:	eeb0 0a67 	vmov.f32	s0, s15
 8003766:	487a      	ldr	r0, [pc, #488]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8003768:	f7fe f8fc 	bl	8001964 <Trapezoidal_Update>
			if (!revProfile.finished)
 800376c:	4b7b      	ldr	r3, [pc, #492]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 800376e:	7f1b      	ldrb	r3, [r3, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0x95a>
				Trapezoidal_Update(&revProfile, dt);
 8003774:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 8003964 <HAL_TIM_PeriodElapsedCallback+0xb3c>
 8003778:	eeb0 0a67 	vmov.f32	s0, s15
 800377c:	4877      	ldr	r0, [pc, #476]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 800377e:	f7fe f8f1 	bl	8001964 <Trapezoidal_Update>
			Prismatic_CasCadeControl();
 8003782:	f7ff f89d 	bl	80028c0 <Prismatic_CasCadeControl>
			Revolute_CasCadeControl();
 8003786:	f7ff f9ab 	bl	8002ae0 <Revolute_CasCadeControl>

			if ((limit_r && output_prismatic < 0)
 800378a:	4b77      	ldr	r3, [pc, #476]	@ (8003968 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_TIM_PeriodElapsedCallback+0x97a>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a0:	d40b      	bmi.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x992>
					|| (limit_l && output_prismatic > 0))
 80037a2:	4b73      	ldr	r3, [pc, #460]	@ (8003970 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_TIM_PeriodElapsedCallback+0x99a>
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	dd03      	ble.n	80037c2 <HAL_TIM_PeriodElapsedCallback+0x99a>
				output_prismatic = 0;
 80037ba:	4b6c      	ldr	r3, [pc, #432]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
			if ((revolute_flag && output_revolute < 0)
 80037c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_TIM_PeriodElapsedCallback+0x9b2>
 80037ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	d414      	bmi.n	8003804 <HAL_TIM_PeriodElapsedCallback+0x9dc>
					|| (revolute_encoder.rads >= 2.0f * M_PI
 80037da:	4b5e      	ldr	r3, [pc, #376]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe7e 	bl	80004e0 <__aeabi_f2d>
 80037e4:	a34a      	add	r3, pc, #296	@ (adr r3, 8003910 <HAL_TIM_PeriodElapsedCallback+0xae8>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fd f957 	bl	8000a9c <__aeabi_dcmpge>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_TIM_PeriodElapsedCallback+0x9e4>
							&& output_revolute > 0))
 80037f4:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003802:	dd03      	ble.n	800380c <HAL_TIM_PeriodElapsedCallback+0x9e4>
				output_revolute = 0;
 8003804:	4b5c      	ldr	r3, [pc, #368]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

			if (prisProfile.finished && revProfile.finished
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 800380e:	7f1b      	ldrb	r3, [r3, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8516 	beq.w	8004242 <HAL_TIM_PeriodElapsedCallback+0x141a>
 8003816:	4b51      	ldr	r3, [pc, #324]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8003818:	7f1b      	ldrb	r3, [r3, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8511 	beq.w	8004242 <HAL_TIM_PeriodElapsedCallback+0x141a>
					&& output_prismatic == 0 && output_revolute == 0) {
 8003820:	4b52      	ldr	r3, [pc, #328]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	eef5 7a40 	vcmp.f32	s15, #0.0
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	f040 8508 	bne.w	8004242 <HAL_TIM_PeriodElapsedCallback+0x141a>
 8003832:	4b51      	ldr	r3, [pc, #324]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eef5 7a40 	vcmp.f32	s15, #0.0
 800383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003840:	f040 84ff 	bne.w	8004242 <HAL_TIM_PeriodElapsedCallback+0x141a>
//				registerFrame[4].U16 = 0;
//				registerFrame[5].U16 = 1;
				path_idx++;
 8003844:	4b4d      	ldr	r3, [pc, #308]	@ (800397c <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	4b4b      	ldr	r3, [pc, #300]	@ (800397c <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800384e:	801a      	strh	r2, [r3, #0]
				painInit = 1;
 8003850:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003856:	f000 bcf4 	b.w	8004242 <HAL_TIM_PeriodElapsedCallback+0x141a>
		case STATE_JOGGING:
			//Call joystick mode
//			registerFrame[4].U16 = 1;
//			registerFrame[5].U16 = 0;
			joy_flag = 1;
 800385a:	4b49      	ldr	r3, [pc, #292]	@ (8003980 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

			if (limit_r == 1) {
 8003860:	4b41      	ldr	r3, [pc, #260]	@ (8003968 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d110      	bne.n	800388a <HAL_TIM_PeriodElapsedCallback+0xa62>
				output_prismatic = 0;
 8003868:	4b40      	ldr	r3, [pc, #256]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 8003870:	4844      	ldr	r0, [pc, #272]	@ (8003984 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8003872:	f7fe f849 	bl	8001908 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8003876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800387a:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8003988 <HAL_TIM_PeriodElapsedCallback+0xb60>
 800387e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003882:	4942      	ldr	r1, [pc, #264]	@ (800398c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8003884:	483f      	ldr	r0, [pc, #252]	@ (8003984 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8003886:	f7fd ff6d 	bl	8001764 <QEIInit>
			}

			if (revolute_flag == 1) {
 800388a:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d110      	bne.n	80038b4 <HAL_TIM_PeriodElapsedCallback+0xa8c>
				output_revolute = 0;
 8003892:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 800389a:	482e      	ldr	r0, [pc, #184]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800389c:	f7fe f834 	bl	8001908 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80038a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a4:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8003988 <HAL_TIM_PeriodElapsedCallback+0xb60>
 80038a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038ac:	4938      	ldr	r1, [pc, #224]	@ (8003990 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 80038ae:	4829      	ldr	r0, [pc, #164]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 80038b0:	f7fd ff58 	bl	8001764 <QEIInit>
			}

			output_prismatic = (Joy_x / 100.0) * 30000;
 80038b4:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80038b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fdfe 	bl	80004bc <__aeabi_i2d>
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 80038c6:	f7fc ff8d 	bl	80007e4 <__aeabi_ddiv>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	a313      	add	r3, pc, #76	@ (adr r3, 8003920 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f7fc fe5a 	bl	8000590 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f94c 	bl	8000b80 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a20      	ldr	r2, [pc, #128]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 80038ec:	6013      	str	r3, [r2, #0]

			if (limit_r == 1 && output_prismatic < 0) {
 80038ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d152      	bne.n	800399c <HAL_TIM_PeriodElapsedCallback+0xb74>
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d54a      	bpl.n	800399c <HAL_TIM_PeriodElapsedCallback+0xb74>
				output_prismatic = 0;
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e055      	b.n	80039bc <HAL_TIM_PeriodElapsedCallback+0xb94>
 8003910:	54442d18 	.word	0x54442d18
 8003914:	401921fb 	.word	0x401921fb
 8003918:	54442d18 	.word	0x54442d18
 800391c:	400921fb 	.word	0x400921fb
 8003920:	00000000 	.word	0x00000000
 8003924:	40dd4c00 	.word	0x40dd4c00
 8003928:	2000131c 	.word	0x2000131c
 800392c:	20001238 	.word	0x20001238
 8003930:	44160000 	.word	0x44160000
 8003934:	43960000 	.word	0x43960000
 8003938:	00000000 	.word	0x00000000
 800393c:	c3960000 	.word	0xc3960000
 8003940:	20001154 	.word	0x20001154
 8003944:	20001228 	.word	0x20001228
 8003948:	437a0000 	.word	0x437a0000
 800394c:	44098000 	.word	0x44098000
 8003950:	20000b58 	.word	0x20000b58
 8003954:	2000123c 	.word	0x2000123c
 8003958:	3ecccccd 	.word	0x3ecccccd
 800395c:	20000b84 	.word	0x20000b84
 8003960:	20000220 	.word	0x20000220
 8003964:	3a83126f 	.word	0x3a83126f
 8003968:	20001290 	.word	0x20001290
 800396c:	200011bc 	.word	0x200011bc
 8003970:	20001291 	.word	0x20001291
 8003974:	2000126c 	.word	0x2000126c
 8003978:	200011c0 	.word	0x200011c0
 800397c:	20001326 	.word	0x20001326
 8003980:	20001118 	.word	0x20001118
 8003984:	200011c4 	.word	0x200011c4
 8003988:	447a0000 	.word	0x447a0000
 800398c:	2000069c 	.word	0x2000069c
 8003990:	200005d0 	.word	0x200005d0
 8003994:	200012f4 	.word	0x200012f4
 8003998:	40590000 	.word	0x40590000
			} else if (limit_l == 1 && output_prismatic > 0) {
 800399c:	4b62      	ldr	r3, [pc, #392]	@ (8003b28 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10b      	bne.n	80039bc <HAL_TIM_PeriodElapsedCallback+0xb94>
 80039a4:	4b61      	ldr	r3, [pc, #388]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0xd04>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	dd03      	ble.n	80039bc <HAL_TIM_PeriodElapsedCallback+0xb94>
				output_prismatic = 0;
 80039b4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0xd04>)
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
			}

			output_revolute = (Joy_y / 100.0) * 60000.0;
 80039bc:	4b5c      	ldr	r3, [pc, #368]	@ (8003b30 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 80039be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fd7a 	bl	80004bc <__aeabi_i2d>
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	4b59      	ldr	r3, [pc, #356]	@ (8003b34 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 80039ce:	f7fc ff09 	bl	80007e4 <__aeabi_ddiv>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	a34f      	add	r3, pc, #316	@ (adr r3, 8003b18 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fdd6 	bl	8000590 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd f8c8 	bl	8000b80 <__aeabi_d2f>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a51      	ldr	r2, [pc, #324]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 80039f4:	6013      	str	r3, [r2, #0]

			if (revolute_flag == 1 && output_revolute < 0) {
 80039f6:	4b51      	ldr	r3, [pc, #324]	@ (8003b3c <HAL_TIM_PeriodElapsedCallback+0xd14>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10c      	bne.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0xbf0>
 80039fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	d504      	bpl.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0xbf0>
				output_revolute = 0;
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e018      	b.n	8003a4a <HAL_TIM_PeriodElapsedCallback+0xc22>
			} else if (revolute_encoder.rads >= (2 * M_PI)
 8003a18:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fd5f 	bl	80004e0 <__aeabi_f2d>
 8003a22:	a33f      	add	r3, pc, #252	@ (adr r3, 8003b20 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fd f838 	bl	8000a9c <__aeabi_dcmpge>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_TIM_PeriodElapsedCallback+0xc22>
					&& output_revolute > 0) {
 8003a32:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	dd03      	ble.n	8003a4a <HAL_TIM_PeriodElapsedCallback+0xc22>
				output_revolute = 0;
 8003a42:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
			}

			if (button_reset == 1) {
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10b      	bne.n	8003a6a <HAL_TIM_PeriodElapsedCallback+0xc42>
				count_run = 1;
 8003a52:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
				current_state = STATE_RUNING;
 8003a58:	4b3c      	ldr	r3, [pc, #240]	@ (8003b4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	701a      	strb	r2, [r3, #0]
				pointRunNeedsInit = 1;
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
				running_flang = 1;
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
			}

			if (button_run == 1 && button_reset_prev == 0) {
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d14e      	bne.n	8003b10 <HAL_TIM_PeriodElapsedCallback+0xce8>
 8003a72:	4b3a      	ldr	r3, [pc, #232]	@ (8003b5c <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d14a      	bne.n	8003b10 <HAL_TIM_PeriodElapsedCallback+0xce8>
				count++;
 8003a7a:	4b39      	ldr	r3, [pc, #228]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a37      	ldr	r2, [pc, #220]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003a82:	6013      	str	r3, [r2, #0]
				if (count > 0 && count <= 10) {
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	dd3e      	ble.n	8003b0a <HAL_TIM_PeriodElapsedCallback+0xce2>
 8003a8c:	4b34      	ldr	r3, [pc, #208]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b0a      	cmp	r3, #10
 8003a92:	dc3a      	bgt.n	8003b0a <HAL_TIM_PeriodElapsedCallback+0xce2>
					registerFrame[18 + count * 2].U16 = ball_screw_pos * 10;
 8003a94:	4b33      	ldr	r3, [pc, #204]	@ (8003b64 <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8003a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	4b32      	ldr	r3, [pc, #200]	@ (8003b68 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8003aa0:	f7fc fd76 	bl	8000590 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3309      	adds	r3, #9
 8003ab2:	005c      	lsls	r4, r3, #1
 8003ab4:	f7fd f844 	bl	8000b40 <__aeabi_d2uiz>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003abe:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
 8003ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fd0a 	bl	80004e0 <__aeabi_f2d>
							/ (2 * M_PI)) * 1800.0;
 8003acc:	a314      	add	r3, pc, #80	@ (adr r3, 8003b20 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f7fc fe87 	bl	80007e4 <__aeabi_ddiv>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8003ae4:	f7fc fd54 	bl	8000590 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4610      	mov	r0, r2
 8003aee:	4619      	mov	r1, r3
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	f103 0413 	add.w	r4, r3, #19
 8003afa:	f7fd f821 	bl	8000b40 <__aeabi_d2uiz>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8003b04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8003b08:	e002      	b.n	8003b10 <HAL_TIM_PeriodElapsedCallback+0xce8>
				} else {
					count = 1;
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
				}
			}

			pen_flag = 0;
 8003b10:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
			break;
 8003b16:	e395      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	40ed4c00 	.word	0x40ed4c00
 8003b20:	54442d18 	.word	0x54442d18
 8003b24:	401921fb 	.word	0x401921fb
 8003b28:	20001291 	.word	0x20001291
 8003b2c:	200011bc 	.word	0x200011bc
 8003b30:	200012f6 	.word	0x200012f6
 8003b34:	40590000 	.word	0x40590000
 8003b38:	200011c0 	.word	0x200011c0
 8003b3c:	2000126c 	.word	0x2000126c
 8003b40:	2000123c 	.word	0x2000123c
 8003b44:	20001315 	.word	0x20001315
 8003b48:	2000021c 	.word	0x2000021c
 8003b4c:	20001114 	.word	0x20001114
 8003b50:	20001323 	.word	0x20001323
 8003b54:	20001321 	.word	0x20001321
 8003b58:	20001317 	.word	0x20001317
 8003b5c:	20001316 	.word	0x20001316
 8003b60:	200012fc 	.word	0x200012fc
 8003b64:	20001228 	.word	0x20001228
 8003b68:	40240000 	.word	0x40240000
 8003b6c:	20001088 	.word	0x20001088
 8003b70:	409c2000 	.word	0x409c2000
 8003b74:	20001324 	.word	0x20001324
		case STATE_RUNING:
			if (pointRunNeedsInit == 1) {
 8003b78:	4b9d      	ldr	r3, [pc, #628]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d166      	bne.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0xe26>
				// ต้องจ่ายค่ารอบเดียว
				target_position_revolute = (float) (registerFrame[19
						+ count_run * 2].U16 / 1800.0) * (2.0 * M_PI);
 8003b80:	4b9c      	ldr	r3, [pc, #624]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	3313      	adds	r3, #19
 8003b88:	4a9b      	ldr	r2, [pc, #620]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fc93 	bl	80004bc <__aeabi_i2d>
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	4b98      	ldr	r3, [pc, #608]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8003b9c:	f7fc fe22 	bl	80007e4 <__aeabi_ddiv>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
				target_position_revolute = (float) (registerFrame[19
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f7fc ffea 	bl	8000b80 <__aeabi_d2f>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fc96 	bl	80004e0 <__aeabi_f2d>
						+ count_run * 2].U16 / 1800.0) * (2.0 * M_PI);
 8003bb4:	a38c      	add	r3, pc, #560	@ (adr r3, 8003de8 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fce9 	bl	8000590 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ffdb 	bl	8000b80 <__aeabi_d2f>
 8003bca:	4603      	mov	r3, r0
				target_position_revolute = (float) (registerFrame[19
 8003bcc:	4a8c      	ldr	r2, [pc, #560]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8003bce:	6013      	str	r3, [r2, #0]
				target_position_prismatic =
						(registerFrame[18 + count_run * 2].U16 / 10);
 8003bd0:	4b88      	ldr	r3, [pc, #544]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3309      	adds	r3, #9
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4a87      	ldr	r2, [pc, #540]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4a88      	ldr	r2, [pc, #544]	@ (8003e04 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ee07 3a90 	vmov	s15, r3
				target_position_prismatic =
 8003bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf2:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8003bf4:	edc3 7a00 	vstr	s15, [r3]

				float abs_start_pris = (float) ball_screw_pos;
 8003bf8:	4b84      	ldr	r3, [pc, #528]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f7fc ffbd 	bl	8000b80 <__aeabi_d2f>
 8003c06:	4603      	mov	r3, r0
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
				float abs_goal_pris = target_position_prismatic;  // (mm)
 8003c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
 8003c10:	eddf 1a7f 	vldr	s3, [pc, #508]	@ 8003e10 <HAL_TIM_PeriodElapsedCallback+0xfe8>
 8003c14:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 8003e14 <HAL_TIM_PeriodElapsedCallback+0xfec>
 8003c18:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003c1c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003c20:	487d      	ldr	r0, [pc, #500]	@ (8003e18 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003c22:	f7fd ff49 	bl	8001ab8 <Trapezoidal_Init>
						550.0f, // v_max (mm/s)
						250.0f); // a_max (mm/s²)

				float abs_start_rev = (float) revolute_encoder.rads;
 8003c26:	4b7d      	ldr	r3, [pc, #500]	@ (8003e1c <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	623b      	str	r3, [r7, #32]
				float abs_goal_rev = target_position_revolute/* from registerFrame[65], converted to radians */;
 8003c2c:	4b74      	ldr	r3, [pc, #464]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61fb      	str	r3, [r7, #28]

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
 8003c32:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8003e20 <HAL_TIM_PeriodElapsedCallback+0xff8>
 8003c36:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003c3a:	edd7 0a07 	vldr	s1, [r7, #28]
 8003c3e:	ed97 0a08 	vldr	s0, [r7, #32]
 8003c42:	4878      	ldr	r0, [pc, #480]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003c44:	f7fd ff38 	bl	8001ab8 <Trapezoidal_Init>
						0.4f); // a_max (rad/s²)
				pointRunNeedsInit = 0;
 8003c48:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
			}

			if (!prisProfile.finished) {
 8003c4e:	4b72      	ldr	r3, [pc, #456]	@ (8003e18 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003c50:	7f1b      	ldrb	r3, [r3, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <HAL_TIM_PeriodElapsedCallback+0xe38>
				Trapezoidal_Update(&prisProfile, 0.001f);
 8003c56:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8003e28 <HAL_TIM_PeriodElapsedCallback+0x1000>
 8003c5a:	486f      	ldr	r0, [pc, #444]	@ (8003e18 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003c5c:	f7fd fe82 	bl	8001964 <Trapezoidal_Update>
			}
			if (!revProfile.finished) {
 8003c60:	4b70      	ldr	r3, [pc, #448]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003c62:	7f1b      	ldrb	r3, [r3, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0xe4a>
				Trapezoidal_Update(&revProfile, 0.001f);
 8003c68:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8003e28 <HAL_TIM_PeriodElapsedCallback+0x1000>
 8003c6c:	486d      	ldr	r0, [pc, #436]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003c6e:	f7fd fe79 	bl	8001964 <Trapezoidal_Update>
			}

			Revolute_CasCadeControl();
 8003c72:	f7fe ff35 	bl	8002ae0 <Revolute_CasCadeControl>
			Prismatic_CasCadeControl();
 8003c76:	f7fe fe23 	bl	80028c0 <Prismatic_CasCadeControl>

			if (limit_r == 1 && limit_l_prev == 0) {
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d114      	bne.n	8003cac <HAL_TIM_PeriodElapsedCallback+0xe84>
 8003c82:	4b6b      	ldr	r3, [pc, #428]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d110      	bne.n	8003cac <HAL_TIM_PeriodElapsedCallback+0xe84>
				output_prismatic = 0;
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 8003c92:	4869      	ldr	r0, [pc, #420]	@ (8003e38 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8003c94:	f7fd fe38 	bl	8001908 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8003c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c9c:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8003e3c <HAL_TIM_PeriodElapsedCallback+0x1014>
 8003ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ca4:	4966      	ldr	r1, [pc, #408]	@ (8003e40 <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8003ca6:	4864      	ldr	r0, [pc, #400]	@ (8003e38 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8003ca8:	f7fd fd5c 	bl	8001764 <QEIInit>
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
 8003cac:	4b65      	ldr	r3, [pc, #404]	@ (8003e44 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d114      	bne.n	8003cde <HAL_TIM_PeriodElapsedCallback+0xeb6>
 8003cb4:	4b64      	ldr	r3, [pc, #400]	@ (8003e48 <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <HAL_TIM_PeriodElapsedCallback+0xeb6>
				output_revolute = 0;
 8003cbc:	4b63      	ldr	r3, [pc, #396]	@ (8003e4c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 8003cc4:	4855      	ldr	r0, [pc, #340]	@ (8003e1c <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8003cc6:	f7fd fe1f 	bl	8001908 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8003cca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cce:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8003e3c <HAL_TIM_PeriodElapsedCallback+0x1014>
 8003cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cd6:	495e      	ldr	r1, [pc, #376]	@ (8003e50 <HAL_TIM_PeriodElapsedCallback+0x1028>)
 8003cd8:	4850      	ldr	r0, [pc, #320]	@ (8003e1c <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8003cda:	f7fd fd43 	bl	8001764 <QEIInit>
			}

		    if (button_reset && !button_run_prev) {
 8003cde:	4b5d      	ldr	r3, [pc, #372]	@ (8003e54 <HAL_TIM_PeriodElapsedCallback+0x102c>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_TIM_PeriodElapsedCallback+0xed0>
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e58 <HAL_TIM_PeriodElapsedCallback+0x1030>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_TIM_PeriodElapsedCallback+0xed0>
		      count_run++;
 8003cee:	4b41      	ldr	r3, [pc, #260]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8003df4 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8003cf6:	6013      	str	r3, [r2, #0]
		    }

			if (output_prismatic == 0 && output_revolute == 0
 8003cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	d112      	bne.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf06>
 8003d08:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_TIM_PeriodElapsedCallback+0x1024>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d10a      	bne.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf06>
					&& prisProfile.finished && revProfile.finished) {
 8003d18:	4b3f      	ldr	r3, [pc, #252]	@ (8003e18 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003d1a:	7f1b      	ldrb	r3, [r3, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf06>
 8003d20:	4b40      	ldr	r3, [pc, #256]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003d22:	7f1b      	ldrb	r3, [r3, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xf06>
				pointRunNeedsInit = 1;
 8003d28:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
//				registerFrame[4].U16 = 0;
//				registerFrame[5].U16 = 1;
			}
			if (button_run == 1){
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_TIM_PeriodElapsedCallback+0x1034>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0xf1a>
				running_flang = 0;
 8003d36:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_TIM_PeriodElapsedCallback+0x1038>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
				current_state = STATE_JOGGING;
 8003d3c:	4b49      	ldr	r3, [pc, #292]	@ (8003e64 <HAL_TIM_PeriodElapsedCallback+0x103c>)
 8003d3e:	2202      	movs	r2, #2
 8003d40:	701a      	strb	r2, [r3, #0]
			}
			pen_flag = 0;
 8003d42:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <HAL_TIM_PeriodElapsedCallback+0x1040>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
			break;
 8003d48:	e27c      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
		case STATE_POINT_MOVING:
//			registerFrame[4].U16 = 1;
//			registerFrame[5].U16 = 0;
			theta = (float) (registerFrame[65].U16);
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003d4c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	4b44      	ldr	r3, [pc, #272]	@ (8003e6c <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8003d5c:	edc3 7a00 	vstr	s15, [r3]
			if (theta <= 1800) {
 8003d60:	4b42      	ldr	r3, [pc, #264]	@ (8003e6c <HAL_TIM_PeriodElapsedCallback+0x1044>)
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003e70 <HAL_TIM_PeriodElapsedCallback+0x1048>
 8003d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	d87f      	bhi.n	8003e74 <HAL_TIM_PeriodElapsedCallback+0x104c>
				target_position_revolute = (float) (registerFrame[65].U16
 8003d74:	4b20      	ldr	r3, [pc, #128]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003d76:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003d7a:	b29b      	uxth	r3, r3
						/ 1800.0) * (2.0 * M_PI);
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb9d 	bl	80004bc <__aeabi_i2d>
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8003d88:	f7fc fd2c 	bl	80007e4 <__aeabi_ddiv>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
				target_position_revolute = (float) (registerFrame[65].U16
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7fc fef4 	bl	8000b80 <__aeabi_d2f>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fba0 	bl	80004e0 <__aeabi_f2d>
						/ 1800.0) * (2.0 * M_PI);
 8003da0:	a311      	add	r3, pc, #68	@ (adr r3, 8003de8 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fbf3 	bl	8000590 <__aeabi_dmul>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	f7fc fee5 	bl	8000b80 <__aeabi_d2f>
 8003db6:	4603      	mov	r3, r0
				target_position_revolute = (float) (registerFrame[65].U16
 8003db8:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8003dba:	6013      	str	r3, [r2, #0]
				target_position_prismatic = 300 - (registerFrame[64].U16 / 10);
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003dbe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e04 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	08db      	lsrs	r3, r3, #3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8003ddc:	edc3 7a00 	vstr	s15, [r3]
 8003de0:	e0a8      	b.n	8003f34 <HAL_TIM_PeriodElapsedCallback+0x110c>
 8003de2:	bf00      	nop
 8003de4:	f3af 8000 	nop.w
 8003de8:	54442d18 	.word	0x54442d18
 8003dec:	401921fb 	.word	0x401921fb
 8003df0:	20001323 	.word	0x20001323
 8003df4:	2000021c 	.word	0x2000021c
 8003df8:	20001088 	.word	0x20001088
 8003dfc:	409c2000 	.word	0x409c2000
 8003e00:	20001238 	.word	0x20001238
 8003e04:	cccccccd 	.word	0xcccccccd
 8003e08:	20001154 	.word	0x20001154
 8003e0c:	20001228 	.word	0x20001228
 8003e10:	437a0000 	.word	0x437a0000
 8003e14:	44098000 	.word	0x44098000
 8003e18:	20000b58 	.word	0x20000b58
 8003e1c:	2000123c 	.word	0x2000123c
 8003e20:	3ecccccd 	.word	0x3ecccccd
 8003e24:	20000b84 	.word	0x20000b84
 8003e28:	3a83126f 	.word	0x3a83126f
 8003e2c:	20001290 	.word	0x20001290
 8003e30:	20001292 	.word	0x20001292
 8003e34:	200011bc 	.word	0x200011bc
 8003e38:	200011c4 	.word	0x200011c4
 8003e3c:	447a0000 	.word	0x447a0000
 8003e40:	2000069c 	.word	0x2000069c
 8003e44:	2000126c 	.word	0x2000126c
 8003e48:	20001314 	.word	0x20001314
 8003e4c:	200011c0 	.word	0x200011c0
 8003e50:	200005d0 	.word	0x200005d0
 8003e54:	20001315 	.word	0x20001315
 8003e58:	20001328 	.word	0x20001328
 8003e5c:	20001317 	.word	0x20001317
 8003e60:	20001321 	.word	0x20001321
 8003e64:	20001114 	.word	0x20001114
 8003e68:	20001324 	.word	0x20001324
 8003e6c:	2000131c 	.word	0x2000131c
 8003e70:	44e10000 	.word	0x44e10000
			} else if (theta > 1800) {
 8003e74:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003fac <HAL_TIM_PeriodElapsedCallback+0x1184>
 8003e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	dd55      	ble.n	8003f34 <HAL_TIM_PeriodElapsedCallback+0x110c>
				target_position_revolute = (float) (fabs(
						180 - registerFrame[65].U16 / 10.0));
 8003e88:	4b49      	ldr	r3, [pc, #292]	@ (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x1188>)
 8003e8a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fb13 	bl	80004bc <__aeabi_i2d>
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	4b46      	ldr	r3, [pc, #280]	@ (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x118c>)
 8003e9c:	f7fc fca2 	bl	80007e4 <__aeabi_ddiv>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	4943      	ldr	r1, [pc, #268]	@ (8003fb8 <HAL_TIM_PeriodElapsedCallback+0x1190>)
 8003eaa:	f7fc f9b9 	bl	8000220 <__aeabi_dsub>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
				target_position_revolute = (float) (fabs(
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4649      	mov	r1, r9
 8003ebc:	f7fc fe60 	bl	8000b80 <__aeabi_d2f>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8003ec4:	6013      	str	r3, [r2, #0]
				target_position_revolute = (float) (target_position_revolute
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003fc0 <HAL_TIM_PeriodElapsedCallback+0x1198>
 8003ed0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ed4:	ee16 0a90 	vmov	r0, s13
 8003ed8:	f7fc fb02 	bl	80004e0 <__aeabi_f2d>
						/ 180.0) * (2.0 * M_PI);
 8003edc:	a330      	add	r3, pc, #192	@ (adr r3, 8003fa0 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc fb55 	bl	8000590 <__aeabi_dmul>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f7fc fe47 	bl	8000b80 <__aeabi_d2f>
 8003ef2:	4603      	mov	r3, r0
				target_position_revolute = (float) (target_position_revolute
 8003ef4:	4a31      	ldr	r2, [pc, #196]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8003ef6:	6013      	str	r3, [r2, #0]
				target_position_prismatic = mapf((registerFrame[64].U16 / 10),
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x1188>)
 8003efa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4a30      	ldr	r2, [pc, #192]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f12:	ed9f 2a2d 	vldr	s4, [pc, #180]	@ 8003fc8 <HAL_TIM_PeriodElapsedCallback+0x11a0>
 8003f16:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 8003fcc <HAL_TIM_PeriodElapsedCallback+0x11a4>
 8003f1a:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8003fcc <HAL_TIM_PeriodElapsedCallback+0x11a4>
 8003f1e:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8003fd0 <HAL_TIM_PeriodElapsedCallback+0x11a8>
 8003f22:	eeb0 0a67 	vmov.f32	s0, s15
 8003f26:	f7fe ff51 	bl	8002dcc <mapf>
 8003f2a:	eef0 7a40 	vmov.f32	s15, s0
 8003f2e:	4b29      	ldr	r3, [pc, #164]	@ (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8003f30:	edc3 7a00 	vstr	s15, [r3]
						0, 300, 300, 600);
			}

			if (pointMoveNeedsInit) {
 8003f34:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02a      	beq.n	8003f92 <HAL_TIM_PeriodElapsedCallback+0x116a>
				float abs_start_pris = (float) ball_screw_pos;
 8003f3c:	4b27      	ldr	r3, [pc, #156]	@ (8003fdc <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fc fe1b 	bl	8000b80 <__aeabi_d2f>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	61bb      	str	r3, [r7, #24]
				float abs_goal_pris = target_position_prismatic;
 8003f4e:	4b21      	ldr	r3, [pc, #132]	@ (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
 8003f54:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8003fe0 <HAL_TIM_PeriodElapsedCallback+0x11b8>
 8003f58:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8003fe4 <HAL_TIM_PeriodElapsedCallback+0x11bc>
 8003f5c:	edd7 0a05 	vldr	s1, [r7, #20]
 8003f60:	ed97 0a06 	vldr	s0, [r7, #24]
 8003f64:	4820      	ldr	r0, [pc, #128]	@ (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8003f66:	f7fd fda7 	bl	8001ab8 <Trapezoidal_Init>
						550.0f, 250.0f);

				float abs_start_rev = (float) revolute_encoder.rads;
 8003f6a:	4b20      	ldr	r3, [pc, #128]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	613b      	str	r3, [r7, #16]
				float abs_goal_rev = target_position_revolute;
 8003f70:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x1194>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
 8003f76:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8003ff0 <HAL_TIM_PeriodElapsedCallback+0x11c8>
 8003f7a:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003f7e:	edd7 0a03 	vldr	s1, [r7, #12]
 8003f82:	ed97 0a04 	vldr	s0, [r7, #16]
 8003f86:	481b      	ldr	r0, [pc, #108]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8003f88:	f7fd fd96 	bl	8001ab8 <Trapezoidal_Init>
						0.4f); // a_max (rad/s²)

				pointMoveNeedsInit = 0;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	@ (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
			}
			pen_flag = 0;
 8003f92:	4b19      	ldr	r3, [pc, #100]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
			break;
 8003f98:	e154      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
 8003f9a:	bf00      	nop
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	401921fb 	.word	0x401921fb
 8003fa8:	2000131c 	.word	0x2000131c
 8003fac:	44e10000 	.word	0x44e10000
 8003fb0:	20001088 	.word	0x20001088
 8003fb4:	40240000 	.word	0x40240000
 8003fb8:	40668000 	.word	0x40668000
 8003fbc:	20001238 	.word	0x20001238
 8003fc0:	43340000 	.word	0x43340000
 8003fc4:	cccccccd 	.word	0xcccccccd
 8003fc8:	44160000 	.word	0x44160000
 8003fcc:	43960000 	.word	0x43960000
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	20001154 	.word	0x20001154
 8003fd8:	20001320 	.word	0x20001320
 8003fdc:	20001228 	.word	0x20001228
 8003fe0:	437a0000 	.word	0x437a0000
 8003fe4:	44098000 	.word	0x44098000
 8003fe8:	20000b58 	.word	0x20000b58
 8003fec:	2000123c 	.word	0x2000123c
 8003ff0:	3ecccccd 	.word	0x3ecccccd
 8003ff4:	20000b84 	.word	0x20000b84
 8003ff8:	20001324 	.word	0x20001324
		case STATE_GO_TO_TARGET:

			if (!prisProfile.finished) {
 8003ffc:	4b9c      	ldr	r3, [pc, #624]	@ (8004270 <HAL_TIM_PeriodElapsedCallback+0x1448>)
 8003ffe:	7f1b      	ldrb	r3, [r3, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_TIM_PeriodElapsedCallback+0x11e6>
				Trapezoidal_Update(&prisProfile, 0.001f);
 8004004:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8004274 <HAL_TIM_PeriodElapsedCallback+0x144c>
 8004008:	4899      	ldr	r0, [pc, #612]	@ (8004270 <HAL_TIM_PeriodElapsedCallback+0x1448>)
 800400a:	f7fd fcab 	bl	8001964 <Trapezoidal_Update>
			}
			if (!revProfile.finished) {
 800400e:	4b9a      	ldr	r3, [pc, #616]	@ (8004278 <HAL_TIM_PeriodElapsedCallback+0x1450>)
 8004010:	7f1b      	ldrb	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <HAL_TIM_PeriodElapsedCallback+0x11f8>
				Trapezoidal_Update(&revProfile, 0.001f);
 8004016:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8004274 <HAL_TIM_PeriodElapsedCallback+0x144c>
 800401a:	4897      	ldr	r0, [pc, #604]	@ (8004278 <HAL_TIM_PeriodElapsedCallback+0x1450>)
 800401c:	f7fd fca2 	bl	8001964 <Trapezoidal_Update>
			}

			Revolute_CasCadeControl();
 8004020:	f7fe fd5e 	bl	8002ae0 <Revolute_CasCadeControl>
			Prismatic_CasCadeControl();
 8004024:	f7fe fc4c 	bl	80028c0 <Prismatic_CasCadeControl>

			if (limit_r == 1 && limit_l_prev == 0) {
 8004028:	4b94      	ldr	r3, [pc, #592]	@ (800427c <HAL_TIM_PeriodElapsedCallback+0x1454>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d114      	bne.n	800405a <HAL_TIM_PeriodElapsedCallback+0x1232>
 8004030:	4b93      	ldr	r3, [pc, #588]	@ (8004280 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d110      	bne.n	800405a <HAL_TIM_PeriodElapsedCallback+0x1232>
				output_prismatic = 0;
 8004038:	4b92      	ldr	r3, [pc, #584]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 8004040:	4891      	ldr	r0, [pc, #580]	@ (8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>)
 8004042:	f7fd fc61 	bl	8001908 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8004046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800404a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 800428c <HAL_TIM_PeriodElapsedCallback+0x1464>
 800404e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004052:	498f      	ldr	r1, [pc, #572]	@ (8004290 <HAL_TIM_PeriodElapsedCallback+0x1468>)
 8004054:	488c      	ldr	r0, [pc, #560]	@ (8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>)
 8004056:	f7fd fb85 	bl	8001764 <QEIInit>
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
 800405a:	4b8e      	ldr	r3, [pc, #568]	@ (8004294 <HAL_TIM_PeriodElapsedCallback+0x146c>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d114      	bne.n	800408c <HAL_TIM_PeriodElapsedCallback+0x1264>
 8004062:	4b8d      	ldr	r3, [pc, #564]	@ (8004298 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d110      	bne.n	800408c <HAL_TIM_PeriodElapsedCallback+0x1264>
				output_revolute = 0;
 800406a:	4b8c      	ldr	r3, [pc, #560]	@ (800429c <HAL_TIM_PeriodElapsedCallback+0x1474>)
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 8004072:	488b      	ldr	r0, [pc, #556]	@ (80042a0 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 8004074:	f7fd fc48 	bl	8001908 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8004078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800407c:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 800428c <HAL_TIM_PeriodElapsedCallback+0x1464>
 8004080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004084:	4987      	ldr	r1, [pc, #540]	@ (80042a4 <HAL_TIM_PeriodElapsedCallback+0x147c>)
 8004086:	4886      	ldr	r0, [pc, #536]	@ (80042a0 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 8004088:	f7fd fb6c 	bl	8001764 <QEIInit>
			}
			registerFrame[11].U16 = (int) (ball_screw_pos * 10);
 800408c:	4b86      	ldr	r3, [pc, #536]	@ (80042a8 <HAL_TIM_PeriodElapsedCallback+0x1480>)
 800408e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	4b85      	ldr	r3, [pc, #532]	@ (80042ac <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8004098:	f7fc fa7a 	bl	8000590 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fd24 	bl	8000af0 <__aeabi_d2iz>
 80040a8:	4603      	mov	r3, r0
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	4b80      	ldr	r3, [pc, #512]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 80040ae:	82da      	strh	r2, [r3, #22]
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
 80040b0:	4b7b      	ldr	r3, [pc, #492]	@ (80042a0 <HAL_TIM_PeriodElapsedCallback+0x1478>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa13 	bl	80004e0 <__aeabi_f2d>
 80040ba:	a369      	add	r3, pc, #420	@ (adr r3, 8004260 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc fa66 	bl	8000590 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
					* 10);
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <HAL_TIM_PeriodElapsedCallback+0x1484>)
 80040d2:	f7fc fa5d 	bl	8000590 <__aeabi_dmul>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fc fd07 	bl	8000af0 <__aeabi_d2iz>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b72      	ldr	r3, [pc, #456]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 80040e8:	831a      	strh	r2, [r3, #24]
			registerFrame[13].U16 = (int) (ball_screw_vel * 10);
 80040ea:	4b72      	ldr	r3, [pc, #456]	@ (80042b4 <HAL_TIM_PeriodElapsedCallback+0x148c>)
 80040ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	4b6d      	ldr	r3, [pc, #436]	@ (80042ac <HAL_TIM_PeriodElapsedCallback+0x1484>)
 80040f6:	f7fc fa4b 	bl	8000590 <__aeabi_dmul>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc fcf5 	bl	8000af0 <__aeabi_d2iz>
 8004106:	4603      	mov	r3, r0
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b69      	ldr	r3, [pc, #420]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 800410c:	835a      	strh	r2, [r3, #26]
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
 800410e:	4b6a      	ldr	r3, [pc, #424]	@ (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f9e4 	bl	80004e0 <__aeabi_f2d>
 8004118:	a351      	add	r3, pc, #324	@ (adr r3, 8004260 <HAL_TIM_PeriodElapsedCallback+0x1438>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc fa37 	bl	8000590 <__aeabi_dmul>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
					* 10);
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	4b5f      	ldr	r3, [pc, #380]	@ (80042ac <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8004130:	f7fc fa2e 	bl	8000590 <__aeabi_dmul>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	f7fc fcd8 	bl	8000af0 <__aeabi_d2iz>
 8004140:	4603      	mov	r3, r0
 8004142:	b29a      	uxth	r2, r3
 8004144:	4b5a      	ldr	r3, [pc, #360]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8004146:	839a      	strh	r2, [r3, #28]
			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
 8004148:	4b5c      	ldr	r3, [pc, #368]	@ (80042bc <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800414a:	edd3 7a00 	vldr	s15, [r3]
 800414e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415a:	ee17 3a90 	vmov	r3, s15
 800415e:	b29a      	uxth	r2, r3
 8004160:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8004162:	83da      	strh	r2, [r3, #30]
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
					- prev_revolute_vel) / 0.001) * 10);
 8004164:	4b54      	ldr	r3, [pc, #336]	@ (80042b8 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 8004166:	ed93 7a00 	vldr	s14, [r3]
 800416a:	4b55      	ldr	r3, [pc, #340]	@ (80042c0 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004174:	ee17 0a90 	vmov	r0, s15
 8004178:	f7fc f9b2 	bl	80004e0 <__aeabi_f2d>
 800417c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004268 <HAL_TIM_PeriodElapsedCallback+0x1440>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc fb2f 	bl	80007e4 <__aeabi_ddiv>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b46      	ldr	r3, [pc, #280]	@ (80042ac <HAL_TIM_PeriodElapsedCallback+0x1484>)
 8004194:	f7fc f9fc 	bl	8000590 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fca6 	bl	8000af0 <__aeabi_d2iz>
 80041a4:	4603      	mov	r3, r0
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b41      	ldr	r3, [pc, #260]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 80041aa:	841a      	strh	r2, [r3, #32]

			if (output_prismatic == 0 && output_revolute == 0
 80041ac:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	d112      	bne.n	80041e2 <HAL_TIM_PeriodElapsedCallback+0x13ba>
 80041bc:	4b37      	ldr	r3, [pc, #220]	@ (800429c <HAL_TIM_PeriodElapsedCallback+0x1474>)
 80041be:	edd3 7a00 	vldr	s15, [r3]
 80041c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d10a      	bne.n	80041e2 <HAL_TIM_PeriodElapsedCallback+0x13ba>
					&& prisProfile.finished && revProfile.finished) {
 80041cc:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <HAL_TIM_PeriodElapsedCallback+0x1448>)
 80041ce:	7f1b      	ldrb	r3, [r3, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <HAL_TIM_PeriodElapsedCallback+0x13ba>
 80041d4:	4b28      	ldr	r3, [pc, #160]	@ (8004278 <HAL_TIM_PeriodElapsedCallback+0x1450>)
 80041d6:	7f1b      	ldrb	r3, [r3, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_TIM_PeriodElapsedCallback+0x13ba>
				registerFrame[1].U16 = STATUS_STOP;
 80041dc:	4b34      	ldr	r3, [pc, #208]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 80041de:	2210      	movs	r2, #16
 80041e0:	805a      	strh	r2, [r3, #2]
			}
			pen_flag = 0;
 80041e2:	4b38      	ldr	r3, [pc, #224]	@ (80042c4 <HAL_TIM_PeriodElapsedCallback+0x149c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
			break;
 80041e8:	e02c      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>

		case STATE_STOPPING:
			registerFrame[10].U16 = STATUS_STOP;
 80041ea:	4b31      	ldr	r3, [pc, #196]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 80041ec:	2210      	movs	r2, #16
 80041ee:	829a      	strh	r2, [r3, #20]
			revolute_homed = 0;
 80041f0:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <HAL_TIM_PeriodElapsedCallback+0x1470>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
			limit_l_prev = 0;
 80041f6:	4b22      	ldr	r3, [pc, #136]	@ (8004280 <HAL_TIM_PeriodElapsedCallback+0x1458>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
			output_revolute = 0;
 80041fc:	4b27      	ldr	r3, [pc, #156]	@ (800429c <HAL_TIM_PeriodElapsedCallback+0x1474>)
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 8004204:	4b1f      	ldr	r3, [pc, #124]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
//			registerFrame[4].U16 = 0;
//			registerFrame[5].U16 = 1;
			pen_flag = 0;
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_TIM_PeriodElapsedCallback+0x149c>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
			break;
 8004212:	e017      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
 8004214:	4b21      	ldr	r3, [pc, #132]	@ (800429c <HAL_TIM_PeriodElapsedCallback+0x1474>)
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 800421c:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0x145c>)
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
			registerFrame[4].U16 = 0;
 8004224:	4b22      	ldr	r3, [pc, #136]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 8004226:	2200      	movs	r2, #0
 8004228:	811a      	strh	r2, [r3, #8]
			registerFrame[5].U16 = 1;
 800422a:	4b21      	ldr	r3, [pc, #132]	@ (80042b0 <HAL_TIM_PeriodElapsedCallback+0x1488>)
 800422c:	2201      	movs	r2, #1
 800422e:	815a      	strh	r2, [r3, #10]
			pen_flag = 0;
 8004230:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_TIM_PeriodElapsedCallback+0x149c>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
			pain_flang = 0;
 8004236:	4b24      	ldr	r3, [pc, #144]	@ (80042c8 <HAL_TIM_PeriodElapsedCallback+0x14a0>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
			break;
 800423c:	e002      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
			break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x141c>
			break;
 8004242:	bf00      	nop
		}
		button_reset_prev = button_run;
 8004244:	4b21      	ldr	r3, [pc, #132]	@ (80042cc <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <HAL_TIM_PeriodElapsedCallback+0x14a8>)
 800424a:	701a      	strb	r2, [r3, #0]
		button_run_prev = button_reset;
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 8004252:	701a      	strb	r2, [r3, #0]
	}
}
 8004254:	bf00      	nop
 8004256:	3748      	adds	r7, #72	@ 0x48
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	1a63c1f8 	.word	0x1a63c1f8
 8004264:	404ca5dc 	.word	0x404ca5dc
 8004268:	d2f1a9fc 	.word	0xd2f1a9fc
 800426c:	3f50624d 	.word	0x3f50624d
 8004270:	20000b58 	.word	0x20000b58
 8004274:	3a83126f 	.word	0x3a83126f
 8004278:	20000b84 	.word	0x20000b84
 800427c:	20001290 	.word	0x20001290
 8004280:	20001292 	.word	0x20001292
 8004284:	200011bc 	.word	0x200011bc
 8004288:	200011c4 	.word	0x200011c4
 800428c:	447a0000 	.word	0x447a0000
 8004290:	2000069c 	.word	0x2000069c
 8004294:	2000126c 	.word	0x2000126c
 8004298:	20001314 	.word	0x20001314
 800429c:	200011c0 	.word	0x200011c0
 80042a0:	2000123c 	.word	0x2000123c
 80042a4:	200005d0 	.word	0x200005d0
 80042a8:	20001228 	.word	0x20001228
 80042ac:	40240000 	.word	0x40240000
 80042b0:	20001088 	.word	0x20001088
 80042b4:	20001230 	.word	0x20001230
 80042b8:	200012b0 	.word	0x200012b0
 80042bc:	20001220 	.word	0x20001220
 80042c0:	200012c8 	.word	0x200012c8
 80042c4:	20001324 	.word	0x20001324
 80042c8:	20001322 	.word	0x20001322
 80042cc:	20001317 	.word	0x20001317
 80042d0:	20001316 	.word	0x20001316
 80042d4:	20001315 	.word	0x20001315
 80042d8:	20001328 	.word	0x20001328

080042dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e0:	b672      	cpsid	i
}
 80042e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <Error_Handler+0x8>

080042e8 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a0c      	ldr	r2, [pc, #48]	@ (8004334 <MotorInit+0x4c>)
 8004302:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8b3a      	ldrh	r2, [r7, #24]
 800431a:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f004 faf5 	bl	800890c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	4619      	mov	r1, r3
 8004326:	68b8      	ldr	r0, [r7, #8]
 8004328:	f004 fc46 	bl	8008bb8 <HAL_TIM_PWM_Start>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	0a21fe80 	.word	0x0a21fe80

08004338 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	ed87 0a02 	vstr	s0, [r7, #8]
 8004344:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8004348:	edd7 7a02 	vldr	s15, [r7, #8]
 800434c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d137      	bne.n	80043c6 <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	895b      	ldrh	r3, [r3, #10]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <MotorSet+0x32>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2200      	movs	r2, #0
 8004366:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8004368:	e104      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	895b      	ldrh	r3, [r3, #10]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d105      	bne.n	800437e <MotorSet+0x46>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2300      	movs	r3, #0
 800437a:	6393      	str	r3, [r2, #56]	@ 0x38
 800437c:	e0fa      	b.n	8004574 <MotorSet+0x23c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	895b      	ldrh	r3, [r3, #10]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d105      	bne.n	8004392 <MotorSet+0x5a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004390:	e0f0      	b.n	8004574 <MotorSet+0x23c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	895b      	ldrh	r3, [r3, #10]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d105      	bne.n	80043a6 <MotorSet+0x6e>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a4:	e0e6      	b.n	8004574 <MotorSet+0x23c>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	895b      	ldrh	r3, [r3, #10]
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d105      	bne.n	80043ba <MotorSet+0x82>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	6493      	str	r3, [r2, #72]	@ 0x48
 80043b8:	e0dc      	b.n	8004574 <MotorSet+0x23c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80043c4:	e0d6      	b.n	8004574 <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80043d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	ee17 2a90 	vmov	r2, s15
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80043ee:	33fe      	adds	r3, #254	@ 0xfe
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc f853 	bl	800049c <__aeabi_ui2d>
 80043f6:	a362      	add	r3, pc, #392	@ (adr r3, 8004580 <MotorSet+0x248>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc f9f2 	bl	80007e4 <__aeabi_ddiv>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fb9a 	bl	8000b40 <__aeabi_d2uiz>
 800440c:	4603      	mov	r3, r0
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8a1b      	ldrh	r3, [r3, #16]
 8004428:	3301      	adds	r3, #1
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004432:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004436:	ed97 7a02 	vldr	s14, [r7, #8]
 800443a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444a:	ee17 3a90 	vmov	r3, s15
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8a5b      	ldrh	r3, [r3, #18]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f82f 	bl	80004bc <__aeabi_i2d>
 800445e:	4604      	mov	r4, r0
 8004460:	460d      	mov	r5, r1
 8004462:	edd7 7a01 	vldr	s15, [r7, #4]
 8004466:	eef0 7ae7 	vabs.f32	s15, s15
 800446a:	ee17 0a90 	vmov	r0, s15
 800446e:	f7fc f837 	bl	80004e0 <__aeabi_f2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc f889 	bl	8000590 <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	a33e      	add	r3, pc, #248	@ (adr r3, 8004580 <MotorSet+0x248>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fc f9aa 	bl	80007e4 <__aeabi_ddiv>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f7fc fb52 	bl	8000b40 <__aeabi_d2uiz>
 800449c:	4603      	mov	r3, r0
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 80044a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80044aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	db08      	blt.n	80044c6 <MotorSet+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6858      	ldr	r0, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	891b      	ldrh	r3, [r3, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	4619      	mov	r1, r3
 80044c0:	f003 f946 	bl	8007750 <HAL_GPIO_WritePin>
 80044c4:	e007      	b.n	80044d6 <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6858      	ldr	r0, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	891b      	ldrh	r3, [r3, #8]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4619      	mov	r1, r3
 80044d2:	f003 f93d 	bl	8007750 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8a1a      	ldrh	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8a5a      	ldrh	r2, [r3, #18]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8a5a      	ldrh	r2, [r3, #18]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	895b      	ldrh	r3, [r3, #10]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <MotorSet+0x1d6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	6992      	ldr	r2, [r2, #24]
 800450a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800450c:	e032      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	895b      	ldrh	r3, [r3, #10]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d106      	bne.n	8004524 <MotorSet+0x1ec>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004522:	e027      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	895b      	ldrh	r3, [r3, #10]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d106      	bne.n	800453a <MotorSet+0x202>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004538:	e01c      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	895b      	ldrh	r3, [r3, #10]
 800453e:	2b0c      	cmp	r3, #12
 8004540:	d106      	bne.n	8004550 <MotorSet+0x218>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800454e:	e011      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	895b      	ldrh	r3, [r3, #10]
 8004554:	2b10      	cmp	r3, #16
 8004556:	d106      	bne.n	8004566 <MotorSet+0x22e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8004564:	e006      	b.n	8004574 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004572:	e7ff      	b.n	8004574 <MotorSet+0x23c>
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bdb0      	pop	{r4, r5, r7, pc}
 800457c:	f3af 8000 	nop.w
 8004580:	00000000 	.word	0x00000000
 8004584:	40efffe0 	.word	0x40efffe0

08004588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <HAL_MspInit+0x44>)
 8004590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004592:	4a0e      	ldr	r2, [pc, #56]	@ (80045cc <HAL_MspInit+0x44>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6613      	str	r3, [r2, #96]	@ 0x60
 800459a:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <HAL_MspInit+0x44>)
 800459c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_MspInit+0x44>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	4a08      	ldr	r2, [pc, #32]	@ (80045cc <HAL_MspInit+0x44>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_MspInit+0x44>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80045be:	f003 f9b5 	bl	800792c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0a0      	sub	sp, #128	@ 0x80
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045e8:	f107 0318 	add.w	r3, r7, #24
 80045ec:	2254      	movs	r2, #84	@ 0x54
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f008 fa05 	bl	800ca00 <memset>
  if(hadc->Instance==ADC1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045fe:	d170      	bne.n	80046e2 <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004604:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004606:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800460a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800460c:	f107 0318 	add.w	r3, r7, #24
 8004610:	4618      	mov	r0, r3
 8004612:	f003 fec9 	bl	80083a8 <HAL_RCCEx_PeriphCLKConfig>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800461c:	f7ff fe5e 	bl	80042dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004620:	4b6c      	ldr	r3, [pc, #432]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	4a6b      	ldr	r2, [pc, #428]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 8004628:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800462a:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10b      	bne.n	800464a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004632:	4b69      	ldr	r3, [pc, #420]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004636:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004638:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800463c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800463e:	4b66      	ldr	r3, [pc, #408]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800464a:	4b63      	ldr	r3, [pc, #396]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	4a62      	ldr	r2, [pc, #392]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004656:	4b60      	ldr	r3, [pc, #384]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004662:	2306      	movs	r3, #6
 8004664:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004666:	2303      	movs	r3, #3
 8004668:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800466e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004672:	4619      	mov	r1, r3
 8004674:	4859      	ldr	r0, [pc, #356]	@ (80047dc <HAL_ADC_MspInit+0x20c>)
 8004676:	f002 fed1 	bl	800741c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800467a:	4b59      	ldr	r3, [pc, #356]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 800467c:	4a59      	ldr	r2, [pc, #356]	@ (80047e4 <HAL_ADC_MspInit+0x214>)
 800467e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004680:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 8004682:	2205      	movs	r2, #5
 8004684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004686:	4b56      	ldr	r3, [pc, #344]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800468c:	4b54      	ldr	r3, [pc, #336]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004692:	4b53      	ldr	r3, [pc, #332]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004698:	4b51      	ldr	r3, [pc, #324]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 800469a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800469e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80046a0:	4b4f      	ldr	r3, [pc, #316]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80046a8:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046aa:	2220      	movs	r2, #32
 80046ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80046ae:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80046b4:	484a      	ldr	r0, [pc, #296]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046b6:	f002 fb7f 	bl	8006db8 <HAL_DMA_Init>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 80046c0:	f7ff fe0c 	bl	80042dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a46      	ldr	r2, [pc, #280]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80046ca:	4a45      	ldr	r2, [pc, #276]	@ (80047e0 <HAL_ADC_MspInit+0x210>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	2012      	movs	r0, #18
 80046d6:	f002 fb3a 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80046da:	2012      	movs	r0, #18
 80046dc:	f002 fb51 	bl	8006d82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80046e0:	e074      	b.n	80047cc <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a40      	ldr	r2, [pc, #256]	@ (80047e8 <HAL_ADC_MspInit+0x218>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d16f      	bne.n	80047cc <HAL_ADC_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80046f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80046f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046f8:	f107 0318 	add.w	r3, r7, #24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f003 fe53 	bl	80083a8 <HAL_RCCEx_PeriphCLKConfig>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 8004708:	f7ff fde8 	bl	80042dc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800470c:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 8004714:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004716:	4b2f      	ldr	r3, [pc, #188]	@ (80047d4 <HAL_ADC_MspInit+0x204>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10b      	bne.n	8004736 <HAL_ADC_MspInit+0x166>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800471e:	4b2e      	ldr	r3, [pc, #184]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004724:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800472a:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004736:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473a:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004742:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <HAL_ADC_MspInit+0x208>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800474e:	2301      	movs	r3, #1
 8004750:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004752:	2303      	movs	r3, #3
 8004754:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800475e:	4619      	mov	r1, r3
 8004760:	481e      	ldr	r0, [pc, #120]	@ (80047dc <HAL_ADC_MspInit+0x20c>)
 8004762:	f002 fe5b 	bl	800741c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel4;
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 8004768:	4a21      	ldr	r2, [pc, #132]	@ (80047f0 <HAL_ADC_MspInit+0x220>)
 800476a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800476c:	4b1f      	ldr	r3, [pc, #124]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 800476e:	2224      	movs	r2, #36	@ 0x24
 8004770:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004772:	4b1e      	ldr	r3, [pc, #120]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004778:	4b1c      	ldr	r3, [pc, #112]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800477e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 8004780:	2280      	movs	r2, #128	@ 0x80
 8004782:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004784:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 8004786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800478a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 800478e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004792:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004794:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 8004796:	2220      	movs	r2, #32
 8004798:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 800479c:	2200      	movs	r2, #0
 800479e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80047a0:	4812      	ldr	r0, [pc, #72]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 80047a2:	f002 fb09 	bl	8006db8 <HAL_DMA_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80047ac:	f7ff fd96 	bl	80042dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0e      	ldr	r2, [pc, #56]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80047b6:	4a0d      	ldr	r2, [pc, #52]	@ (80047ec <HAL_ADC_MspInit+0x21c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	2012      	movs	r0, #18
 80047c2:	f002 fac4 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80047c6:	2012      	movs	r0, #18
 80047c8:	f002 fadb 	bl	8006d82 <HAL_NVIC_EnableIRQ>
}
 80047cc:	bf00      	nop
 80047ce:	3780      	adds	r7, #128	@ 0x80
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000132c 	.word	0x2000132c
 80047d8:	40021000 	.word	0x40021000
 80047dc:	48000800 	.word	0x48000800
 80047e0:	20000378 	.word	0x20000378
 80047e4:	40020030 	.word	0x40020030
 80047e8:	50000100 	.word	0x50000100
 80047ec:	200003d8 	.word	0x200003d8
 80047f0:	40020044 	.word	0x40020044

080047f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	@ 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a4c      	ldr	r2, [pc, #304]	@ (8004944 <HAL_TIM_Base_MspInit+0x150>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d132      	bne.n	800487c <HAL_TIM_Base_MspInit+0x88>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004816:	4b4c      	ldr	r3, [pc, #304]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	4a4b      	ldr	r2, [pc, #300]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 800481c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004820:	6613      	str	r3, [r2, #96]	@ 0x60
 8004822:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482e:	4b46      	ldr	r3, [pc, #280]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004832:	4a45      	ldr	r2, [pc, #276]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483a:	4b43      	ldr	r3, [pc, #268]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 800483c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004854:	2300      	movs	r3, #0
 8004856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004858:	2306      	movs	r3, #6
 800485a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004866:	f002 fdd9 	bl	800741c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	2019      	movs	r0, #25
 8004870:	f002 fa6d 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004874:	2019      	movs	r0, #25
 8004876:	f002 fa84 	bl	8006d82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800487a:	e05e      	b.n	800493a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004884:	d114      	bne.n	80048b0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004886:	4b30      	ldr	r3, [pc, #192]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6593      	str	r3, [r2, #88]	@ 0x58
 8004892:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	201c      	movs	r0, #28
 80048a4:	f002 fa53 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048a8:	201c      	movs	r0, #28
 80048aa:	f002 fa6a 	bl	8006d82 <HAL_NVIC_EnableIRQ>
}
 80048ae:	e044      	b.n	800493a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a25      	ldr	r2, [pc, #148]	@ (800494c <HAL_TIM_Base_MspInit+0x158>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d114      	bne.n	80048e4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048be:	4a22      	ldr	r2, [pc, #136]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048c0:	f043 0308 	orr.w	r3, r3, #8
 80048c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2032      	movs	r0, #50	@ 0x32
 80048d8:	f002 fa39 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80048dc:	2032      	movs	r0, #50	@ 0x32
 80048de:	f002 fa50 	bl	8006d82 <HAL_NVIC_EnableIRQ>
}
 80048e2:	e02a      	b.n	800493a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <HAL_TIM_Base_MspInit+0x15c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10c      	bne.n	8004908 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80048ee:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f2:	4a15      	ldr	r2, [pc, #84]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80048fa:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 80048fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
}
 8004906:	e018      	b.n	800493a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM16)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <HAL_TIM_Base_MspInit+0x160>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004916:	4a0c      	ldr	r2, [pc, #48]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800491c:	6613      	str	r3, [r2, #96]	@ 0x60
 800491e:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <HAL_TIM_Base_MspInit+0x154>)
 8004920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2019      	movs	r0, #25
 8004930:	f002 fa0d 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004934:	2019      	movs	r0, #25
 8004936:	f002 fa24 	bl	8006d82 <HAL_NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3738      	adds	r7, #56	@ 0x38
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40000c00 	.word	0x40000c00
 8004950:	40013400 	.word	0x40013400
 8004954:	40014400 	.word	0x40014400

08004958 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08c      	sub	sp, #48	@ 0x30
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a36      	ldr	r2, [pc, #216]	@ (8004a50 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d131      	bne.n	80049de <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800497a:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497e:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	6593      	str	r3, [r2, #88]	@ 0x58
 8004986:	4b33      	ldr	r3, [pc, #204]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004992:	4b30      	ldr	r3, [pc, #192]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	4a2f      	ldr	r2, [pc, #188]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800499e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 80049a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049aa:	23c0      	movs	r3, #192	@ 0xc0
 80049ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049ba:	2302      	movs	r3, #2
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	4619      	mov	r1, r3
 80049c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049c8:	f002 fd28 	bl	800741c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2100      	movs	r1, #0
 80049d0:	201d      	movs	r0, #29
 80049d2:	f002 f9bc 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049d6:	201d      	movs	r0, #29
 80049d8:	f002 f9d3 	bl	8006d82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049dc:	e034      	b.n	8004a48 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <HAL_TIM_Encoder_MspInit+0x100>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d12f      	bne.n	8004a48 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f4:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a00:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004a06:	f043 0302 	orr.w	r3, r3, #2
 8004a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0c:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a18:	23c0      	movs	r3, #192	@ 0xc0
 8004a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a24:	2300      	movs	r3, #0
 8004a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2c:	f107 031c 	add.w	r3, r7, #28
 8004a30:	4619      	mov	r1, r3
 8004a32:	480a      	ldr	r0, [pc, #40]	@ (8004a5c <HAL_TIM_Encoder_MspInit+0x104>)
 8004a34:	f002 fcf2 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	201e      	movs	r0, #30
 8004a3e:	f002 f986 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a42:	201e      	movs	r0, #30
 8004a44:	f002 f99d 	bl	8006d82 <HAL_NVIC_EnableIRQ>
}
 8004a48:	bf00      	nop
 8004a4a:	3730      	adds	r7, #48	@ 0x30
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	48000400 	.word	0x48000400

08004a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	@ 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	609a      	str	r2, [r3, #8]
 8004a74:	60da      	str	r2, [r3, #12]
 8004a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <HAL_TIM_MspPostInit+0xb0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d11e      	bne.n	8004ac0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a82:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a8e:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004aac:	2306      	movs	r3, #6
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aba:	f002 fcaf 	bl	800741c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004abe:	e022      	b.n	8004b06 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <HAL_TIM_MspPostInit+0xb8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d11d      	bne.n	8004b06 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b14 <HAL_TIM_MspPostInit+0xb4>)
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8004af4:	2302      	movs	r3, #2
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b02:	f002 fc8b 	bl	800741c <HAL_GPIO_Init>
}
 8004b06:	bf00      	nop
 8004b08:	3728      	adds	r7, #40	@ 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40013400 	.word	0x40013400

08004b1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b09e      	sub	sp, #120	@ 0x78
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	2254      	movs	r2, #84	@ 0x54
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f007 ff5f 	bl	800ca00 <memset>
  if(huart->Instance==USART2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a4d      	ldr	r2, [pc, #308]	@ (8004c7c <HAL_UART_MspInit+0x160>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f040 8092 	bne.w	8004c72 <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f003 fc24 	bl	80083a8 <HAL_RCCEx_PeriphCLKConfig>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b66:	f7ff fbb9 	bl	80042dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b6a:	4b45      	ldr	r3, [pc, #276]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	4a44      	ldr	r2, [pc, #272]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b76:	4b42      	ldr	r3, [pc, #264]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b82:	4b3f      	ldr	r3, [pc, #252]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b86:	4a3e      	ldr	r2, [pc, #248]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c80 <HAL_UART_MspInit+0x164>)
 8004b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004baa:	2307      	movs	r3, #7
 8004bac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bb8:	f002 fc30 	bl	800741c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004bbc:	4b31      	ldr	r3, [pc, #196]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bbe:	4a32      	ldr	r2, [pc, #200]	@ (8004c88 <HAL_UART_MspInit+0x16c>)
 8004bc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004bc2:	4b30      	ldr	r3, [pc, #192]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bc4:	221a      	movs	r2, #26
 8004bc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bce:	4b2d      	ldr	r3, [pc, #180]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bd6:	2280      	movs	r2, #128	@ 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bda:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be0:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004be6:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bec:	4b25      	ldr	r3, [pc, #148]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004bf2:	4824      	ldr	r0, [pc, #144]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004bf4:	f002 f8e0 	bl	8006db8 <HAL_DMA_Init>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004bfe:	f7ff fb6d 	bl	80042dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1f      	ldr	r2, [pc, #124]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <HAL_UART_MspInit+0x168>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c12:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <HAL_UART_MspInit+0x174>)
 8004c14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004c16:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c18:	221b      	movs	r2, #27
 8004c1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c1e:	2210      	movs	r2, #16
 8004c20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c28:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c2a:	2280      	movs	r2, #128	@ 0x80
 8004c2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c3a:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c40:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c46:	4811      	ldr	r0, [pc, #68]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c48:	f002 f8b6 	bl	8006db8 <HAL_DMA_Init>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004c52:	f7ff fb43 	bl	80042dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c5a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c8c <HAL_UART_MspInit+0x170>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c62:	2200      	movs	r2, #0
 8004c64:	2100      	movs	r1, #0
 8004c66:	2026      	movs	r0, #38	@ 0x26
 8004c68:	f002 f871 	bl	8006d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c6c:	2026      	movs	r0, #38	@ 0x26
 8004c6e:	f002 f888 	bl	8006d82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004c72:	bf00      	nop
 8004c74:	3778      	adds	r7, #120	@ 0x78
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40004400 	.word	0x40004400
 8004c80:	40021000 	.word	0x40021000
 8004c84:	20000a98 	.word	0x20000a98
 8004c88:	40020008 	.word	0x40020008
 8004c8c:	20000af8 	.word	0x20000af8
 8004c90:	4002001c 	.word	0x4002001c

08004c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c98:	bf00      	nop
 8004c9a:	e7fd      	b.n	8004c98 <NMI_Handler+0x4>

08004c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <HardFault_Handler+0x4>

08004ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <MemManage_Handler+0x4>

08004cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <BusFault_Handler+0x4>

08004cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <UsageFault_Handler+0x4>

08004cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cea:	f000 f915 	bl	8004f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004cf6:	2008      	movs	r0, #8
 8004cf8:	f002 fd5c 	bl	80077b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004d04:	4802      	ldr	r0, [pc, #8]	@ (8004d10 <DMA1_Channel1_IRQHandler+0x10>)
 8004d06:	f002 fa3a 	bl	800717e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000a98 	.word	0x20000a98

08004d14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004d18:	4802      	ldr	r0, [pc, #8]	@ (8004d24 <DMA1_Channel2_IRQHandler+0x10>)
 8004d1a:	f002 fa30 	bl	800717e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000af8 	.word	0x20000af8

08004d28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d2c:	4802      	ldr	r0, [pc, #8]	@ (8004d38 <DMA1_Channel3_IRQHandler+0x10>)
 8004d2e:	f002 fa26 	bl	800717e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000378 	.word	0x20000378

08004d3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004d40:	4802      	ldr	r0, [pc, #8]	@ (8004d4c <DMA1_Channel4_IRQHandler+0x10>)
 8004d42:	f002 fa1c 	bl	800717e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200003d8 	.word	0x200003d8

08004d50 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d54:	4803      	ldr	r0, [pc, #12]	@ (8004d64 <ADC1_2_IRQHandler+0x14>)
 8004d56:	f000 fdcd 	bl	80058f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004d5a:	4803      	ldr	r0, [pc, #12]	@ (8004d68 <ADC1_2_IRQHandler+0x18>)
 8004d5c:	f000 fdca 	bl	80058f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200002a0 	.word	0x200002a0
 8004d68:	2000030c 	.word	0x2000030c

08004d6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d70:	4803      	ldr	r0, [pc, #12]	@ (8004d80 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004d72:	f004 fb12 	bl	800939a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004d76:	4803      	ldr	r0, [pc, #12]	@ (8004d84 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004d78:	f004 fb0f 	bl	800939a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004d7c:	bf00      	nop
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000438 	.word	0x20000438
 8004d84:	20000900 	.word	0x20000900

08004d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d8c:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <TIM2_IRQHandler+0x10>)
 8004d8e:	f004 fb04 	bl	800939a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000504 	.word	0x20000504

08004d9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004da0:	4802      	ldr	r0, [pc, #8]	@ (8004dac <TIM3_IRQHandler+0x10>)
 8004da2:	f004 fafa 	bl	800939a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200005d0 	.word	0x200005d0

08004db0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004db4:	4802      	ldr	r0, [pc, #8]	@ (8004dc0 <TIM4_IRQHandler+0x10>)
 8004db6:	f004 faf0 	bl	800939a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000069c 	.word	0x2000069c

08004dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004dc8:	4802      	ldr	r0, [pc, #8]	@ (8004dd4 <USART2_IRQHandler+0x10>)
 8004dca:	f006 f8b9 	bl	800af40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200009cc 	.word	0x200009cc

08004dd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ddc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004de0:	f002 fce8 	bl	80077b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <TIM5_IRQHandler+0x10>)
 8004dee:	f004 fad4 	bl	800939a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000768 	.word	0x20000768

08004dfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <SystemInit+0x20>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <SystemInit+0x20>)
 8004e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000ed00 	.word	0xe000ed00

08004e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e20:	480d      	ldr	r0, [pc, #52]	@ (8004e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e24:	f7ff ffea 	bl	8004dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e28:	480c      	ldr	r0, [pc, #48]	@ (8004e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8004e2a:	490d      	ldr	r1, [pc, #52]	@ (8004e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e64 <LoopForever+0xe>)
  movs r3, #0
 8004e2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004e30:	e002      	b.n	8004e38 <LoopCopyDataInit>

08004e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e36:	3304      	adds	r3, #4

08004e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e3c:	d3f9      	bcc.n	8004e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e40:	4c0a      	ldr	r4, [pc, #40]	@ (8004e6c <LoopForever+0x16>)
  movs r3, #0
 8004e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e44:	e001      	b.n	8004e4a <LoopFillZerobss>

08004e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e48:	3204      	adds	r2, #4

08004e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e4c:	d3fb      	bcc.n	8004e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e4e:	f007 fde5 	bl	800ca1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e52:	f7fc fecf 	bl	8001bf4 <main>

08004e56 <LoopForever>:

LoopForever:
    b LoopForever
 8004e56:	e7fe      	b.n	8004e56 <LoopForever>
  ldr   r0, =_estack
 8004e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e60:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8004e64:	0800e200 	.word	0x0800e200
  ldr r2, =_sbss
 8004e68:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8004e6c:	2000146c 	.word	0x2000146c

08004e70 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e70:	e7fe      	b.n	8004e70 <ADC3_IRQHandler>

08004e72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e7c:	2003      	movs	r0, #3
 8004e7e:	f001 ff5b 	bl	8006d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e82:	2000      	movs	r0, #0
 8004e84:	f000 f80e 	bl	8004ea4 <HAL_InitTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	71fb      	strb	r3, [r7, #7]
 8004e92:	e001      	b.n	8004e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e94:	f7ff fb78 	bl	8004588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e98:	79fb      	ldrb	r3, [r7, #7]

}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004eb0:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <HAL_InitTick+0x68>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <HAL_InitTick+0x6c>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b13      	ldr	r3, [pc, #76]	@ (8004f0c <HAL_InitTick+0x68>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 ff66 	bl	8006d9e <HAL_SYSTICK_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10f      	bne.n	8004ef8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d809      	bhi.n	8004ef2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee6:	f001 ff32 	bl	8006d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <HAL_InitTick+0x70>)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e007      	b.n	8004f02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e004      	b.n	8004f02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e001      	b.n	8004f02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000022c 	.word	0x2000022c
 8004f10:	20000224 	.word	0x20000224
 8004f14:	20000228 	.word	0x20000228

08004f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_IncTick+0x1c>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_IncTick+0x20>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	4a03      	ldr	r2, [pc, #12]	@ (8004f34 <HAL_IncTick+0x1c>)
 8004f28:	6013      	str	r3, [r2, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20001330 	.word	0x20001330
 8004f38:	2000022c 	.word	0x2000022c

08004f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <HAL_GetTick+0x14>)
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20001330 	.word	0x20001330

08004f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3360      	adds	r3, #96	@ 0x60
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <LL_ADC_SetOffset+0x44>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	03fff000 	.word	0x03fff000

08005004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3360      	adds	r3, #96	@ 0x60
 8005012:	461a      	mov	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3360      	adds	r3, #96	@ 0x60
 8005040:	461a      	mov	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	431a      	orrs	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3360      	adds	r3, #96	@ 0x60
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	431a      	orrs	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3360      	adds	r3, #96	@ 0x60
 80050ac:	461a      	mov	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	615a      	str	r2, [r3, #20]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3330      	adds	r3, #48	@ 0x30
 800512e:	461a      	mov	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	4413      	add	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	211f      	movs	r1, #31
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0e9b      	lsrs	r3, r3, #26
 8005156:	f003 011f 	and.w	r1, r3, #31
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	431a      	orrs	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005182:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3314      	adds	r3, #20
 80051ac:	461a      	mov	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	0e5b      	lsrs	r3, r3, #25
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	4413      	add	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	0d1b      	lsrs	r3, r3, #20
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2107      	movs	r1, #7
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	401a      	ands	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	0d1b      	lsrs	r3, r3, #20
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	431a      	orrs	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0318 	and.w	r3, r3, #24
 8005216:	4908      	ldr	r1, [pc, #32]	@ (8005238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005218:	40d9      	lsrs	r1, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	400b      	ands	r3, r1
 800521e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005222:	431a      	orrs	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	0007ffff 	.word	0x0007ffff

0800523c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 031f 	and.w	r3, r3, #31
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6093      	str	r3, [r2, #8]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ac:	d101      	bne.n	80052b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80052d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052fc:	d101      	bne.n	8005302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005324:	f043 0201 	orr.w	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <LL_ADC_IsEnabled+0x18>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <LL_ADC_IsEnabled+0x1a>
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800536e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005372:	f043 0204 	orr.w	r2, r3, #4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b04      	cmp	r3, #4
 8005398:	d101      	bne.n	800539e <LL_ADC_REG_IsConversionOngoing+0x18>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d101      	bne.n	80053c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b089      	sub	sp, #36	@ 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e1a9      	b.n	8005742 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff f8e7 	bl	80045d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff3f 	bl	8005298 <LL_ADC_IsDeepPowerDownEnabled>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff25 	bl	8005274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff ff5a 	bl	80052e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d115      	bne.n	8005466 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff3e 	bl	80052c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005444:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <HAL_ADC_Init+0x2e4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	4a9c      	ldr	r2, [pc, #624]	@ (80056bc <HAL_ADC_Init+0x2e8>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	099b      	lsrs	r3, r3, #6
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005458:	e002      	b.n	8005460 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3b01      	subs	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f9      	bne.n	800545a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff3c 	bl	80052e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547a:	f043 0210 	orr.w	r2, r3, #16
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005486:	f043 0201 	orr.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff ff75 	bl	8005386 <LL_ADC_REG_IsConversionOngoing>
 800549c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8142 	bne.w	8005730 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 813e 	bne.w	8005730 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80054bc:	f043 0202 	orr.w	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff35 	bl	8005338 <LL_ADC_IsEnabled>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d141      	bne.n	8005558 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054dc:	d004      	beq.n	80054e8 <HAL_ADC_Init+0x114>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a77      	ldr	r2, [pc, #476]	@ (80056c0 <HAL_ADC_Init+0x2ec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10f      	bne.n	8005508 <HAL_ADC_Init+0x134>
 80054e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80054ec:	f7ff ff24 	bl	8005338 <LL_ADC_IsEnabled>
 80054f0:	4604      	mov	r4, r0
 80054f2:	4873      	ldr	r0, [pc, #460]	@ (80056c0 <HAL_ADC_Init+0x2ec>)
 80054f4:	f7ff ff20 	bl	8005338 <LL_ADC_IsEnabled>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4323      	orrs	r3, r4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e012      	b.n	800552e <HAL_ADC_Init+0x15a>
 8005508:	486e      	ldr	r0, [pc, #440]	@ (80056c4 <HAL_ADC_Init+0x2f0>)
 800550a:	f7ff ff15 	bl	8005338 <LL_ADC_IsEnabled>
 800550e:	4604      	mov	r4, r0
 8005510:	486d      	ldr	r0, [pc, #436]	@ (80056c8 <HAL_ADC_Init+0x2f4>)
 8005512:	f7ff ff11 	bl	8005338 <LL_ADC_IsEnabled>
 8005516:	4603      	mov	r3, r0
 8005518:	431c      	orrs	r4, r3
 800551a:	486c      	ldr	r0, [pc, #432]	@ (80056cc <HAL_ADC_Init+0x2f8>)
 800551c:	f7ff ff0c 	bl	8005338 <LL_ADC_IsEnabled>
 8005520:	4603      	mov	r3, r0
 8005522:	4323      	orrs	r3, r4
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800553a:	d004      	beq.n	8005546 <HAL_ADC_Init+0x172>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5f      	ldr	r2, [pc, #380]	@ (80056c0 <HAL_ADC_Init+0x2ec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <HAL_ADC_Init+0x176>
 8005546:	4a62      	ldr	r2, [pc, #392]	@ (80056d0 <HAL_ADC_Init+0x2fc>)
 8005548:	e000      	b.n	800554c <HAL_ADC_Init+0x178>
 800554a:	4a62      	ldr	r2, [pc, #392]	@ (80056d4 <HAL_ADC_Init+0x300>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7ff fcfe 	bl	8004f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	7f5b      	ldrb	r3, [r3, #29]
 800555c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005562:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005568:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800556e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005576:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005582:	2b01      	cmp	r3, #1
 8005584:	d106      	bne.n	8005594 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	045b      	lsls	r3, r3, #17
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4b48      	ldr	r3, [pc, #288]	@ (80056d8 <HAL_ADC_Init+0x304>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fee4 	bl	80053ac <LL_ADC_INJ_IsConversionOngoing>
 80055e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d17f      	bne.n	80056ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d17c      	bne.n	80056ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800560e:	f023 0302 	bic.w	r3, r3, #2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	430b      	orrs	r3, r1
 800561a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d017      	beq.n	8005654 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800563c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6911      	ldr	r1, [r2, #16]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	430b      	orrs	r3, r1
 800564e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005652:	e013      	b.n	800567c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005662:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005678:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005682:	2b01      	cmp	r3, #1
 8005684:	d12a      	bne.n	80056dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800569c:	4311      	orrs	r1, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80056a2:	4311      	orrs	r1, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056a8:	430a      	orrs	r2, r1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	611a      	str	r2, [r3, #16]
 80056b6:	e019      	b.n	80056ec <HAL_ADC_Init+0x318>
 80056b8:	20000224 	.word	0x20000224
 80056bc:	053e2d63 	.word	0x053e2d63
 80056c0:	50000100 	.word	0x50000100
 80056c4:	50000400 	.word	0x50000400
 80056c8:	50000500 	.word	0x50000500
 80056cc:	50000600 	.word	0x50000600
 80056d0:	50000300 	.word	0x50000300
 80056d4:	50000700 	.word	0x50000700
 80056d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10c      	bne.n	800570e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f023 010f 	bic.w	r1, r3, #15
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30
 800570c:	e007      	b.n	800571e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 020f 	bic.w	r2, r2, #15
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	f043 0201 	orr.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800572e:	e007      	b.n	8005740 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	f043 0210 	orr.w	r2, r3, #16
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005740:	7ffb      	ldrb	r3, [r7, #31]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3724      	adds	r7, #36	@ 0x24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	bf00      	nop

0800574c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005760:	d004      	beq.n	800576c <HAL_ADC_Start_DMA+0x20>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5a      	ldr	r2, [pc, #360]	@ (80058d0 <HAL_ADC_Start_DMA+0x184>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d101      	bne.n	8005770 <HAL_ADC_Start_DMA+0x24>
 800576c:	4b59      	ldr	r3, [pc, #356]	@ (80058d4 <HAL_ADC_Start_DMA+0x188>)
 800576e:	e000      	b.n	8005772 <HAL_ADC_Start_DMA+0x26>
 8005770:	4b59      	ldr	r3, [pc, #356]	@ (80058d8 <HAL_ADC_Start_DMA+0x18c>)
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fd62 	bl	800523c <LL_ADC_GetMultimode>
 8005778:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fe01 	bl	8005386 <LL_ADC_REG_IsConversionOngoing>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 809b 	bne.w	80058c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_ADC_Start_DMA+0x4e>
 8005796:	2302      	movs	r3, #2
 8005798:	e096      	b.n	80058c8 <HAL_ADC_Start_DMA+0x17c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a4d      	ldr	r2, [pc, #308]	@ (80058dc <HAL_ADC_Start_DMA+0x190>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d008      	beq.n	80057be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d002      	beq.n	80057be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d17a      	bne.n	80058b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 ff60 	bl	8006684 <ADC_Enable>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d16d      	bne.n	80058aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a3a      	ldr	r2, [pc, #232]	@ (80058d0 <HAL_ADC_Start_DMA+0x184>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_ADC_Start_DMA+0xb4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3b      	ldr	r2, [pc, #236]	@ (80058e0 <HAL_ADC_Start_DMA+0x194>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d002      	beq.n	80057fc <HAL_ADC_Start_DMA+0xb0>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	e003      	b.n	8005804 <HAL_ADC_Start_DMA+0xb8>
 80057fc:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <HAL_ADC_Start_DMA+0x198>)
 80057fe:	e001      	b.n	8005804 <HAL_ADC_Start_DMA+0xb8>
 8005800:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	4293      	cmp	r3, r2
 800580a:	d002      	beq.n	8005812 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005816:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582e:	f023 0206 	bic.w	r2, r3, #6
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	661a      	str	r2, [r3, #96]	@ 0x60
 8005836:	e002      	b.n	800583e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	4a29      	ldr	r2, [pc, #164]	@ (80058e8 <HAL_ADC_Start_DMA+0x19c>)
 8005844:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	4a28      	ldr	r2, [pc, #160]	@ (80058ec <HAL_ADC_Start_DMA+0x1a0>)
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	4a27      	ldr	r2, [pc, #156]	@ (80058f0 <HAL_ADC_Start_DMA+0x1a4>)
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	221c      	movs	r2, #28
 800585c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0210 	orr.w	r2, r2, #16
 8005874:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3340      	adds	r3, #64	@ 0x40
 8005890:	4619      	mov	r1, r3
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f001 fb37 	bl	8006f08 <HAL_DMA_Start_IT>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fd5b 	bl	800535e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80058a8:	e00d      	b.n	80058c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80058b2:	e008      	b.n	80058c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80058c0:	e001      	b.n	80058c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	50000100 	.word	0x50000100
 80058d4:	50000300 	.word	0x50000300
 80058d8:	50000700 	.word	0x50000700
 80058dc:	50000600 	.word	0x50000600
 80058e0:	50000500 	.word	0x50000500
 80058e4:	50000400 	.word	0x50000400
 80058e8:	080067b1 	.word	0x080067b1
 80058ec:	08006889 	.word	0x08006889
 80058f0:	080068a5 	.word	0x080068a5

080058f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	@ 0x28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005918:	d004      	beq.n	8005924 <HAL_ADC_IRQHandler+0x30>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a8e      	ldr	r2, [pc, #568]	@ (8005b58 <HAL_ADC_IRQHandler+0x264>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_ADC_IRQHandler+0x34>
 8005924:	4b8d      	ldr	r3, [pc, #564]	@ (8005b5c <HAL_ADC_IRQHandler+0x268>)
 8005926:	e000      	b.n	800592a <HAL_ADC_IRQHandler+0x36>
 8005928:	4b8d      	ldr	r3, [pc, #564]	@ (8005b60 <HAL_ADC_IRQHandler+0x26c>)
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fc86 	bl	800523c <LL_ADC_GetMultimode>
 8005930:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d017      	beq.n	800596c <HAL_ADC_IRQHandler+0x78>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d012      	beq.n	800596c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005956:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 f808 	bl	8006974 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2202      	movs	r2, #2
 800596a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_ADC_IRQHandler+0x8c>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8094 	beq.w	8005ab4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 808e 	beq.w	8005ab4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fb9f 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d072      	beq.n	8005aa6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a64      	ldr	r2, [pc, #400]	@ (8005b58 <HAL_ADC_IRQHandler+0x264>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_ADC_IRQHandler+0xea>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a65      	ldr	r2, [pc, #404]	@ (8005b64 <HAL_ADC_IRQHandler+0x270>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d002      	beq.n	80059da <HAL_ADC_IRQHandler+0xe6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	e003      	b.n	80059e2 <HAL_ADC_IRQHandler+0xee>
 80059da:	4b63      	ldr	r3, [pc, #396]	@ (8005b68 <HAL_ADC_IRQHandler+0x274>)
 80059dc:	e001      	b.n	80059e2 <HAL_ADC_IRQHandler+0xee>
 80059de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d008      	beq.n	80059fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	d002      	beq.n	80059fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d104      	bne.n	8005a06 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	e014      	b.n	8005a30 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a53      	ldr	r2, [pc, #332]	@ (8005b58 <HAL_ADC_IRQHandler+0x264>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_ADC_IRQHandler+0x130>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a53      	ldr	r2, [pc, #332]	@ (8005b64 <HAL_ADC_IRQHandler+0x270>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d002      	beq.n	8005a20 <HAL_ADC_IRQHandler+0x12c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	e003      	b.n	8005a28 <HAL_ADC_IRQHandler+0x134>
 8005a20:	4b51      	ldr	r3, [pc, #324]	@ (8005b68 <HAL_ADC_IRQHandler+0x274>)
 8005a22:	e001      	b.n	8005a28 <HAL_ADC_IRQHandler+0x134>
 8005a24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005a28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d135      	bne.n	8005aa6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d12e      	bne.n	8005aa6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fc9a 	bl	8005386 <LL_ADC_REG_IsConversionOngoing>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11a      	bne.n	8005a8e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 020c 	bic.w	r2, r2, #12
 8005a66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d112      	bne.n	8005aa6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a8c:	e00b      	b.n	8005aa6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	f043 0210 	orr.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f984 	bl	8005db4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	220c      	movs	r2, #12
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_ADC_IRQHandler+0x1d4>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80b3 	beq.w	8005c3a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80ad 	beq.w	8005c3a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fb3a 	bl	8005176 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005b02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff faf5 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <HAL_ADC_IRQHandler+0x264>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_ADC_IRQHandler+0x23a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	@ (8005b64 <HAL_ADC_IRQHandler+0x270>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d002      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x236>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	e003      	b.n	8005b32 <HAL_ADC_IRQHandler+0x23e>
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b68 <HAL_ADC_IRQHandler+0x274>)
 8005b2c:	e001      	b.n	8005b32 <HAL_ADC_IRQHandler+0x23e>
 8005b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d008      	beq.n	8005b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d002      	beq.n	8005b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d10f      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	623b      	str	r3, [r7, #32]
 8005b54:	e01f      	b.n	8005b96 <HAL_ADC_IRQHandler+0x2a2>
 8005b56:	bf00      	nop
 8005b58:	50000100 	.word	0x50000100
 8005b5c:	50000300 	.word	0x50000300
 8005b60:	50000700 	.word	0x50000700
 8005b64:	50000500 	.word	0x50000500
 8005b68:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a8b      	ldr	r2, [pc, #556]	@ (8005da0 <HAL_ADC_IRQHandler+0x4ac>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_ADC_IRQHandler+0x296>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a8a      	ldr	r2, [pc, #552]	@ (8005da4 <HAL_ADC_IRQHandler+0x4b0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d002      	beq.n	8005b86 <HAL_ADC_IRQHandler+0x292>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	e003      	b.n	8005b8e <HAL_ADC_IRQHandler+0x29a>
 8005b86:	4b88      	ldr	r3, [pc, #544]	@ (8005da8 <HAL_ADC_IRQHandler+0x4b4>)
 8005b88:	e001      	b.n	8005b8e <HAL_ADC_IRQHandler+0x29a>
 8005b8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005b8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d047      	beq.n	8005c2c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_ADC_IRQHandler+0x2c2>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d03f      	beq.n	8005c2c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13a      	bne.n	8005c2c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b40      	cmp	r3, #64	@ 0x40
 8005bc2:	d133      	bne.n	8005c2c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d12e      	bne.n	8005c2c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fbea 	bl	80053ac <LL_ADC_INJ_IsConversionOngoing>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d11a      	bne.n	8005c14 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d112      	bne.n	8005c2c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c12:	e00b      	b.n	8005c2c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fe79 	bl	8006924 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2260      	movs	r2, #96	@ 0x60
 8005c38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d011      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x374>
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f8be 	bl	8005ddc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2280      	movs	r2, #128	@ 0x80
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <HAL_ADC_IRQHandler+0x3a4>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fe5f 	bl	800694c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <HAL_ADC_IRQHandler+0x3d4>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fe51 	bl	8006960 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d043      	beq.n	8005d5a <HAL_ADC_IRQHandler+0x466>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d03e      	beq.n	8005d5a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce8:	e021      	b.n	8005d2e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cf8:	d004      	beq.n	8005d04 <HAL_ADC_IRQHandler+0x410>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a28      	ldr	r2, [pc, #160]	@ (8005da0 <HAL_ADC_IRQHandler+0x4ac>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_IRQHandler+0x414>
 8005d04:	4b29      	ldr	r3, [pc, #164]	@ (8005dac <HAL_ADC_IRQHandler+0x4b8>)
 8005d06:	e000      	b.n	8005d0a <HAL_ADC_IRQHandler+0x416>
 8005d08:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <HAL_ADC_IRQHandler+0x4bc>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff faa4 	bl	8005258 <LL_ADC_GetMultiDMATransfer>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005d16:	2301      	movs	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1a:	e008      	b.n	8005d2e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d10e      	bne.n	8005d52 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d44:	f043 0202 	orr.w	r2, r3, #2
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f84f 	bl	8005df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2210      	movs	r2, #16
 8005d58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x4a2>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d013      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7e:	f043 0208 	orr.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fdd1 	bl	8006938 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005d96:	bf00      	nop
 8005d98:	3728      	adds	r7, #40	@ 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	50000100 	.word	0x50000100
 8005da4:	50000500 	.word	0x50000500
 8005da8:	50000400 	.word	0x50000400
 8005dac:	50000300 	.word	0x50000300
 8005db0:	50000700 	.word	0x50000700

08005db4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b0b6      	sub	sp, #216	@ 0xd8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d102      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0x24>
 8005e22:	2302      	movs	r3, #2
 8005e24:	f000 bc13 	b.w	800664e <HAL_ADC_ConfigChannel+0x84a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff faa6 	bl	8005386 <LL_ADC_REG_IsConversionOngoing>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 83f3 	bne.w	8006628 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6859      	ldr	r1, [r3, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7ff f965 	bl	800511e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fa94 	bl	8005386 <LL_ADC_REG_IsConversionOngoing>
 8005e5e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff faa0 	bl	80053ac <LL_ADC_INJ_IsConversionOngoing>
 8005e6c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 81d9 	bne.w	800622c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 81d4 	bne.w	800622c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e8c:	d10f      	bne.n	8005eae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	4619      	mov	r1, r3
 8005e9a:	f7ff f97f 	bl	800519c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff f913 	bl	80050d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005eac:	e00e      	b.n	8005ecc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7ff f96e 	bl	800519c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f903 	bl	80050d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d022      	beq.n	8005f34 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6919      	ldr	r1, [r3, #16]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005efe:	f7ff f85d 	bl	8004fbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6919      	ldr	r1, [r3, #16]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f7ff f8a9 	bl	8005066 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d102      	bne.n	8005f2a <HAL_ADC_ConfigChannel+0x126>
 8005f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f28:	e000      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x128>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f7ff f8b5 	bl	800509c <LL_ADC_SetOffsetSaturation>
 8005f32:	e17b      	b.n	800622c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f862 	bl	8005004 <LL_ADC_GetOffsetChannel>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x15c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f857 	bl	8005004 <LL_ADC_GetOffsetChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	0e9b      	lsrs	r3, r3, #26
 8005f5a:	f003 021f 	and.w	r2, r3, #31
 8005f5e:	e01e      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x19a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff f84c 	bl	8005004 <LL_ADC_GetOffsetChannel>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f76:	fa93 f3a3 	rbit	r3, r3
 8005f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005f8e:	2320      	movs	r3, #32
 8005f90:	e004      	b.n	8005f9c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f96:	fab3 f383 	clz	r3, r3
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x1b2>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0e9b      	lsrs	r3, r3, #26
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	e018      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x1e4>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fc2:	fa93 f3a3 	rbit	r3, r3
 8005fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005fda:	2320      	movs	r3, #32
 8005fdc:	e004      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fe2:	fab3 f383 	clz	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d106      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff f81b 	bl	8005030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe ffff 	bl	8005004 <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <HAL_ADC_ConfigChannel+0x222>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fff4 	bl	8005004 <LL_ADC_GetOffsetChannel>
 800601c:	4603      	mov	r3, r0
 800601e:	0e9b      	lsrs	r3, r3, #26
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	e01e      	b.n	8006064 <HAL_ADC_ConfigChannel+0x260>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2101      	movs	r1, #1
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe ffe9 	bl	8005004 <LL_ADC_GetOffsetChannel>
 8006032:	4603      	mov	r3, r0
 8006034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800603c:	fa93 f3a3 	rbit	r3, r3
 8006040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800604c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006054:	2320      	movs	r3, #32
 8006056:	e004      	b.n	8006062 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800605c:	fab3 f383 	clz	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_ADC_ConfigChannel+0x278>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	e018      	b.n	80060ae <HAL_ADC_ConfigChannel+0x2aa>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006088:	fa93 f3a3 	rbit	r3, r3
 800608c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006090:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e004      	b.n	80060ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80060a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d106      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2101      	movs	r1, #1
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe ffb8 	bl	8005030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe ff9c 	bl	8005004 <LL_ADC_GetOffsetChannel>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x2e8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2102      	movs	r1, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe ff91 	bl	8005004 <LL_ADC_GetOffsetChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	f003 021f 	and.w	r2, r3, #31
 80060ea:	e01e      	b.n	800612a <HAL_ADC_ConfigChannel+0x326>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2102      	movs	r1, #2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe ff86 	bl	8005004 <LL_ADC_GetOffsetChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800610a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800610e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006112:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800611a:	2320      	movs	r3, #32
 800611c:	e004      	b.n	8006128 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x33e>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0e9b      	lsrs	r3, r3, #26
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	e016      	b.n	8006170 <HAL_ADC_ConfigChannel+0x36c>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800615a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006162:	2320      	movs	r3, #32
 8006164:	e004      	b.n	8006170 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006166:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800616a:	fab3 f383 	clz	r3, r3
 800616e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006170:	429a      	cmp	r2, r3
 8006172:	d106      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2200      	movs	r2, #0
 800617a:	2102      	movs	r1, #2
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe ff57 	bl	8005030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2103      	movs	r1, #3
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe ff3b 	bl	8005004 <LL_ADC_GetOffsetChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <HAL_ADC_ConfigChannel+0x3aa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2103      	movs	r1, #3
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe ff30 	bl	8005004 <LL_ADC_GetOffsetChannel>
 80061a4:	4603      	mov	r3, r0
 80061a6:	0e9b      	lsrs	r3, r3, #26
 80061a8:	f003 021f 	and.w	r2, r3, #31
 80061ac:	e017      	b.n	80061de <HAL_ADC_ConfigChannel+0x3da>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2103      	movs	r1, #3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe ff25 	bl	8005004 <LL_ADC_GetOffsetChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80061c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80061ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80061d0:	2320      	movs	r3, #32
 80061d2:	e003      	b.n	80061dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80061d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d105      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x3f2>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	0e9b      	lsrs	r3, r3, #26
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	e011      	b.n	800621a <HAL_ADC_ConfigChannel+0x416>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061fe:	fa93 f3a3 	rbit	r3, r3
 8006202:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006206:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800620e:	2320      	movs	r3, #32
 8006210:	e003      	b.n	800621a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006214:	fab3 f383 	clz	r3, r3
 8006218:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800621a:	429a      	cmp	r2, r3
 800621c:	d106      	bne.n	800622c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	2103      	movs	r1, #3
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe ff02 	bl	8005030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff f881 	bl	8005338 <LL_ADC_IsEnabled>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 813d 	bne.w	80064b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6819      	ldr	r1, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fe ffd2 	bl	80051f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4aa2      	ldr	r2, [pc, #648]	@ (80064e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	f040 812e 	bne.w	80064b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x480>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	0e9b      	lsrs	r3, r3, #26
 8006272:	3301      	adds	r3, #1
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2b09      	cmp	r3, #9
 800627a:	bf94      	ite	ls
 800627c:	2301      	movls	r3, #1
 800627e:	2300      	movhi	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e019      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x4b4>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006294:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800629c:	2320      	movs	r3, #32
 800629e:	e003      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80062a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062a2:	fab3 f383 	clz	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	bf94      	ite	ls
 80062b2:	2301      	movls	r3, #1
 80062b4:	2300      	movhi	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d079      	beq.n	80063b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d107      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x4d4>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0e9b      	lsrs	r3, r3, #26
 80062ce:	3301      	adds	r3, #1
 80062d0:	069b      	lsls	r3, r3, #26
 80062d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062d6:	e015      	b.n	8006304 <HAL_ADC_ConfigChannel+0x500>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e0:	fa93 f3a3 	rbit	r3, r3
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80062e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80062ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80062f0:	2320      	movs	r3, #32
 80062f2:	e003      	b.n	80062fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80062f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3301      	adds	r3, #1
 80062fe:	069b      	lsls	r3, r3, #26
 8006300:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x520>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	0e9b      	lsrs	r3, r3, #26
 8006316:	3301      	adds	r3, #1
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2101      	movs	r1, #1
 800631e:	fa01 f303 	lsl.w	r3, r1, r3
 8006322:	e017      	b.n	8006354 <HAL_ADC_ConfigChannel+0x550>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800632c:	fa93 f3a3 	rbit	r3, r3
 8006330:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800633c:	2320      	movs	r3, #32
 800633e:	e003      	b.n	8006348 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006342:	fab3 f383 	clz	r3, r3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3301      	adds	r3, #1
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2101      	movs	r1, #1
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	ea42 0103 	orr.w	r1, r2, r3
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <HAL_ADC_ConfigChannel+0x576>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0e9b      	lsrs	r3, r3, #26
 800636a:	3301      	adds	r3, #1
 800636c:	f003 021f 	and.w	r2, r3, #31
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	051b      	lsls	r3, r3, #20
 8006378:	e018      	b.n	80063ac <HAL_ADC_ConfigChannel+0x5a8>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	fa93 f3a3 	rbit	r3, r3
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006392:	2320      	movs	r3, #32
 8006394:	e003      	b.n	800639e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	fab3 f383 	clz	r3, r3
 800639c:	b2db      	uxtb	r3, r3
 800639e:	3301      	adds	r3, #1
 80063a0:	f003 021f 	and.w	r2, r3, #31
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063ac:	430b      	orrs	r3, r1
 80063ae:	e07e      	b.n	80064ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d107      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x5c8>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	0e9b      	lsrs	r3, r3, #26
 80063c2:	3301      	adds	r3, #1
 80063c4:	069b      	lsls	r3, r3, #26
 80063c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063ca:	e015      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x5f4>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	fa93 f3a3 	rbit	r3, r3
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80063e4:	2320      	movs	r3, #32
 80063e6:	e003      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	fab3 f383 	clz	r3, r3
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	069b      	lsls	r3, r3, #26
 80063f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x614>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	0e9b      	lsrs	r3, r3, #26
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2101      	movs	r1, #1
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	e017      	b.n	8006448 <HAL_ADC_ConfigChannel+0x644>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	fa93 f3a3 	rbit	r3, r3
 8006424:	61fb      	str	r3, [r7, #28]
  return result;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006430:	2320      	movs	r3, #32
 8006432:	e003      	b.n	800643c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	3301      	adds	r3, #1
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2101      	movs	r1, #1
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
 8006448:	ea42 0103 	orr.w	r1, r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10d      	bne.n	8006474 <HAL_ADC_ConfigChannel+0x670>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	0e9b      	lsrs	r3, r3, #26
 800645e:	3301      	adds	r3, #1
 8006460:	f003 021f 	and.w	r2, r3, #31
 8006464:	4613      	mov	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	3b1e      	subs	r3, #30
 800646c:	051b      	lsls	r3, r3, #20
 800646e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006472:	e01b      	b.n	80064ac <HAL_ADC_ConfigChannel+0x6a8>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	fa93 f3a3 	rbit	r3, r3
 8006480:	613b      	str	r3, [r7, #16]
  return result;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800648c:	2320      	movs	r3, #32
 800648e:	e003      	b.n	8006498 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	fab3 f383 	clz	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	3301      	adds	r3, #1
 800649a:	f003 021f 	and.w	r2, r3, #31
 800649e:	4613      	mov	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	4413      	add	r3, r2
 80064a4:	3b1e      	subs	r3, #30
 80064a6:	051b      	lsls	r3, r3, #20
 80064a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b2:	4619      	mov	r1, r3
 80064b4:	f7fe fe72 	bl	800519c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80be 	beq.w	8006642 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ce:	d004      	beq.n	80064da <HAL_ADC_ConfigChannel+0x6d6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a04      	ldr	r2, [pc, #16]	@ (80064e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d10a      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x6ec>
 80064da:	4b04      	ldr	r3, [pc, #16]	@ (80064ec <HAL_ADC_ConfigChannel+0x6e8>)
 80064dc:	e009      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x6ee>
 80064de:	bf00      	nop
 80064e0:	407f0000 	.word	0x407f0000
 80064e4:	80080000 	.word	0x80080000
 80064e8:	50000100 	.word	0x50000100
 80064ec:	50000300 	.word	0x50000300
 80064f0:	4b59      	ldr	r3, [pc, #356]	@ (8006658 <HAL_ADC_ConfigChannel+0x854>)
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fd54 	bl	8004fa0 <LL_ADC_GetCommonPathInternalCh>
 80064f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a56      	ldr	r2, [pc, #344]	@ (800665c <HAL_ADC_ConfigChannel+0x858>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_ADC_ConfigChannel+0x70c>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a55      	ldr	r2, [pc, #340]	@ (8006660 <HAL_ADC_ConfigChannel+0x85c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d13a      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d134      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006524:	d005      	beq.n	8006532 <HAL_ADC_ConfigChannel+0x72e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a4e      	ldr	r2, [pc, #312]	@ (8006664 <HAL_ADC_ConfigChannel+0x860>)
 800652c:	4293      	cmp	r3, r2
 800652e:	f040 8085 	bne.w	800663c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800653a:	d004      	beq.n	8006546 <HAL_ADC_ConfigChannel+0x742>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a49      	ldr	r2, [pc, #292]	@ (8006668 <HAL_ADC_ConfigChannel+0x864>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <HAL_ADC_ConfigChannel+0x746>
 8006546:	4a49      	ldr	r2, [pc, #292]	@ (800666c <HAL_ADC_ConfigChannel+0x868>)
 8006548:	e000      	b.n	800654c <HAL_ADC_ConfigChannel+0x748>
 800654a:	4a43      	ldr	r2, [pc, #268]	@ (8006658 <HAL_ADC_ConfigChannel+0x854>)
 800654c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006550:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe fd0f 	bl	8004f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800655c:	4b44      	ldr	r3, [pc, #272]	@ (8006670 <HAL_ADC_ConfigChannel+0x86c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	099b      	lsrs	r3, r3, #6
 8006562:	4a44      	ldr	r2, [pc, #272]	@ (8006674 <HAL_ADC_ConfigChannel+0x870>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	099b      	lsrs	r3, r3, #6
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	4613      	mov	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006576:	e002      	b.n	800657e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3b01      	subs	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f9      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006584:	e05a      	b.n	800663c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3b      	ldr	r2, [pc, #236]	@ (8006678 <HAL_ADC_ConfigChannel+0x874>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d125      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11f      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a31      	ldr	r2, [pc, #196]	@ (8006668 <HAL_ADC_ConfigChannel+0x864>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d104      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x7ac>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a34      	ldr	r2, [pc, #208]	@ (800667c <HAL_ADC_ConfigChannel+0x878>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d047      	beq.n	8006640 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b8:	d004      	beq.n	80065c4 <HAL_ADC_ConfigChannel+0x7c0>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2a      	ldr	r2, [pc, #168]	@ (8006668 <HAL_ADC_ConfigChannel+0x864>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x7c4>
 80065c4:	4a29      	ldr	r2, [pc, #164]	@ (800666c <HAL_ADC_ConfigChannel+0x868>)
 80065c6:	e000      	b.n	80065ca <HAL_ADC_ConfigChannel+0x7c6>
 80065c8:	4a23      	ldr	r2, [pc, #140]	@ (8006658 <HAL_ADC_ConfigChannel+0x854>)
 80065ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe fcd0 	bl	8004f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065da:	e031      	b.n	8006640 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a27      	ldr	r2, [pc, #156]	@ (8006680 <HAL_ADC_ConfigChannel+0x87c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d12d      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d127      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006668 <HAL_ADC_ConfigChannel+0x864>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006604:	d004      	beq.n	8006610 <HAL_ADC_ConfigChannel+0x80c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <HAL_ADC_ConfigChannel+0x864>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x810>
 8006610:	4a16      	ldr	r2, [pc, #88]	@ (800666c <HAL_ADC_ConfigChannel+0x868>)
 8006612:	e000      	b.n	8006616 <HAL_ADC_ConfigChannel+0x812>
 8006614:	4a10      	ldr	r2, [pc, #64]	@ (8006658 <HAL_ADC_ConfigChannel+0x854>)
 8006616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800661a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f7fe fcaa 	bl	8004f7a <LL_ADC_SetCommonPathInternalCh>
 8006626:	e00c      	b.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800663a:	e002      	b.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006640:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800664a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800664e:	4618      	mov	r0, r3
 8006650:	37d8      	adds	r7, #216	@ 0xd8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	50000700 	.word	0x50000700
 800665c:	c3210000 	.word	0xc3210000
 8006660:	90c00010 	.word	0x90c00010
 8006664:	50000600 	.word	0x50000600
 8006668:	50000100 	.word	0x50000100
 800666c:	50000300 	.word	0x50000300
 8006670:	20000224 	.word	0x20000224
 8006674:	053e2d63 	.word	0x053e2d63
 8006678:	c7520000 	.word	0xc7520000
 800667c:	50000500 	.word	0x50000500
 8006680:	cb840000 	.word	0xcb840000

08006684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800668c:	2300      	movs	r3, #0
 800668e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fe4f 	bl	8005338 <LL_ADC_IsEnabled>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d176      	bne.n	800678e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006798 <ADC_Enable+0x114>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b2:	f043 0210 	orr.w	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066be:	f043 0201 	orr.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e062      	b.n	8006790 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fe1e 	bl	8005310 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066dc:	d004      	beq.n	80066e8 <ADC_Enable+0x64>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2e      	ldr	r2, [pc, #184]	@ (800679c <ADC_Enable+0x118>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d101      	bne.n	80066ec <ADC_Enable+0x68>
 80066e8:	4b2d      	ldr	r3, [pc, #180]	@ (80067a0 <ADC_Enable+0x11c>)
 80066ea:	e000      	b.n	80066ee <ADC_Enable+0x6a>
 80066ec:	4b2d      	ldr	r3, [pc, #180]	@ (80067a4 <ADC_Enable+0x120>)
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fc56 	bl	8004fa0 <LL_ADC_GetCommonPathInternalCh>
 80066f4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80066f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d013      	beq.n	8006726 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066fe:	4b2a      	ldr	r3, [pc, #168]	@ (80067a8 <ADC_Enable+0x124>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	099b      	lsrs	r3, r3, #6
 8006704:	4a29      	ldr	r2, [pc, #164]	@ (80067ac <ADC_Enable+0x128>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006718:	e002      	b.n	8006720 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3b01      	subs	r3, #1
 800671e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f9      	bne.n	800671a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006726:	f7fe fc09 	bl	8004f3c <HAL_GetTick>
 800672a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800672c:	e028      	b.n	8006780 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fe00 	bl	8005338 <LL_ADC_IsEnabled>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fde4 	bl	8005310 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006748:	f7fe fbf8 	bl	8004f3c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d914      	bls.n	8006780 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d00d      	beq.n	8006780 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006768:	f043 0210 	orr.w	r2, r3, #16
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006774:	f043 0201 	orr.w	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e007      	b.n	8006790 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b01      	cmp	r3, #1
 800678c:	d1cf      	bne.n	800672e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	8000003f 	.word	0x8000003f
 800679c:	50000100 	.word	0x50000100
 80067a0:	50000300 	.word	0x50000300
 80067a4:	50000700 	.word	0x50000700
 80067a8:	20000224 	.word	0x20000224
 80067ac:	053e2d63 	.word	0x053e2d63

080067b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d14b      	bne.n	8006862 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fc85 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d032      	beq.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d12b      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006806:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11f      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006826:	e018      	b.n	800685a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d111      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff faaa 	bl	8005db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006860:	e00e      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fabe 	bl	8005df0 <HAL_ADC_ErrorCallback>
}
 8006874:	e004      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fa96 	bl	8005dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fa90 	bl	8005df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <LL_ADC_IsEnabled>:
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <LL_ADC_IsEnabled+0x18>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <LL_ADC_IsEnabled+0x1a>
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <LL_ADC_REG_IsConversionOngoing>:
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d101      	bne.n	8006916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006988:	b590      	push	{r4, r7, lr}
 800698a:	b0a1      	sub	sp, #132	@ 0x84
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e0e7      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80069ae:	2300      	movs	r3, #0
 80069b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80069b2:	2300      	movs	r3, #0
 80069b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069be:	d102      	bne.n	80069c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80069c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	e009      	b.n	80069da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a6e      	ldr	r2, [pc, #440]	@ (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d102      	bne.n	80069d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80069d0:	4b6d      	ldr	r3, [pc, #436]	@ (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	e001      	b.n	80069da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0be      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff ff7f 	bl	80068fe <LL_ADC_REG_IsConversionOngoing>
 8006a00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ff79 	bl	80068fe <LL_ADC_REG_IsConversionOngoing>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 80a0 	bne.w	8006b54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 809c 	bne.w	8006b54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a24:	d004      	beq.n	8006a30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a55      	ldr	r2, [pc, #340]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d101      	bne.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006a30:	4b56      	ldr	r3, [pc, #344]	@ (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006a32:	e000      	b.n	8006a36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006a34:	4b56      	ldr	r3, [pc, #344]	@ (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006a36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d04b      	beq.n	8006ad8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a52:	035b      	lsls	r3, r3, #13
 8006a54:	430b      	orrs	r3, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a64:	d004      	beq.n	8006a70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a45      	ldr	r2, [pc, #276]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10f      	bne.n	8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006a70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006a74:	f7ff ff30 	bl	80068d8 <LL_ADC_IsEnabled>
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4841      	ldr	r0, [pc, #260]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a7c:	f7ff ff2c 	bl	80068d8 <LL_ADC_IsEnabled>
 8006a80:	4603      	mov	r3, r0
 8006a82:	4323      	orrs	r3, r4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e012      	b.n	8006ab6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006a90:	483c      	ldr	r0, [pc, #240]	@ (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006a92:	f7ff ff21 	bl	80068d8 <LL_ADC_IsEnabled>
 8006a96:	4604      	mov	r4, r0
 8006a98:	483b      	ldr	r0, [pc, #236]	@ (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006a9a:	f7ff ff1d 	bl	80068d8 <LL_ADC_IsEnabled>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	431c      	orrs	r4, r3
 8006aa2:	483c      	ldr	r0, [pc, #240]	@ (8006b94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006aa4:	f7ff ff18 	bl	80068d8 <LL_ADC_IsEnabled>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4323      	orrs	r3, r4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d056      	beq.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	6811      	ldr	r1, [r2, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	6892      	ldr	r2, [r2, #8]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ad4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ad6:	e047      	b.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aec:	d004      	beq.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a23      	ldr	r2, [pc, #140]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10f      	bne.n	8006b18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006af8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006afc:	f7ff feec 	bl	80068d8 <LL_ADC_IsEnabled>
 8006b00:	4604      	mov	r4, r0
 8006b02:	481f      	ldr	r0, [pc, #124]	@ (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b04:	f7ff fee8 	bl	80068d8 <LL_ADC_IsEnabled>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4323      	orrs	r3, r4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bf0c      	ite	eq
 8006b10:	2301      	moveq	r3, #1
 8006b12:	2300      	movne	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e012      	b.n	8006b3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006b18:	481a      	ldr	r0, [pc, #104]	@ (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b1a:	f7ff fedd 	bl	80068d8 <LL_ADC_IsEnabled>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4819      	ldr	r0, [pc, #100]	@ (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b22:	f7ff fed9 	bl	80068d8 <LL_ADC_IsEnabled>
 8006b26:	4603      	mov	r3, r0
 8006b28:	431c      	orrs	r4, r3
 8006b2a:	481a      	ldr	r0, [pc, #104]	@ (8006b94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006b2c:	f7ff fed4 	bl	80068d8 <LL_ADC_IsEnabled>
 8006b30:	4603      	mov	r3, r0
 8006b32:	4323      	orrs	r3, r4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bf0c      	ite	eq
 8006b38:	2301      	moveq	r3, #1
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d012      	beq.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006b4a:	f023 030f 	bic.w	r3, r3, #15
 8006b4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006b50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b52:	e009      	b.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b58:	f043 0220 	orr.w	r2, r3, #32
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006b66:	e000      	b.n	8006b6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3784      	adds	r7, #132	@ 0x84
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd90      	pop	{r4, r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	50000100 	.word	0x50000100
 8006b84:	50000400 	.word	0x50000400
 8006b88:	50000500 	.word	0x50000500
 8006b8c:	50000300 	.word	0x50000300
 8006b90:	50000700 	.word	0x50000700
 8006b94:	50000600 	.word	0x50000600

08006b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <__NVIC_SetPriorityGrouping+0x44>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bca:	4a04      	ldr	r2, [pc, #16]	@ (8006bdc <__NVIC_SetPriorityGrouping+0x44>)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	60d3      	str	r3, [r2, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	e000ed00 	.word	0xe000ed00

08006be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006be4:	4b04      	ldr	r3, [pc, #16]	@ (8006bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	f003 0307 	and.w	r3, r3, #7
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	e000ed00 	.word	0xe000ed00

08006bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db0b      	blt.n	8006c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	f003 021f 	and.w	r2, r3, #31
 8006c14:	4907      	ldr	r1, [pc, #28]	@ (8006c34 <__NVIC_EnableIRQ+0x38>)
 8006c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000e100 	.word	0xe000e100

08006c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	6039      	str	r1, [r7, #0]
 8006c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	db0a      	blt.n	8006c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	490c      	ldr	r1, [pc, #48]	@ (8006c84 <__NVIC_SetPriority+0x4c>)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	0112      	lsls	r2, r2, #4
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c60:	e00a      	b.n	8006c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	4908      	ldr	r1, [pc, #32]	@ (8006c88 <__NVIC_SetPriority+0x50>)
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	3b04      	subs	r3, #4
 8006c70:	0112      	lsls	r2, r2, #4
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	440b      	add	r3, r1
 8006c76:	761a      	strb	r2, [r3, #24]
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	e000e100 	.word	0xe000e100
 8006c88:	e000ed00 	.word	0xe000ed00

08006c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b089      	sub	sp, #36	@ 0x24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f1c3 0307 	rsb	r3, r3, #7
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	bf28      	it	cs
 8006caa:	2304      	movcs	r3, #4
 8006cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	2b06      	cmp	r3, #6
 8006cb4:	d902      	bls.n	8006cbc <NVIC_EncodePriority+0x30>
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	3b03      	subs	r3, #3
 8006cba:	e000      	b.n	8006cbe <NVIC_EncodePriority+0x32>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	43da      	mvns	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	401a      	ands	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	43d9      	mvns	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce4:	4313      	orrs	r3, r2
         );
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3724      	adds	r7, #36	@ 0x24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d04:	d301      	bcc.n	8006d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d06:	2301      	movs	r3, #1
 8006d08:	e00f      	b.n	8006d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d34 <SysTick_Config+0x40>)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d12:	210f      	movs	r1, #15
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	f7ff ff8e 	bl	8006c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d1c:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <SysTick_Config+0x40>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d22:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <SysTick_Config+0x40>)
 8006d24:	2207      	movs	r2, #7
 8006d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	e000e010 	.word	0xe000e010

08006d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff ff29 	bl	8006b98 <__NVIC_SetPriorityGrouping>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d5c:	f7ff ff40 	bl	8006be0 <__NVIC_GetPriorityGrouping>
 8006d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	6978      	ldr	r0, [r7, #20]
 8006d68:	f7ff ff90 	bl	8006c8c <NVIC_EncodePriority>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff ff5f 	bl	8006c38 <__NVIC_SetPriority>
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	4603      	mov	r3, r0
 8006d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff33 	bl	8006bfc <__NVIC_EnableIRQ>
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff ffa4 	bl	8006cf4 <SysTick_Config>
 8006dac:	4603      	mov	r3, r0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e08d      	b.n	8006ee6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b47      	ldr	r3, [pc, #284]	@ (8006ef0 <HAL_DMA_Init+0x138>)
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d80f      	bhi.n	8006df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4b45      	ldr	r3, [pc, #276]	@ (8006ef4 <HAL_DMA_Init+0x13c>)
 8006dde:	4413      	add	r3, r2
 8006de0:	4a45      	ldr	r2, [pc, #276]	@ (8006ef8 <HAL_DMA_Init+0x140>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	009a      	lsls	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a42      	ldr	r2, [pc, #264]	@ (8006efc <HAL_DMA_Init+0x144>)
 8006df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006df4:	e00e      	b.n	8006e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <HAL_DMA_Init+0x148>)
 8006dfe:	4413      	add	r3, r2
 8006e00:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef8 <HAL_DMA_Init+0x140>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	009a      	lsls	r2, r3, #2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a3c      	ldr	r2, [pc, #240]	@ (8006f04 <HAL_DMA_Init+0x14c>)
 8006e12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa76 	bl	8007358 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e74:	d102      	bne.n	8006e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d010      	beq.n	8006ebc <HAL_DMA_Init+0x104>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d80c      	bhi.n	8006ebc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa96 	bl	80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	e008      	b.n	8006ece <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40020407 	.word	0x40020407
 8006ef4:	bffdfff8 	.word	0xbffdfff8
 8006ef8:	cccccccd 	.word	0xcccccccd
 8006efc:	40020000 	.word	0x40020000
 8006f00:	bffdfbf8 	.word	0xbffdfbf8
 8006f04:	40020400 	.word	0x40020400

08006f08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_DMA_Start_IT+0x20>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e066      	b.n	8006ff6 <HAL_DMA_Start_IT+0xee>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d155      	bne.n	8006fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f9bb 	bl	80072dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 020e 	orr.w	r2, r2, #14
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e00f      	b.n	8006fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0204 	bic.w	r2, r2, #4
 8006f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 020a 	orr.w	r2, r2, #10
 8006f9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e005      	b.n	8006ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d005      	beq.n	8007022 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2204      	movs	r2, #4
 800701a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	e037      	b.n	8007092 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 020e 	bic.w	r2, r2, #14
 8007030:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007040:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007056:	f003 021f 	and.w	r2, r3, #31
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	2101      	movs	r1, #1
 8007060:	fa01 f202 	lsl.w	r2, r1, r2
 8007064:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800706e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007086:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007090:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d00d      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2204      	movs	r2, #4
 80070cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	e047      	b.n	8007174 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 020e 	bic.w	r2, r2, #14
 80070f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	2101      	movs	r1, #1
 8007122:	fa01 f202 	lsl.w	r2, r1, r2
 8007126:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007130:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007148:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007152:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
    }
  }
  return status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2204      	movs	r2, #4
 80071a0:	409a      	lsls	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d026      	beq.n	80071f8 <HAL_DMA_IRQHandler+0x7a>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d021      	beq.n	80071f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0204 	bic.w	r2, r2, #4
 80071d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	f003 021f 	and.w	r2, r3, #31
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	2104      	movs	r1, #4
 80071e0:	fa01 f202 	lsl.w	r2, r1, r2
 80071e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d071      	beq.n	80072d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071f6:	e06c      	b.n	80072d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2202      	movs	r2, #2
 8007202:	409a      	lsls	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d02e      	beq.n	800726a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d029      	beq.n	800726a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 020a 	bic.w	r2, r2, #10
 8007232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007240:	f003 021f 	and.w	r2, r3, #31
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	2102      	movs	r1, #2
 800724a:	fa01 f202 	lsl.w	r2, r1, r2
 800724e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d038      	beq.n	80072d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007268:	e033      	b.n	80072d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	2208      	movs	r2, #8
 8007274:	409a      	lsls	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d02a      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d025      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 020e 	bic.w	r2, r2, #14
 8007296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729c:	f003 021f 	and.w	r2, r3, #31
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	2101      	movs	r1, #1
 80072a6:	fa01 f202 	lsl.w	r2, r1, r2
 80072aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
}
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80072f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	f003 021f 	and.w	r2, r3, #31
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	2101      	movs	r1, #1
 8007314:	fa01 f202 	lsl.w	r2, r1, r2
 8007318:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b10      	cmp	r3, #16
 8007328:	d108      	bne.n	800733c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800733a:	e007      	b.n	800734c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	4b16      	ldr	r3, [pc, #88]	@ (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007368:	429a      	cmp	r2, r3
 800736a:	d802      	bhi.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800736c:	4b15      	ldr	r3, [pc, #84]	@ (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e001      	b.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007372:	4b15      	ldr	r3, [pc, #84]	@ (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007374:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	3b08      	subs	r3, #8
 8007382:	4a12      	ldr	r2, [pc, #72]	@ (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007390:	089b      	lsrs	r3, r3, #2
 8007392:	009a      	lsls	r2, r3, #2
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	461a      	mov	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80073a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2201      	movs	r2, #1
 80073ac:	409a      	lsls	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40020407 	.word	0x40020407
 80073c4:	40020800 	.word	0x40020800
 80073c8:	40020820 	.word	0x40020820
 80073cc:	cccccccd 	.word	0xcccccccd
 80073d0:	40020880 	.word	0x40020880

080073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	461a      	mov	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a08      	ldr	r2, [pc, #32]	@ (8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80073f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2201      	movs	r2, #1
 8007402:	409a      	lsls	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	1000823f 	.word	0x1000823f
 8007418:	40020940 	.word	0x40020940

0800741c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800742a:	e15a      	b.n	80076e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	2101      	movs	r1, #1
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	4013      	ands	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 814c 	beq.w	80076dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d005      	beq.n	800745c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007458:	2b02      	cmp	r3, #2
 800745a:	d130      	bne.n	80074be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	2203      	movs	r2, #3
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	43db      	mvns	r3, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4013      	ands	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007492:	2201      	movs	r2, #1
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4013      	ands	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	f003 0201 	and.w	r2, r3, #1
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d017      	beq.n	80074fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	2203      	movs	r2, #3
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4013      	ands	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d123      	bne.n	800754e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	08da      	lsrs	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3208      	adds	r2, #8
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	220f      	movs	r2, #15
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	43db      	mvns	r3, r3
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4013      	ands	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	08da      	lsrs	r2, r3, #3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3208      	adds	r2, #8
 8007548:	6939      	ldr	r1, [r7, #16]
 800754a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	2203      	movs	r2, #3
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4013      	ands	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 0203 	and.w	r2, r3, #3
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80a6 	beq.w	80076dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007590:	4b5b      	ldr	r3, [pc, #364]	@ (8007700 <HAL_GPIO_Init+0x2e4>)
 8007592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007594:	4a5a      	ldr	r2, [pc, #360]	@ (8007700 <HAL_GPIO_Init+0x2e4>)
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	6613      	str	r3, [r2, #96]	@ 0x60
 800759c:	4b58      	ldr	r3, [pc, #352]	@ (8007700 <HAL_GPIO_Init+0x2e4>)
 800759e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075a8:	4a56      	ldr	r2, [pc, #344]	@ (8007704 <HAL_GPIO_Init+0x2e8>)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	089b      	lsrs	r3, r3, #2
 80075ae:	3302      	adds	r3, #2
 80075b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	220f      	movs	r2, #15
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	43db      	mvns	r3, r3
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4013      	ands	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80075d2:	d01f      	beq.n	8007614 <HAL_GPIO_Init+0x1f8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a4c      	ldr	r2, [pc, #304]	@ (8007708 <HAL_GPIO_Init+0x2ec>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d019      	beq.n	8007610 <HAL_GPIO_Init+0x1f4>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a4b      	ldr	r2, [pc, #300]	@ (800770c <HAL_GPIO_Init+0x2f0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_GPIO_Init+0x1f0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007710 <HAL_GPIO_Init+0x2f4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00d      	beq.n	8007608 <HAL_GPIO_Init+0x1ec>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a49      	ldr	r2, [pc, #292]	@ (8007714 <HAL_GPIO_Init+0x2f8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <HAL_GPIO_Init+0x1e8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a48      	ldr	r2, [pc, #288]	@ (8007718 <HAL_GPIO_Init+0x2fc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d101      	bne.n	8007600 <HAL_GPIO_Init+0x1e4>
 80075fc:	2305      	movs	r3, #5
 80075fe:	e00a      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 8007600:	2306      	movs	r3, #6
 8007602:	e008      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 8007604:	2304      	movs	r3, #4
 8007606:	e006      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 8007608:	2303      	movs	r3, #3
 800760a:	e004      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 800760c:	2302      	movs	r3, #2
 800760e:	e002      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <HAL_GPIO_Init+0x1fa>
 8007614:	2300      	movs	r3, #0
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	f002 0203 	and.w	r2, r2, #3
 800761c:	0092      	lsls	r2, r2, #2
 800761e:	4093      	lsls	r3, r2
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007626:	4937      	ldr	r1, [pc, #220]	@ (8007704 <HAL_GPIO_Init+0x2e8>)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	089b      	lsrs	r3, r3, #2
 800762c:	3302      	adds	r3, #2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007634:	4b39      	ldr	r3, [pc, #228]	@ (800771c <HAL_GPIO_Init+0x300>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	43db      	mvns	r3, r3
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4013      	ands	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007658:	4a30      	ldr	r2, [pc, #192]	@ (800771c <HAL_GPIO_Init+0x300>)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800765e:	4b2f      	ldr	r3, [pc, #188]	@ (800771c <HAL_GPIO_Init+0x300>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	43db      	mvns	r3, r3
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4013      	ands	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007682:	4a26      	ldr	r2, [pc, #152]	@ (800771c <HAL_GPIO_Init+0x300>)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007688:	4b24      	ldr	r3, [pc, #144]	@ (800771c <HAL_GPIO_Init+0x300>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	43db      	mvns	r3, r3
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4013      	ands	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80076ac:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <HAL_GPIO_Init+0x300>)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80076b2:	4b1a      	ldr	r3, [pc, #104]	@ (800771c <HAL_GPIO_Init+0x300>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4013      	ands	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076d6:	4a11      	ldr	r2, [pc, #68]	@ (800771c <HAL_GPIO_Init+0x300>)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3301      	adds	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f47f ae9d 	bne.w	800742c <HAL_GPIO_Init+0x10>
  }
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40021000 	.word	0x40021000
 8007704:	40010000 	.word	0x40010000
 8007708:	48000400 	.word	0x48000400
 800770c:	48000800 	.word	0x48000800
 8007710:	48000c00 	.word	0x48000c00
 8007714:	48001000 	.word	0x48001000
 8007718:	48001400 	.word	0x48001400
 800771c:	40010400 	.word	0x40010400

08007720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	e001      	b.n	8007742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	807b      	strh	r3, [r7, #2]
 800775c:	4613      	mov	r3, r2
 800775e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007760:	787b      	ldrb	r3, [r7, #1]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800776c:	e002      	b.n	8007774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800776e:	887a      	ldrh	r2, [r7, #2]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4013      	ands	r3, r2
 8007798:	041a      	lsls	r2, r3, #16
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43d9      	mvns	r1, r3
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	400b      	ands	r3, r1
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	619a      	str	r2, [r3, #24]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077be:	4b08      	ldr	r3, [pc, #32]	@ (80077e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d006      	beq.n	80077d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077ca:	4a05      	ldr	r2, [pc, #20]	@ (80077e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fb fac4 	bl	8002d60 <HAL_GPIO_EXTI_Callback>
  }
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40010400 	.word	0x40010400

080077e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d141      	bne.n	8007876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fe:	d131      	bne.n	8007864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007800:	4b47      	ldr	r3, [pc, #284]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007806:	4a46      	ldr	r2, [pc, #280]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800780c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007810:	4b43      	ldr	r3, [pc, #268]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007818:	4a41      	ldr	r2, [pc, #260]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800781a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800781e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007820:	4b40      	ldr	r3, [pc, #256]	@ (8007924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2232      	movs	r2, #50	@ 0x32
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	4a3f      	ldr	r2, [pc, #252]	@ (8007928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	0c9b      	lsrs	r3, r3, #18
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007836:	e002      	b.n	800783e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b01      	subs	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800783e:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800784a:	d102      	bne.n	8007852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f2      	bne.n	8007838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007852:	4b33      	ldr	r3, [pc, #204]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800785e:	d158      	bne.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e057      	b.n	8007914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007864:	4b2e      	ldr	r3, [pc, #184]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800786a:	4a2d      	ldr	r2, [pc, #180]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800786c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007874:	e04d      	b.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800787c:	d141      	bne.n	8007902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800787e:	4b28      	ldr	r3, [pc, #160]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788a:	d131      	bne.n	80078f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800788c:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007892:	4a23      	ldr	r2, [pc, #140]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800789c:	4b20      	ldr	r3, [pc, #128]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2232      	movs	r2, #50	@ 0x32
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	0c9b      	lsrs	r3, r3, #18
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078c2:	e002      	b.n	80078ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ca:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d6:	d102      	bne.n	80078de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f2      	bne.n	80078c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078de:	4b10      	ldr	r3, [pc, #64]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ea:	d112      	bne.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e011      	b.n	8007914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007900:	e007      	b.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007902:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800790a:	4a05      	ldr	r2, [pc, #20]	@ (8007920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800790c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40007000 	.word	0x40007000
 8007924:	20000224 	.word	0x20000224
 8007928:	431bde83 	.word	0x431bde83

0800792c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a04      	ldr	r2, [pc, #16]	@ (8007948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800793a:	6093      	str	r3, [r2, #8]
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40007000 	.word	0x40007000

0800794c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e2fe      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d075      	beq.n	8007a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800796a:	4b97      	ldr	r3, [pc, #604]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007974:	4b94      	ldr	r3, [pc, #592]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b0c      	cmp	r3, #12
 8007982:	d102      	bne.n	800798a <HAL_RCC_OscConfig+0x3e>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d002      	beq.n	8007990 <HAL_RCC_OscConfig+0x44>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d10b      	bne.n	80079a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007990:	4b8d      	ldr	r3, [pc, #564]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05b      	beq.n	8007a54 <HAL_RCC_OscConfig+0x108>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d157      	bne.n	8007a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e2d9      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b0:	d106      	bne.n	80079c0 <HAL_RCC_OscConfig+0x74>
 80079b2:	4b85      	ldr	r3, [pc, #532]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a84      	ldr	r2, [pc, #528]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e01d      	b.n	80079fc <HAL_RCC_OscConfig+0xb0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c8:	d10c      	bne.n	80079e4 <HAL_RCC_OscConfig+0x98>
 80079ca:	4b7f      	ldr	r3, [pc, #508]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a7e      	ldr	r2, [pc, #504]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	4b7c      	ldr	r3, [pc, #496]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a7b      	ldr	r2, [pc, #492]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e00b      	b.n	80079fc <HAL_RCC_OscConfig+0xb0>
 80079e4:	4b78      	ldr	r3, [pc, #480]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a77      	ldr	r2, [pc, #476]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4b75      	ldr	r3, [pc, #468]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a74      	ldr	r2, [pc, #464]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 80079f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d013      	beq.n	8007a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a04:	f7fd fa9a 	bl	8004f3c <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a0c:	f7fd fa96 	bl	8004f3c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b64      	cmp	r3, #100	@ 0x64
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e29e      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCC_OscConfig+0xc0>
 8007a2a:	e014      	b.n	8007a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fd fa86 	bl	8004f3c <HAL_GetTick>
 8007a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a34:	f7fd fa82 	bl	8004f3c <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	@ 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e28a      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a46:	4b60      	ldr	r3, [pc, #384]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0xe8>
 8007a52:	e000      	b.n	8007a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d075      	beq.n	8007b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a62:	4b59      	ldr	r3, [pc, #356]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 030c 	and.w	r3, r3, #12
 8007a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a6c:	4b56      	ldr	r3, [pc, #344]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d102      	bne.n	8007a82 <HAL_RCC_OscConfig+0x136>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d002      	beq.n	8007a88 <HAL_RCC_OscConfig+0x13c>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d11f      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a88:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x154>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e25d      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa0:	4b49      	ldr	r3, [pc, #292]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	061b      	lsls	r3, r3, #24
 8007aae:	4946      	ldr	r1, [pc, #280]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ab4:	4b45      	ldr	r3, [pc, #276]	@ (8007bcc <HAL_RCC_OscConfig+0x280>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd f9f3 	bl	8004ea4 <HAL_InitTick>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d043      	beq.n	8007b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e249      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d023      	beq.n	8007b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007adc:	f7fd fa2e 	bl	8004f3c <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae4:	f7fd fa2a 	bl	8004f3c <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e232      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af6:	4b34      	ldr	r3, [pc, #208]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b02:	4b31      	ldr	r3, [pc, #196]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	061b      	lsls	r3, r3, #24
 8007b10:	492d      	ldr	r1, [pc, #180]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	604b      	str	r3, [r1, #4]
 8007b16:	e01a      	b.n	8007b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b18:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b24:	f7fd fa0a 	bl	8004f3c <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b2c:	f7fd fa06 	bl	8004f3c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e20e      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b3e:	4b22      	ldr	r3, [pc, #136]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f0      	bne.n	8007b2c <HAL_RCC_OscConfig+0x1e0>
 8007b4a:	e000      	b.n	8007b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d041      	beq.n	8007bde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01c      	beq.n	8007b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b62:	4b19      	ldr	r3, [pc, #100]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b68:	4a17      	ldr	r2, [pc, #92]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b72:	f7fd f9e3 	bl	8004f3c <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b7a:	f7fd f9df 	bl	8004f3c <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e1e7      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0ef      	beq.n	8007b7a <HAL_RCC_OscConfig+0x22e>
 8007b9a:	e020      	b.n	8007bde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba2:	4a09      	ldr	r2, [pc, #36]	@ (8007bc8 <HAL_RCC_OscConfig+0x27c>)
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bac:	f7fd f9c6 	bl	8004f3c <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bb2:	e00d      	b.n	8007bd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb4:	f7fd f9c2 	bl	8004f3c <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d906      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e1ca      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
 8007bc6:	bf00      	nop
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	20000228 	.word	0x20000228
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1ea      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80a6 	beq.w	8007d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bf0:	4b84      	ldr	r3, [pc, #528]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_RCC_OscConfig+0x2b4>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <HAL_RCC_OscConfig+0x2b6>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00d      	beq.n	8007c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c06:	4b7f      	ldr	r3, [pc, #508]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c12:	4b7c      	ldr	r3, [pc, #496]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c22:	4b79      	ldr	r3, [pc, #484]	@ (8007e08 <HAL_RCC_OscConfig+0x4bc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d118      	bne.n	8007c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c2e:	4b76      	ldr	r3, [pc, #472]	@ (8007e08 <HAL_RCC_OscConfig+0x4bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a75      	ldr	r2, [pc, #468]	@ (8007e08 <HAL_RCC_OscConfig+0x4bc>)
 8007c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c3a:	f7fd f97f 	bl	8004f3c <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c42:	f7fd f97b 	bl	8004f3c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e183      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c54:	4b6c      	ldr	r3, [pc, #432]	@ (8007e08 <HAL_RCC_OscConfig+0x4bc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d108      	bne.n	8007c7a <HAL_RCC_OscConfig+0x32e>
 8007c68:	4b66      	ldr	r3, [pc, #408]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	4a65      	ldr	r2, [pc, #404]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c78:	e024      	b.n	8007cc4 <HAL_RCC_OscConfig+0x378>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b05      	cmp	r3, #5
 8007c80:	d110      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x358>
 8007c82:	4b60      	ldr	r3, [pc, #384]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c88:	4a5e      	ldr	r2, [pc, #376]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c8a:	f043 0304 	orr.w	r3, r3, #4
 8007c8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007c92:	4b5c      	ldr	r3, [pc, #368]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	4a5a      	ldr	r2, [pc, #360]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ca2:	e00f      	b.n	8007cc4 <HAL_RCC_OscConfig+0x378>
 8007ca4:	4b57      	ldr	r3, [pc, #348]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007caa:	4a56      	ldr	r2, [pc, #344]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007cb4:	4b53      	ldr	r3, [pc, #332]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	4a52      	ldr	r2, [pc, #328]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d016      	beq.n	8007cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ccc:	f7fd f936 	bl	8004f3c <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd2:	e00a      	b.n	8007cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd4:	f7fd f932 	bl	8004f3c <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e138      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cea:	4b46      	ldr	r3, [pc, #280]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0ed      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x388>
 8007cf8:	e015      	b.n	8007d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfa:	f7fd f91f 	bl	8004f3c <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d00:	e00a      	b.n	8007d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d02:	f7fd f91b 	bl	8004f3c <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e121      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d18:	4b3a      	ldr	r3, [pc, #232]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1ed      	bne.n	8007d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d26:	7ffb      	ldrb	r3, [r7, #31]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d2c:	4b35      	ldr	r3, [pc, #212]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d30:	4a34      	ldr	r2, [pc, #208]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d03c      	beq.n	8007dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01c      	beq.n	8007d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d52:	4a2c      	ldr	r2, [pc, #176]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d5c:	f7fd f8ee 	bl	8004f3c <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d64:	f7fd f8ea 	bl	8004f3c <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e0f2      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d76:	4b23      	ldr	r3, [pc, #140]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0ef      	beq.n	8007d64 <HAL_RCC_OscConfig+0x418>
 8007d84:	e01b      	b.n	8007dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d86:	4b1f      	ldr	r3, [pc, #124]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fd f8d1 	bl	8004f3c <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d9c:	e008      	b.n	8007db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d9e:	f7fd f8cd 	bl	8004f3c <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e0d5      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007db0:	4b14      	ldr	r3, [pc, #80]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1ef      	bne.n	8007d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 80c9 	beq.w	8007f5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	2b0c      	cmp	r3, #12
 8007dd2:	f000 8083 	beq.w	8007edc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d15e      	bne.n	8007e9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dde:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a08      	ldr	r2, [pc, #32]	@ (8007e04 <HAL_RCC_OscConfig+0x4b8>)
 8007de4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dea:	f7fd f8a7 	bl	8004f3c <HAL_GetTick>
 8007dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007df0:	e00c      	b.n	8007e0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df2:	f7fd f8a3 	bl	8004f3c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d905      	bls.n	8007e0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e0ab      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
 8007e04:	40021000 	.word	0x40021000
 8007e08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e0c:	4b55      	ldr	r3, [pc, #340]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1ec      	bne.n	8007df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e18:	4b52      	ldr	r3, [pc, #328]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	4b52      	ldr	r3, [pc, #328]	@ (8007f68 <HAL_RCC_OscConfig+0x61c>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6a11      	ldr	r1, [r2, #32]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e28:	3a01      	subs	r2, #1
 8007e2a:	0112      	lsls	r2, r2, #4
 8007e2c:	4311      	orrs	r1, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007e32:	0212      	lsls	r2, r2, #8
 8007e34:	4311      	orrs	r1, r2
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e3a:	0852      	lsrs	r2, r2, #1
 8007e3c:	3a01      	subs	r2, #1
 8007e3e:	0552      	lsls	r2, r2, #21
 8007e40:	4311      	orrs	r1, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e46:	0852      	lsrs	r2, r2, #1
 8007e48:	3a01      	subs	r2, #1
 8007e4a:	0652      	lsls	r2, r2, #25
 8007e4c:	4311      	orrs	r1, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e52:	06d2      	lsls	r2, r2, #27
 8007e54:	430a      	orrs	r2, r1
 8007e56:	4943      	ldr	r1, [pc, #268]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e5c:	4b41      	ldr	r3, [pc, #260]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a40      	ldr	r2, [pc, #256]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e68:	4b3e      	ldr	r3, [pc, #248]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e74:	f7fd f862 	bl	8004f3c <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e7c:	f7fd f85e 	bl	8004f3c <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e066      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e8e:	4b35      	ldr	r3, [pc, #212]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x530>
 8007e9a:	e05e      	b.n	8007f5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e9c:	4b31      	ldr	r3, [pc, #196]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a30      	ldr	r2, [pc, #192]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fd f848 	bl	8004f3c <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb0:	f7fd f844 	bl	8004f3c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e04c      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ec2:	4b28      	ldr	r3, [pc, #160]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ece:	4b25      	ldr	r3, [pc, #148]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	4924      	ldr	r1, [pc, #144]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007ed4:	4b25      	ldr	r3, [pc, #148]	@ (8007f6c <HAL_RCC_OscConfig+0x620>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	60cb      	str	r3, [r1, #12]
 8007eda:	e03e      	b.n	8007f5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e039      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8007f64 <HAL_RCC_OscConfig+0x618>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f003 0203 	and.w	r2, r3, #3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d12c      	bne.n	8007f56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	3b01      	subs	r3, #1
 8007f08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d123      	bne.n	8007f56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d11b      	bne.n	8007f56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d113      	bne.n	8007f56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d109      	bne.n	8007f56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d001      	beq.n	8007f5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40021000 	.word	0x40021000
 8007f68:	019f800c 	.word	0x019f800c
 8007f6c:	feeefffc 	.word	0xfeeefffc

08007f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e11e      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f88:	4b91      	ldr	r3, [pc, #580]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d910      	bls.n	8007fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f96:	4b8e      	ldr	r3, [pc, #568]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 020f 	bic.w	r2, r3, #15
 8007f9e:	498c      	ldr	r1, [pc, #560]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa6:	4b8a      	ldr	r3, [pc, #552]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e106      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d073      	beq.n	80080ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d129      	bne.n	8008020 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fcc:	4b81      	ldr	r3, [pc, #516]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0f4      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007fdc:	f000 f99e 	bl	800831c <RCC_GetSysClockFreqFromPLLSource>
 8007fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	4a7c      	ldr	r2, [pc, #496]	@ (80081d8 <HAL_RCC_ClockConfig+0x268>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d93f      	bls.n	800806a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007fea:	4b7a      	ldr	r3, [pc, #488]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d033      	beq.n	800806a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008006:	2b00      	cmp	r3, #0
 8008008:	d12f      	bne.n	800806a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800800a:	4b72      	ldr	r3, [pc, #456]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008012:	4a70      	ldr	r2, [pc, #448]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008018:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800801a:	2380      	movs	r3, #128	@ 0x80
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	e024      	b.n	800806a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d107      	bne.n	8008038 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008028:	4b6a      	ldr	r3, [pc, #424]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0c6      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008038:	4b66      	ldr	r3, [pc, #408]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0be      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008048:	f000 f8ce 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 800804c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4a61      	ldr	r2, [pc, #388]	@ (80081d8 <HAL_RCC_ClockConfig+0x268>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d909      	bls.n	800806a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008056:	4b5f      	ldr	r3, [pc, #380]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800805e:	4a5d      	ldr	r2, [pc, #372]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008064:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008066:	2380      	movs	r3, #128	@ 0x80
 8008068:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800806a:	4b5a      	ldr	r3, [pc, #360]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f023 0203 	bic.w	r2, r3, #3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4957      	ldr	r1, [pc, #348]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008078:	4313      	orrs	r3, r2
 800807a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800807c:	f7fc ff5e 	bl	8004f3c <HAL_GetTick>
 8008080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008082:	e00a      	b.n	800809a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008084:	f7fc ff5a 	bl	8004f3c <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e095      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800809a:	4b4e      	ldr	r3, [pc, #312]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 020c 	and.w	r2, r3, #12
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d1eb      	bne.n	8008084 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d023      	beq.n	8008100 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080c4:	4b43      	ldr	r3, [pc, #268]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4a42      	ldr	r2, [pc, #264]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d007      	beq.n	80080ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080dc:	4b3d      	ldr	r3, [pc, #244]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080e4:	4a3b      	ldr	r2, [pc, #236]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80080ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ec:	4b39      	ldr	r3, [pc, #228]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4936      	ldr	r1, [pc, #216]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	608b      	str	r3, [r1, #8]
 80080fe:	e008      	b.n	8008112 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b80      	cmp	r3, #128	@ 0x80
 8008104:	d105      	bne.n	8008112 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008106:	4b33      	ldr	r3, [pc, #204]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	4a32      	ldr	r2, [pc, #200]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800810c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008110:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008112:	4b2f      	ldr	r3, [pc, #188]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d21d      	bcs.n	800815c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008120:	4b2b      	ldr	r3, [pc, #172]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f023 020f 	bic.w	r2, r3, #15
 8008128:	4929      	ldr	r1, [pc, #164]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	4313      	orrs	r3, r2
 800812e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008130:	f7fc ff04 	bl	8004f3c <HAL_GetTick>
 8008134:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008136:	e00a      	b.n	800814e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008138:	f7fc ff00 	bl	8004f3c <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008146:	4293      	cmp	r3, r2
 8008148:	d901      	bls.n	800814e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e03b      	b.n	80081c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800814e:	4b20      	ldr	r3, [pc, #128]	@ (80081d0 <HAL_RCC_ClockConfig+0x260>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d1ed      	bne.n	8008138 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008168:	4b1a      	ldr	r3, [pc, #104]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	4917      	ldr	r1, [pc, #92]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008176:	4313      	orrs	r3, r2
 8008178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008186:	4b13      	ldr	r3, [pc, #76]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	490f      	ldr	r1, [pc, #60]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 8008196:	4313      	orrs	r3, r2
 8008198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800819a:	f000 f825 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 800819e:	4602      	mov	r2, r0
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <HAL_RCC_ClockConfig+0x264>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	490c      	ldr	r1, [pc, #48]	@ (80081dc <HAL_RCC_ClockConfig+0x26c>)
 80081ac:	5ccb      	ldrb	r3, [r1, r3]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	fa22 f303 	lsr.w	r3, r2, r3
 80081b6:	4a0a      	ldr	r2, [pc, #40]	@ (80081e0 <HAL_RCC_ClockConfig+0x270>)
 80081b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081ba:	4b0a      	ldr	r3, [pc, #40]	@ (80081e4 <HAL_RCC_ClockConfig+0x274>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc fe70 	bl	8004ea4 <HAL_InitTick>
 80081c4:	4603      	mov	r3, r0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40022000 	.word	0x40022000
 80081d4:	40021000 	.word	0x40021000
 80081d8:	04c4b400 	.word	0x04c4b400
 80081dc:	0800e130 	.word	0x0800e130
 80081e0:	20000224 	.word	0x20000224
 80081e4:	20000228 	.word	0x20000228

080081e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081ee:	4b2c      	ldr	r3, [pc, #176]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 030c 	and.w	r3, r3, #12
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d102      	bne.n	8008200 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081fa:	4b2a      	ldr	r3, [pc, #168]	@ (80082a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80081fc:	613b      	str	r3, [r7, #16]
 80081fe:	e047      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008200:	4b27      	ldr	r3, [pc, #156]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 030c 	and.w	r3, r3, #12
 8008208:	2b08      	cmp	r3, #8
 800820a:	d102      	bne.n	8008212 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800820c:	4b26      	ldr	r3, [pc, #152]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e03e      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008212:	4b23      	ldr	r3, [pc, #140]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 030c 	and.w	r3, r3, #12
 800821a:	2b0c      	cmp	r3, #12
 800821c:	d136      	bne.n	800828c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800821e:	4b20      	ldr	r3, [pc, #128]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008228:	4b1d      	ldr	r3, [pc, #116]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	091b      	lsrs	r3, r3, #4
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	3301      	adds	r3, #1
 8008234:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b03      	cmp	r3, #3
 800823a:	d10c      	bne.n	8008256 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800823c:	4a1a      	ldr	r2, [pc, #104]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	fbb2 f3f3 	udiv	r3, r2, r3
 8008244:	4a16      	ldr	r2, [pc, #88]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008246:	68d2      	ldr	r2, [r2, #12]
 8008248:	0a12      	lsrs	r2, r2, #8
 800824a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	617b      	str	r3, [r7, #20]
      break;
 8008254:	e00c      	b.n	8008270 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008256:	4a13      	ldr	r2, [pc, #76]	@ (80082a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	fbb2 f3f3 	udiv	r3, r2, r3
 800825e:	4a10      	ldr	r2, [pc, #64]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008260:	68d2      	ldr	r2, [r2, #12]
 8008262:	0a12      	lsrs	r2, r2, #8
 8008264:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008268:	fb02 f303 	mul.w	r3, r2, r3
 800826c:	617b      	str	r3, [r7, #20]
      break;
 800826e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008270:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	0e5b      	lsrs	r3, r3, #25
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	3301      	adds	r3, #1
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	e001      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008290:	693b      	ldr	r3, [r7, #16]
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40021000 	.word	0x40021000
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	016e3600 	.word	0x016e3600

080082ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b0:	4b03      	ldr	r3, [pc, #12]	@ (80082c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000224 	.word	0x20000224

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082c8:	f7ff fff0 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4904      	ldr	r1, [pc, #16]	@ (80082ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40021000 	.word	0x40021000
 80082ec:	0800e140 	.word	0x0800e140

080082f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082f4:	f7ff ffda 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082f8:	4602      	mov	r2, r0
 80082fa:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	0adb      	lsrs	r3, r3, #11
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	4904      	ldr	r1, [pc, #16]	@ (8008318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008306:	5ccb      	ldrb	r3, [r1, r3]
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40021000 	.word	0x40021000
 8008318:	0800e140 	.word	0x0800e140

0800831c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008322:	4b1e      	ldr	r3, [pc, #120]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800832c:	4b1b      	ldr	r3, [pc, #108]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b03      	cmp	r3, #3
 800833e:	d10c      	bne.n	800835a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008340:	4a17      	ldr	r2, [pc, #92]	@ (80083a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	fbb2 f3f3 	udiv	r3, r2, r3
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800834a:	68d2      	ldr	r2, [r2, #12]
 800834c:	0a12      	lsrs	r2, r2, #8
 800834e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	617b      	str	r3, [r7, #20]
    break;
 8008358:	e00c      	b.n	8008374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800835a:	4a12      	ldr	r2, [pc, #72]	@ (80083a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008362:	4a0e      	ldr	r2, [pc, #56]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008364:	68d2      	ldr	r2, [r2, #12]
 8008366:	0a12      	lsrs	r2, r2, #8
 8008368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800836c:	fb02 f303 	mul.w	r3, r2, r3
 8008370:	617b      	str	r3, [r7, #20]
    break;
 8008372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008374:	4b09      	ldr	r3, [pc, #36]	@ (800839c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	0e5b      	lsrs	r3, r3, #25
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	3301      	adds	r3, #1
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	fbb2 f3f3 	udiv	r3, r2, r3
 800838c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800838e:	687b      	ldr	r3, [r7, #4]
}
 8008390:	4618      	mov	r0, r3
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	40021000 	.word	0x40021000
 80083a0:	016e3600 	.word	0x016e3600
 80083a4:	00f42400 	.word	0x00f42400

080083a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083b0:	2300      	movs	r3, #0
 80083b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083b4:	2300      	movs	r3, #0
 80083b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8098 	beq.w	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083c6:	2300      	movs	r3, #0
 80083c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ca:	4b43      	ldr	r3, [pc, #268]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	4b40      	ldr	r3, [pc, #256]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083da:	4a3f      	ldr	r2, [pc, #252]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80083e2:	4b3d      	ldr	r3, [pc, #244]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ea:	60bb      	str	r3, [r7, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083ee:	2301      	movs	r3, #1
 80083f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083f2:	4b3a      	ldr	r3, [pc, #232]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a39      	ldr	r2, [pc, #228]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083fe:	f7fc fd9d 	bl	8004f3c <HAL_GetTick>
 8008402:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008404:	e009      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008406:	f7fc fd99 	bl	8004f3c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d902      	bls.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	74fb      	strb	r3, [r7, #19]
        break;
 8008418:	e005      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800841a:	4b30      	ldr	r3, [pc, #192]	@ (80084dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0ef      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008426:	7cfb      	ldrb	r3, [r7, #19]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d159      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800842c:	4b2a      	ldr	r3, [pc, #168]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800842e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008436:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d01e      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	429a      	cmp	r2, r3
 8008446:	d019      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008448:	4b23      	ldr	r3, [pc, #140]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008454:	4b20      	ldr	r3, [pc, #128]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	4a1f      	ldr	r2, [pc, #124]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800845c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008464:	4b1c      	ldr	r3, [pc, #112]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800846a:	4a1b      	ldr	r2, [pc, #108]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008474:	4a18      	ldr	r2, [pc, #96]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008486:	f7fc fd59 	bl	8004f3c <HAL_GetTick>
 800848a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800848c:	e00b      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800848e:	f7fc fd55 	bl	8004f3c <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800849c:	4293      	cmp	r3, r2
 800849e:	d902      	bls.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	74fb      	strb	r3, [r7, #19]
            break;
 80084a4:	e006      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0ec      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084b4:	7cfb      	ldrb	r3, [r7, #19]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10b      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ba:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c8:	4903      	ldr	r1, [pc, #12]	@ (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80084d0:	e008      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084d2:	7cfb      	ldrb	r3, [r7, #19]
 80084d4:	74bb      	strb	r3, [r7, #18]
 80084d6:	e005      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80084d8:	40021000 	.word	0x40021000
 80084dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	7cfb      	ldrb	r3, [r7, #19]
 80084e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084e4:	7c7b      	ldrb	r3, [r7, #17]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d105      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ee:	4aa6      	ldr	r2, [pc, #664]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008502:	4ba1      	ldr	r3, [pc, #644]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008508:	f023 0203 	bic.w	r2, r3, #3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	499d      	ldr	r1, [pc, #628]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008524:	4b98      	ldr	r3, [pc, #608]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800852a:	f023 020c 	bic.w	r2, r3, #12
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	4995      	ldr	r1, [pc, #596]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008534:	4313      	orrs	r3, r2
 8008536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008546:	4b90      	ldr	r3, [pc, #576]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	498c      	ldr	r1, [pc, #560]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008556:	4313      	orrs	r3, r2
 8008558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008568:	4b87      	ldr	r3, [pc, #540]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	4984      	ldr	r1, [pc, #528]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008578:	4313      	orrs	r3, r2
 800857a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800858a:	4b7f      	ldr	r3, [pc, #508]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	497b      	ldr	r1, [pc, #492]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085ac:	4b76      	ldr	r3, [pc, #472]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	4973      	ldr	r1, [pc, #460]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085ce:	4b6e      	ldr	r3, [pc, #440]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	496a      	ldr	r1, [pc, #424]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085f0:	4b65      	ldr	r3, [pc, #404]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	4962      	ldr	r1, [pc, #392]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008600:	4313      	orrs	r3, r2
 8008602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008612:	4b5d      	ldr	r3, [pc, #372]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	4959      	ldr	r1, [pc, #356]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008622:	4313      	orrs	r3, r2
 8008624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008634:	4b54      	ldr	r3, [pc, #336]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008636:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800863a:	f023 0203 	bic.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	4951      	ldr	r1, [pc, #324]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008644:	4313      	orrs	r3, r2
 8008646:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008656:	4b4c      	ldr	r3, [pc, #304]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	4948      	ldr	r1, [pc, #288]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008666:	4313      	orrs	r3, r2
 8008668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008674:	2b00      	cmp	r3, #0
 8008676:	d015      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008678:	4b43      	ldr	r3, [pc, #268]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800867a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800867e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008686:	4940      	ldr	r1, [pc, #256]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008696:	d105      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008698:	4b3b      	ldr	r3, [pc, #236]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	4a3a      	ldr	r2, [pc, #232]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800869e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d015      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086b0:	4b35      	ldr	r3, [pc, #212]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086be:	4932      	ldr	r1, [pc, #200]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086ce:	d105      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d015      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086e8:	4b27      	ldr	r3, [pc, #156]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	4924      	ldr	r1, [pc, #144]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008706:	d105      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008708:	4b1f      	ldr	r3, [pc, #124]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a1e      	ldr	r2, [pc, #120]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008712:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008720:	4b19      	ldr	r3, [pc, #100]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872e:	4916      	ldr	r1, [pc, #88]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800873e:	d105      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008740:	4b11      	ldr	r3, [pc, #68]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4a10      	ldr	r2, [pc, #64]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800874a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d019      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008758:	4b0b      	ldr	r3, [pc, #44]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800875a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	4908      	ldr	r1, [pc, #32]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008776:	d109      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008778:	4b03      	ldr	r3, [pc, #12]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4a02      	ldr	r2, [pc, #8]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008782:	60d3      	str	r3, [r2, #12]
 8008784:	e002      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008786:	bf00      	nop
 8008788:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d015      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008798:	4b29      	ldr	r3, [pc, #164]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	4926      	ldr	r1, [pc, #152]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b6:	d105      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087b8:	4b21      	ldr	r3, [pc, #132]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a20      	ldr	r2, [pc, #128]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d015      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80087d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087de:	4918      	ldr	r1, [pc, #96]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ee:	d105      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087f0:	4b13      	ldr	r3, [pc, #76]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	4a12      	ldr	r2, [pc, #72]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80087f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d015      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008808:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800880a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800880e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008816:	490a      	ldr	r1, [pc, #40]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008818:	4313      	orrs	r3, r2
 800881a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008822:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008826:	d105      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008828:	4b05      	ldr	r3, [pc, #20]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	4a04      	ldr	r2, [pc, #16]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800882e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008834:	7cbb      	ldrb	r3, [r7, #18]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40021000 	.word	0x40021000

08008844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e054      	b.n	8008900 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d111      	bne.n	8008886 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 ff92 	bl	800a794 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a23      	ldr	r2, [pc, #140]	@ (8008908 <HAL_TIM_Base_Init+0xc4>)
 800887c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2202      	movs	r2, #2
 800888a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f001 fadb 	bl	8009e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	080047f5 	.word	0x080047f5

0800890c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	d001      	beq.n	8008924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e04c      	b.n	80089be <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a26      	ldr	r2, [pc, #152]	@ (80089cc <HAL_TIM_Base_Start+0xc0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d022      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800893e:	d01d      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a22      	ldr	r2, [pc, #136]	@ (80089d0 <HAL_TIM_Base_Start+0xc4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d018      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a21      	ldr	r2, [pc, #132]	@ (80089d4 <HAL_TIM_Base_Start+0xc8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d013      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1f      	ldr	r2, [pc, #124]	@ (80089d8 <HAL_TIM_Base_Start+0xcc>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <HAL_TIM_Base_Start+0xd0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d009      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1c      	ldr	r2, [pc, #112]	@ (80089e0 <HAL_TIM_Base_Start+0xd4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIM_Base_Start+0x70>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1b      	ldr	r2, [pc, #108]	@ (80089e4 <HAL_TIM_Base_Start+0xd8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d115      	bne.n	80089a8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	4b19      	ldr	r3, [pc, #100]	@ (80089e8 <HAL_TIM_Base_Start+0xdc>)
 8008984:	4013      	ands	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b06      	cmp	r3, #6
 800898c:	d015      	beq.n	80089ba <HAL_TIM_Base_Start+0xae>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008994:	d011      	beq.n	80089ba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 0201 	orr.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a6:	e008      	b.n	80089ba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	e000      	b.n	80089bc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40013400 	.word	0x40013400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40015000 	.word	0x40015000
 80089e8:	00010007 	.word	0x00010007

080089ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e054      	b.n	8008aae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a26      	ldr	r2, [pc, #152]	@ (8008abc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d022      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2e:	d01d      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a22      	ldr	r2, [pc, #136]	@ (8008ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d018      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a21      	ldr	r2, [pc, #132]	@ (8008ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d013      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00e      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1e      	ldr	r2, [pc, #120]	@ (8008acc <HAL_TIM_Base_Start_IT+0xe0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d009      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d004      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d115      	bne.n	8008a98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	4b19      	ldr	r3, [pc, #100]	@ (8008ad8 <HAL_TIM_Base_Start_IT+0xec>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d015      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a84:	d011      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	e008      	b.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e000      	b.n	8008aac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800
 8008ac8:	40000c00 	.word	0x40000c00
 8008acc:	40013400 	.word	0x40013400
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40015000 	.word	0x40015000
 8008ad8:	00010007 	.word	0x00010007

08008adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e054      	b.n	8008b98 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d111      	bne.n	8008b1e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fe46 	bl	800a794 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d102      	bne.n	8008b16 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a23      	ldr	r2, [pc, #140]	@ (8008ba0 <HAL_TIM_PWM_Init+0xc4>)
 8008b14:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f001 f98f 	bl	8009e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	08008ba5 	.word	0x08008ba5

08008ba4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <HAL_TIM_PWM_Start+0x24>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	bf14      	ite	ne
 8008bd4:	2301      	movne	r3, #1
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	e03c      	b.n	8008c56 <HAL_TIM_PWM_Start+0x9e>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d109      	bne.n	8008bf6 <HAL_TIM_PWM_Start+0x3e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	bf14      	ite	ne
 8008bee:	2301      	movne	r3, #1
 8008bf0:	2300      	moveq	r3, #0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	e02f      	b.n	8008c56 <HAL_TIM_PWM_Start+0x9e>
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d109      	bne.n	8008c10 <HAL_TIM_PWM_Start+0x58>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	bf14      	ite	ne
 8008c08:	2301      	movne	r3, #1
 8008c0a:	2300      	moveq	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	e022      	b.n	8008c56 <HAL_TIM_PWM_Start+0x9e>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b0c      	cmp	r3, #12
 8008c14:	d109      	bne.n	8008c2a <HAL_TIM_PWM_Start+0x72>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	bf14      	ite	ne
 8008c22:	2301      	movne	r3, #1
 8008c24:	2300      	moveq	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	e015      	b.n	8008c56 <HAL_TIM_PWM_Start+0x9e>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d109      	bne.n	8008c44 <HAL_TIM_PWM_Start+0x8c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	bf14      	ite	ne
 8008c3c:	2301      	movne	r3, #1
 8008c3e:	2300      	moveq	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e008      	b.n	8008c56 <HAL_TIM_PWM_Start+0x9e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	bf14      	ite	ne
 8008c50:	2301      	movne	r3, #1
 8008c52:	2300      	moveq	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e0a6      	b.n	8008dac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <HAL_TIM_PWM_Start+0xb6>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c6c:	e023      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xfe>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d104      	bne.n	8008c7e <HAL_TIM_PWM_Start+0xc6>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c7c:	e01b      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xfe>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d104      	bne.n	8008c8e <HAL_TIM_PWM_Start+0xd6>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c8c:	e013      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xfe>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b0c      	cmp	r3, #12
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Start+0xe6>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c9c:	e00b      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xfe>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start+0xf6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cac:	e003      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xfe>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 fd42 	bl	800a748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8008db4 <HAL_TIM_PWM_Start+0x1fc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d018      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x148>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a39      	ldr	r2, [pc, #228]	@ (8008db8 <HAL_TIM_PWM_Start+0x200>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x148>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a37      	ldr	r2, [pc, #220]	@ (8008dbc <HAL_TIM_PWM_Start+0x204>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00e      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x148>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a36      	ldr	r2, [pc, #216]	@ (8008dc0 <HAL_TIM_PWM_Start+0x208>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d009      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x148>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a34      	ldr	r2, [pc, #208]	@ (8008dc4 <HAL_TIM_PWM_Start+0x20c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d004      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x148>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a33      	ldr	r2, [pc, #204]	@ (8008dc8 <HAL_TIM_PWM_Start+0x210>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d101      	bne.n	8008d04 <HAL_TIM_PWM_Start+0x14c>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <HAL_TIM_PWM_Start+0x14e>
 8008d04:	2300      	movs	r3, #0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a25      	ldr	r2, [pc, #148]	@ (8008db4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d022      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2c:	d01d      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a26      	ldr	r2, [pc, #152]	@ (8008dcc <HAL_TIM_PWM_Start+0x214>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d018      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a24      	ldr	r2, [pc, #144]	@ (8008dd0 <HAL_TIM_PWM_Start+0x218>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d013      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a23      	ldr	r2, [pc, #140]	@ (8008dd4 <HAL_TIM_PWM_Start+0x21c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00e      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a19      	ldr	r2, [pc, #100]	@ (8008db8 <HAL_TIM_PWM_Start+0x200>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d009      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <HAL_TIM_PWM_Start+0x204>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d004      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x1b2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a18      	ldr	r2, [pc, #96]	@ (8008dc8 <HAL_TIM_PWM_Start+0x210>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d115      	bne.n	8008d96 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	4b19      	ldr	r3, [pc, #100]	@ (8008dd8 <HAL_TIM_PWM_Start+0x220>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b06      	cmp	r3, #6
 8008d7a:	d015      	beq.n	8008da8 <HAL_TIM_PWM_Start+0x1f0>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d82:	d011      	beq.n	8008da8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d94:	e008      	b.n	8008da8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0201 	orr.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	e000      	b.n	8008daa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40013400 	.word	0x40013400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40014400 	.word	0x40014400
 8008dc4:	40014800 	.word	0x40014800
 8008dc8:	40015000 	.word	0x40015000
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	00010007 	.word	0x00010007

08008ddc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e04c      	b.n	8008e8a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d111      	bne.n	8008e20 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fcc5 	bl	800a794 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	@ (8008e94 <HAL_TIM_OnePulse_Init+0xb8>)
 8008e16:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f001 f80e 	bl	8009e54 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 0208 	bic.w	r2, r2, #8
 8008e46:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6819      	ldr	r1, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	08008e99 	.word	0x08008e99

08008e98 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ebc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ec4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ecc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ed4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d108      	bne.n	8008eee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d105      	bne.n	8008eee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee2:	7b7b      	ldrb	r3, [r7, #13]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d102      	bne.n	8008eee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ee8:	7b3b      	ldrb	r3, [r7, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d001      	beq.n	8008ef2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e059      	b.n	8008fa6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2202      	movs	r2, #2
 8008f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0202 	orr.w	r2, r2, #2
 8008f20:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0204 	orr.w	r2, r2, #4
 8008f30:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2201      	movs	r2, #1
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fc04 	bl	800a748 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2201      	movs	r2, #1
 8008f46:	2104      	movs	r1, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 fbfd 	bl	800a748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a17      	ldr	r2, [pc, #92]	@ (8008fb0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d018      	beq.n	8008f8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a15      	ldr	r2, [pc, #84]	@ (8008fb4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a14      	ldr	r2, [pc, #80]	@ (8008fb8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00e      	beq.n	8008f8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a12      	ldr	r2, [pc, #72]	@ (8008fbc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d009      	beq.n	8008f8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a11      	ldr	r2, [pc, #68]	@ (8008fc0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d004      	beq.n	8008f8a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d101      	bne.n	8008f8e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40012c00 	.word	0x40012c00
 8008fb4:	40013400 	.word	0x40013400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40014400 	.word	0x40014400
 8008fc0:	40014800 	.word	0x40014800
 8008fc4:	40015000 	.word	0x40015000

08008fc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e0a2      	b.n	8009122 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d111      	bne.n	800900c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 fbcf 	bl	800a794 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a4a      	ldr	r2, [pc, #296]	@ (800912c <HAL_TIM_Encoder_Init+0x164>)
 8009002:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6812      	ldr	r2, [r2, #0]
 800901e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f000 ff0e 	bl	8009e54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009060:	f023 0303 	bic.w	r3, r3, #3
 8009064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	4313      	orrs	r3, r2
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800907e:	f023 030c 	bic.w	r3, r3, #12
 8009082:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800908a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800908e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	4313      	orrs	r3, r2
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	011a      	lsls	r2, r3, #4
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	031b      	lsls	r3, r3, #12
 80090ae:	4313      	orrs	r3, r2
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80090bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80090c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4313      	orrs	r3, r2
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	08004959 	.word	0x08004959

08009130 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009140:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009148:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009150:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009158:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d110      	bne.n	8009182 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d102      	bne.n	800916c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009166:	7b7b      	ldrb	r3, [r7, #13]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d001      	beq.n	8009170 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e069      	b.n	8009244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009180:	e031      	b.n	80091e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b04      	cmp	r3, #4
 8009186:	d110      	bne.n	80091aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d102      	bne.n	8009194 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800918e:	7b3b      	ldrb	r3, [r7, #12]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d001      	beq.n	8009198 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e055      	b.n	8009244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091a8:	e01d      	b.n	80091e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d108      	bne.n	80091c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d105      	bne.n	80091c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091b6:	7b7b      	ldrb	r3, [r7, #13]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d102      	bne.n	80091c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091bc:	7b3b      	ldrb	r3, [r7, #12]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d001      	beq.n	80091c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e03e      	b.n	8009244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <HAL_TIM_Encoder_Start+0xc4>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d008      	beq.n	8009204 <HAL_TIM_Encoder_Start+0xd4>
 80091f2:	e00f      	b.n	8009214 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2201      	movs	r2, #1
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 faa3 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 8009202:	e016      	b.n	8009232 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2201      	movs	r2, #1
 800920a:	2104      	movs	r1, #4
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fa9b 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 8009212:	e00e      	b.n	8009232 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f001 fa93 	bl	800a748 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	2104      	movs	r1, #4
 800922a:	4618      	mov	r0, r3
 800922c:	f001 fa8c 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 8009230:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0201 	orr.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_TIM_Encoder_Stop+0x18>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b04      	cmp	r3, #4
 8009260:	d008      	beq.n	8009274 <HAL_TIM_Encoder_Stop+0x28>
 8009262:	e00f      	b.n	8009284 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f001 fa6b 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 8009272:	e016      	b.n	80092a2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2200      	movs	r2, #0
 800927a:	2104      	movs	r1, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f001 fa63 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 8009282:	e00e      	b.n	80092a2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2200      	movs	r2, #0
 800928a:	2100      	movs	r1, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f001 fa5b 	bl	800a748 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2200      	movs	r2, #0
 8009298:	2104      	movs	r1, #4
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fa54 	bl	800a748 <TIM_CCxChannelCmd>
      break;
 80092a0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6a1a      	ldr	r2, [r3, #32]
 80092a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10f      	bne.n	80092d2 <HAL_TIM_Encoder_Stop+0x86>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6a1a      	ldr	r2, [r3, #32]
 80092b8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80092bc:	4013      	ands	r3, r2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d107      	bne.n	80092d2 <HAL_TIM_Encoder_Stop+0x86>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <HAL_TIM_Encoder_Stop+0x92>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d148      	bne.n	8009370 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <HAL_TIM_Encoder_Stop+0xa2>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092ec:	e023      	b.n	8009336 <HAL_TIM_Encoder_Stop+0xea>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d104      	bne.n	80092fe <HAL_TIM_Encoder_Stop+0xb2>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092fc:	e01b      	b.n	8009336 <HAL_TIM_Encoder_Stop+0xea>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b08      	cmp	r3, #8
 8009302:	d104      	bne.n	800930e <HAL_TIM_Encoder_Stop+0xc2>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800930c:	e013      	b.n	8009336 <HAL_TIM_Encoder_Stop+0xea>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d104      	bne.n	800931e <HAL_TIM_Encoder_Stop+0xd2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800931c:	e00b      	b.n	8009336 <HAL_TIM_Encoder_Stop+0xea>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b10      	cmp	r3, #16
 8009322:	d104      	bne.n	800932e <HAL_TIM_Encoder_Stop+0xe2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800932c:	e003      	b.n	8009336 <HAL_TIM_Encoder_Stop+0xea>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d104      	bne.n	8009346 <HAL_TIM_Encoder_Stop+0xfa>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009344:	e024      	b.n	8009390 <HAL_TIM_Encoder_Stop+0x144>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b04      	cmp	r3, #4
 800934a:	d104      	bne.n	8009356 <HAL_TIM_Encoder_Stop+0x10a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009354:	e01c      	b.n	8009390 <HAL_TIM_Encoder_Stop+0x144>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b08      	cmp	r3, #8
 800935a:	d104      	bne.n	8009366 <HAL_TIM_Encoder_Stop+0x11a>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009364:	e014      	b.n	8009390 <HAL_TIM_Encoder_Stop+0x144>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800936e:	e00f      	b.n	8009390 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d026      	beq.n	800940a <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d021      	beq.n	800940a <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f06f 0202 	mvn.w	r2, #2
 80093ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	f003 0303 	and.w	r3, r3, #3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
 80093ee:	e009      	b.n	8009404 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d026      	beq.n	8009462 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d021      	beq.n	8009462 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f06f 0204 	mvn.w	r2, #4
 8009426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
 8009446:	e009      	b.n	800945c <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f003 0308 	and.w	r3, r3, #8
 8009468:	2b00      	cmp	r3, #0
 800946a:	d026      	beq.n	80094ba <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d021      	beq.n	80094ba <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f06f 0208 	mvn.w	r2, #8
 800947e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2204      	movs	r2, #4
 8009484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	f003 0303 	and.w	r3, r3, #3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
 800949e:	e009      	b.n	80094b4 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d026      	beq.n	8009512 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d021      	beq.n	8009512 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f06f 0210 	mvn.w	r2, #16
 80094d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2208      	movs	r2, #8
 80094dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
 80094f6:	e009      	b.n	800950c <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00e      	beq.n	800953a <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f06f 0201 	mvn.w	r2, #1
 800952e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00e      	beq.n	800956c <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00e      	beq.n	8009594 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00e      	beq.n	80095bc <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80095b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0220 	mvn.w	r2, #32
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d009      	beq.n	800960c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d009      	beq.n	800965c <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00e      	beq.n	8009684 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009684:	bf00      	nop
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d101      	bne.n	80096aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096a6:	2302      	movs	r3, #2
 80096a8:	e0ff      	b.n	80098aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b14      	cmp	r3, #20
 80096b6:	f200 80f0 	bhi.w	800989a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096ba:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	08009715 	.word	0x08009715
 80096c4:	0800989b 	.word	0x0800989b
 80096c8:	0800989b 	.word	0x0800989b
 80096cc:	0800989b 	.word	0x0800989b
 80096d0:	08009755 	.word	0x08009755
 80096d4:	0800989b 	.word	0x0800989b
 80096d8:	0800989b 	.word	0x0800989b
 80096dc:	0800989b 	.word	0x0800989b
 80096e0:	08009797 	.word	0x08009797
 80096e4:	0800989b 	.word	0x0800989b
 80096e8:	0800989b 	.word	0x0800989b
 80096ec:	0800989b 	.word	0x0800989b
 80096f0:	080097d7 	.word	0x080097d7
 80096f4:	0800989b 	.word	0x0800989b
 80096f8:	0800989b 	.word	0x0800989b
 80096fc:	0800989b 	.word	0x0800989b
 8009700:	08009819 	.word	0x08009819
 8009704:	0800989b 	.word	0x0800989b
 8009708:	0800989b 	.word	0x0800989b
 800970c:	0800989b 	.word	0x0800989b
 8009710:	08009859 	.word	0x08009859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fc4e 	bl	8009fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0208 	orr.w	r2, r2, #8
 800972e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0204 	bic.w	r2, r2, #4
 800973e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6999      	ldr	r1, [r3, #24]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	619a      	str	r2, [r3, #24]
      break;
 8009752:	e0a5      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fcc8 	bl	800a0f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699a      	ldr	r2, [r3, #24]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800976e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699a      	ldr	r2, [r3, #24]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800977e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6999      	ldr	r1, [r3, #24]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	021a      	lsls	r2, r3, #8
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	619a      	str	r2, [r3, #24]
      break;
 8009794:	e084      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fd3b 	bl	800a218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69da      	ldr	r2, [r3, #28]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0208 	orr.w	r2, r2, #8
 80097b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69da      	ldr	r2, [r3, #28]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0204 	bic.w	r2, r2, #4
 80097c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69d9      	ldr	r1, [r3, #28]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	691a      	ldr	r2, [r3, #16]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	61da      	str	r2, [r3, #28]
      break;
 80097d4:	e064      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fdad 	bl	800a33c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69da      	ldr	r2, [r3, #28]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69da      	ldr	r2, [r3, #28]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69d9      	ldr	r1, [r3, #28]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	021a      	lsls	r2, r3, #8
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	61da      	str	r2, [r3, #28]
      break;
 8009816:	e043      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68b9      	ldr	r1, [r7, #8]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fe20 	bl	800a464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0208 	orr.w	r2, r2, #8
 8009832:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0204 	bic.w	r2, r2, #4
 8009842:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	691a      	ldr	r2, [r3, #16]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009856:	e023      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fe6a 	bl	800a538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009872:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009882:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	021a      	lsls	r2, r3, #8
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009898:	e002      	b.n	80098a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	75fb      	strb	r3, [r7, #23]
      break;
 800989e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop

080098b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_TIM_ConfigClockSource+0x1c>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e0f6      	b.n	8009abe <HAL_TIM_ConfigClockSource+0x20a>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80098ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a6f      	ldr	r2, [pc, #444]	@ (8009ac8 <HAL_TIM_ConfigClockSource+0x214>)
 800990a:	4293      	cmp	r3, r2
 800990c:	f000 80c1 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009910:	4a6d      	ldr	r2, [pc, #436]	@ (8009ac8 <HAL_TIM_ConfigClockSource+0x214>)
 8009912:	4293      	cmp	r3, r2
 8009914:	f200 80c6 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009918:	4a6c      	ldr	r2, [pc, #432]	@ (8009acc <HAL_TIM_ConfigClockSource+0x218>)
 800991a:	4293      	cmp	r3, r2
 800991c:	f000 80b9 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009920:	4a6a      	ldr	r2, [pc, #424]	@ (8009acc <HAL_TIM_ConfigClockSource+0x218>)
 8009922:	4293      	cmp	r3, r2
 8009924:	f200 80be 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009928:	4a69      	ldr	r2, [pc, #420]	@ (8009ad0 <HAL_TIM_ConfigClockSource+0x21c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	f000 80b1 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009930:	4a67      	ldr	r2, [pc, #412]	@ (8009ad0 <HAL_TIM_ConfigClockSource+0x21c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	f200 80b6 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009938:	4a66      	ldr	r2, [pc, #408]	@ (8009ad4 <HAL_TIM_ConfigClockSource+0x220>)
 800993a:	4293      	cmp	r3, r2
 800993c:	f000 80a9 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009940:	4a64      	ldr	r2, [pc, #400]	@ (8009ad4 <HAL_TIM_ConfigClockSource+0x220>)
 8009942:	4293      	cmp	r3, r2
 8009944:	f200 80ae 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009948:	4a63      	ldr	r2, [pc, #396]	@ (8009ad8 <HAL_TIM_ConfigClockSource+0x224>)
 800994a:	4293      	cmp	r3, r2
 800994c:	f000 80a1 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009950:	4a61      	ldr	r2, [pc, #388]	@ (8009ad8 <HAL_TIM_ConfigClockSource+0x224>)
 8009952:	4293      	cmp	r3, r2
 8009954:	f200 80a6 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009958:	4a60      	ldr	r2, [pc, #384]	@ (8009adc <HAL_TIM_ConfigClockSource+0x228>)
 800995a:	4293      	cmp	r3, r2
 800995c:	f000 8099 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009960:	4a5e      	ldr	r2, [pc, #376]	@ (8009adc <HAL_TIM_ConfigClockSource+0x228>)
 8009962:	4293      	cmp	r3, r2
 8009964:	f200 809e 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009968:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800996c:	f000 8091 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009970:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009974:	f200 8096 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997c:	f000 8089 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 8009980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009984:	f200 808e 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800998c:	d03e      	beq.n	8009a0c <HAL_TIM_ConfigClockSource+0x158>
 800998e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009992:	f200 8087 	bhi.w	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800999a:	f000 8086 	beq.w	8009aaa <HAL_TIM_ConfigClockSource+0x1f6>
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a2:	d87f      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099a4:	2b70      	cmp	r3, #112	@ 0x70
 80099a6:	d01a      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x12a>
 80099a8:	2b70      	cmp	r3, #112	@ 0x70
 80099aa:	d87b      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099ac:	2b60      	cmp	r3, #96	@ 0x60
 80099ae:	d050      	beq.n	8009a52 <HAL_TIM_ConfigClockSource+0x19e>
 80099b0:	2b60      	cmp	r3, #96	@ 0x60
 80099b2:	d877      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099b4:	2b50      	cmp	r3, #80	@ 0x50
 80099b6:	d03c      	beq.n	8009a32 <HAL_TIM_ConfigClockSource+0x17e>
 80099b8:	2b50      	cmp	r3, #80	@ 0x50
 80099ba:	d873      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099bc:	2b40      	cmp	r3, #64	@ 0x40
 80099be:	d058      	beq.n	8009a72 <HAL_TIM_ConfigClockSource+0x1be>
 80099c0:	2b40      	cmp	r3, #64	@ 0x40
 80099c2:	d86f      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099c4:	2b30      	cmp	r3, #48	@ 0x30
 80099c6:	d064      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 80099c8:	2b30      	cmp	r3, #48	@ 0x30
 80099ca:	d86b      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d060      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d867      	bhi.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d05c      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 80099d8:	2b10      	cmp	r3, #16
 80099da:	d05a      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x1de>
 80099dc:	e062      	b.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099ee:	f000 fe8b 	bl	800a708 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	609a      	str	r2, [r3, #8]
      break;
 8009a0a:	e04f      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a1c:	f000 fe74 	bl	800a708 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a2e:	609a      	str	r2, [r3, #8]
      break;
 8009a30:	e03c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f000 fde6 	bl	800a610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2150      	movs	r1, #80	@ 0x50
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fe3f 	bl	800a6ce <TIM_ITRx_SetConfig>
      break;
 8009a50:	e02c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f000 fe05 	bl	800a66e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2160      	movs	r1, #96	@ 0x60
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fe2f 	bl	800a6ce <TIM_ITRx_SetConfig>
      break;
 8009a70:	e01c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f000 fdc6 	bl	800a610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2140      	movs	r1, #64	@ 0x40
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fe1f 	bl	800a6ce <TIM_ITRx_SetConfig>
      break;
 8009a90:	e00c      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f000 fe16 	bl	800a6ce <TIM_ITRx_SetConfig>
      break;
 8009aa2:	e003      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa8:	e000      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	00100070 	.word	0x00100070
 8009acc:	00100060 	.word	0x00100060
 8009ad0:	00100050 	.word	0x00100050
 8009ad4:	00100040 	.word	0x00100040
 8009ad8:	00100030 	.word	0x00100030
 8009adc:	00100020 	.word	0x00100020

08009ae0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e14a      	b.n	8009e46 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	f040 80dd 	bne.w	8009d78 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	2b1f      	cmp	r3, #31
 8009bc2:	f200 80d6 	bhi.w	8009d72 <HAL_TIM_RegisterCallback+0x1de>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <HAL_TIM_RegisterCallback+0x38>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c4d 	.word	0x08009c4d
 8009bd0:	08009c55 	.word	0x08009c55
 8009bd4:	08009c5d 	.word	0x08009c5d
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c6d 	.word	0x08009c6d
 8009be0:	08009c75 	.word	0x08009c75
 8009be4:	08009c7d 	.word	0x08009c7d
 8009be8:	08009c85 	.word	0x08009c85
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c95 	.word	0x08009c95
 8009bf4:	08009c9d 	.word	0x08009c9d
 8009bf8:	08009ca5 	.word	0x08009ca5
 8009bfc:	08009cad 	.word	0x08009cad
 8009c00:	08009cb5 	.word	0x08009cb5
 8009c04:	08009cbf 	.word	0x08009cbf
 8009c08:	08009cc9 	.word	0x08009cc9
 8009c0c:	08009cd3 	.word	0x08009cd3
 8009c10:	08009cdd 	.word	0x08009cdd
 8009c14:	08009ce7 	.word	0x08009ce7
 8009c18:	08009cf1 	.word	0x08009cf1
 8009c1c:	08009cfb 	.word	0x08009cfb
 8009c20:	08009d05 	.word	0x08009d05
 8009c24:	08009d0f 	.word	0x08009d0f
 8009c28:	08009d19 	.word	0x08009d19
 8009c2c:	08009d23 	.word	0x08009d23
 8009c30:	08009d2d 	.word	0x08009d2d
 8009c34:	08009d37 	.word	0x08009d37
 8009c38:	08009d41 	.word	0x08009d41
 8009c3c:	08009d4b 	.word	0x08009d4b
 8009c40:	08009d55 	.word	0x08009d55
 8009c44:	08009d5f 	.word	0x08009d5f
 8009c48:	08009d69 	.word	0x08009d69
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009c52:	e0f7      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009c5a:	e0f3      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009c62:	e0ef      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009c6a:	e0eb      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009c72:	e0e7      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009c7a:	e0e3      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009c82:	e0df      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009c8a:	e0db      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009c92:	e0d7      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009c9a:	e0d3      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009ca2:	e0cf      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009caa:	e0cb      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009cb2:	e0c7      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009cbc:	e0c2      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009cc6:	e0bd      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009cd0:	e0b8      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009cda:	e0b3      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009ce4:	e0ae      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009cee:	e0a9      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009cf8:	e0a4      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d02:	e09f      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d0c:	e09a      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d16:	e095      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d20:	e090      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d2a:	e08b      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d34:	e086      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009d3e:	e081      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009d48:	e07c      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009d52:	e077      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009d5c:	e072      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d66:	e06d      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009d70:	e068      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
        break;
 8009d76:	e065      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d15d      	bne.n	8009e40 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	2b0d      	cmp	r3, #13
 8009d88:	d857      	bhi.n	8009e3a <HAL_TIM_RegisterCallback+0x2a6>
 8009d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <HAL_TIM_RegisterCallback+0x1fc>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009dd1 	.word	0x08009dd1
 8009d98:	08009dd9 	.word	0x08009dd9
 8009d9c:	08009de1 	.word	0x08009de1
 8009da0:	08009de9 	.word	0x08009de9
 8009da4:	08009df1 	.word	0x08009df1
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009e01 	.word	0x08009e01
 8009db0:	08009e09 	.word	0x08009e09
 8009db4:	08009e11 	.word	0x08009e11
 8009db8:	08009e19 	.word	0x08009e19
 8009dbc:	08009e21 	.word	0x08009e21
 8009dc0:	08009e29 	.word	0x08009e29
 8009dc4:	08009e31 	.word	0x08009e31
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009dce:	e039      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009dd6:	e035      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009dde:	e031      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009de6:	e02d      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009dee:	e029      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009df6:	e025      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009dfe:	e021      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009e06:	e01d      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009e0e:	e019      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009e16:	e015      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009e1e:	e011      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009e26:	e00d      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009e2e:	e009      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009e38:	e004      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8009e3e:	e001      	b.n	8009e44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a4c      	ldr	r2, [pc, #304]	@ (8009f98 <TIM_Base_SetConfig+0x144>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d017      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e72:	d013      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a49      	ldr	r2, [pc, #292]	@ (8009f9c <TIM_Base_SetConfig+0x148>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00f      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a48      	ldr	r2, [pc, #288]	@ (8009fa0 <TIM_Base_SetConfig+0x14c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00b      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a47      	ldr	r2, [pc, #284]	@ (8009fa4 <TIM_Base_SetConfig+0x150>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d007      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a46      	ldr	r2, [pc, #280]	@ (8009fa8 <TIM_Base_SetConfig+0x154>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d003      	beq.n	8009e9c <TIM_Base_SetConfig+0x48>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a45      	ldr	r2, [pc, #276]	@ (8009fac <TIM_Base_SetConfig+0x158>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d108      	bne.n	8009eae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a39      	ldr	r2, [pc, #228]	@ (8009f98 <TIM_Base_SetConfig+0x144>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d023      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ebc:	d01f      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a36      	ldr	r2, [pc, #216]	@ (8009f9c <TIM_Base_SetConfig+0x148>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01b      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a35      	ldr	r2, [pc, #212]	@ (8009fa0 <TIM_Base_SetConfig+0x14c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d017      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a34      	ldr	r2, [pc, #208]	@ (8009fa4 <TIM_Base_SetConfig+0x150>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d013      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a33      	ldr	r2, [pc, #204]	@ (8009fa8 <TIM_Base_SetConfig+0x154>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00f      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a33      	ldr	r2, [pc, #204]	@ (8009fb0 <TIM_Base_SetConfig+0x15c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00b      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a32      	ldr	r2, [pc, #200]	@ (8009fb4 <TIM_Base_SetConfig+0x160>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d007      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a31      	ldr	r2, [pc, #196]	@ (8009fb8 <TIM_Base_SetConfig+0x164>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d003      	beq.n	8009efe <TIM_Base_SetConfig+0xaa>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8009fac <TIM_Base_SetConfig+0x158>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d108      	bne.n	8009f10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a18      	ldr	r2, [pc, #96]	@ (8009f98 <TIM_Base_SetConfig+0x144>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d013      	beq.n	8009f64 <TIM_Base_SetConfig+0x110>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009fa8 <TIM_Base_SetConfig+0x154>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00f      	beq.n	8009f64 <TIM_Base_SetConfig+0x110>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a1a      	ldr	r2, [pc, #104]	@ (8009fb0 <TIM_Base_SetConfig+0x15c>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00b      	beq.n	8009f64 <TIM_Base_SetConfig+0x110>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a19      	ldr	r2, [pc, #100]	@ (8009fb4 <TIM_Base_SetConfig+0x160>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d007      	beq.n	8009f64 <TIM_Base_SetConfig+0x110>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a18      	ldr	r2, [pc, #96]	@ (8009fb8 <TIM_Base_SetConfig+0x164>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_Base_SetConfig+0x110>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a13      	ldr	r2, [pc, #76]	@ (8009fac <TIM_Base_SetConfig+0x158>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d103      	bne.n	8009f6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d105      	bne.n	8009f8a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	f023 0201 	bic.w	r2, r3, #1
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	611a      	str	r2, [r3, #16]
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40012c00 	.word	0x40012c00
 8009f9c:	40000400 	.word	0x40000400
 8009fa0:	40000800 	.word	0x40000800
 8009fa4:	40000c00 	.word	0x40000c00
 8009fa8:	40013400 	.word	0x40013400
 8009fac:	40015000 	.word	0x40015000
 8009fb0:	40014000 	.word	0x40014000
 8009fb4:	40014400 	.word	0x40014400
 8009fb8:	40014800 	.word	0x40014800

08009fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	f023 0201 	bic.w	r2, r3, #1
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f023 0302 	bic.w	r3, r3, #2
 800a008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a30      	ldr	r2, [pc, #192]	@ (800a0d8 <TIM_OC1_SetConfig+0x11c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <TIM_OC1_SetConfig+0x88>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a2f      	ldr	r2, [pc, #188]	@ (800a0dc <TIM_OC1_SetConfig+0x120>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00f      	beq.n	800a044 <TIM_OC1_SetConfig+0x88>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a2e      	ldr	r2, [pc, #184]	@ (800a0e0 <TIM_OC1_SetConfig+0x124>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00b      	beq.n	800a044 <TIM_OC1_SetConfig+0x88>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a2d      	ldr	r2, [pc, #180]	@ (800a0e4 <TIM_OC1_SetConfig+0x128>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d007      	beq.n	800a044 <TIM_OC1_SetConfig+0x88>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a2c      	ldr	r2, [pc, #176]	@ (800a0e8 <TIM_OC1_SetConfig+0x12c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d003      	beq.n	800a044 <TIM_OC1_SetConfig+0x88>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a2b      	ldr	r2, [pc, #172]	@ (800a0ec <TIM_OC1_SetConfig+0x130>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d10c      	bne.n	800a05e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f023 0308 	bic.w	r3, r3, #8
 800a04a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f023 0304 	bic.w	r3, r3, #4
 800a05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d8 <TIM_OC1_SetConfig+0x11c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d013      	beq.n	800a08e <TIM_OC1_SetConfig+0xd2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a1c      	ldr	r2, [pc, #112]	@ (800a0dc <TIM_OC1_SetConfig+0x120>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00f      	beq.n	800a08e <TIM_OC1_SetConfig+0xd2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a1b      	ldr	r2, [pc, #108]	@ (800a0e0 <TIM_OC1_SetConfig+0x124>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00b      	beq.n	800a08e <TIM_OC1_SetConfig+0xd2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a1a      	ldr	r2, [pc, #104]	@ (800a0e4 <TIM_OC1_SetConfig+0x128>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d007      	beq.n	800a08e <TIM_OC1_SetConfig+0xd2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a19      	ldr	r2, [pc, #100]	@ (800a0e8 <TIM_OC1_SetConfig+0x12c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_OC1_SetConfig+0xd2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a18      	ldr	r2, [pc, #96]	@ (800a0ec <TIM_OC1_SetConfig+0x130>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d111      	bne.n	800a0b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a09c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	621a      	str	r2, [r3, #32]
}
 800a0cc:	bf00      	nop
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40012c00 	.word	0x40012c00
 800a0dc:	40013400 	.word	0x40013400
 800a0e0:	40014000 	.word	0x40014000
 800a0e4:	40014400 	.word	0x40014400
 800a0e8:	40014800 	.word	0x40014800
 800a0ec:	40015000 	.word	0x40015000

0800a0f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	f023 0210 	bic.w	r2, r3, #16
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 0320 	bic.w	r3, r3, #32
 800a13e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a2c      	ldr	r2, [pc, #176]	@ (800a200 <TIM_OC2_SetConfig+0x110>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d007      	beq.n	800a164 <TIM_OC2_SetConfig+0x74>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a2b      	ldr	r2, [pc, #172]	@ (800a204 <TIM_OC2_SetConfig+0x114>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_OC2_SetConfig+0x74>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a2a      	ldr	r2, [pc, #168]	@ (800a208 <TIM_OC2_SetConfig+0x118>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d10d      	bne.n	800a180 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a17e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a1f      	ldr	r2, [pc, #124]	@ (800a200 <TIM_OC2_SetConfig+0x110>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <TIM_OC2_SetConfig+0xc0>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a1e      	ldr	r2, [pc, #120]	@ (800a204 <TIM_OC2_SetConfig+0x114>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00f      	beq.n	800a1b0 <TIM_OC2_SetConfig+0xc0>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a1e      	ldr	r2, [pc, #120]	@ (800a20c <TIM_OC2_SetConfig+0x11c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d00b      	beq.n	800a1b0 <TIM_OC2_SetConfig+0xc0>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a1d      	ldr	r2, [pc, #116]	@ (800a210 <TIM_OC2_SetConfig+0x120>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d007      	beq.n	800a1b0 <TIM_OC2_SetConfig+0xc0>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a214 <TIM_OC2_SetConfig+0x124>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_OC2_SetConfig+0xc0>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a17      	ldr	r2, [pc, #92]	@ (800a208 <TIM_OC2_SetConfig+0x118>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d113      	bne.n	800a1d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	621a      	str	r2, [r3, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40012c00 	.word	0x40012c00
 800a204:	40013400 	.word	0x40013400
 800a208:	40015000 	.word	0x40015000
 800a20c:	40014000 	.word	0x40014000
 800a210:	40014400 	.word	0x40014400
 800a214:	40014800 	.word	0x40014800

0800a218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a2b      	ldr	r2, [pc, #172]	@ (800a324 <TIM_OC3_SetConfig+0x10c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d007      	beq.n	800a28a <TIM_OC3_SetConfig+0x72>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a2a      	ldr	r2, [pc, #168]	@ (800a328 <TIM_OC3_SetConfig+0x110>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d003      	beq.n	800a28a <TIM_OC3_SetConfig+0x72>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a29      	ldr	r2, [pc, #164]	@ (800a32c <TIM_OC3_SetConfig+0x114>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d10d      	bne.n	800a2a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	021b      	lsls	r3, r3, #8
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a324 <TIM_OC3_SetConfig+0x10c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d013      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xbe>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a328 <TIM_OC3_SetConfig+0x110>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00f      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xbe>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a330 <TIM_OC3_SetConfig+0x118>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00b      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xbe>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a1c      	ldr	r2, [pc, #112]	@ (800a334 <TIM_OC3_SetConfig+0x11c>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d007      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xbe>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a338 <TIM_OC3_SetConfig+0x120>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_OC3_SetConfig+0xbe>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a16      	ldr	r2, [pc, #88]	@ (800a32c <TIM_OC3_SetConfig+0x114>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d113      	bne.n	800a2fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	621a      	str	r2, [r3, #32]
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40012c00 	.word	0x40012c00
 800a328:	40013400 	.word	0x40013400
 800a32c:	40015000 	.word	0x40015000
 800a330:	40014000 	.word	0x40014000
 800a334:	40014400 	.word	0x40014400
 800a338:	40014800 	.word	0x40014800

0800a33c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	031b      	lsls	r3, r3, #12
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a2c      	ldr	r2, [pc, #176]	@ (800a44c <TIM_OC4_SetConfig+0x110>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d007      	beq.n	800a3b0 <TIM_OC4_SetConfig+0x74>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a2b      	ldr	r2, [pc, #172]	@ (800a450 <TIM_OC4_SetConfig+0x114>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d003      	beq.n	800a3b0 <TIM_OC4_SetConfig+0x74>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a454 <TIM_OC4_SetConfig+0x118>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10d      	bne.n	800a3cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	031b      	lsls	r3, r3, #12
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a44c <TIM_OC4_SetConfig+0x110>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d013      	beq.n	800a3fc <TIM_OC4_SetConfig+0xc0>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a450 <TIM_OC4_SetConfig+0x114>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00f      	beq.n	800a3fc <TIM_OC4_SetConfig+0xc0>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a1e      	ldr	r2, [pc, #120]	@ (800a458 <TIM_OC4_SetConfig+0x11c>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00b      	beq.n	800a3fc <TIM_OC4_SetConfig+0xc0>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a1d      	ldr	r2, [pc, #116]	@ (800a45c <TIM_OC4_SetConfig+0x120>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d007      	beq.n	800a3fc <TIM_OC4_SetConfig+0xc0>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a1c      	ldr	r2, [pc, #112]	@ (800a460 <TIM_OC4_SetConfig+0x124>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_OC4_SetConfig+0xc0>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a17      	ldr	r2, [pc, #92]	@ (800a454 <TIM_OC4_SetConfig+0x118>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d113      	bne.n	800a424 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a402:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a40a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	019b      	lsls	r3, r3, #6
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4313      	orrs	r3, r2
 800a416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	019b      	lsls	r3, r3, #6
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	4313      	orrs	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	40012c00 	.word	0x40012c00
 800a450:	40013400 	.word	0x40013400
 800a454:	40015000 	.word	0x40015000
 800a458:	40014000 	.word	0x40014000
 800a45c:	40014400 	.word	0x40014400
 800a460:	40014800 	.word	0x40014800

0800a464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a4a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a19      	ldr	r2, [pc, #100]	@ (800a520 <TIM_OC5_SetConfig+0xbc>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d013      	beq.n	800a4e6 <TIM_OC5_SetConfig+0x82>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a18      	ldr	r2, [pc, #96]	@ (800a524 <TIM_OC5_SetConfig+0xc0>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00f      	beq.n	800a4e6 <TIM_OC5_SetConfig+0x82>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a17      	ldr	r2, [pc, #92]	@ (800a528 <TIM_OC5_SetConfig+0xc4>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00b      	beq.n	800a4e6 <TIM_OC5_SetConfig+0x82>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a16      	ldr	r2, [pc, #88]	@ (800a52c <TIM_OC5_SetConfig+0xc8>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d007      	beq.n	800a4e6 <TIM_OC5_SetConfig+0x82>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a15      	ldr	r2, [pc, #84]	@ (800a530 <TIM_OC5_SetConfig+0xcc>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d003      	beq.n	800a4e6 <TIM_OC5_SetConfig+0x82>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a14      	ldr	r2, [pc, #80]	@ (800a534 <TIM_OC5_SetConfig+0xd0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d109      	bne.n	800a4fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	021b      	lsls	r3, r3, #8
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	621a      	str	r2, [r3, #32]
}
 800a514:	bf00      	nop
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	40012c00 	.word	0x40012c00
 800a524:	40013400 	.word	0x40013400
 800a528:	40014000 	.word	0x40014000
 800a52c:	40014400 	.word	0x40014400
 800a530:	40014800 	.word	0x40014800
 800a534:	40015000 	.word	0x40015000

0800a538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a56a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a57e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	051b      	lsls	r3, r3, #20
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4313      	orrs	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f8 <TIM_OC6_SetConfig+0xc0>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d013      	beq.n	800a5bc <TIM_OC6_SetConfig+0x84>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a19      	ldr	r2, [pc, #100]	@ (800a5fc <TIM_OC6_SetConfig+0xc4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00f      	beq.n	800a5bc <TIM_OC6_SetConfig+0x84>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a18      	ldr	r2, [pc, #96]	@ (800a600 <TIM_OC6_SetConfig+0xc8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00b      	beq.n	800a5bc <TIM_OC6_SetConfig+0x84>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a17      	ldr	r2, [pc, #92]	@ (800a604 <TIM_OC6_SetConfig+0xcc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d007      	beq.n	800a5bc <TIM_OC6_SetConfig+0x84>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a16      	ldr	r2, [pc, #88]	@ (800a608 <TIM_OC6_SetConfig+0xd0>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d003      	beq.n	800a5bc <TIM_OC6_SetConfig+0x84>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a15      	ldr	r2, [pc, #84]	@ (800a60c <TIM_OC6_SetConfig+0xd4>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d109      	bne.n	800a5d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	029b      	lsls	r3, r3, #10
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	621a      	str	r2, [r3, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40012c00 	.word	0x40012c00
 800a5fc:	40013400 	.word	0x40013400
 800a600:	40014000 	.word	0x40014000
 800a604:	40014400 	.word	0x40014400
 800a608:	40014800 	.word	0x40014800
 800a60c:	40015000 	.word	0x40015000

0800a610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f023 0201 	bic.w	r2, r3, #1
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a63a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	4313      	orrs	r3, r2
 800a644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f023 030a 	bic.w	r3, r3, #10
 800a64c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	621a      	str	r2, [r3, #32]
}
 800a662:	bf00      	nop
 800a664:	371c      	adds	r7, #28
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66e:	b480      	push	{r7}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	f023 0210 	bic.w	r2, r3, #16
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	031b      	lsls	r3, r3, #12
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a6aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	621a      	str	r2, [r3, #32]
}
 800a6c2:	bf00      	nop
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	f043 0307 	orr.w	r3, r3, #7
 800a6f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	609a      	str	r2, [r3, #8]
}
 800a6fc:	bf00      	nop
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	021a      	lsls	r2, r3, #8
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	431a      	orrs	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4313      	orrs	r3, r2
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	609a      	str	r2, [r3, #8]
}
 800a73c:	bf00      	nop
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	2201      	movs	r2, #1
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6a1a      	ldr	r2, [r3, #32]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	43db      	mvns	r3, r3
 800a76a:	401a      	ands	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1a      	ldr	r2, [r3, #32]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f003 031f 	and.w	r3, r3, #31
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	fa01 f303 	lsl.w	r3, r1, r3
 800a780:	431a      	orrs	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	621a      	str	r2, [r3, #32]
}
 800a786:	bf00      	nop
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
	...

0800a794 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a26      	ldr	r2, [pc, #152]	@ (800a838 <TIM_ResetCallback+0xa4>)
 800a7a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a25      	ldr	r2, [pc, #148]	@ (800a83c <TIM_ResetCallback+0xa8>)
 800a7a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a24      	ldr	r2, [pc, #144]	@ (800a840 <TIM_ResetCallback+0xac>)
 800a7b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a23      	ldr	r2, [pc, #140]	@ (800a844 <TIM_ResetCallback+0xb0>)
 800a7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a22      	ldr	r2, [pc, #136]	@ (800a848 <TIM_ResetCallback+0xb4>)
 800a7c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a21      	ldr	r2, [pc, #132]	@ (800a84c <TIM_ResetCallback+0xb8>)
 800a7c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a20      	ldr	r2, [pc, #128]	@ (800a850 <TIM_ResetCallback+0xbc>)
 800a7d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800a854 <TIM_ResetCallback+0xc0>)
 800a7d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a1e      	ldr	r2, [pc, #120]	@ (800a858 <TIM_ResetCallback+0xc4>)
 800a7e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <TIM_ResetCallback+0xc8>)
 800a7e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a1c      	ldr	r2, [pc, #112]	@ (800a860 <TIM_ResetCallback+0xcc>)
 800a7f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a864 <TIM_ResetCallback+0xd0>)
 800a7f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a868 <TIM_ResetCallback+0xd4>)
 800a800:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a19      	ldr	r2, [pc, #100]	@ (800a86c <TIM_ResetCallback+0xd8>)
 800a808:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a18      	ldr	r2, [pc, #96]	@ (800a870 <TIM_ResetCallback+0xdc>)
 800a810:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a17      	ldr	r2, [pc, #92]	@ (800a874 <TIM_ResetCallback+0xe0>)
 800a818:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a16      	ldr	r2, [pc, #88]	@ (800a878 <TIM_ResetCallback+0xe4>)
 800a820:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a15      	ldr	r2, [pc, #84]	@ (800a87c <TIM_ResetCallback+0xe8>)
 800a828:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	08002e29 	.word	0x08002e29
 800a83c:	08009ae1 	.word	0x08009ae1
 800a840:	08009b59 	.word	0x08009b59
 800a844:	08009b6d 	.word	0x08009b6d
 800a848:	08009b09 	.word	0x08009b09
 800a84c:	08009b1d 	.word	0x08009b1d
 800a850:	08009af5 	.word	0x08009af5
 800a854:	08009b31 	.word	0x08009b31
 800a858:	08009b45 	.word	0x08009b45
 800a85c:	08009b81 	.word	0x08009b81
 800a860:	0800aad5 	.word	0x0800aad5
 800a864:	0800aae9 	.word	0x0800aae9
 800a868:	0800aafd 	.word	0x0800aafd
 800a86c:	0800ab11 	.word	0x0800ab11
 800a870:	0800ab25 	.word	0x0800ab25
 800a874:	0800ab39 	.word	0x0800ab39
 800a878:	0800ab4d 	.word	0x0800ab4d
 800a87c:	0800ab61 	.word	0x0800ab61

0800a880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d101      	bne.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a894:	2302      	movs	r3, #2
 800a896:	e074      	b.n	800a982 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a34      	ldr	r2, [pc, #208]	@ (800a990 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d009      	beq.n	800a8d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a33      	ldr	r2, [pc, #204]	@ (800a994 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d004      	beq.n	800a8d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a31      	ldr	r2, [pc, #196]	@ (800a998 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d108      	bne.n	800a8e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a21      	ldr	r2, [pc, #132]	@ (800a990 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d022      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a918:	d01d      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a1f      	ldr	r2, [pc, #124]	@ (800a99c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d018      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d013      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1c      	ldr	r2, [pc, #112]	@ (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d00e      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a15      	ldr	r2, [pc, #84]	@ (800a994 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d009      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a18      	ldr	r2, [pc, #96]	@ (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d004      	beq.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a11      	ldr	r2, [pc, #68]	@ (800a998 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d10c      	bne.n	800a970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a95c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	4313      	orrs	r3, r2
 800a966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	40012c00 	.word	0x40012c00
 800a994:	40013400 	.word	0x40013400
 800a998:	40015000 	.word	0x40015000
 800a99c:	40000400 	.word	0x40000400
 800a9a0:	40000800 	.word	0x40000800
 800a9a4:	40000c00 	.word	0x40000c00
 800a9a8:	40014000 	.word	0x40014000

0800a9ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d101      	bne.n	800a9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e078      	b.n	800aaba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	041b      	lsls	r3, r3, #16
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a1c      	ldr	r2, [pc, #112]	@ (800aac8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d009      	beq.n	800aa6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a1b      	ldr	r2, [pc, #108]	@ (800aacc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d004      	beq.n	800aa6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a19      	ldr	r2, [pc, #100]	@ (800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d11c      	bne.n	800aaa8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa78:	051b      	lsls	r3, r3, #20
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	40012c00 	.word	0x40012c00
 800aacc:	40013400 	.word	0x40013400
 800aad0:	40015000 	.word	0x40015000

0800aad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e050      	b.n	800ac28 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d114      	bne.n	800abba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fde5 	bl	800b768 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a21      	ldr	r2, [pc, #132]	@ (800ac30 <HAL_UART_Init+0xbc>)
 800abac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2224      	movs	r2, #36	@ 0x24
 800abbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 f912 	bl	800be04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fe13 	bl	800b80c <UART_SetConfig>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e01b      	b.n	800ac28 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800abfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0201 	orr.w	r2, r2, #1
 800ac1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f991 	bl	800bf48 <UART_CheckIdleState>
 800ac26:	4603      	mov	r3, r0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	08004b1d 	.word	0x08004b1d

0800ac34 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b087      	sub	sp, #28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e09c      	b.n	800ad9a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d16c      	bne.n	800ad44 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ac6a:	7afb      	ldrb	r3, [r7, #11]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d85e      	bhi.n	800ad2e <HAL_UART_RegisterCallback+0xfa>
 800ac70:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <HAL_UART_RegisterCallback+0x44>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800acad 	.word	0x0800acad
 800ac7c:	0800acb7 	.word	0x0800acb7
 800ac80:	0800acc1 	.word	0x0800acc1
 800ac84:	0800accb 	.word	0x0800accb
 800ac88:	0800acd5 	.word	0x0800acd5
 800ac8c:	0800acdf 	.word	0x0800acdf
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800acf3 	.word	0x0800acf3
 800ac98:	0800acfd 	.word	0x0800acfd
 800ac9c:	0800ad07 	.word	0x0800ad07
 800aca0:	0800ad11 	.word	0x0800ad11
 800aca4:	0800ad1b 	.word	0x0800ad1b
 800aca8:	0800ad25 	.word	0x0800ad25
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800acb4:	e070      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800acbe:	e06b      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800acc8:	e066      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800acd2:	e061      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800acdc:	e05c      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ace6:	e057      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800acf0:	e052      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800acfa:	e04d      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ad04:	e048      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ad0e:	e043      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ad18:	e03e      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ad22:	e039      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ad2c:	e034      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	75fb      	strb	r3, [r7, #23]
        break;
 800ad42:	e029      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d11a      	bne.n	800ad84 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	2b0b      	cmp	r3, #11
 800ad52:	d002      	beq.n	800ad5a <HAL_UART_RegisterCallback+0x126>
 800ad54:	2b0c      	cmp	r3, #12
 800ad56:	d005      	beq.n	800ad64 <HAL_UART_RegisterCallback+0x130>
 800ad58:	e009      	b.n	800ad6e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ad62:	e019      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ad6c:	e014      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	75fb      	strb	r3, [r7, #23]
        break;
 800ad82:	e009      	b.n	800ad98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop

0800ada8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	@ 0x28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d167      	bne.n	800ae90 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <HAL_UART_Transmit_DMA+0x24>
 800adc6:	88fb      	ldrh	r3, [r7, #6]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e060      	b.n	800ae92 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	88fa      	ldrh	r2, [r7, #6]
 800adda:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	88fa      	ldrh	r2, [r7, #6]
 800ade2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2221      	movs	r2, #33	@ 0x21
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d028      	beq.n	800ae50 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae02:	4a26      	ldr	r2, [pc, #152]	@ (800ae9c <HAL_UART_Transmit_DMA+0xf4>)
 800ae04:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae0a:	4a25      	ldr	r2, [pc, #148]	@ (800aea0 <HAL_UART_Transmit_DMA+0xf8>)
 800ae0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae12:	4a24      	ldr	r2, [pc, #144]	@ (800aea4 <HAL_UART_Transmit_DMA+0xfc>)
 800ae14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae26:	4619      	mov	r1, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3328      	adds	r3, #40	@ 0x28
 800ae2e:	461a      	mov	r2, r3
 800ae30:	88fb      	ldrh	r3, [r7, #6]
 800ae32:	f7fc f869 	bl	8006f08 <HAL_DMA_Start_IT>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2210      	movs	r2, #16
 800ae40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e020      	b.n	800ae92 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2240      	movs	r2, #64	@ 0x40
 800ae56:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	613b      	str	r3, [r7, #16]
   return(result);
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae78:	623a      	str	r2, [r7, #32]
 800ae7a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	69f9      	ldr	r1, [r7, #28]
 800ae7e:	6a3a      	ldr	r2, [r7, #32]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e5      	bne.n	800ae58 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e000      	b.n	800ae92 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ae90:	2302      	movs	r3, #2
  }
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3728      	adds	r7, #40	@ 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800c413 	.word	0x0800c413
 800aea0:	0800c4b1 	.word	0x0800c4b1
 800aea4:	0800c64b 	.word	0x0800c64b

0800aea8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08a      	sub	sp, #40	@ 0x28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d137      	bne.n	800af30 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <HAL_UART_Receive_DMA+0x24>
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e030      	b.n	800af32 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a18      	ldr	r2, [pc, #96]	@ (800af3c <HAL_UART_Receive_DMA+0x94>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d01f      	beq.n	800af20 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	613b      	str	r3, [r7, #16]
   return(result);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af02:	627b      	str	r3, [r7, #36]	@ 0x24
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	623b      	str	r3, [r7, #32]
 800af0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	69f9      	ldr	r1, [r7, #28]
 800af12:	6a3a      	ldr	r2, [r7, #32]
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	61bb      	str	r3, [r7, #24]
   return(result);
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e6      	bne.n	800aeee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	461a      	mov	r2, r3
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f001 f926 	bl	800c178 <UART_Start_Receive_DMA>
 800af2c:	4603      	mov	r3, r0
 800af2e:	e000      	b.n	800af32 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af30:	2302      	movs	r3, #2
  }
}
 800af32:	4618      	mov	r0, r3
 800af34:	3728      	adds	r7, #40	@ 0x28
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40008000 	.word	0x40008000

0800af40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b0ba      	sub	sp, #232	@ 0xe8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af6e:	4013      	ands	r3, r2
 800af70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d11b      	bne.n	800afb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	2b00      	cmp	r3, #0
 800af86:	d015      	beq.n	800afb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d105      	bne.n	800afa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8312 	beq.w	800b5ce <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
      }
      return;
 800afb2:	e30c      	b.n	800b5ce <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800afb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8129 	beq.w	800b210 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afc2:	4b90      	ldr	r3, [pc, #576]	@ (800b204 <HAL_UART_IRQHandler+0x2c4>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800afce:	4b8e      	ldr	r3, [pc, #568]	@ (800b208 <HAL_UART_IRQHandler+0x2c8>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 811c 	beq.w	800b210 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d011      	beq.n	800b008 <HAL_UART_IRQHandler+0xc8>
 800afe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2201      	movs	r2, #1
 800aff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affe:	f043 0201 	orr.w	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b00c:	f003 0302 	and.w	r3, r3, #2
 800b010:	2b00      	cmp	r3, #0
 800b012:	d011      	beq.n	800b038 <HAL_UART_IRQHandler+0xf8>
 800b014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2202      	movs	r2, #2
 800b026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b02e:	f043 0204 	orr.w	r2, r3, #4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d011      	beq.n	800b068 <HAL_UART_IRQHandler+0x128>
 800b044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2204      	movs	r2, #4
 800b056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05e:	f043 0202 	orr.w	r2, r3, #2
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d017      	beq.n	800b0a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d105      	bne.n	800b08c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b080:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b084:	4b5f      	ldr	r3, [pc, #380]	@ (800b204 <HAL_UART_IRQHandler+0x2c4>)
 800b086:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00b      	beq.n	800b0a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2208      	movs	r2, #8
 800b092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b09a:	f043 0208 	orr.w	r2, r3, #8
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d012      	beq.n	800b0d6 <HAL_UART_IRQHandler+0x196>
 800b0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0cc:	f043 0220 	orr.w	r2, r3, #32
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8278 	beq.w	800b5d2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d013      	beq.n	800b116 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b11c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b12a:	2b40      	cmp	r3, #64	@ 0x40
 800b12c:	d005      	beq.n	800b13a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b12e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b136:	2b00      	cmp	r3, #0
 800b138:	d058      	beq.n	800b1ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 f903 	bl	800c346 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b14a:	2b40      	cmp	r3, #64	@ 0x40
 800b14c:	d148      	bne.n	800b1e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3308      	adds	r3, #8
 800b154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b16c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3308      	adds	r3, #8
 800b176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b17a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b17e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1d9      	bne.n	800b14e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d017      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1aa:	4a18      	ldr	r2, [pc, #96]	@ (800b20c <HAL_UART_IRQHandler+0x2cc>)
 800b1ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fb ff7b 	bl	80070b0 <HAL_DMA_Abort_IT>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01f      	beq.n	800b200 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d2:	e015      	b.n	800b200 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1de:	e00f      	b.n	800b200 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ea:	e009      	b.n	800b200 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1fe:	e1e8      	b.n	800b5d2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b200:	bf00      	nop
    return;
 800b202:	e1e6      	b.n	800b5d2 <HAL_UART_IRQHandler+0x692>
 800b204:	10000001 	.word	0x10000001
 800b208:	04000120 	.word	0x04000120
 800b20c:	0800c6cf 	.word	0x0800c6cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b214:	2b01      	cmp	r3, #1
 800b216:	f040 8176 	bne.w	800b506 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b21e:	f003 0310 	and.w	r3, r3, #16
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 816f 	beq.w	800b506 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b22c:	f003 0310 	and.w	r3, r3, #16
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8168 	beq.w	800b506 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2210      	movs	r2, #16
 800b23c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b248:	2b40      	cmp	r3, #64	@ 0x40
 800b24a:	f040 80dc 	bne.w	800b406 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b25c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80b1 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b26c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b270:	429a      	cmp	r2, r3
 800b272:	f080 80a9 	bcs.w	800b3c8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b27c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0320 	and.w	r3, r3, #32
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f040 8087 	bne.w	800b3a2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b2ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1da      	bne.n	800b294 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b30a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e1      	bne.n	800b2de <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3308      	adds	r3, #8
 800b320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b32a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b32c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3308      	adds	r3, #8
 800b33a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b33e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b34c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e3      	bne.n	800b31a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2220      	movs	r2, #32
 800b356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b368:	e853 3f00 	ldrex	r3, [r3]
 800b36c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b370:	f023 0310 	bic.w	r3, r3, #16
 800b374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b382:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b384:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e4      	bne.n	800b360 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7fb fe2e 	bl	8006ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b3ba:	b292      	uxth	r2, r2
 800b3bc:	1a8a      	subs	r2, r1, r2
 800b3be:	b292      	uxth	r2, r2
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b3c6:	e106      	b.n	800b5d6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	f040 80ff 	bne.w	800b5d6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0320 	and.w	r3, r3, #32
 800b3e6:	2b20      	cmp	r3, #32
 800b3e8:	f040 80f5 	bne.w	800b5d6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b3fe:	4611      	mov	r1, r2
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	4798      	blx	r3
      return;
 800b404:	e0e7      	b.n	800b5d6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b412:	b29b      	uxth	r3, r3
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80d9 	beq.w	800b5da <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80d4 	beq.w	800b5da <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b454:	647b      	str	r3, [r7, #68]	@ 0x44
 800b456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e4      	bne.n	800b432 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3308      	adds	r3, #8
 800b46e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	623b      	str	r3, [r7, #32]
   return(result);
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3308      	adds	r3, #8
 800b48c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b490:	633a      	str	r2, [r7, #48]	@ 0x30
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e1      	bne.n	800b468 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f023 0310 	bic.w	r3, r3, #16
 800b4cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	69fa      	ldr	r2, [r7, #28]
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e4      	bne.n	800b4b8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b4fa:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b4fe:	4611      	mov	r1, r2
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b504:	e069      	b.n	800b5da <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b50a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d010      	beq.n	800b534 <HAL_UART_IRQHandler+0x5f4>
 800b512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b526:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b532:	e055      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d014      	beq.n	800b56a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d105      	bne.n	800b558 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d008      	beq.n	800b56a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d03e      	beq.n	800b5de <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	4798      	blx	r3
    }
    return;
 800b568:	e039      	b.n	800b5de <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b572:	2b00      	cmp	r3, #0
 800b574:	d009      	beq.n	800b58a <HAL_UART_IRQHandler+0x64a>
 800b576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 f8b7 	bl	800c6f6 <UART_EndTransmit_IT>
    return;
 800b588:	e02a      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b58e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00b      	beq.n	800b5ae <HAL_UART_IRQHandler+0x66e>
 800b596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b59a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5ac:	e018      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d012      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
 800b5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da0e      	bge.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5cc:	e008      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b5ce:	bf00      	nop
 800b5d0:	e006      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b5d2:	bf00      	nop
 800b5d4:	e004      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b5d6:	bf00      	nop
 800b5d8:	e002      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b5da:	bf00      	nop
 800b5dc:	e000      	b.n	800b5e0 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b5de:	bf00      	nop
  }
}
 800b5e0:	37e8      	adds	r7, #232	@ 0xe8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop

0800b5e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a09      	ldr	r2, [pc, #36]	@ (800b6d4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d009      	beq.n	800b6c8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	615a      	str	r2, [r3, #20]
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	40008000 	.word	0x40008000

0800b6d8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a18      	ldr	r2, [pc, #96]	@ (800b748 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d027      	beq.n	800b73a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6f0:	2b20      	cmp	r3, #32
 800b6f2:	d120      	bne.n	800b736 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e01c      	b.n	800b73c <HAL_UART_EnableReceiverTimeout+0x64>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2224      	movs	r2, #36	@ 0x24
 800b70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b720:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	e002      	b.n	800b73c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b736:	2302      	movs	r3, #2
 800b738:	e000      	b.n	800b73c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
  }
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	40008000 	.word	0x40008000

0800b74c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a1a      	ldr	r2, [pc, #104]	@ (800b7dc <UART_InitCallbacksToDefault+0x74>)
 800b774:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a19      	ldr	r2, [pc, #100]	@ (800b7e0 <UART_InitCallbacksToDefault+0x78>)
 800b77c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a18      	ldr	r2, [pc, #96]	@ (800b7e4 <UART_InitCallbacksToDefault+0x7c>)
 800b784:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a17      	ldr	r2, [pc, #92]	@ (800b7e8 <UART_InitCallbacksToDefault+0x80>)
 800b78c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a16      	ldr	r2, [pc, #88]	@ (800b7ec <UART_InitCallbacksToDefault+0x84>)
 800b794:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a15      	ldr	r2, [pc, #84]	@ (800b7f0 <UART_InitCallbacksToDefault+0x88>)
 800b79c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a14      	ldr	r2, [pc, #80]	@ (800b7f4 <UART_InitCallbacksToDefault+0x8c>)
 800b7a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a13      	ldr	r2, [pc, #76]	@ (800b7f8 <UART_InitCallbacksToDefault+0x90>)
 800b7ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a12      	ldr	r2, [pc, #72]	@ (800b7fc <UART_InitCallbacksToDefault+0x94>)
 800b7b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a11      	ldr	r2, [pc, #68]	@ (800b800 <UART_InitCallbacksToDefault+0x98>)
 800b7bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a10      	ldr	r2, [pc, #64]	@ (800b804 <UART_InitCallbacksToDefault+0x9c>)
 800b7c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a0f      	ldr	r2, [pc, #60]	@ (800b808 <UART_InitCallbacksToDefault+0xa0>)
 800b7cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	0800b5fd 	.word	0x0800b5fd
 800b7e0:	0800b5e9 	.word	0x0800b5e9
 800b7e4:	0800b625 	.word	0x0800b625
 800b7e8:	0800b611 	.word	0x0800b611
 800b7ec:	0800b639 	.word	0x0800b639
 800b7f0:	0800b64d 	.word	0x0800b64d
 800b7f4:	0800b661 	.word	0x0800b661
 800b7f8:	0800b675 	.word	0x0800b675
 800b7fc:	0800c751 	.word	0x0800c751
 800b800:	0800c765 	.word	0x0800c765
 800b804:	0800c779 	.word	0x0800c779
 800b808:	0800b689 	.word	0x0800b689

0800b80c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b80c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b810:	b08c      	sub	sp, #48	@ 0x30
 800b812:	af00      	add	r7, sp, #0
 800b814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	431a      	orrs	r2, r3
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	4313      	orrs	r3, r2
 800b832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	4baa      	ldr	r3, [pc, #680]	@ (800bae4 <UART_SetConfig+0x2d8>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b844:	430b      	orrs	r3, r1
 800b846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a9f      	ldr	r2, [pc, #636]	@ (800bae8 <UART_SetConfig+0x2dc>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d004      	beq.n	800b878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b874:	4313      	orrs	r3, r2
 800b876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b882:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	f023 010f 	bic.w	r1, r3, #15
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a90      	ldr	r2, [pc, #576]	@ (800baec <UART_SetConfig+0x2e0>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d125      	bne.n	800b8fc <UART_SetConfig+0xf0>
 800b8b0:	4b8f      	ldr	r3, [pc, #572]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800b8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d81a      	bhi.n	800b8f4 <UART_SetConfig+0xe8>
 800b8be:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c4 <UART_SetConfig+0xb8>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b8d5 	.word	0x0800b8d5
 800b8c8:	0800b8e5 	.word	0x0800b8e5
 800b8cc:	0800b8dd 	.word	0x0800b8dd
 800b8d0:	0800b8ed 	.word	0x0800b8ed
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8da:	e116      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b8dc:	2302      	movs	r3, #2
 800b8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e2:	e112      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ea:	e10e      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8f2:	e10a      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8fa:	e106      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a7c      	ldr	r2, [pc, #496]	@ (800baf4 <UART_SetConfig+0x2e8>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d138      	bne.n	800b978 <UART_SetConfig+0x16c>
 800b906:	4b7a      	ldr	r3, [pc, #488]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800b908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b90c:	f003 030c 	and.w	r3, r3, #12
 800b910:	2b0c      	cmp	r3, #12
 800b912:	d82d      	bhi.n	800b970 <UART_SetConfig+0x164>
 800b914:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <UART_SetConfig+0x110>)
 800b916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91a:	bf00      	nop
 800b91c:	0800b951 	.word	0x0800b951
 800b920:	0800b971 	.word	0x0800b971
 800b924:	0800b971 	.word	0x0800b971
 800b928:	0800b971 	.word	0x0800b971
 800b92c:	0800b961 	.word	0x0800b961
 800b930:	0800b971 	.word	0x0800b971
 800b934:	0800b971 	.word	0x0800b971
 800b938:	0800b971 	.word	0x0800b971
 800b93c:	0800b959 	.word	0x0800b959
 800b940:	0800b971 	.word	0x0800b971
 800b944:	0800b971 	.word	0x0800b971
 800b948:	0800b971 	.word	0x0800b971
 800b94c:	0800b969 	.word	0x0800b969
 800b950:	2300      	movs	r3, #0
 800b952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b956:	e0d8      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b958:	2302      	movs	r3, #2
 800b95a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b95e:	e0d4      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b960:	2304      	movs	r3, #4
 800b962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b966:	e0d0      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b968:	2308      	movs	r3, #8
 800b96a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b96e:	e0cc      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b970:	2310      	movs	r3, #16
 800b972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b976:	e0c8      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a5e      	ldr	r2, [pc, #376]	@ (800baf8 <UART_SetConfig+0x2ec>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d125      	bne.n	800b9ce <UART_SetConfig+0x1c2>
 800b982:	4b5b      	ldr	r3, [pc, #364]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800b984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b98c:	2b30      	cmp	r3, #48	@ 0x30
 800b98e:	d016      	beq.n	800b9be <UART_SetConfig+0x1b2>
 800b990:	2b30      	cmp	r3, #48	@ 0x30
 800b992:	d818      	bhi.n	800b9c6 <UART_SetConfig+0x1ba>
 800b994:	2b20      	cmp	r3, #32
 800b996:	d00a      	beq.n	800b9ae <UART_SetConfig+0x1a2>
 800b998:	2b20      	cmp	r3, #32
 800b99a:	d814      	bhi.n	800b9c6 <UART_SetConfig+0x1ba>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <UART_SetConfig+0x19a>
 800b9a0:	2b10      	cmp	r3, #16
 800b9a2:	d008      	beq.n	800b9b6 <UART_SetConfig+0x1aa>
 800b9a4:	e00f      	b.n	800b9c6 <UART_SetConfig+0x1ba>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ac:	e0ad      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9b4:	e0a9      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b9b6:	2304      	movs	r3, #4
 800b9b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9bc:	e0a5      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b9be:	2308      	movs	r3, #8
 800b9c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c4:	e0a1      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b9c6:	2310      	movs	r3, #16
 800b9c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9cc:	e09d      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a4a      	ldr	r2, [pc, #296]	@ (800bafc <UART_SetConfig+0x2f0>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d125      	bne.n	800ba24 <UART_SetConfig+0x218>
 800b9d8:	4b45      	ldr	r3, [pc, #276]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800b9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b9e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9e4:	d016      	beq.n	800ba14 <UART_SetConfig+0x208>
 800b9e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9e8:	d818      	bhi.n	800ba1c <UART_SetConfig+0x210>
 800b9ea:	2b80      	cmp	r3, #128	@ 0x80
 800b9ec:	d00a      	beq.n	800ba04 <UART_SetConfig+0x1f8>
 800b9ee:	2b80      	cmp	r3, #128	@ 0x80
 800b9f0:	d814      	bhi.n	800ba1c <UART_SetConfig+0x210>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d002      	beq.n	800b9fc <UART_SetConfig+0x1f0>
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d008      	beq.n	800ba0c <UART_SetConfig+0x200>
 800b9fa:	e00f      	b.n	800ba1c <UART_SetConfig+0x210>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba02:	e082      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba04:	2302      	movs	r3, #2
 800ba06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba0a:	e07e      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba0c:	2304      	movs	r3, #4
 800ba0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba12:	e07a      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba14:	2308      	movs	r3, #8
 800ba16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba1a:	e076      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba1c:	2310      	movs	r3, #16
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba22:	e072      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a35      	ldr	r2, [pc, #212]	@ (800bb00 <UART_SetConfig+0x2f4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d12a      	bne.n	800ba84 <UART_SetConfig+0x278>
 800ba2e:	4b30      	ldr	r3, [pc, #192]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800ba30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba3c:	d01a      	beq.n	800ba74 <UART_SetConfig+0x268>
 800ba3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba42:	d81b      	bhi.n	800ba7c <UART_SetConfig+0x270>
 800ba44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba48:	d00c      	beq.n	800ba64 <UART_SetConfig+0x258>
 800ba4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba4e:	d815      	bhi.n	800ba7c <UART_SetConfig+0x270>
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <UART_SetConfig+0x250>
 800ba54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba58:	d008      	beq.n	800ba6c <UART_SetConfig+0x260>
 800ba5a:	e00f      	b.n	800ba7c <UART_SetConfig+0x270>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba62:	e052      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba64:	2302      	movs	r3, #2
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba6a:	e04e      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba72:	e04a      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba74:	2308      	movs	r3, #8
 800ba76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba7a:	e046      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba82:	e042      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a17      	ldr	r2, [pc, #92]	@ (800bae8 <UART_SetConfig+0x2dc>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d13a      	bne.n	800bb04 <UART_SetConfig+0x2f8>
 800ba8e:	4b18      	ldr	r3, [pc, #96]	@ (800baf0 <UART_SetConfig+0x2e4>)
 800ba90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ba98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba9c:	d01a      	beq.n	800bad4 <UART_SetConfig+0x2c8>
 800ba9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baa2:	d81b      	bhi.n	800badc <UART_SetConfig+0x2d0>
 800baa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baa8:	d00c      	beq.n	800bac4 <UART_SetConfig+0x2b8>
 800baaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baae:	d815      	bhi.n	800badc <UART_SetConfig+0x2d0>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <UART_SetConfig+0x2b0>
 800bab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bab8:	d008      	beq.n	800bacc <UART_SetConfig+0x2c0>
 800baba:	e00f      	b.n	800badc <UART_SetConfig+0x2d0>
 800babc:	2300      	movs	r3, #0
 800babe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bac2:	e022      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baca:	e01e      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800bacc:	2304      	movs	r3, #4
 800bace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	e01a      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800bad4:	2308      	movs	r3, #8
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bada:	e016      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800badc:	2310      	movs	r3, #16
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bae2:	e012      	b.n	800bb0a <UART_SetConfig+0x2fe>
 800bae4:	cfff69f3 	.word	0xcfff69f3
 800bae8:	40008000 	.word	0x40008000
 800baec:	40013800 	.word	0x40013800
 800baf0:	40021000 	.word	0x40021000
 800baf4:	40004400 	.word	0x40004400
 800baf8:	40004800 	.word	0x40004800
 800bafc:	40004c00 	.word	0x40004c00
 800bb00:	40005000 	.word	0x40005000
 800bb04:	2310      	movs	r3, #16
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4aae      	ldr	r2, [pc, #696]	@ (800bdc8 <UART_SetConfig+0x5bc>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	f040 8097 	bne.w	800bc44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb1a:	2b08      	cmp	r3, #8
 800bb1c:	d823      	bhi.n	800bb66 <UART_SetConfig+0x35a>
 800bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb24 <UART_SetConfig+0x318>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb49 	.word	0x0800bb49
 800bb28:	0800bb67 	.word	0x0800bb67
 800bb2c:	0800bb51 	.word	0x0800bb51
 800bb30:	0800bb67 	.word	0x0800bb67
 800bb34:	0800bb57 	.word	0x0800bb57
 800bb38:	0800bb67 	.word	0x0800bb67
 800bb3c:	0800bb67 	.word	0x0800bb67
 800bb40:	0800bb67 	.word	0x0800bb67
 800bb44:	0800bb5f 	.word	0x0800bb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb48:	f7fc fbbc 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb4e:	e010      	b.n	800bb72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb50:	4b9e      	ldr	r3, [pc, #632]	@ (800bdcc <UART_SetConfig+0x5c0>)
 800bb52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb54:	e00d      	b.n	800bb72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb56:	f7fc fb47 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 800bb5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb5c:	e009      	b.n	800bb72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb64:	e005      	b.n	800bb72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 8130 	beq.w	800bdda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	4a94      	ldr	r2, [pc, #592]	@ (800bdd0 <UART_SetConfig+0x5c4>)
 800bb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4613      	mov	r3, r2
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	4413      	add	r3, r2
 800bb98:	69ba      	ldr	r2, [r7, #24]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d305      	bcc.n	800bbaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d903      	bls.n	800bbb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbb0:	e113      	b.n	800bdda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	60bb      	str	r3, [r7, #8]
 800bbb8:	60fa      	str	r2, [r7, #12]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbe:	4a84      	ldr	r2, [pc, #528]	@ (800bdd0 <UART_SetConfig+0x5c4>)
 800bbc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	603b      	str	r3, [r7, #0]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbd4:	f7f5 f824 	bl	8000c20 <__aeabi_uldivmod>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	020b      	lsls	r3, r1, #8
 800bbea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbee:	0202      	lsls	r2, r0, #8
 800bbf0:	6979      	ldr	r1, [r7, #20]
 800bbf2:	6849      	ldr	r1, [r1, #4]
 800bbf4:	0849      	lsrs	r1, r1, #1
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	eb12 0804 	adds.w	r8, r2, r4
 800bc00:	eb43 0905 	adc.w	r9, r3, r5
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	469a      	mov	sl, r3
 800bc0c:	4693      	mov	fp, r2
 800bc0e:	4652      	mov	r2, sl
 800bc10:	465b      	mov	r3, fp
 800bc12:	4640      	mov	r0, r8
 800bc14:	4649      	mov	r1, r9
 800bc16:	f7f5 f803 	bl	8000c20 <__aeabi_uldivmod>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4613      	mov	r3, r2
 800bc20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc28:	d308      	bcc.n	800bc3c <UART_SetConfig+0x430>
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc30:	d204      	bcs.n	800bc3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6a3a      	ldr	r2, [r7, #32]
 800bc38:	60da      	str	r2, [r3, #12]
 800bc3a:	e0ce      	b.n	800bdda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc42:	e0ca      	b.n	800bdda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc4c:	d166      	bne.n	800bd1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc52:	2b08      	cmp	r3, #8
 800bc54:	d827      	bhi.n	800bca6 <UART_SetConfig+0x49a>
 800bc56:	a201      	add	r2, pc, #4	@ (adr r2, 800bc5c <UART_SetConfig+0x450>)
 800bc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5c:	0800bc81 	.word	0x0800bc81
 800bc60:	0800bc89 	.word	0x0800bc89
 800bc64:	0800bc91 	.word	0x0800bc91
 800bc68:	0800bca7 	.word	0x0800bca7
 800bc6c:	0800bc97 	.word	0x0800bc97
 800bc70:	0800bca7 	.word	0x0800bca7
 800bc74:	0800bca7 	.word	0x0800bca7
 800bc78:	0800bca7 	.word	0x0800bca7
 800bc7c:	0800bc9f 	.word	0x0800bc9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc80:	f7fc fb20 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800bc84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc86:	e014      	b.n	800bcb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc88:	f7fc fb32 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800bc8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc8e:	e010      	b.n	800bcb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc90:	4b4e      	ldr	r3, [pc, #312]	@ (800bdcc <UART_SetConfig+0x5c0>)
 800bc92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc94:	e00d      	b.n	800bcb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc96:	f7fc faa7 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 800bc9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc9c:	e009      	b.n	800bcb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bca4:	e005      	b.n	800bcb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bcb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 8090 	beq.w	800bdda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcbe:	4a44      	ldr	r2, [pc, #272]	@ (800bdd0 <UART_SetConfig+0x5c4>)
 800bcc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bccc:	005a      	lsls	r2, r3, #1
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	085b      	lsrs	r3, r3, #1
 800bcd4:	441a      	add	r2, r3
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	2b0f      	cmp	r3, #15
 800bce4:	d916      	bls.n	800bd14 <UART_SetConfig+0x508>
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcec:	d212      	bcs.n	800bd14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	f023 030f 	bic.w	r3, r3, #15
 800bcf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	085b      	lsrs	r3, r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	8bfb      	ldrh	r3, [r7, #30]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	8bfa      	ldrh	r2, [r7, #30]
 800bd10:	60da      	str	r2, [r3, #12]
 800bd12:	e062      	b.n	800bdda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd1a:	e05e      	b.n	800bdda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d828      	bhi.n	800bd76 <UART_SetConfig+0x56a>
 800bd24:	a201      	add	r2, pc, #4	@ (adr r2, 800bd2c <UART_SetConfig+0x520>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd51 	.word	0x0800bd51
 800bd30:	0800bd59 	.word	0x0800bd59
 800bd34:	0800bd61 	.word	0x0800bd61
 800bd38:	0800bd77 	.word	0x0800bd77
 800bd3c:	0800bd67 	.word	0x0800bd67
 800bd40:	0800bd77 	.word	0x0800bd77
 800bd44:	0800bd77 	.word	0x0800bd77
 800bd48:	0800bd77 	.word	0x0800bd77
 800bd4c:	0800bd6f 	.word	0x0800bd6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd50:	f7fc fab8 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd56:	e014      	b.n	800bd82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd58:	f7fc faca 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800bd5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd5e:	e010      	b.n	800bd82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd60:	4b1a      	ldr	r3, [pc, #104]	@ (800bdcc <UART_SetConfig+0x5c0>)
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd64:	e00d      	b.n	800bd82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd66:	f7fc fa3f 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 800bd6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd6c:	e009      	b.n	800bd82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd74:	e005      	b.n	800bd82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd80:	bf00      	nop
    }

    if (pclk != 0U)
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d028      	beq.n	800bdda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8c:	4a10      	ldr	r2, [pc, #64]	@ (800bdd0 <UART_SetConfig+0x5c4>)
 800bd8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd92:	461a      	mov	r2, r3
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	085b      	lsrs	r3, r3, #1
 800bda0:	441a      	add	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	2b0f      	cmp	r3, #15
 800bdb0:	d910      	bls.n	800bdd4 <UART_SetConfig+0x5c8>
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb8:	d20c      	bcs.n	800bdd4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	60da      	str	r2, [r3, #12]
 800bdc4:	e009      	b.n	800bdda <UART_SetConfig+0x5ce>
 800bdc6:	bf00      	nop
 800bdc8:	40008000 	.word	0x40008000
 800bdcc:	00f42400 	.word	0x00f42400
 800bdd0:	0800e148 	.word	0x0800e148
      }
      else
      {
        ret = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2200      	movs	r2, #0
 800bdee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bdf6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3730      	adds	r7, #48	@ 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00a      	beq.n	800be2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	430a      	orrs	r2, r1
 800be4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00a      	beq.n	800be72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be98:	f003 0310 	and.w	r3, r3, #16
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beba:	f003 0320 	and.w	r3, r3, #32
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00a      	beq.n	800bed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01a      	beq.n	800bf1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800befe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf02:	d10a      	bne.n	800bf1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	605a      	str	r2, [r3, #4]
  }
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b098      	sub	sp, #96	@ 0x60
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf58:	f7f8 fff0 	bl	8004f3c <HAL_GetTick>
 800bf5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d12f      	bne.n	800bfcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf74:	2200      	movs	r2, #0
 800bf76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f88e 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d022      	beq.n	800bfcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e063      	b.n	800c094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0304 	and.w	r3, r3, #4
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d149      	bne.n	800c06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f857 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d03c      	beq.n	800c06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	e853 3f00 	ldrex	r3, [r3]
 800c000:	623b      	str	r3, [r7, #32]
   return(result);
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c012:	633b      	str	r3, [r7, #48]	@ 0x30
 800c014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e6      	bne.n	800bff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3308      	adds	r3, #8
 800c02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	60fb      	str	r3, [r7, #12]
   return(result);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f023 0301 	bic.w	r3, r3, #1
 800c03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c046:	61fa      	str	r2, [r7, #28]
 800c048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	69b9      	ldr	r1, [r7, #24]
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	617b      	str	r3, [r7, #20]
   return(result);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2220      	movs	r2, #32
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e012      	b.n	800c094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2220      	movs	r2, #32
 800c07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3758      	adds	r7, #88	@ 0x58
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0ac:	e04f      	b.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d04b      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0b6:	f7f8 ff41 	bl	8004f3c <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d302      	bcc.n	800c0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e04e      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d037      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b80      	cmp	r3, #128	@ 0x80
 800c0e2:	d034      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2b40      	cmp	r3, #64	@ 0x40
 800c0e8:	d031      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	f003 0308 	and.w	r3, r3, #8
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d110      	bne.n	800c11a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2208      	movs	r2, #8
 800c0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 f920 	bl	800c346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2208      	movs	r2, #8
 800c10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e029      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c128:	d111      	bne.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f906 	bl	800c346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	e00f      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	69da      	ldr	r2, [r3, #28]
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4013      	ands	r3, r2
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	bf0c      	ite	eq
 800c15e:	2301      	moveq	r3, #1
 800c160:	2300      	movne	r3, #0
 800c162:	b2db      	uxtb	r3, r3
 800c164:	461a      	mov	r2, r3
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d0a0      	beq.n	800c0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
	...

0800c178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b096      	sub	sp, #88	@ 0x58
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	88fa      	ldrh	r2, [r7, #6]
 800c190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2222      	movs	r2, #34	@ 0x22
 800c1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d02d      	beq.n	800c20a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1b4:	4a40      	ldr	r2, [pc, #256]	@ (800c2b8 <UART_Start_Receive_DMA+0x140>)
 800c1b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1be:	4a3f      	ldr	r2, [pc, #252]	@ (800c2bc <UART_Start_Receive_DMA+0x144>)
 800c1c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1c8:	4a3d      	ldr	r2, [pc, #244]	@ (800c2c0 <UART_Start_Receive_DMA+0x148>)
 800c1ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3324      	adds	r3, #36	@ 0x24
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	f7fa fe8c 	bl	8006f08 <HAL_DMA_Start_IT>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2210      	movs	r2, #16
 800c1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2220      	movs	r2, #32
 800c202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e051      	b.n	800c2ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c21a:	e853 3f00 	ldrex	r3, [r3]
 800c21e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c226:	657b      	str	r3, [r7, #84]	@ 0x54
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	461a      	mov	r2, r3
 800c22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c232:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e6      	bne.n	800c212 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3308      	adds	r3, #8
 800c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	f043 0301 	orr.w	r3, r3, #1
 800c25a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3308      	adds	r3, #8
 800c262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c264:	637a      	str	r2, [r7, #52]	@ 0x34
 800c266:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e5      	bne.n	800c244 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3308      	adds	r3, #8
 800c27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	e853 3f00 	ldrex	r3, [r3]
 800c286:	613b      	str	r3, [r7, #16]
   return(result);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3308      	adds	r3, #8
 800c296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c298:	623a      	str	r2, [r7, #32]
 800c29a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29c:	69f9      	ldr	r1, [r7, #28]
 800c29e:	6a3a      	ldr	r2, [r7, #32]
 800c2a0:	e841 2300 	strex	r3, r2, [r1]
 800c2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1e5      	bne.n	800c278 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3758      	adds	r7, #88	@ 0x58
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0800c4d1 	.word	0x0800c4d1
 800c2bc:	0800c605 	.word	0x0800c605
 800c2c0:	0800c64b 	.word	0x0800c64b

0800c2c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b08f      	sub	sp, #60	@ 0x3c
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e6      	bne.n	800c2cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3308      	adds	r3, #8
 800c304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c314:	633b      	str	r3, [r7, #48]	@ 0x30
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3308      	adds	r3, #8
 800c31c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c31e:	61ba      	str	r2, [r7, #24]
 800c320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6979      	ldr	r1, [r7, #20]
 800c324:	69ba      	ldr	r2, [r7, #24]
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	613b      	str	r3, [r7, #16]
   return(result);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e5      	bne.n	800c2fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2220      	movs	r2, #32
 800c336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c33a:	bf00      	nop
 800c33c:	373c      	adds	r7, #60	@ 0x3c
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c346:	b480      	push	{r7}
 800c348:	b095      	sub	sp, #84	@ 0x54
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c36e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c372:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e6      	bne.n	800c34e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3308      	adds	r3, #8
 800c386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c396:	f023 0301 	bic.w	r3, r3, #1
 800c39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e3      	bne.n	800c380 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d118      	bne.n	800c3f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f023 0310 	bic.w	r3, r3, #16
 800c3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3de:	61bb      	str	r3, [r7, #24]
 800c3e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6979      	ldr	r1, [r7, #20]
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e6      	bne.n	800c3c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c406:	bf00      	nop
 800c408:	3754      	adds	r7, #84	@ 0x54
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b090      	sub	sp, #64	@ 0x40
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c41e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d137      	bne.n	800c49e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c430:	2200      	movs	r2, #0
 800c432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3308      	adds	r3, #8
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	e853 3f00 	ldrex	r3, [r3]
 800c444:	623b      	str	r3, [r7, #32]
   return(result);
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c44c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3308      	adds	r3, #8
 800c454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c456:	633a      	str	r2, [r7, #48]	@ 0x30
 800c458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c45c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c45e:	e841 2300 	strex	r3, r2, [r1]
 800c462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1e5      	bne.n	800c436 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	60fb      	str	r3, [r7, #12]
   return(result);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	69b9      	ldr	r1, [r7, #24]
 800c48e:	69fa      	ldr	r2, [r7, #28]
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	617b      	str	r3, [r7, #20]
   return(result);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e6      	bne.n	800c46a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c49c:	e004      	b.n	800c4a8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c4a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4a6:	4798      	blx	r3
}
 800c4a8:	bf00      	nop
 800c4aa:	3740      	adds	r7, #64	@ 0x40
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b09c      	sub	sp, #112	@ 0x70
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0320 	and.w	r3, r3, #32
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d171      	bne.n	800c5d0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c50a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c512:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c514:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e6      	bne.n	800c4f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3308      	adds	r3, #8
 800c52c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c538:	f023 0301 	bic.w	r3, r3, #1
 800c53c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c53e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3308      	adds	r3, #8
 800c544:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c546:	647a      	str	r2, [r7, #68]	@ 0x44
 800c548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c54c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e5      	bne.n	800c526 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3308      	adds	r3, #8
 800c560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c564:	e853 3f00 	ldrex	r3, [r3]
 800c568:	623b      	str	r3, [r7, #32]
   return(result);
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c570:	663b      	str	r3, [r7, #96]	@ 0x60
 800c572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3308      	adds	r3, #8
 800c578:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c57a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c582:	e841 2300 	strex	r3, r2, [r1]
 800c586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1e5      	bne.n	800c55a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c590:	2220      	movs	r2, #32
 800c592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d118      	bne.n	800c5d0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0310 	bic.w	r3, r3, #16
 800c5b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5bc:	61fb      	str	r3, [r7, #28]
 800c5be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	69b9      	ldr	r1, [r7, #24]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e6      	bne.n	800c59e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d109      	bne.n	800c5f2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c5e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c5e6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5ee:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5f0:	e004      	b.n	800c5fc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c5f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5fa:	4798      	blx	r3
}
 800c5fc:	bf00      	nop
 800c5fe:	3770      	adds	r7, #112	@ 0x70
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c610:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d10b      	bne.n	800c638 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c62c:	0852      	lsrs	r2, r2, #1
 800c62e:	b292      	uxth	r2, r2
 800c630:	4611      	mov	r1, r2
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c636:	e004      	b.n	800c642 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	4798      	blx	r3
}
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b086      	sub	sp, #24
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c656:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c65e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c666:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c672:	2b80      	cmp	r3, #128	@ 0x80
 800c674:	d109      	bne.n	800c68a <UART_DMAError+0x40>
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b21      	cmp	r3, #33	@ 0x21
 800c67a:	d106      	bne.n	800c68a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c684:	6978      	ldr	r0, [r7, #20]
 800c686:	f7ff fe1d 	bl	800c2c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c694:	2b40      	cmp	r3, #64	@ 0x40
 800c696:	d109      	bne.n	800c6ac <UART_DMAError+0x62>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b22      	cmp	r3, #34	@ 0x22
 800c69c:	d106      	bne.n	800c6ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c6a6:	6978      	ldr	r0, [r7, #20]
 800c6a8:	f7ff fe4d 	bl	800c346 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6b2:	f043 0210 	orr.w	r2, r3, #16
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c6c2:	6978      	ldr	r0, [r7, #20]
 800c6c4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c6:	bf00      	nop
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ee:	bf00      	nop
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b088      	sub	sp, #32
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	461a      	mov	r2, r3
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	6979      	ldr	r1, [r7, #20]
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	613b      	str	r3, [r7, #16]
   return(result);
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e6      	bne.n	800c6fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c748:	bf00      	nop
 800c74a:	3720      	adds	r7, #32
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d101      	bne.n	800c7a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e027      	b.n	800c7f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2224      	movs	r2, #36	@ 0x24
 800c7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0201 	bic.w	r2, r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2220      	movs	r2, #32
 800c7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d101      	bne.n	800c816 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c812:	2302      	movs	r3, #2
 800c814:	e02d      	b.n	800c872 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2224      	movs	r2, #36	@ 0x24
 800c822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f022 0201 	bic.w	r2, r2, #1
 800c83c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	683a      	ldr	r2, [r7, #0]
 800c84e:	430a      	orrs	r2, r1
 800c850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f850 	bl	800c8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d101      	bne.n	800c892 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c88e:	2302      	movs	r3, #2
 800c890:	e02d      	b.n	800c8ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2224      	movs	r2, #36	@ 0x24
 800c89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f022 0201 	bic.w	r2, r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f812 	bl	800c8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c904:	2b00      	cmp	r3, #0
 800c906:	d108      	bne.n	800c91a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c918:	e031      	b.n	800c97e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c91a:	2308      	movs	r3, #8
 800c91c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c91e:	2308      	movs	r3, #8
 800c920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	0e5b      	lsrs	r3, r3, #25
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	0f5b      	lsrs	r3, r3, #29
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	f003 0307 	and.w	r3, r3, #7
 800c940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	7b3a      	ldrb	r2, [r7, #12]
 800c946:	4911      	ldr	r1, [pc, #68]	@ (800c98c <UARTEx_SetNbDataToProcess+0x94>)
 800c948:	5c8a      	ldrb	r2, [r1, r2]
 800c94a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c94e:	7b3a      	ldrb	r2, [r7, #12]
 800c950:	490f      	ldr	r1, [pc, #60]	@ (800c990 <UARTEx_SetNbDataToProcess+0x98>)
 800c952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c954:	fb93 f3f2 	sdiv	r3, r3, r2
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	7b7a      	ldrb	r2, [r7, #13]
 800c964:	4909      	ldr	r1, [pc, #36]	@ (800c98c <UARTEx_SetNbDataToProcess+0x94>)
 800c966:	5c8a      	ldrb	r2, [r1, r2]
 800c968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c96c:	7b7a      	ldrb	r2, [r7, #13]
 800c96e:	4908      	ldr	r1, [pc, #32]	@ (800c990 <UARTEx_SetNbDataToProcess+0x98>)
 800c970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c972:	fb93 f3f2 	sdiv	r3, r3, r2
 800c976:	b29a      	uxth	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	0800e160 	.word	0x0800e160
 800c990:	0800e168 	.word	0x0800e168

0800c994 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c9aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c9b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9c4:	eeb1 7a67 	vneg.f32	s14, s15
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	edd3 7a08 	vldr	s15, [r3, #32]
 800c9ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c9d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a1a      	ldr	r2, [r3, #32]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	220c      	movs	r2, #12
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f804 	bl	800ca00 <memset>
  }

}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <memset>:
 800ca00:	4402      	add	r2, r0
 800ca02:	4603      	mov	r3, r0
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d100      	bne.n	800ca0a <memset+0xa>
 800ca08:	4770      	bx	lr
 800ca0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca0e:	e7f9      	b.n	800ca04 <memset+0x4>

0800ca10 <__errno>:
 800ca10:	4b01      	ldr	r3, [pc, #4]	@ (800ca18 <__errno+0x8>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	20000230 	.word	0x20000230

0800ca1c <__libc_init_array>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ca54 <__libc_init_array+0x38>)
 800ca20:	4c0d      	ldr	r4, [pc, #52]	@ (800ca58 <__libc_init_array+0x3c>)
 800ca22:	1b64      	subs	r4, r4, r5
 800ca24:	10a4      	asrs	r4, r4, #2
 800ca26:	2600      	movs	r6, #0
 800ca28:	42a6      	cmp	r6, r4
 800ca2a:	d109      	bne.n	800ca40 <__libc_init_array+0x24>
 800ca2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ca5c <__libc_init_array+0x40>)
 800ca2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ca60 <__libc_init_array+0x44>)
 800ca30:	f000 fbb6 	bl	800d1a0 <_init>
 800ca34:	1b64      	subs	r4, r4, r5
 800ca36:	10a4      	asrs	r4, r4, #2
 800ca38:	2600      	movs	r6, #0
 800ca3a:	42a6      	cmp	r6, r4
 800ca3c:	d105      	bne.n	800ca4a <__libc_init_array+0x2e>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca44:	4798      	blx	r3
 800ca46:	3601      	adds	r6, #1
 800ca48:	e7ee      	b.n	800ca28 <__libc_init_array+0xc>
 800ca4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4e:	4798      	blx	r3
 800ca50:	3601      	adds	r6, #1
 800ca52:	e7f2      	b.n	800ca3a <__libc_init_array+0x1e>
 800ca54:	0800e1f8 	.word	0x0800e1f8
 800ca58:	0800e1f8 	.word	0x0800e1f8
 800ca5c:	0800e1f8 	.word	0x0800e1f8
 800ca60:	0800e1fc 	.word	0x0800e1fc

0800ca64 <memcpy>:
 800ca64:	440a      	add	r2, r1
 800ca66:	4291      	cmp	r1, r2
 800ca68:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca6c:	d100      	bne.n	800ca70 <memcpy+0xc>
 800ca6e:	4770      	bx	lr
 800ca70:	b510      	push	{r4, lr}
 800ca72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca7a:	4291      	cmp	r1, r2
 800ca7c:	d1f9      	bne.n	800ca72 <memcpy+0xe>
 800ca7e:	bd10      	pop	{r4, pc}

0800ca80 <atan2>:
 800ca80:	f000 b926 	b.w	800ccd0 <__ieee754_atan2>

0800ca84 <sqrt>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	ed2d 8b02 	vpush	{d8}
 800ca8a:	ec55 4b10 	vmov	r4, r5, d0
 800ca8e:	f000 f843 	bl	800cb18 <__ieee754_sqrt>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	4620      	mov	r0, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9e:	eef0 8a60 	vmov.f32	s17, s1
 800caa2:	f7f4 f80f 	bl	8000ac4 <__aeabi_dcmpun>
 800caa6:	b990      	cbnz	r0, 800cace <sqrt+0x4a>
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f3 ffe0 	bl	8000a74 <__aeabi_dcmplt>
 800cab4:	b158      	cbz	r0, 800cace <sqrt+0x4a>
 800cab6:	f7ff ffab 	bl	800ca10 <__errno>
 800caba:	2321      	movs	r3, #33	@ 0x21
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	2300      	movs	r3, #0
 800cac2:	4610      	mov	r0, r2
 800cac4:	4619      	mov	r1, r3
 800cac6:	f7f3 fe8d 	bl	80007e4 <__aeabi_ddiv>
 800caca:	ec41 0b18 	vmov	d8, r0, r1
 800cace:	eeb0 0a48 	vmov.f32	s0, s16
 800cad2:	eef0 0a68 	vmov.f32	s1, s17
 800cad6:	ecbd 8b02 	vpop	{d8}
 800cada:	bd38      	pop	{r3, r4, r5, pc}

0800cadc <sqrtf>:
 800cadc:	b508      	push	{r3, lr}
 800cade:	ed2d 8b02 	vpush	{d8}
 800cae2:	eeb0 8a40 	vmov.f32	s16, s0
 800cae6:	f000 f8ed 	bl	800ccc4 <__ieee754_sqrtf>
 800caea:	eeb4 8a48 	vcmp.f32	s16, s16
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	d60c      	bvs.n	800cb0e <sqrtf+0x32>
 800caf4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cb14 <sqrtf+0x38>
 800caf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb00:	d505      	bpl.n	800cb0e <sqrtf+0x32>
 800cb02:	f7ff ff85 	bl	800ca10 <__errno>
 800cb06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cb0a:	2321      	movs	r3, #33	@ 0x21
 800cb0c:	6003      	str	r3, [r0, #0]
 800cb0e:	ecbd 8b02 	vpop	{d8}
 800cb12:	bd08      	pop	{r3, pc}
 800cb14:	00000000 	.word	0x00000000

0800cb18 <__ieee754_sqrt>:
 800cb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4a66      	ldr	r2, [pc, #408]	@ (800ccb8 <__ieee754_sqrt+0x1a0>)
 800cb1e:	ec55 4b10 	vmov	r4, r5, d0
 800cb22:	43aa      	bics	r2, r5
 800cb24:	462b      	mov	r3, r5
 800cb26:	4621      	mov	r1, r4
 800cb28:	d110      	bne.n	800cb4c <__ieee754_sqrt+0x34>
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	f7f3 fd2e 	bl	8000590 <__aeabi_dmul>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 fb72 	bl	8000224 <__adddf3>
 800cb40:	4604      	mov	r4, r0
 800cb42:	460d      	mov	r5, r1
 800cb44:	ec45 4b10 	vmov	d0, r4, r5
 800cb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	2d00      	cmp	r5, #0
 800cb4e:	dc0e      	bgt.n	800cb6e <__ieee754_sqrt+0x56>
 800cb50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cb54:	4322      	orrs	r2, r4
 800cb56:	d0f5      	beq.n	800cb44 <__ieee754_sqrt+0x2c>
 800cb58:	b19d      	cbz	r5, 800cb82 <__ieee754_sqrt+0x6a>
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fb5e 	bl	8000220 <__aeabi_dsub>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	f7f3 fe3c 	bl	80007e4 <__aeabi_ddiv>
 800cb6c:	e7e8      	b.n	800cb40 <__ieee754_sqrt+0x28>
 800cb6e:	152a      	asrs	r2, r5, #20
 800cb70:	d115      	bne.n	800cb9e <__ieee754_sqrt+0x86>
 800cb72:	2000      	movs	r0, #0
 800cb74:	e009      	b.n	800cb8a <__ieee754_sqrt+0x72>
 800cb76:	0acb      	lsrs	r3, r1, #11
 800cb78:	3a15      	subs	r2, #21
 800cb7a:	0549      	lsls	r1, r1, #21
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0fa      	beq.n	800cb76 <__ieee754_sqrt+0x5e>
 800cb80:	e7f7      	b.n	800cb72 <__ieee754_sqrt+0x5a>
 800cb82:	462a      	mov	r2, r5
 800cb84:	e7fa      	b.n	800cb7c <__ieee754_sqrt+0x64>
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	3001      	adds	r0, #1
 800cb8a:	02dc      	lsls	r4, r3, #11
 800cb8c:	d5fb      	bpl.n	800cb86 <__ieee754_sqrt+0x6e>
 800cb8e:	1e44      	subs	r4, r0, #1
 800cb90:	1b12      	subs	r2, r2, r4
 800cb92:	f1c0 0420 	rsb	r4, r0, #32
 800cb96:	fa21 f404 	lsr.w	r4, r1, r4
 800cb9a:	4323      	orrs	r3, r4
 800cb9c:	4081      	lsls	r1, r0
 800cb9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cba2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800cba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbaa:	07d2      	lsls	r2, r2, #31
 800cbac:	bf5c      	itt	pl
 800cbae:	005b      	lslpl	r3, r3, #1
 800cbb0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cbb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbb8:	bf58      	it	pl
 800cbba:	0049      	lslpl	r1, r1, #1
 800cbbc:	2600      	movs	r6, #0
 800cbbe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cbc2:	107f      	asrs	r7, r7, #1
 800cbc4:	0049      	lsls	r1, r1, #1
 800cbc6:	2016      	movs	r0, #22
 800cbc8:	4632      	mov	r2, r6
 800cbca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cbce:	1915      	adds	r5, r2, r4
 800cbd0:	429d      	cmp	r5, r3
 800cbd2:	bfde      	ittt	le
 800cbd4:	192a      	addle	r2, r5, r4
 800cbd6:	1b5b      	suble	r3, r3, r5
 800cbd8:	1936      	addle	r6, r6, r4
 800cbda:	0fcd      	lsrs	r5, r1, #31
 800cbdc:	3801      	subs	r0, #1
 800cbde:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800cbe2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbe6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cbea:	d1f0      	bne.n	800cbce <__ieee754_sqrt+0xb6>
 800cbec:	4605      	mov	r5, r0
 800cbee:	2420      	movs	r4, #32
 800cbf0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	eb0c 0e00 	add.w	lr, ip, r0
 800cbfa:	dc02      	bgt.n	800cc02 <__ieee754_sqrt+0xea>
 800cbfc:	d113      	bne.n	800cc26 <__ieee754_sqrt+0x10e>
 800cbfe:	458e      	cmp	lr, r1
 800cc00:	d811      	bhi.n	800cc26 <__ieee754_sqrt+0x10e>
 800cc02:	f1be 0f00 	cmp.w	lr, #0
 800cc06:	eb0e 000c 	add.w	r0, lr, ip
 800cc0a:	da3f      	bge.n	800cc8c <__ieee754_sqrt+0x174>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	db3d      	blt.n	800cc8c <__ieee754_sqrt+0x174>
 800cc10:	f102 0801 	add.w	r8, r2, #1
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	458e      	cmp	lr, r1
 800cc18:	bf88      	it	hi
 800cc1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cc1e:	eba1 010e 	sub.w	r1, r1, lr
 800cc22:	4465      	add	r5, ip
 800cc24:	4642      	mov	r2, r8
 800cc26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cc2a:	3c01      	subs	r4, #1
 800cc2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cc30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cc34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cc38:	d1dc      	bne.n	800cbf4 <__ieee754_sqrt+0xdc>
 800cc3a:	4319      	orrs	r1, r3
 800cc3c:	d01b      	beq.n	800cc76 <__ieee754_sqrt+0x15e>
 800cc3e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800ccbc <__ieee754_sqrt+0x1a4>
 800cc42:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ccc0 <__ieee754_sqrt+0x1a8>
 800cc46:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc4a:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc4e:	f7f3 fae7 	bl	8000220 <__aeabi_dsub>
 800cc52:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	f7f3 ff13 	bl	8000a88 <__aeabi_dcmple>
 800cc62:	b140      	cbz	r0, 800cc76 <__ieee754_sqrt+0x15e>
 800cc64:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cc68:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc6c:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc70:	d10e      	bne.n	800cc90 <__ieee754_sqrt+0x178>
 800cc72:	3601      	adds	r6, #1
 800cc74:	4625      	mov	r5, r4
 800cc76:	1073      	asrs	r3, r6, #1
 800cc78:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc7c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800cc80:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800cc84:	086b      	lsrs	r3, r5, #1
 800cc86:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800cc8a:	e759      	b.n	800cb40 <__ieee754_sqrt+0x28>
 800cc8c:	4690      	mov	r8, r2
 800cc8e:	e7c1      	b.n	800cc14 <__ieee754_sqrt+0xfc>
 800cc90:	f7f3 fac8 	bl	8000224 <__adddf3>
 800cc94:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	4649      	mov	r1, r9
 800cca0:	f7f3 fee8 	bl	8000a74 <__aeabi_dcmplt>
 800cca4:	b120      	cbz	r0, 800ccb0 <__ieee754_sqrt+0x198>
 800cca6:	1cab      	adds	r3, r5, #2
 800cca8:	bf08      	it	eq
 800ccaa:	3601      	addeq	r6, #1
 800ccac:	3502      	adds	r5, #2
 800ccae:	e7e2      	b.n	800cc76 <__ieee754_sqrt+0x15e>
 800ccb0:	1c6b      	adds	r3, r5, #1
 800ccb2:	f023 0501 	bic.w	r5, r3, #1
 800ccb6:	e7de      	b.n	800cc76 <__ieee754_sqrt+0x15e>
 800ccb8:	7ff00000 	.word	0x7ff00000
 800ccbc:	0800e178 	.word	0x0800e178
 800ccc0:	0800e170 	.word	0x0800e170

0800ccc4 <__ieee754_sqrtf>:
 800ccc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ccc8:	4770      	bx	lr
 800ccca:	0000      	movs	r0, r0
 800cccc:	0000      	movs	r0, r0
	...

0800ccd0 <__ieee754_atan2>:
 800ccd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd4:	ec57 6b11 	vmov	r6, r7, d1
 800ccd8:	4273      	negs	r3, r6
 800ccda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ce58 <__ieee754_atan2+0x188>
 800ccde:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800cce2:	4333      	orrs	r3, r6
 800cce4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cce8:	4543      	cmp	r3, r8
 800ccea:	ec51 0b10 	vmov	r0, r1, d0
 800ccee:	4635      	mov	r5, r6
 800ccf0:	d809      	bhi.n	800cd06 <__ieee754_atan2+0x36>
 800ccf2:	4244      	negs	r4, r0
 800ccf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ccf8:	4304      	orrs	r4, r0
 800ccfa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ccfe:	4544      	cmp	r4, r8
 800cd00:	468e      	mov	lr, r1
 800cd02:	4681      	mov	r9, r0
 800cd04:	d907      	bls.n	800cd16 <__ieee754_atan2+0x46>
 800cd06:	4632      	mov	r2, r6
 800cd08:	463b      	mov	r3, r7
 800cd0a:	f7f3 fa8b 	bl	8000224 <__adddf3>
 800cd0e:	ec41 0b10 	vmov	d0, r0, r1
 800cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd16:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800cd1a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800cd1e:	4334      	orrs	r4, r6
 800cd20:	d103      	bne.n	800cd2a <__ieee754_atan2+0x5a>
 800cd22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd26:	f000 b89b 	b.w	800ce60 <atan>
 800cd2a:	17bc      	asrs	r4, r7, #30
 800cd2c:	f004 0402 	and.w	r4, r4, #2
 800cd30:	ea53 0909 	orrs.w	r9, r3, r9
 800cd34:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cd38:	d107      	bne.n	800cd4a <__ieee754_atan2+0x7a>
 800cd3a:	2c02      	cmp	r4, #2
 800cd3c:	d05f      	beq.n	800cdfe <__ieee754_atan2+0x12e>
 800cd3e:	2c03      	cmp	r4, #3
 800cd40:	d1e5      	bne.n	800cd0e <__ieee754_atan2+0x3e>
 800cd42:	a143      	add	r1, pc, #268	@ (adr r1, 800ce50 <__ieee754_atan2+0x180>)
 800cd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd48:	e7e1      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800cd4a:	4315      	orrs	r5, r2
 800cd4c:	d106      	bne.n	800cd5c <__ieee754_atan2+0x8c>
 800cd4e:	f1be 0f00 	cmp.w	lr, #0
 800cd52:	db5f      	blt.n	800ce14 <__ieee754_atan2+0x144>
 800cd54:	a136      	add	r1, pc, #216	@ (adr r1, 800ce30 <__ieee754_atan2+0x160>)
 800cd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd5a:	e7d8      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800cd5c:	4542      	cmp	r2, r8
 800cd5e:	d10f      	bne.n	800cd80 <__ieee754_atan2+0xb0>
 800cd60:	4293      	cmp	r3, r2
 800cd62:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd66:	d107      	bne.n	800cd78 <__ieee754_atan2+0xa8>
 800cd68:	2c02      	cmp	r4, #2
 800cd6a:	d84c      	bhi.n	800ce06 <__ieee754_atan2+0x136>
 800cd6c:	4b36      	ldr	r3, [pc, #216]	@ (800ce48 <__ieee754_atan2+0x178>)
 800cd6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd76:	e7ca      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800cd78:	2c02      	cmp	r4, #2
 800cd7a:	d848      	bhi.n	800ce0e <__ieee754_atan2+0x13e>
 800cd7c:	4b33      	ldr	r3, [pc, #204]	@ (800ce4c <__ieee754_atan2+0x17c>)
 800cd7e:	e7f6      	b.n	800cd6e <__ieee754_atan2+0x9e>
 800cd80:	4543      	cmp	r3, r8
 800cd82:	d0e4      	beq.n	800cd4e <__ieee754_atan2+0x7e>
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800cd8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd8e:	da1e      	bge.n	800cdce <__ieee754_atan2+0xfe>
 800cd90:	2f00      	cmp	r7, #0
 800cd92:	da01      	bge.n	800cd98 <__ieee754_atan2+0xc8>
 800cd94:	323c      	adds	r2, #60	@ 0x3c
 800cd96:	db1e      	blt.n	800cdd6 <__ieee754_atan2+0x106>
 800cd98:	4632      	mov	r2, r6
 800cd9a:	463b      	mov	r3, r7
 800cd9c:	f7f3 fd22 	bl	80007e4 <__aeabi_ddiv>
 800cda0:	ec41 0b10 	vmov	d0, r0, r1
 800cda4:	f000 f9f4 	bl	800d190 <fabs>
 800cda8:	f000 f85a 	bl	800ce60 <atan>
 800cdac:	ec51 0b10 	vmov	r0, r1, d0
 800cdb0:	2c01      	cmp	r4, #1
 800cdb2:	d013      	beq.n	800cddc <__ieee754_atan2+0x10c>
 800cdb4:	2c02      	cmp	r4, #2
 800cdb6:	d015      	beq.n	800cde4 <__ieee754_atan2+0x114>
 800cdb8:	2c00      	cmp	r4, #0
 800cdba:	d0a8      	beq.n	800cd0e <__ieee754_atan2+0x3e>
 800cdbc:	a318      	add	r3, pc, #96	@ (adr r3, 800ce20 <__ieee754_atan2+0x150>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	f7f3 fa2d 	bl	8000220 <__aeabi_dsub>
 800cdc6:	a318      	add	r3, pc, #96	@ (adr r3, 800ce28 <__ieee754_atan2+0x158>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	e014      	b.n	800cdf8 <__ieee754_atan2+0x128>
 800cdce:	a118      	add	r1, pc, #96	@ (adr r1, 800ce30 <__ieee754_atan2+0x160>)
 800cdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd4:	e7ec      	b.n	800cdb0 <__ieee754_atan2+0xe0>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	2100      	movs	r1, #0
 800cdda:	e7e9      	b.n	800cdb0 <__ieee754_atan2+0xe0>
 800cddc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cde0:	4619      	mov	r1, r3
 800cde2:	e794      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800cde4:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce20 <__ieee754_atan2+0x150>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f7f3 fa19 	bl	8000220 <__aeabi_dsub>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	a10d      	add	r1, pc, #52	@ (adr r1, 800ce28 <__ieee754_atan2+0x158>)
 800cdf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf8:	f7f3 fa12 	bl	8000220 <__aeabi_dsub>
 800cdfc:	e787      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800cdfe:	a10a      	add	r1, pc, #40	@ (adr r1, 800ce28 <__ieee754_atan2+0x158>)
 800ce00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce04:	e783      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800ce06:	a10c      	add	r1, pc, #48	@ (adr r1, 800ce38 <__ieee754_atan2+0x168>)
 800ce08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0c:	e77f      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800ce0e:	2000      	movs	r0, #0
 800ce10:	2100      	movs	r1, #0
 800ce12:	e77c      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800ce14:	a10a      	add	r1, pc, #40	@ (adr r1, 800ce40 <__ieee754_atan2+0x170>)
 800ce16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1a:	e778      	b.n	800cd0e <__ieee754_atan2+0x3e>
 800ce1c:	f3af 8000 	nop.w
 800ce20:	33145c07 	.word	0x33145c07
 800ce24:	3ca1a626 	.word	0x3ca1a626
 800ce28:	54442d18 	.word	0x54442d18
 800ce2c:	400921fb 	.word	0x400921fb
 800ce30:	54442d18 	.word	0x54442d18
 800ce34:	3ff921fb 	.word	0x3ff921fb
 800ce38:	54442d18 	.word	0x54442d18
 800ce3c:	3fe921fb 	.word	0x3fe921fb
 800ce40:	54442d18 	.word	0x54442d18
 800ce44:	bff921fb 	.word	0xbff921fb
 800ce48:	0800e198 	.word	0x0800e198
 800ce4c:	0800e180 	.word	0x0800e180
 800ce50:	54442d18 	.word	0x54442d18
 800ce54:	c00921fb 	.word	0xc00921fb
 800ce58:	7ff00000 	.word	0x7ff00000
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <atan>:
 800ce60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	ec55 4b10 	vmov	r4, r5, d0
 800ce68:	4bbf      	ldr	r3, [pc, #764]	@ (800d168 <atan+0x308>)
 800ce6a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ce6e:	429e      	cmp	r6, r3
 800ce70:	46ab      	mov	fp, r5
 800ce72:	d918      	bls.n	800cea6 <atan+0x46>
 800ce74:	4bbd      	ldr	r3, [pc, #756]	@ (800d16c <atan+0x30c>)
 800ce76:	429e      	cmp	r6, r3
 800ce78:	d801      	bhi.n	800ce7e <atan+0x1e>
 800ce7a:	d109      	bne.n	800ce90 <atan+0x30>
 800ce7c:	b144      	cbz	r4, 800ce90 <atan+0x30>
 800ce7e:	4622      	mov	r2, r4
 800ce80:	462b      	mov	r3, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	4629      	mov	r1, r5
 800ce86:	f7f3 f9cd 	bl	8000224 <__adddf3>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	e006      	b.n	800ce9e <atan+0x3e>
 800ce90:	f1bb 0f00 	cmp.w	fp, #0
 800ce94:	f340 812b 	ble.w	800d0ee <atan+0x28e>
 800ce98:	a597      	add	r5, pc, #604	@ (adr r5, 800d0f8 <atan+0x298>)
 800ce9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce9e:	ec45 4b10 	vmov	d0, r4, r5
 800cea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea6:	4bb2      	ldr	r3, [pc, #712]	@ (800d170 <atan+0x310>)
 800cea8:	429e      	cmp	r6, r3
 800ceaa:	d813      	bhi.n	800ced4 <atan+0x74>
 800ceac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ceb0:	429e      	cmp	r6, r3
 800ceb2:	d80c      	bhi.n	800cece <atan+0x6e>
 800ceb4:	a392      	add	r3, pc, #584	@ (adr r3, 800d100 <atan+0x2a0>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7f3 f9b1 	bl	8000224 <__adddf3>
 800cec2:	4bac      	ldr	r3, [pc, #688]	@ (800d174 <atan+0x314>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	f7f3 fdf3 	bl	8000ab0 <__aeabi_dcmpgt>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d1e7      	bne.n	800ce9e <atan+0x3e>
 800cece:	f04f 3aff 	mov.w	sl, #4294967295
 800ced2:	e029      	b.n	800cf28 <atan+0xc8>
 800ced4:	f000 f95c 	bl	800d190 <fabs>
 800ced8:	4ba7      	ldr	r3, [pc, #668]	@ (800d178 <atan+0x318>)
 800ceda:	429e      	cmp	r6, r3
 800cedc:	ec55 4b10 	vmov	r4, r5, d0
 800cee0:	f200 80bc 	bhi.w	800d05c <atan+0x1fc>
 800cee4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800cee8:	429e      	cmp	r6, r3
 800ceea:	f200 809e 	bhi.w	800d02a <atan+0x1ca>
 800ceee:	4622      	mov	r2, r4
 800cef0:	462b      	mov	r3, r5
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	f7f3 f995 	bl	8000224 <__adddf3>
 800cefa:	4b9e      	ldr	r3, [pc, #632]	@ (800d174 <atan+0x314>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	f7f3 f98f 	bl	8000220 <__aeabi_dsub>
 800cf02:	2200      	movs	r2, #0
 800cf04:	4606      	mov	r6, r0
 800cf06:	460f      	mov	r7, r1
 800cf08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	4629      	mov	r1, r5
 800cf10:	f7f3 f988 	bl	8000224 <__adddf3>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	4630      	mov	r0, r6
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	f7f3 fc62 	bl	80007e4 <__aeabi_ddiv>
 800cf20:	f04f 0a00 	mov.w	sl, #0
 800cf24:	4604      	mov	r4, r0
 800cf26:	460d      	mov	r5, r1
 800cf28:	4622      	mov	r2, r4
 800cf2a:	462b      	mov	r3, r5
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7f3 fb2e 	bl	8000590 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4680      	mov	r8, r0
 800cf3a:	4689      	mov	r9, r1
 800cf3c:	f7f3 fb28 	bl	8000590 <__aeabi_dmul>
 800cf40:	a371      	add	r3, pc, #452	@ (adr r3, 800d108 <atan+0x2a8>)
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	4606      	mov	r6, r0
 800cf48:	460f      	mov	r7, r1
 800cf4a:	f7f3 fb21 	bl	8000590 <__aeabi_dmul>
 800cf4e:	a370      	add	r3, pc, #448	@ (adr r3, 800d110 <atan+0x2b0>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 f966 	bl	8000224 <__adddf3>
 800cf58:	4632      	mov	r2, r6
 800cf5a:	463b      	mov	r3, r7
 800cf5c:	f7f3 fb18 	bl	8000590 <__aeabi_dmul>
 800cf60:	a36d      	add	r3, pc, #436	@ (adr r3, 800d118 <atan+0x2b8>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 f95d 	bl	8000224 <__adddf3>
 800cf6a:	4632      	mov	r2, r6
 800cf6c:	463b      	mov	r3, r7
 800cf6e:	f7f3 fb0f 	bl	8000590 <__aeabi_dmul>
 800cf72:	a36b      	add	r3, pc, #428	@ (adr r3, 800d120 <atan+0x2c0>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f7f3 f954 	bl	8000224 <__adddf3>
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	463b      	mov	r3, r7
 800cf80:	f7f3 fb06 	bl	8000590 <__aeabi_dmul>
 800cf84:	a368      	add	r3, pc, #416	@ (adr r3, 800d128 <atan+0x2c8>)
 800cf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8a:	f7f3 f94b 	bl	8000224 <__adddf3>
 800cf8e:	4632      	mov	r2, r6
 800cf90:	463b      	mov	r3, r7
 800cf92:	f7f3 fafd 	bl	8000590 <__aeabi_dmul>
 800cf96:	a366      	add	r3, pc, #408	@ (adr r3, 800d130 <atan+0x2d0>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f7f3 f942 	bl	8000224 <__adddf3>
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	464b      	mov	r3, r9
 800cfa4:	f7f3 faf4 	bl	8000590 <__aeabi_dmul>
 800cfa8:	a363      	add	r3, pc, #396	@ (adr r3, 800d138 <atan+0x2d8>)
 800cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfae:	4680      	mov	r8, r0
 800cfb0:	4689      	mov	r9, r1
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	f7f3 faeb 	bl	8000590 <__aeabi_dmul>
 800cfba:	a361      	add	r3, pc, #388	@ (adr r3, 800d140 <atan+0x2e0>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 f92e 	bl	8000220 <__aeabi_dsub>
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	f7f3 fae2 	bl	8000590 <__aeabi_dmul>
 800cfcc:	a35e      	add	r3, pc, #376	@ (adr r3, 800d148 <atan+0x2e8>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 f925 	bl	8000220 <__aeabi_dsub>
 800cfd6:	4632      	mov	r2, r6
 800cfd8:	463b      	mov	r3, r7
 800cfda:	f7f3 fad9 	bl	8000590 <__aeabi_dmul>
 800cfde:	a35c      	add	r3, pc, #368	@ (adr r3, 800d150 <atan+0x2f0>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f7f3 f91c 	bl	8000220 <__aeabi_dsub>
 800cfe8:	4632      	mov	r2, r6
 800cfea:	463b      	mov	r3, r7
 800cfec:	f7f3 fad0 	bl	8000590 <__aeabi_dmul>
 800cff0:	a359      	add	r3, pc, #356	@ (adr r3, 800d158 <atan+0x2f8>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 f913 	bl	8000220 <__aeabi_dsub>
 800cffa:	4632      	mov	r2, r6
 800cffc:	463b      	mov	r3, r7
 800cffe:	f7f3 fac7 	bl	8000590 <__aeabi_dmul>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 f90b 	bl	8000224 <__adddf3>
 800d00e:	4622      	mov	r2, r4
 800d010:	462b      	mov	r3, r5
 800d012:	f7f3 fabd 	bl	8000590 <__aeabi_dmul>
 800d016:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	d148      	bne.n	800d0b2 <atan+0x252>
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	f7f3 f8fc 	bl	8000220 <__aeabi_dsub>
 800d028:	e72f      	b.n	800ce8a <atan+0x2a>
 800d02a:	4b52      	ldr	r3, [pc, #328]	@ (800d174 <atan+0x314>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	4620      	mov	r0, r4
 800d030:	4629      	mov	r1, r5
 800d032:	f7f3 f8f5 	bl	8000220 <__aeabi_dsub>
 800d036:	4b4f      	ldr	r3, [pc, #316]	@ (800d174 <atan+0x314>)
 800d038:	4606      	mov	r6, r0
 800d03a:	460f      	mov	r7, r1
 800d03c:	2200      	movs	r2, #0
 800d03e:	4620      	mov	r0, r4
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 f8ef 	bl	8000224 <__adddf3>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	4630      	mov	r0, r6
 800d04c:	4639      	mov	r1, r7
 800d04e:	f7f3 fbc9 	bl	80007e4 <__aeabi_ddiv>
 800d052:	f04f 0a01 	mov.w	sl, #1
 800d056:	4604      	mov	r4, r0
 800d058:	460d      	mov	r5, r1
 800d05a:	e765      	b.n	800cf28 <atan+0xc8>
 800d05c:	4b47      	ldr	r3, [pc, #284]	@ (800d17c <atan+0x31c>)
 800d05e:	429e      	cmp	r6, r3
 800d060:	d21c      	bcs.n	800d09c <atan+0x23c>
 800d062:	4b47      	ldr	r3, [pc, #284]	@ (800d180 <atan+0x320>)
 800d064:	2200      	movs	r2, #0
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 f8d9 	bl	8000220 <__aeabi_dsub>
 800d06e:	4b44      	ldr	r3, [pc, #272]	@ (800d180 <atan+0x320>)
 800d070:	4606      	mov	r6, r0
 800d072:	460f      	mov	r7, r1
 800d074:	2200      	movs	r2, #0
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 fa89 	bl	8000590 <__aeabi_dmul>
 800d07e:	4b3d      	ldr	r3, [pc, #244]	@ (800d174 <atan+0x314>)
 800d080:	2200      	movs	r2, #0
 800d082:	f7f3 f8cf 	bl	8000224 <__adddf3>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4630      	mov	r0, r6
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 fba9 	bl	80007e4 <__aeabi_ddiv>
 800d092:	f04f 0a02 	mov.w	sl, #2
 800d096:	4604      	mov	r4, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	e745      	b.n	800cf28 <atan+0xc8>
 800d09c:	4622      	mov	r2, r4
 800d09e:	462b      	mov	r3, r5
 800d0a0:	4938      	ldr	r1, [pc, #224]	@ (800d184 <atan+0x324>)
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	f7f3 fb9e 	bl	80007e4 <__aeabi_ddiv>
 800d0a8:	f04f 0a03 	mov.w	sl, #3
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	460d      	mov	r5, r1
 800d0b0:	e73a      	b.n	800cf28 <atan+0xc8>
 800d0b2:	4b35      	ldr	r3, [pc, #212]	@ (800d188 <atan+0x328>)
 800d0b4:	4e35      	ldr	r6, [pc, #212]	@ (800d18c <atan+0x32c>)
 800d0b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 f8af 	bl	8000220 <__aeabi_dsub>
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	f7f3 f8ab 	bl	8000220 <__aeabi_dsub>
 800d0ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d0d6:	f7f3 f8a3 	bl	8000220 <__aeabi_dsub>
 800d0da:	f1bb 0f00 	cmp.w	fp, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	f6bf aedc 	bge.w	800ce9e <atan+0x3e>
 800d0e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0ea:	461d      	mov	r5, r3
 800d0ec:	e6d7      	b.n	800ce9e <atan+0x3e>
 800d0ee:	a51c      	add	r5, pc, #112	@ (adr r5, 800d160 <atan+0x300>)
 800d0f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d0f4:	e6d3      	b.n	800ce9e <atan+0x3e>
 800d0f6:	bf00      	nop
 800d0f8:	54442d18 	.word	0x54442d18
 800d0fc:	3ff921fb 	.word	0x3ff921fb
 800d100:	8800759c 	.word	0x8800759c
 800d104:	7e37e43c 	.word	0x7e37e43c
 800d108:	e322da11 	.word	0xe322da11
 800d10c:	3f90ad3a 	.word	0x3f90ad3a
 800d110:	24760deb 	.word	0x24760deb
 800d114:	3fa97b4b 	.word	0x3fa97b4b
 800d118:	a0d03d51 	.word	0xa0d03d51
 800d11c:	3fb10d66 	.word	0x3fb10d66
 800d120:	c54c206e 	.word	0xc54c206e
 800d124:	3fb745cd 	.word	0x3fb745cd
 800d128:	920083ff 	.word	0x920083ff
 800d12c:	3fc24924 	.word	0x3fc24924
 800d130:	5555550d 	.word	0x5555550d
 800d134:	3fd55555 	.word	0x3fd55555
 800d138:	2c6a6c2f 	.word	0x2c6a6c2f
 800d13c:	bfa2b444 	.word	0xbfa2b444
 800d140:	52defd9a 	.word	0x52defd9a
 800d144:	3fadde2d 	.word	0x3fadde2d
 800d148:	af749a6d 	.word	0xaf749a6d
 800d14c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d150:	fe231671 	.word	0xfe231671
 800d154:	3fbc71c6 	.word	0x3fbc71c6
 800d158:	9998ebc4 	.word	0x9998ebc4
 800d15c:	3fc99999 	.word	0x3fc99999
 800d160:	54442d18 	.word	0x54442d18
 800d164:	bff921fb 	.word	0xbff921fb
 800d168:	440fffff 	.word	0x440fffff
 800d16c:	7ff00000 	.word	0x7ff00000
 800d170:	3fdbffff 	.word	0x3fdbffff
 800d174:	3ff00000 	.word	0x3ff00000
 800d178:	3ff2ffff 	.word	0x3ff2ffff
 800d17c:	40038000 	.word	0x40038000
 800d180:	3ff80000 	.word	0x3ff80000
 800d184:	bff00000 	.word	0xbff00000
 800d188:	0800e1b0 	.word	0x0800e1b0
 800d18c:	0800e1d0 	.word	0x0800e1d0

0800d190 <fabs>:
 800d190:	ec51 0b10 	vmov	r0, r1, d0
 800d194:	4602      	mov	r2, r0
 800d196:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d19a:	ec43 2b10 	vmov	d0, r2, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_init>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_fini>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr


Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d250  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  0800d428  0800d428  0000e428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e8  0800f2e8  0001127c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f2e8  0800f2e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2f0  0800f2f0  0001127c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2f0  0800f2f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2f4  0800f2f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20000000  0800f2f8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000124c  20000280  0800f574  00011280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014cc  0800f574  000114cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001127c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd19  00000000  00000000  000112ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003781  00000000  00000000  0002efc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00032748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e4  00000000  00000000  00033e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bfd  00000000  00000000  00035024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c498  00000000  00000000  0005cc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116177  00000000  00000000  000790b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006790  00000000  00000000  0018f274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00195a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000280 	.word	0x20000280
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d410 	.word	0x0800d410

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000284 	.word	0x20000284
 8000214:	0800d410 	.word	0x0800d410

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b988 	b.w	8000f48 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	468e      	mov	lr, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	4688      	mov	r8, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14a      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4617      	mov	r7, r2
 8000c64:	d962      	bls.n	8000d2c <__udivmoddi4+0xdc>
 8000c66:	fab2 f682 	clz	r6, r2
 8000c6a:	b14e      	cbz	r6, 8000c80 <__udivmoddi4+0x30>
 8000c6c:	f1c6 0320 	rsb	r3, r6, #32
 8000c70:	fa01 f806 	lsl.w	r8, r1, r6
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	ea43 0808 	orr.w	r8, r3, r8
 8000c7e:	40b4      	lsls	r4, r6
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c8c:	0c23      	lsrs	r3, r4, #16
 8000c8e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c96:	fb01 f20c 	mul.w	r2, r1, ip
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x62>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ca4:	f080 80ea 	bcs.w	8000e7c <__udivmoddi4+0x22c>
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f240 80e7 	bls.w	8000e7c <__udivmoddi4+0x22c>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	443b      	add	r3, r7
 8000cb2:	1a9a      	subs	r2, r3, r2
 8000cb4:	b2a3      	uxth	r3, r4
 8000cb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc6:	459c      	cmp	ip, r3
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x8e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	f080 80d6 	bcs.w	8000e80 <__udivmoddi4+0x230>
 8000cd4:	459c      	cmp	ip, r3
 8000cd6:	f240 80d3 	bls.w	8000e80 <__udivmoddi4+0x230>
 8000cda:	443b      	add	r3, r7
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce2:	eba3 030c 	sub.w	r3, r3, ip
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11d      	cbz	r5, 8000cf2 <__udivmoddi4+0xa2>
 8000cea:	40f3      	lsrs	r3, r6
 8000cec:	2200      	movs	r2, #0
 8000cee:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d905      	bls.n	8000d06 <__udivmoddi4+0xb6>
 8000cfa:	b10d      	cbz	r5, 8000d00 <__udivmoddi4+0xb0>
 8000cfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000d00:	2100      	movs	r1, #0
 8000d02:	4608      	mov	r0, r1
 8000d04:	e7f5      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d06:	fab3 f183 	clz	r1, r3
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d146      	bne.n	8000d9c <__udivmoddi4+0x14c>
 8000d0e:	4573      	cmp	r3, lr
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xc8>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 8105 	bhi.w	8000f22 <__udivmoddi4+0x2d2>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4690      	mov	r8, r2
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0e5      	beq.n	8000cf2 <__udivmoddi4+0xa2>
 8000d26:	e9c5 4800 	strd	r4, r8, [r5]
 8000d2a:	e7e2      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f000 8090 	beq.w	8000e52 <__udivmoddi4+0x202>
 8000d32:	fab2 f682 	clz	r6, r2
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f040 80a4 	bne.w	8000e84 <__udivmoddi4+0x234>
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	0c03      	lsrs	r3, r0, #16
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	b280      	uxth	r0, r0
 8000d46:	b2bc      	uxth	r4, r7
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d4e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d56:	fb04 f20c 	mul.w	r2, r4, ip
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x11e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x11c>
 8000d66:	429a      	cmp	r2, r3
 8000d68:	f200 80e0 	bhi.w	8000f2c <__udivmoddi4+0x2dc>
 8000d6c:	46c4      	mov	ip, r8
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d74:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d78:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d7c:	fb02 f404 	mul.w	r4, r2, r4
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x144>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x142>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f200 80ca 	bhi.w	8000f26 <__udivmoddi4+0x2d6>
 8000d92:	4602      	mov	r2, r0
 8000d94:	1b1b      	subs	r3, r3, r4
 8000d96:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000d9c:	f1c1 0620 	rsb	r6, r1, #32
 8000da0:	408b      	lsls	r3, r1
 8000da2:	fa22 f706 	lsr.w	r7, r2, r6
 8000da6:	431f      	orrs	r7, r3
 8000da8:	fa0e f401 	lsl.w	r4, lr, r1
 8000dac:	fa20 f306 	lsr.w	r3, r0, r6
 8000db0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000db4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db8:	4323      	orrs	r3, r4
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	fa1f fc87 	uxth.w	ip, r7
 8000dc2:	fbbe f0f9 	udiv	r0, lr, r9
 8000dc6:	0c1c      	lsrs	r4, r3, #16
 8000dc8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dcc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dd0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x1a0>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 3aff 	add.w	sl, r0, #4294967295
 8000de2:	f080 809c 	bcs.w	8000f1e <__udivmoddi4+0x2ce>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8099 	bls.w	8000f1e <__udivmoddi4+0x2ce>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	eba4 040e 	sub.w	r4, r4, lr
 8000df4:	fa1f fe83 	uxth.w	lr, r3
 8000df8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000e00:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e04:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1ce>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e12:	f080 8082 	bcs.w	8000f1a <__udivmoddi4+0x2ca>
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d97f      	bls.n	8000f1a <__udivmoddi4+0x2ca>
 8000e1a:	3b02      	subs	r3, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e2a:	4564      	cmp	r4, ip
 8000e2c:	4673      	mov	r3, lr
 8000e2e:	46e1      	mov	r9, ip
 8000e30:	d362      	bcc.n	8000ef8 <__udivmoddi4+0x2a8>
 8000e32:	d05f      	beq.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x1fe>
 8000e36:	ebb8 0203 	subs.w	r2, r8, r3
 8000e3a:	eb64 0409 	sbc.w	r4, r4, r9
 8000e3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e42:	fa22 f301 	lsr.w	r3, r2, r1
 8000e46:	431e      	orrs	r6, r3
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	e74f      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000e52:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e56:	0c01      	lsrs	r1, r0, #16
 8000e58:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e62:	463b      	mov	r3, r7
 8000e64:	4638      	mov	r0, r7
 8000e66:	463c      	mov	r4, r7
 8000e68:	46b8      	mov	r8, r7
 8000e6a:	46be      	mov	lr, r7
 8000e6c:	2620      	movs	r6, #32
 8000e6e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e72:	eba2 0208 	sub.w	r2, r2, r8
 8000e76:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e7a:	e766      	b.n	8000d4a <__udivmoddi4+0xfa>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	e718      	b.n	8000cb2 <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e72c      	b.n	8000cde <__udivmoddi4+0x8e>
 8000e84:	f1c6 0220 	rsb	r2, r6, #32
 8000e88:	fa2e f302 	lsr.w	r3, lr, r2
 8000e8c:	40b7      	lsls	r7, r6
 8000e8e:	40b1      	lsls	r1, r6
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e9e:	b2bc      	uxth	r4, r7
 8000ea0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ea4:	0c11      	lsrs	r1, r2, #16
 8000ea6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eaa:	fb08 f904 	mul.w	r9, r8, r4
 8000eae:	40b0      	lsls	r0, r6
 8000eb0:	4589      	cmp	r9, r1
 8000eb2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eb6:	b280      	uxth	r0, r0
 8000eb8:	d93e      	bls.n	8000f38 <__udivmoddi4+0x2e8>
 8000eba:	1879      	adds	r1, r7, r1
 8000ebc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ec0:	d201      	bcs.n	8000ec6 <__udivmoddi4+0x276>
 8000ec2:	4589      	cmp	r9, r1
 8000ec4:	d81f      	bhi.n	8000f06 <__udivmoddi4+0x2b6>
 8000ec6:	eba1 0109 	sub.w	r1, r1, r9
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000edc:	4542      	cmp	r2, r8
 8000ede:	d229      	bcs.n	8000f34 <__udivmoddi4+0x2e4>
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ee6:	d2c4      	bcs.n	8000e72 <__udivmoddi4+0x222>
 8000ee8:	4542      	cmp	r2, r8
 8000eea:	d2c2      	bcs.n	8000e72 <__udivmoddi4+0x222>
 8000eec:	f1a9 0102 	sub.w	r1, r9, #2
 8000ef0:	443a      	add	r2, r7
 8000ef2:	e7be      	b.n	8000e72 <__udivmoddi4+0x222>
 8000ef4:	45f0      	cmp	r8, lr
 8000ef6:	d29d      	bcs.n	8000e34 <__udivmoddi4+0x1e4>
 8000ef8:	ebbe 0302 	subs.w	r3, lr, r2
 8000efc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f00:	3801      	subs	r0, #1
 8000f02:	46e1      	mov	r9, ip
 8000f04:	e796      	b.n	8000e34 <__udivmoddi4+0x1e4>
 8000f06:	eba7 0909 	sub.w	r9, r7, r9
 8000f0a:	4449      	add	r1, r9
 8000f0c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f10:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f14:	fb09 f804 	mul.w	r8, r9, r4
 8000f18:	e7db      	b.n	8000ed2 <__udivmoddi4+0x282>
 8000f1a:	4673      	mov	r3, lr
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1ce>
 8000f1e:	4650      	mov	r0, sl
 8000f20:	e766      	b.n	8000df0 <__udivmoddi4+0x1a0>
 8000f22:	4608      	mov	r0, r1
 8000f24:	e6fd      	b.n	8000d22 <__udivmoddi4+0xd2>
 8000f26:	443b      	add	r3, r7
 8000f28:	3a02      	subs	r2, #2
 8000f2a:	e733      	b.n	8000d94 <__udivmoddi4+0x144>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	443b      	add	r3, r7
 8000f32:	e71c      	b.n	8000d6e <__udivmoddi4+0x11e>
 8000f34:	4649      	mov	r1, r9
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x222>
 8000f38:	eba1 0109 	sub.w	r1, r1, r9
 8000f3c:	46c4      	mov	ip, r8
 8000f3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f42:	fb09 f804 	mul.w	r8, r9, r4
 8000f46:	e7c4      	b.n	8000ed2 <__udivmoddi4+0x282>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <modbus_1t5_Timeout+0x3c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000029c 	.word	0x2000029c

08000f8c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <modbus_3t5_Timeout+0x1c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	755a      	strb	r2, [r3, #21]

}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000029c 	.word	0x2000029c

08000fac <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f00a fd01 	bl	800b9bc <HAL_UART_GetError>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	d101      	bne.n	8000fc4 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000fc0:	f7ff ffc4 	bl	8000f4c <modbus_1t5_Timeout>

	}
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000fd6:	4a25      	ldr	r2, [pc, #148]	@ (800106c <Modbus_init+0xa0>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <Modbus_init+0xa0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <Modbus_init+0xa4>)
 8000fea:	210e      	movs	r1, #14
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 ff09 	bl	8009e04 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00a fc89 	bl	800b910 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fca0 	bl	800b948 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <Modbus_init+0xa8>)
 800100e:	2104      	movs	r1, #4
 8001010:	4618      	mov	r0, r3
 8001012:	f009 ff47 	bl	800aea4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <Modbus_init+0xa0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <Modbus_init+0xa0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <Modbus_init+0xa0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001028:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800102c:	4413      	add	r3, r2
 800102e:	3302      	adds	r3, #2
 8001030:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001034:	4619      	mov	r1, r3
 8001036:	f00a f86f 	bl	800b118 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <Modbus_init+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10c      	bne.n	8001064 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <Modbus_init+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4618      	mov	r0, r3
 8001052:	f007 fe03 	bl	8008c5c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <Modbus_init+0xa0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f008 f85c 	bl	800911c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000029c 	.word	0x2000029c
 8001070:	08000f8d 	.word	0x08000f8d
 8001074:	08000fad 	.word	0x08000fad

08001078 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001088:	23ff      	movs	r3, #255	@ 0xff
 800108a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800108c:	e013      	b.n	80010b6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	4053      	eors	r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <CRC16+0x68>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4053      	eors	r3, r2
 80010aa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <CRC16+0x6c>)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80010b6:	883b      	ldrh	r3, [r7, #0]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	803a      	strh	r2, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e6      	bne.n	800108e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	b29b      	uxth	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000100 	.word	0x20000100
 80010e4:	20000000 	.word	0x20000000

080010e8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010ee:	4b7e      	ldr	r3, [pc, #504]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7ddb      	ldrb	r3, [r3, #23]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80a      	bhi.n	8001110 <Modbus_Protocal_Worker+0x28>
 80010fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001100 <Modbus_Protocal_Worker+0x18>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	0800111b 	.word	0x0800111b
 8001104:	080012af 	.word	0x080012af
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011eb 	.word	0x080011eb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001110:	4b75      	ldr	r3, [pc, #468]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	75da      	strb	r2, [r3, #23]
		break;
 8001118:	e0e1      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800111a:	4b73      	ldr	r3, [pc, #460]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001126:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800112e:	f000 f9cd 	bl	80014cc <Modbus_Emission>
 8001132:	e018      	b.n	8001166 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001134:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001148:	b29b      	uxth	r3, r3
 800114a:	429a      	cmp	r2, r3
 800114c:	d00b      	beq.n	8001166 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800114e:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001156:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800115e:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2203      	movs	r2, #3
 8001164:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001166:	4b60      	ldr	r3, [pc, #384]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001170:	2b20      	cmp	r3, #32
 8001172:	f040 80ad 	bne.w	80012d0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001176:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001180:	4b59      	ldr	r3, [pc, #356]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b57      	ldr	r3, [pc, #348]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001192:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001196:	4413      	add	r3, r2
 8001198:	3302      	adds	r3, #2
 800119a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800119e:	4619      	mov	r1, r3
 80011a0:	f009 ffba 	bl	800b118 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80011a4:	e094      	b.n	80012d0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80011a6:	4b50      	ldr	r3, [pc, #320]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	7d1b      	ldrb	r3, [r3, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8091 	beq.w	80012d4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	22fe      	movs	r2, #254	@ 0xfe
 80011b8:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011ba:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80011c4:	4b48      	ldr	r3, [pc, #288]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80011d4:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80011dc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011e0:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2204      	movs	r2, #4
 80011e6:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011e8:	e074      	b.n	80012d4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011ea:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011f2:	f113 0f02 	cmn.w	r3, #2
 80011f6:	d150      	bne.n	800129a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001200:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001210:	3b02      	subs	r3, #2
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff ff2f 	bl	8001078 <CRC16>
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800121e:	793a      	ldrb	r2, [r7, #4]
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800122c:	3b02      	subs	r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001234:	429a      	cmp	r2, r3
 8001236:	d10c      	bne.n	8001252 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001238:	797a      	ldrb	r2, [r7, #5]
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001246:	3b01      	subs	r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800124e:	429a      	cmp	r2, r3
 8001250:	d004      	beq.n	800125c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	759a      	strb	r2, [r3, #22]
				break;
 800125a:	e040      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001264:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d113      	bne.n	8001296 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800127e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001288:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800128a:	461a      	mov	r2, r3
 800128c:	f00b fd22 	bl	800ccd4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001290:	f000 f904 	bl	800149c <Modbus_frame_response>
 8001294:	e001      	b.n	800129a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001296:	bf00      	nop
					}
		break;


	}
}
 8001298:	e021      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	7d5b      	ldrb	r3, [r3, #21]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d019      	beq.n	80012d8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	75da      	strb	r2, [r3, #23]
		break;
 80012ac:	e014      	b.n	80012d8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d10f      	bne.n	80012dc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <Modbus_Protocal_Worker+0x200>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	75da      	strb	r2, [r3, #23]
		break;
 80012ce:	e005      	b.n	80012dc <Modbus_Protocal_Worker+0x1f4>
		break;
 80012d0:	bf00      	nop
 80012d2:	e004      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012d4:	bf00      	nop
 80012d6:	e002      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <Modbus_Protocal_Worker+0x1f6>
		break;
 80012dc:	bf00      	nop
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000029c 	.word	0x2000029c

080012ec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <modbusWrite1Register+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7e5b      	ldrb	r3, [r3, #25]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001368 <modbusWrite1Register+0x7c>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	7e92      	ldrb	r2, [r2, #26]
 8001302:	4413      	add	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <modbusWrite1Register+0x7c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	429a      	cmp	r2, r3
 8001310:	d903      	bls.n	800131a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001312:	2002      	movs	r0, #2
 8001314:	f000 f8a0 	bl	8001458 <ModbusErrorReply>
			 return;
 8001318:	e023      	b.n	8001362 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <modbusWrite1Register+0x7c>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	7ed2      	ldrb	r2, [r2, #27]
 800132c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	440b      	add	r3, r1
 800133e:	7f12      	ldrb	r2, [r2, #28]
 8001340:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <modbusWrite1Register+0x7c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <modbusWrite1Register+0x7c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001350:	2208      	movs	r2, #8
 8001352:	4619      	mov	r1, r3
 8001354:	f00b fcbe 	bl	800ccd4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <modbusWrite1Register+0x7c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000029c 	.word	0x2000029c

0800136c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001372:	4b38      	ldr	r3, [pc, #224]	@ (8001454 <modbusRead1Register+0xe8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7edb      	ldrb	r3, [r3, #27]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <modbusRead1Register+0xe8>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	7f12      	ldrb	r2, [r2, #28]
 8001382:	4413      	add	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001386:	4b33      	ldr	r3, [pc, #204]	@ (8001454 <modbusRead1Register+0xe8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	7e5b      	ldrb	r3, [r3, #25]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	4a30      	ldr	r2, [pc, #192]	@ (8001454 <modbusRead1Register+0xe8>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	7e92      	ldrb	r2, [r2, #26]
 8001396:	4413      	add	r3, r2
 8001398:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <modbusRead1Register+0x3a>
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2b7d      	cmp	r3, #125	@ 0x7d
 80013a4:	d903      	bls.n	80013ae <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f856 	bl	8001458 <ModbusErrorReply>
		 return;
 80013ac:	e04e      	b.n	800144c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <modbusRead1Register+0xe8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d808      	bhi.n	80013cc <modbusRead1Register+0x60>
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4413      	add	r3, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <modbusRead1Register+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d903      	bls.n	80013d4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 f843 	bl	8001458 <ModbusErrorReply>
		 return;
 80013d2:	e03b      	b.n	800144c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <modbusRead1Register+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <modbusRead1Register+0xe8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013ee:	2400      	movs	r4, #0
 80013f0:	e020      	b.n	8001434 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <modbusRead1Register+0xe8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	4423      	add	r3, r4
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	18d1      	adds	r1, r2, r3
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <modbusRead1Register+0xe8>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	1c63      	adds	r3, r4, #1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	7849      	ldrb	r1, [r1, #1]
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <modbusRead1Register+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	4423      	add	r3, r4
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	18d1      	adds	r1, r2, r3
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <modbusRead1Register+0xe8>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	0063      	lsls	r3, r4, #1
 8001426:	3303      	adds	r3, #3
 8001428:	7809      	ldrb	r1, [r1, #0]
 800142a:	4413      	add	r3, r2
 800142c:	460a      	mov	r2, r1
 800142e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001432:	3401      	adds	r4, #1
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	429c      	cmp	r4, r3
 8001438:	dbdb      	blt.n	80013f2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	3301      	adds	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <modbusRead1Register+0xe8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	2000029c 	.word	0x2000029c

08001458 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <ModbusErrorReply+0x40>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	7e1a      	ldrb	r2, [r3, #24]
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <ModbusErrorReply+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <ModbusErrorReply+0x40>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <ModbusErrorReply+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000029c 	.word	0x2000029c

0800149c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <Modbus_frame_response+0x2c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	7e1b      	ldrb	r3, [r3, #24]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d004      	beq.n	80014b4 <Modbus_frame_response+0x18>
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d105      	bne.n	80014ba <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80014ae:	f7ff ff1d 	bl	80012ec <modbusWrite1Register>
		break;
 80014b2:	e006      	b.n	80014c2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80014b4:	f7ff ff5a 	bl	800136c <modbusRead1Register>
		break;
 80014b8:	e003      	b.n	80014c2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff ffcc 	bl	8001458 <ModbusErrorReply>
		break;
 80014c0:	bf00      	nop

	}
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000029c 	.word	0x2000029c

080014cc <Modbus_Emission>:

void Modbus_Emission()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d15d      	bne.n	800159c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014e0:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014ee:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014f6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <Modbus_Emission+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001508:	461a      	mov	r2, r3
 800150a:	f00b fbe3 	bl	800ccd4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001516:	461a      	mov	r2, r3
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <Modbus_Emission+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3203      	adds	r2, #3
 800151e:	b292      	uxth	r2, r2
 8001520:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <Modbus_Emission+0xe8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001534:	3b02      	subs	r3, #2
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fd9d 	bl	8001078 <CRC16>
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800154e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001550:	7939      	ldrb	r1, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	460a      	mov	r2, r1
 8001556:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <Modbus_Emission+0xe8>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001566:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001568:	7979      	ldrb	r1, [r7, #5]
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157c:	2b20      	cmp	r3, #32
 800157e:	d10d      	bne.n	800159c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <Modbus_Emission+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001592:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001596:	461a      	mov	r2, r3
 8001598:	f009 fd3e 	bl	800b018 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <Modbus_Emission+0xe8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <Modbus_Emission+0xe8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	755a      	strb	r2, [r3, #21]

}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000029c 	.word	0x2000029c

080015b8 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015c4:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	615a      	str	r2, [r3, #20]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PIDCompute>:

float PIDCompute(CONTROLLER* controller , float kp, float ki, float kd, float error)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6178      	str	r0, [r7, #20]
 80015e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80015ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80015f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80015f4:	edc7 1a01 	vstr	s3, [r7, #4]

	controller -> kp = kp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]
	controller -> kd = kd;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	609a      	str	r2, [r3, #8]
	controller -> ki = ki;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]

    // Anti-windup: only integrate if not saturated
    if (!((controller->u >= controller->u_max && error > 0) ||
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	edd3 7a04 	vldr	s15, [r3, #16]
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	bfac      	ite	ge
 8001620:	2301      	movge	r3, #1
 8001622:	2300      	movlt	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10e      	bne.n	800164e <PIDCompute+0x6e>
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	bfcc      	ite	gt
 800163e:	2301      	movgt	r3, #1
 8001640:	2300      	movle	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f083 0301 	eor.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d059      	beq.n	8001702 <PIDCompute+0x122>
          (controller->u <= controller->u_min && error < 0)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	ed93 7a03 	vldr	s14, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	edd3 7a05 	vldr	s15, [r3, #20]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
    if (!((controller->u >= controller->u_max && error > 0) ||
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10e      	bne.n	8001692 <PIDCompute+0xb2>
          (controller->u <= controller->u_min && error < 0)))
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	bf4c      	ite	mi
 8001682:	2301      	movmi	r3, #1
 8001684:	2300      	movpl	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d037      	beq.n	8001702 <PIDCompute+0x122>
    {
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	edd3 7a01 	vldr	s15, [r3, #4]
 800169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
                      - (controller->kp + 2 * controller->kd) * controller->prev_error_one
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee37 7a67 	vsub.f32	s14, s14, s15
                      + (controller->kd * controller->prev_error_two);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	edd3 7a07 	vldr	s15, [r3, #28]
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 80016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ea:	edc7 7a07 	vstr	s15, [r7, #28]

        controller->u += delta_u;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80016f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (controller->u > controller->u_max) {controller->u = controller->u_max;}
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	ed93 7a03 	vldr	s14, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	edd3 7a04 	vldr	s15, [r3, #16]
 800170e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd04      	ble.n	8001722 <PIDCompute+0x142>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e00e      	b.n	8001740 <PIDCompute+0x160>
    else if (controller->u < controller->u_min) {controller->u = controller->u_min;}
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	ed93 7a03 	vldr	s14, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	edd3 7a05 	vldr	s15, [r3, #20]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d503      	bpl.n	8001740 <PIDCompute+0x160>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	60da      	str	r2, [r3, #12]

    // Shift error history
    controller->prev_error_two = controller->prev_error_one;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	61da      	str	r2, [r3, #28]
    controller->prev_error_one = error;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]

    return controller->u;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	ee07 3a90 	vmov	s15, r3
}
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	3724      	adds	r7, #36	@ 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6178      	str	r0, [r7, #20]
 800176c:	6139      	str	r1, [r7, #16]
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	ed87 0a02 	vstr	s0, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 80017b8:	213c      	movs	r1, #60	@ 0x3c
 80017ba:	6938      	ldr	r0, [r7, #16]
 80017bc:	f007 fdf0 	bl	80093a0 <HAL_TIM_Encoder_Start>

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0fd9      	lsrs	r1, r3, #31
 80017f6:	440b      	add	r3, r1
 80017f8:	105b      	asrs	r3, r3, #1
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd07      	ble.n	800180e <QEIPosVelUpdate+0x46>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1a      	ldr	r2, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	621a      	str	r2, [r3, #32]
 800180c:	e010      	b.n	8001830 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	0fd9      	lsrs	r1, r3, #31
 8001818:	440b      	add	r3, r1
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	425b      	negs	r3, r3
 800181e:	429a      	cmp	r2, r3
 8001820:	da06      	bge.n	8001830 <QEIPosVelUpdate+0x68>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	441a      	add	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	441a      	add	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	edd3 7a05 	vldr	s15, [r3, #20]
 8001866:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800186a:	ee17 0a90 	vmov	r0, s15
 800186e:	f7fe fe37 	bl	80004e0 <__aeabi_f2d>
 8001872:	a323      	add	r3, pc, #140	@ (adr r3, 8001900 <QEIPosVelUpdate+0x138>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fe8a 	bl	8000590 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f97c 	bl	8000b80 <__aeabi_d2f>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a8:	ee17 0a90 	vmov	r0, s15
 80018ac:	f7fe fe18 	bl	80004e0 <__aeabi_f2d>
 80018b0:	a313      	add	r3, pc, #76	@ (adr r3, 8001900 <QEIPosVelUpdate+0x138>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe6b 	bl	8000590 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fdf8 	bl	80004bc <__aeabi_i2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ff86 	bl	80007e4 <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f94e 	bl	8000b80 <__aeabi_d2f>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdb0      	pop	{r4, r5, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	54442d18 	.word	0x54442d18
 8001904:	400921fb 	.word	0x400921fb

08001908 <QEI_Reset>:

void QEI_Reset(QEI *qei)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    // 1) stop encoder (optional)
    HAL_TIM_Encoder_Stop(qei->htim_qei, TIM_CHANNEL_ALL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	213c      	movs	r1, #60	@ 0x3c
 8001916:	4618      	mov	r0, r3
 8001918:	f007 fdd0 	bl	80094bc <HAL_TIM_Encoder_Stop>

    // 2) clear the hardware counter
    __HAL_TIM_SET_COUNTER(qei->htim_qei, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

    // 3) clear your software state
    qei->new_val   = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->old_val   = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->pulses    = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
    qei->revs      = 0.0f;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    qei->rads      = 0.0f;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    qei->radps     = 0.0f;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) restart encoder
    HAL_TIM_Encoder_Start(qei->htim_qei, TIM_CHANNEL_ALL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	213c      	movs	r1, #60	@ 0x3c
 8001956:	4618      	mov	r0, r3
 8001958:	f007 fd22 	bl	80093a0 <HAL_TIM_Encoder_Start>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <Trapezoidal_Update>:
 * @brief  Advance the profile by dt seconds, always in a local (0 → distance_total) frame.
 *         current_velocity and current_position are non-negative.  You only apply
 *         the ±1 sign when converting to “absolute” outside.
 */
void Trapezoidal_Update(VELO_PROFILE *profile, float dt)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7f1b      	ldrb	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8099 	bne.w	8001aac <Trapezoidal_Update+0x148>
        return;
    }

    // 1) How much remains in the local frame?
    //    (local coordinates always go from 0 → distance_total)
    float remaining = profile->target_position - profile->current_position;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a03 	vldr	s15, [r3, #12]
 8001986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198a:	edc7 7a03 	vstr	s15, [r7, #12]
    if (remaining < 0.0f) {
 800198e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	d502      	bpl.n	80019a2 <Trapezoidal_Update+0x3e>
        remaining = 0.0f;
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
    }

    // 2) Compute stopping distance in local frame: v^2/(2a)
    float stopping_dist = (profile->current_velocity * profile->current_velocity)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80019ae:	ee67 6a27 	vmul.f32	s13, s14, s15
                          / (2.0f * profile->a_max);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
    float stopping_dist = (profile->current_velocity * profile->current_velocity)
 80019bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c0:	edc7 7a02 	vstr	s15, [r7, #8]

    // 3) Decide “accelerate” vs “decelerate” (all in positive magnitude)
    if (remaining <= stopping_dist) {
 80019c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d81b      	bhi.n	8001a0e <Trapezoidal_Update+0xaa>
        // We are within braking distance → decelerate
        profile->current_velocity -= profile->a_max * dt;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edd3 6a02 	vldr	s13, [r3, #8]
 80019e2:	edd7 7a00 	vldr	s15, [r7]
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edc3 7a04 	vstr	s15, [r3, #16]
        if (profile->current_velocity < 0.0f) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d52d      	bpl.n	8001a60 <Trapezoidal_Update+0xfc>
            profile->current_velocity = 0.0f;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	e028      	b.n	8001a60 <Trapezoidal_Update+0xfc>
        }
    }
    else {
        // Not yet at braking zone → accelerate up to v_peak
        if (profile->current_velocity < profile->v_peak) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d51d      	bpl.n	8001a60 <Trapezoidal_Update+0xfc>
            profile->current_velocity += profile->a_max * dt;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a04 	vstr	s15, [r3, #16]
            if (profile->current_velocity > profile->v_peak) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	dd03      	ble.n	8001a60 <Trapezoidal_Update+0xfc>
                profile->current_velocity = profile->v_peak;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
        }
        // Once we hit v_peak, we just hold it (no extra “cruise” logic needed)
    }

    // 4) Integrate position in local frame (always positive)
    profile->current_position += profile->current_velocity * dt;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a6c:	edd7 7a00 	vldr	s15, [r7]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edc3 7a03 	vstr	s15, [r3, #12]

    // 5) If we've reached (or overshot) distance_total, clamp & finish
    if (profile->current_position >= profile->target_position) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	db0c      	blt.n	8001aae <Trapezoidal_Update+0x14a>
        profile->current_position = profile->target_position;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
        profile->current_velocity = 0.0f;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
        profile->finished = 1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	771a      	strb	r2, [r3, #28]
 8001aaa:	e000      	b.n	8001aae <Trapezoidal_Update+0x14a>
        return;
 8001aac:	bf00      	nop
    }
}
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <Trapezoidal_Init>:
void Trapezoidal_Init(VELO_PROFILE *profile,
                      float abs_start,
                      float abs_goal,
                      float v_max,
                      float a_max)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6178      	str	r0, [r7, #20]
 8001ac0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ac4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ac8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001acc:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->start_offset    = abs_start;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	621a      	str	r2, [r3, #32]
    float delta              = abs_goal - abs_start;
 8001ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae2:	edc7 7a07 	vstr	s15, [r7, #28]
    profile->distance_total  = fabsf(delta);
 8001ae6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aea:	eef0 7ae7 	vabs.f32	s15, s15
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	edc3 7a00 	vstr	s15, [r3]
    profile->direction       = (delta >= 0.0f) ? +1.0f : -1.0f;
 8001af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	db02      	blt.n	8001b08 <Trapezoidal_Init+0x50>
 8001b02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b06:	e000      	b.n	8001b0a <Trapezoidal_Init+0x52>
 8001b08:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <Trapezoidal_Init+0x108>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	619a      	str	r2, [r3, #24]

    profile->current_position = 0.0f;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    profile->current_velocity = 0.0f;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
    profile->target_position  = profile->distance_total;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	615a      	str	r2, [r3, #20]
    profile->finished         = 0;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]

    profile->v_max = fabsf(v_max);
 8001b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b30:	eef0 7ae7 	vabs.f32	s15, s15
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->a_max = fabsf(a_max);
 8001b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	edc3 7a02 	vstr	s15, [r3, #8]

    float d_min = (profile->v_max * profile->v_max) / profile->a_max;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b62:	edc7 7a06 	vstr	s15, [r7, #24]
    if (profile->distance_total < d_min) {
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd15      	ble.n	8001ba6 <Trapezoidal_Init+0xee>
        profile->is_triangular = 1;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        profile->v_peak        = sqrtf(profile->a_max * profile->distance_total);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	eeb0 0a67 	vmov.f32	s0, s15
 8001b96:	f00b f8d9 	bl	800cd4c <sqrtf>
 8001b9a:	eef0 7a40 	vmov.f32	s15, s0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    } else {
        profile->is_triangular = 0;
        profile->v_peak        = profile->v_max;
    }
}
 8001ba4:	e007      	b.n	8001bb6 <Trapezoidal_Init+0xfe>
        profile->is_triangular = 0;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        profile->v_peak        = profile->v_max;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	bf800000 	.word	0xbf800000

08001bc4 <Trapezoidal_GetCurrentAbsolute>:
 *
 * In other words, if you called Trapezoidal_Init(&p, 100.0f, 150.0f, …),
 * then GetCurrentAbsolute(p) goes 100 → 150 as current_position goes 0 → 50.
 */
static inline float Trapezoidal_GetCurrentAbsolute(VELO_PROFILE *profile)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    return profile->start_offset
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 7a08 	vldr	s14, [r3, #32]
         + (profile->direction * profile->current_position);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bfa:	f003 fa72 	bl	80050e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bfe:	f000 f8d5 	bl	8001dac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c02:	f000 fd81 	bl	8002708 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c06:	f000 fd3d 	bl	8002684 <MX_DMA_Init>
	MX_TIM1_Init();
 8001c0a:	f000 fa09 	bl	8002020 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c0e:	f000 fac3 	bl	8002198 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001c12:	f000 fb65 	bl	80022e0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001c16:	f000 fbb9 	bl	800238c <MX_TIM5_Init>
	MX_TIM3_Init();
 8001c1a:	f000 fb0b 	bl	8002234 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001c1e:	f000 f911 	bl	8001e44 <MX_ADC1_Init>
	MX_TIM16_Init();
 8001c22:	f000 fcb1 	bl	8002588 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001c26:	f000 fcdf 	bl	80025e8 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8001c2a:	f000 f993 	bl	8001f54 <MX_ADC2_Init>
	MX_TIM8_Init();
 8001c2e:	f000 fbfb 	bl	8002428 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <main+0x138>)
 8001c34:	4a3e      	ldr	r2, [pc, #248]	@ (8001d30 <main+0x13c>)
 8001c36:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <main+0x138>)
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d34 <main+0x140>)
 8001c3c:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <main+0x138>)
 8001c40:	2215      	movs	r2, #21
 8001c42:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <main+0x138>)
 8001c46:	2246      	movs	r2, #70	@ 0x46
 8001c48:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, &registerFrame);
 8001c4a:	493b      	ldr	r1, [pc, #236]	@ (8001d38 <main+0x144>)
 8001c4c:	4837      	ldr	r0, [pc, #220]	@ (8001d2c <main+0x138>)
 8001c4e:	f7ff f9bd 	bl	8000fcc <Modbus_init>

	PID_POS_pris.Kp = Kp_pos_pris;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <main+0x148>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <main+0x14c>)
 8001c58:	6193      	str	r3, [r2, #24]
	PID_POS_pris.Ki = Ki_pos_pris;
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d44 <main+0x150>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a38      	ldr	r2, [pc, #224]	@ (8001d40 <main+0x14c>)
 8001c60:	61d3      	str	r3, [r2, #28]
	PID_POS_pris.Kd = Kd_pos_pris;
 8001c62:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <main+0x154>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <main+0x14c>)
 8001c68:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_pris, 0);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4834      	ldr	r0, [pc, #208]	@ (8001d40 <main+0x14c>)
 8001c6e:	f00a ffc9 	bl	800cc04 <arm_pid_init_f32>

	PID_POS_re.Kp = Kp_pos_re;
 8001c72:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <main+0x158>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a36      	ldr	r2, [pc, #216]	@ (8001d50 <main+0x15c>)
 8001c78:	6193      	str	r3, [r2, #24]
	PID_POS_re.Ki = Ki_pos_re;
 8001c7a:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <main+0x160>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <main+0x15c>)
 8001c80:	61d3      	str	r3, [r2, #28]
	PID_POS_re.Kd = Kd_pos_re;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <main+0x164>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <main+0x15c>)
 8001c88:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_re, 0);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4830      	ldr	r0, [pc, #192]	@ (8001d50 <main+0x15c>)
 8001c8e:	f00a ffb9 	bl	800cc04 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <main+0x168>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4931      	ldr	r1, [pc, #196]	@ (8001d60 <main+0x16c>)
 8001c9c:	4831      	ldr	r0, [pc, #196]	@ (8001d64 <main+0x170>)
 8001c9e:	f002 fc59 	bl	8004554 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8001ca2:	2340      	movs	r3, #64	@ 0x40
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <main+0x168>)
 8001ca8:	2204      	movs	r2, #4
 8001caa:	492d      	ldr	r1, [pc, #180]	@ (8001d60 <main+0x16c>)
 8001cac:	482e      	ldr	r0, [pc, #184]	@ (8001d68 <main+0x174>)
 8001cae:	f002 fc51 	bl	8004554 <MotorInit>
	HAL_TIM_Base_Start(&htim8);
 8001cb2:	482e      	ldr	r0, [pc, #184]	@ (8001d6c <main+0x178>)
 8001cb4:	f006 ff62 	bl	8008b7c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	482c      	ldr	r0, [pc, #176]	@ (8001d6c <main+0x178>)
 8001cbc:	f007 f8b4 	bl	8008e28 <HAL_TIM_PWM_Start>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8001cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001d70 <main+0x17c>
 8001cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ccc:	4929      	ldr	r1, [pc, #164]	@ (8001d74 <main+0x180>)
 8001cce:	482a      	ldr	r0, [pc, #168]	@ (8001d78 <main+0x184>)
 8001cd0:	f7ff fd48 	bl	8001764 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8001cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd8:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001d70 <main+0x17c>
 8001cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce0:	4926      	ldr	r1, [pc, #152]	@ (8001d7c <main+0x188>)
 8001ce2:	4827      	ldr	r0, [pc, #156]	@ (8001d80 <main+0x18c>)
 8001ce4:	f7ff fd3e 	bl	8001764 <QEIInit>

	PIDInit(&prismatic_vel_control, 65535, -65535);
 8001ce8:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001d84 <main+0x190>
 8001cec:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001d88 <main+0x194>
 8001cf0:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <main+0x198>)
 8001cf2:	f7ff fc61 	bl	80015b8 <PIDInit>
	PIDInit(&revolute_vel_control, 65535, -65535);
 8001cf6:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001d84 <main+0x190>
 8001cfa:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001d88 <main+0x194>
 8001cfe:	4824      	ldr	r0, [pc, #144]	@ (8001d90 <main+0x19c>)
 8001d00:	f7ff fc5a 	bl	80015b8 <PIDInit>

	HAL_TIM_Base_Start_IT(&htim5);
 8001d04:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <main+0x1a0>)
 8001d06:	f006 ffa9 	bl	8008c5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d0a:	4823      	ldr	r0, [pc, #140]	@ (8001d98 <main+0x1a4>)
 8001d0c:	f006 ffa6 	bl	8008c5c <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
 8001d10:	2214      	movs	r2, #20
 8001d12:	4922      	ldr	r1, [pc, #136]	@ (8001d9c <main+0x1a8>)
 8001d14:	4822      	ldr	r0, [pc, #136]	@ (8001da0 <main+0x1ac>)
 8001d16:	f003 fe51 	bl	80059bc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, Prox_RawRead, 10);
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	4921      	ldr	r1, [pc, #132]	@ (8001da4 <main+0x1b0>)
 8001d1e:	4822      	ldr	r0, [pc, #136]	@ (8001da8 <main+0x1b4>)
 8001d20:	f003 fe4c 	bl	80059bc <HAL_ADC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8001d24:	f7ff f9e0 	bl	80010e8 <Modbus_Protocal_Worker>
 8001d28:	e7fc      	b.n	8001d24 <main+0x130>
 8001d2a:	bf00      	nop
 8001d2c:	20000bb0 	.word	0x20000bb0
 8001d30:	200009cc 	.word	0x200009cc
 8001d34:	20000900 	.word	0x20000900
 8001d38:	20001088 	.word	0x20001088
 8001d3c:	20000208 	.word	0x20000208
 8001d40:	20001170 	.word	0x20001170
 8001d44:	20001160 	.word	0x20001160
 8001d48:	20001164 	.word	0x20001164
 8001d4c:	2000020c 	.word	0x2000020c
 8001d50:	20001194 	.word	0x20001194
 8001d54:	20000210 	.word	0x20000210
 8001d58:	20001294 	.word	0x20001294
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	20000438 	.word	0x20000438
 8001d64:	20001118 	.word	0x20001118
 8001d68:	20001134 	.word	0x20001134
 8001d6c:	20000834 	.word	0x20000834
 8001d70:	447a0000 	.word	0x447a0000
 8001d74:	2000069c 	.word	0x2000069c
 8001d78:	200011c0 	.word	0x200011c0
 8001d7c:	200005d0 	.word	0x200005d0
 8001d80:	2000123c 	.word	0x2000123c
 8001d84:	c77fff00 	.word	0xc77fff00
 8001d88:	477fff00 	.word	0x477fff00
 8001d8c:	200011f0 	.word	0x200011f0
 8001d90:	20001270 	.word	0x20001270
 8001d94:	20000768 	.word	0x20000768
 8001d98:	20000504 	.word	0x20000504
 8001d9c:	200012c8 	.word	0x200012c8
 8001da0:	200002a0 	.word	0x200002a0
 8001da4:	20001304 	.word	0x20001304
 8001da8:	2000030c 	.word	0x2000030c

08001dac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	@ 0x50
 8001db0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a ff58 	bl	800cc70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f005 fe40 	bl	8007a54 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dde:	2340      	movs	r3, #64	@ 0x40
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2302      	movs	r3, #2
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de6:	2302      	movs	r3, #2
 8001de8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dea:	2304      	movs	r3, #4
 8001dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001dee:	2355      	movs	r3, #85	@ 0x55
 8001df0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df2:	2302      	movs	r3, #2
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 feda 	bl	8007bbc <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x66>
		Error_Handler();
 8001e0e:	f002 fb9b 	bl	8004548 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 f9d8 	bl	80081e0 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0x8e>
		Error_Handler();
 8001e36:	f002 fb87 	bl	8004548 <Error_Handler>
	}
}
 8001e3a:	bf00      	nop
 8001e3c:	3750      	adds	r7, #80	@ 0x50
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	@ 0x30
 8001e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2220      	movs	r2, #32
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00a ff07 	bl	800cc70 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001e62:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e68:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e70:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e72:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001e7e:	4b32      	ldr	r3, [pc, #200]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e84:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 2;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ecc:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ece:	f003 fbb9 	bl	8005644 <HAL_ADC_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC1_Init+0x98>
		Error_Handler();
 8001ed8:	f002 fb36 	bl	8004548 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4818      	ldr	r0, [pc, #96]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001ee8:	f004 fe86 	bl	8006bf8 <HAL_ADCEx_MultiModeConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001ef2:	f002 fb29 	bl	8004548 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <MX_ADC1_Init+0x108>)
 8001ef8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001efa:	2306      	movs	r3, #6
 8001efc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001efe:	2307      	movs	r3, #7
 8001f00:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f02:	237f      	movs	r3, #127	@ 0x7f
 8001f04:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f06:	2304      	movs	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001f14:	f004 f8ae 	bl	8006074 <HAL_ADC_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0xde>
		Error_Handler();
 8001f1e:	f002 fb13 	bl	8004548 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <MX_ADC1_Init+0x10c>)
 8001f24:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f26:	230c      	movs	r3, #12
 8001f28:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <MX_ADC1_Init+0x104>)
 8001f30:	f004 f8a0 	bl	8006074 <HAL_ADC_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_ADC1_Init+0xfa>
		Error_Handler();
 8001f3a:	f002 fb05 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	@ 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200002a0 	.word	0x200002a0
 8001f4c:	1d500080 	.word	0x1d500080
 8001f50:	21800100 	.word	0x21800100

08001f54 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00a fe85 	bl	800cc70 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001f66:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <MX_ADC2_Init+0xc4>)
 8001f6a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f6c:	4b29      	ldr	r3, [pc, #164]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f72:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f86:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001fd0:	f003 fb38 	bl	8005644 <HAL_ADC_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC2_Init+0x8a>
		Error_Handler();
 8001fda:	f002 fab5 	bl	8004548 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_ADC2_Init+0xc8>)
 8001fe0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fea:	237f      	movs	r3, #127	@ 0x7f
 8001fec:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <MX_ADC2_Init+0xc0>)
 8001ffc:	f004 f83a 	bl	8006074 <HAL_ADC_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_ADC2_Init+0xb6>
		Error_Handler();
 8002006:	f002 fa9f 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000030c 	.word	0x2000030c
 8002018:	50000100 	.word	0x50000100
 800201c:	19200040 	.word	0x19200040

08002020 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b09c      	sub	sp, #112	@ 0x70
 8002024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002026:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2234      	movs	r2, #52	@ 0x34
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f00a fe08 	bl	800cc70 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002062:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <MX_TIM1_Init+0x174>)
 8002064:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002068:	22a9      	movs	r2, #169	@ 0xa9
 800206a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b48      	ldr	r3, [pc, #288]	@ (8002190 <MX_TIM1_Init+0x170>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002074:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002078:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b45      	ldr	r3, [pc, #276]	@ (8002190 <MX_TIM1_Init+0x170>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b42      	ldr	r3, [pc, #264]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800208c:	4840      	ldr	r0, [pc, #256]	@ (8002190 <MX_TIM1_Init+0x170>)
 800208e:	f006 fd11 	bl	8008ab4 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002098:	f002 fa56 	bl	8004548 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80020a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020a6:	4619      	mov	r1, r3
 80020a8:	4839      	ldr	r0, [pc, #228]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020aa:	f007 fd3b 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x98>
		Error_Handler();
 80020b4:	f002 fa48 	bl	8004548 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80020b8:	4835      	ldr	r0, [pc, #212]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020ba:	f006 fe47 	bl	8008d4c <HAL_TIM_PWM_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0xa8>
		Error_Handler();
 80020c4:	f002 fa40 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80020d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020d8:	4619      	mov	r1, r3
 80020da:	482d      	ldr	r0, [pc, #180]	@ (8002190 <MX_TIM1_Init+0x170>)
 80020dc:	f008 fd08 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80020e6:	f002 fa2f 	bl	8004548 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ea:	2360      	movs	r3, #96	@ 0x60
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002106:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800210a:	2204      	movs	r2, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4820      	ldr	r0, [pc, #128]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002110:	f007 fbf4 	bl	80098fc <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 800211a:	f002 fa15 	bl	8004548 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800211e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002122:	2208      	movs	r2, #8
 8002124:	4619      	mov	r1, r3
 8002126:	481a      	ldr	r0, [pc, #104]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002128:	f007 fbe8 	bl	80098fc <HAL_TIM_PWM_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8002132:	f002 fa09 	bl	8004548 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800214a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800215c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4807      	ldr	r0, [pc, #28]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002174:	f008 fd52 	bl	800ac1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x162>
			!= HAL_OK) {
		Error_Handler();
 800217e:	f002 f9e3 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002182:	4803      	ldr	r0, [pc, #12]	@ (8002190 <MX_TIM1_Init+0x170>)
 8002184:	f002 fda4 	bl	8004cd0 <HAL_TIM_MspPostInit>

}
 8002188:	bf00      	nop
 800218a:	3770      	adds	r7, #112	@ 0x70
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000438 	.word	0x20000438
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021c0:	22a9      	movs	r2, #169	@ 0xa9
 80021c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80021de:	4814      	ldr	r0, [pc, #80]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021e0:	f006 fc68 	bl	8008ab4 <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x56>
		Error_Handler();
 80021ea:	f002 f9ad 	bl	8004548 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_TIM2_Init+0x98>)
 80021fc:	f007 fc92 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x72>
		Error_Handler();
 8002206:	f002 f99f 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_TIM2_Init+0x98>)
 8002218:	f008 fc6a 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8002222:	f002 f991 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000504 	.word	0x20000504

08002234 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	@ 0x30
 8002238:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f00a fd14 	bl	800cc70 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <MX_TIM3_Init+0xa8>)
 8002256:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002264:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800226a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002278:	2303      	movs	r3, #3
 800227a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002280:	2301      	movs	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002290:	2301      	movs	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 80022a4:	f006 ffc8 	bl	8009238 <HAL_TIM_Encoder_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80022ae:	f002 f94b 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <MX_TIM3_Init+0xa4>)
 80022c0:	f008 fc16 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80022ca:	f002 f93d 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	@ 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200005d0 	.word	0x200005d0
 80022dc:	40000400 	.word	0x40000400

080022e0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00a fcbe 	bl	800cc70 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002300:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <MX_TIM4_Init+0xa8>)
 8002302:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002310:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002316:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002324:	2303      	movs	r3, #3
 8002326:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	@ (8002384 <MX_TIM4_Init+0xa4>)
 8002350:	f006 ff72 	bl	8009238 <HAL_TIM_Encoder_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM4_Init+0x7e>
		Error_Handler();
 800235a:	f002 f8f5 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <MX_TIM4_Init+0xa4>)
 800236c:	f008 fbc0 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002376:	f002 f8e7 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3730      	adds	r7, #48	@ 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000069c 	.word	0x2000069c
 8002388:	40000800 	.word	0x40000800

0800238c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <MX_TIM5_Init+0x98>)
 80023ae:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023b2:	22a9      	movs	r2, #169	@ 0xa9
 80023b4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023c2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c4:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80023d0:	4813      	ldr	r0, [pc, #76]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023d2:	f006 fb6f 	bl	8008ab4 <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM5_Init+0x54>
		Error_Handler();
 80023dc:	f002 f8b4 	bl	8004548 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4619      	mov	r1, r3
 80023ec:	480c      	ldr	r0, [pc, #48]	@ (8002420 <MX_TIM5_Init+0x94>)
 80023ee:	f007 fb99 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM5_Init+0x70>
		Error_Handler();
 80023f8:	f002 f8a6 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_TIM5_Init+0x94>)
 800240a:	f008 fb71 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002414:	f002 f898 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000768 	.word	0x20000768
 8002424:	40000c00 	.word	0x40000c00

08002428 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b09c      	sub	sp, #112	@ 0x70
 800242c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800242e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800243c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002448:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2234      	movs	r2, #52	@ 0x34
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00a fc04 	bl	800cc70 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002468:	4b45      	ldr	r3, [pc, #276]	@ (8002580 <MX_TIM8_Init+0x158>)
 800246a:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <MX_TIM8_Init+0x15c>)
 800246c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 169;
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002470:	22a9      	movs	r2, #169	@ 0xa9
 8002472:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 19999;
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <MX_TIM8_Init+0x158>)
 800247c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002480:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b3f      	ldr	r3, [pc, #252]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002488:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <MX_TIM8_Init+0x158>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b3c      	ldr	r3, [pc, #240]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002494:	483a      	ldr	r0, [pc, #232]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002496:	f006 fb0d 	bl	8008ab4 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM8_Init+0x7c>
		Error_Handler();
 80024a0:	f002 f852 	bl	8004548 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a8:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80024aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ae:	4619      	mov	r1, r3
 80024b0:	4833      	ldr	r0, [pc, #204]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024b2:	f007 fb37 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM8_Init+0x98>
		Error_Handler();
 80024bc:	f002 f844 	bl	8004548 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80024c0:	482f      	ldr	r0, [pc, #188]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024c2:	f006 fc43 	bl	8008d4c <HAL_TIM_PWM_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM8_Init+0xa8>
		Error_Handler();
 80024cc:	f002 f83c 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80024dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e0:	4619      	mov	r1, r3
 80024e2:	4827      	ldr	r0, [pc, #156]	@ (8002580 <MX_TIM8_Init+0x158>)
 80024e4:	f008 fb04 	bl	800aaf0 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80024ee:	f002 f82b 	bl	8004548 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	@ 0x60
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 800250e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	481a      	ldr	r0, [pc, #104]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002518:	f007 f9f0 	bl	80098fc <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM8_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8002522:	f002 f811 	bl	8004548 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800253e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4807      	ldr	r0, [pc, #28]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002564:	f008 fb5a 	bl	800ac1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM8_Init+0x14a>
			!= HAL_OK) {
		Error_Handler();
 800256e:	f001 ffeb 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8002572:	4803      	ldr	r0, [pc, #12]	@ (8002580 <MX_TIM8_Init+0x158>)
 8002574:	f002 fbac 	bl	8004cd0 <HAL_TIM_MspPostInit>

}
 8002578:	bf00      	nop
 800257a:	3770      	adds	r7, #112	@ 0x70
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000834 	.word	0x20000834
 8002584:	40013400 	.word	0x40013400

08002588 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <MX_TIM16_Init+0x58>)
 800258e:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <MX_TIM16_Init+0x5c>)
 8002590:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <MX_TIM16_Init+0x58>)
 8002594:	22a9      	movs	r2, #169	@ 0xa9
 8002596:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <MX_TIM16_Init+0x58>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025a0:	f240 4279 	movw	r2, #1145	@ 0x479
 80025a4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80025b8:	4809      	ldr	r0, [pc, #36]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025ba:	f006 fa7b 	bl	8008ab4 <HAL_TIM_Base_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM16_Init+0x40>
		Error_Handler();
 80025c4:	f001 ffc0 	bl	8004548 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80025c8:	2108      	movs	r1, #8
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <MX_TIM16_Init+0x58>)
 80025cc:	f006 fd3e 	bl	800904c <HAL_TIM_OnePulse_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM16_Init+0x52>
		Error_Handler();
 80025d6:	f001 ffb7 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000900 	.word	0x20000900
 80025e4:	40014400 	.word	0x40014400

080025e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025ee:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <MX_USART2_UART_Init+0x98>)
 80025f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <MX_USART2_UART_Init+0x94>)
 80025fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002600:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800260a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002634:	4811      	ldr	r0, [pc, #68]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002636:	f008 fbd5 	bl	800ade4 <HAL_UART_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8002640:	f001 ff82 	bl	8004548 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8002644:	2100      	movs	r1, #0
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_USART2_UART_Init+0x94>)
 8002648:	f00a fa11 	bl	800ca6e <HAL_UARTEx_SetTxFifoThreshold>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8002652:	f001 ff79 	bl	8004548 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002656:	2100      	movs	r1, #0
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800265a:	f00a fa46 	bl	800caea <HAL_UARTEx_SetRxFifoThreshold>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8002664:	f001 ff70 	bl	8004548 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002668:	4804      	ldr	r0, [pc, #16]	@ (800267c <MX_USART2_UART_Init+0x94>)
 800266a:	f00a f9c7 	bl	800c9fc <HAL_UARTEx_DisableFifoMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8002674:	f001 ff68 	bl	8004548 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200009cc 	.word	0x200009cc
 8002680:	40004400 	.word	0x40004400

08002684 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <MX_DMA_Init+0x80>)
 800268c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268e:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <MX_DMA_Init+0x80>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6493      	str	r3, [r2, #72]	@ 0x48
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <MX_DMA_Init+0x80>)
 8002698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <MX_DMA_Init+0x80>)
 80026a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a6:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <MX_DMA_Init+0x80>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_DMA_Init+0x80>)
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	200b      	movs	r0, #11
 80026c0:	f004 fc7d 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026c4:	200b      	movs	r0, #11
 80026c6:	f004 fc94 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	200c      	movs	r0, #12
 80026d0:	f004 fc75 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026d4:	200c      	movs	r0, #12
 80026d6:	f004 fc8c 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	200d      	movs	r0, #13
 80026e0:	f004 fc6d 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80026e4:	200d      	movs	r0, #13
 80026e6:	f004 fc84 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	200e      	movs	r0, #14
 80026f0:	f004 fc65 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026f4:	200e      	movs	r0, #14
 80026f6:	f004 fc7c 	bl	8006ff2 <HAL_NVIC_EnableIRQ>

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000

08002708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b65      	ldr	r3, [pc, #404]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a64      	ldr	r2, [pc, #400]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	4a5e      	ldr	r2, [pc, #376]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002742:	4b5c      	ldr	r3, [pc, #368]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b59      	ldr	r3, [pc, #356]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	4a58      	ldr	r2, [pc, #352]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275a:	4b56      	ldr	r3, [pc, #344]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b53      	ldr	r3, [pc, #332]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a52      	ldr	r2, [pc, #328]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b50      	ldr	r3, [pc, #320]	@ (80028b4 <MX_GPIO_Init+0x1ac>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002786:	f005 f91b 	bl	80079c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10,
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 8002790:	4849      	ldr	r0, [pc, #292]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 8002792:	f005 f915 	bl	80079c0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800279a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800279c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4842      	ldr	r0, [pc, #264]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 80027ae:	f004 ff6d 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC3 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_9;
 80027b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80027b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	483b      	ldr	r0, [pc, #236]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 80027ca:	f004 ff5f 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
	GPIO_InitStruct.Pin = RUN_Joy_Pin | Save_Joy_Pin;
 80027ce:	2303      	movs	r3, #3
 80027d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f004 ff52 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027e8:	2310      	movs	r3, #16
 80027ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fe:	f004 ff45 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002802:	2320      	movs	r3, #32
 8002804:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281c:	f004 ff36 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8002820:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002824:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4821      	ldr	r0, [pc, #132]	@ (80028bc <MX_GPIO_Init+0x1b4>)
 8002836:	f004 ff29 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800283a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800283e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002844:	2302      	movs	r3, #2
 8002846:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	481b      	ldr	r0, [pc, #108]	@ (80028bc <MX_GPIO_Init+0x1b4>)
 8002850:	f004 ff1c 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002854:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002858:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4812      	ldr	r0, [pc, #72]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 800286e:	f004 ff0d 	bl	800768c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002876:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <MX_GPIO_Init+0x1b0>)
 8002888:	f004 ff00 	bl	800768c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2009      	movs	r0, #9
 8002892:	f004 fb94 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002896:	2009      	movs	r0, #9
 8002898:	f004 fbab 	bl	8006ff2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2028      	movs	r0, #40	@ 0x28
 80028a2:	f004 fb8c 	bl	8006fbe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028a6:	2028      	movs	r0, #40	@ 0x28
 80028a8:	f004 fba3 	bl	8006ff2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000400 	.word	0x48000400

080028c0 <Prismatic_CasCadeControl>:

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
	float setpoint_pris_abs = Trapezoidal_GetCurrentAbsolute(&prisProfile);
 80028c6:	4872      	ldr	r0, [pc, #456]	@ (8002a90 <Prismatic_CasCadeControl+0x1d0>)
 80028c8:	f7ff f97c 	bl	8001bc4 <Trapezoidal_GetCurrentAbsolute>
 80028cc:	ed87 0a03 	vstr	s0, [r7, #12]

	error_pos_pris = setpoint_pris_abs - (float) ball_screw_pos;
 80028d0:	4b70      	ldr	r3, [pc, #448]	@ (8002a94 <Prismatic_CasCadeControl+0x1d4>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f951 	bl	8000b80 <__aeabi_d2f>
 80028de:	ee07 0a10 	vmov	s14, r0
 80028e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);
 80028f0:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a69      	ldr	r2, [pc, #420]	@ (8002a9c <Prismatic_CasCadeControl+0x1dc>)
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	607b      	str	r3, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	ed93 7a00 	vldr	s14, [r3]
 8002900:	edd7 7a01 	vldr	s15, [r7, #4]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	edd3 6a01 	vldr	s13, [r3, #4]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	edd3 7a03 	vldr	s15, [r3, #12]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	edd3 7a04 	vldr	s15, [r3, #16]
 8002928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002956:	6013      	str	r3, [r2, #0]

	if (output_pos_pris > 550) {
 8002958:	4b51      	ldr	r3, [pc, #324]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002aa4 <Prismatic_CasCadeControl+0x1e4>
 8002962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	dd03      	ble.n	8002974 <Prismatic_CasCadeControl+0xb4>
		output_pos_pris = 550;
 800296c:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800296e:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa8 <Prismatic_CasCadeControl+0x1e8>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e00c      	b.n	800298e <Prismatic_CasCadeControl+0xce>
	} else if (output_pos_pris < -550) {
 8002974:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002aac <Prismatic_CasCadeControl+0x1ec>
 800297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d502      	bpl.n	800298e <Prismatic_CasCadeControl+0xce>
		output_pos_pris = -550;
 8002988:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 800298a:	4a49      	ldr	r2, [pc, #292]	@ (8002ab0 <Prismatic_CasCadeControl+0x1f0>)
 800298c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
 800298e:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <Prismatic_CasCadeControl+0x1e0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fda4 	bl	80004e0 <__aeabi_f2d>
 8002998:	4b46      	ldr	r3, [pc, #280]	@ (8002ab4 <Prismatic_CasCadeControl+0x1f4>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fc3f 	bl	8000220 <__aeabi_dsub>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fe f8e9 	bl	8000b80 <__aeabi_d2f>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a41      	ldr	r2, [pc, #260]	@ (8002ab8 <Prismatic_CasCadeControl+0x1f8>)
 80029b2:	6013      	str	r3, [r2, #0]
	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <Prismatic_CasCadeControl+0x1fc>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <Prismatic_CasCadeControl+0x200>)
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <Prismatic_CasCadeControl+0x204>)
 80029c2:	edd3 6a00 	vldr	s13, [r3]
 80029c6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <Prismatic_CasCadeControl+0x1f8>)
 80029c8:	ed93 6a00 	vldr	s12, [r3]
 80029cc:	eef0 1a46 	vmov.f32	s3, s12
 80029d0:	eeb0 1a66 	vmov.f32	s2, s13
 80029d4:	eef0 0a47 	vmov.f32	s1, s14
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	483a      	ldr	r0, [pc, #232]	@ (8002ac8 <Prismatic_CasCadeControl+0x208>)
 80029de:	f7fe fdff 	bl	80015e0 <PIDCompute>
 80029e2:	eef0 7a40 	vmov.f32	s15, s0
 80029e6:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <Prismatic_CasCadeControl+0x20c>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	if (limit_r == 1 && output_prismatic < 0) {
 80029ec:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <Prismatic_CasCadeControl+0x210>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <Prismatic_CasCadeControl+0x14e>
 80029f4:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d504      	bpl.n	8002a0e <Prismatic_CasCadeControl+0x14e>
		output_prismatic = 0;
 8002a04:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <Prismatic_CasCadeControl+0x16e>
	} else if (limit_l == 1 && output_prismatic > 0) {
 8002a0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <Prismatic_CasCadeControl+0x218>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10b      	bne.n	8002a2e <Prismatic_CasCadeControl+0x16e>
 8002a16:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	dd03      	ble.n	8002a2e <Prismatic_CasCadeControl+0x16e>
		output_prismatic = 0;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
	}

	// Motor control}
	if (error_pos_pris <= 0.1 && error_pos_pris >= -0.1) {
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd54 	bl	80004e0 <__aeabi_f2d>
 8002a38:	a311      	add	r3, pc, #68	@ (adr r3, 8002a80 <Prismatic_CasCadeControl+0x1c0>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fe f823 	bl	8000a88 <__aeabi_dcmple>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <Prismatic_CasCadeControl+0x1ac>
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <Prismatic_CasCadeControl+0x1d8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd47 	bl	80004e0 <__aeabi_f2d>
 8002a52:	a30d      	add	r3, pc, #52	@ (adr r3, 8002a88 <Prismatic_CasCadeControl+0x1c8>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fe f820 	bl	8000a9c <__aeabi_dcmpge>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <Prismatic_CasCadeControl+0x1ac>
		output_prismatic = 0;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e004      	b.n	8002a76 <Prismatic_CasCadeControl+0x1b6>
	} else {
		output_prismatic = output_velo_pris;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <Prismatic_CasCadeControl+0x20c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	@ (8002ad4 <Prismatic_CasCadeControl+0x214>)
 8002a72:	6013      	str	r3, [r2, #0]
	}
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	9999999a 	.word	0x9999999a
 8002a84:	3fb99999 	.word	0x3fb99999
 8002a88:	9999999a 	.word	0x9999999a
 8002a8c:	bfb99999 	.word	0xbfb99999
 8002a90:	20000b58 	.word	0x20000b58
 8002a94:	20001228 	.word	0x20001228
 8002a98:	2000116c 	.word	0x2000116c
 8002a9c:	20001170 	.word	0x20001170
 8002aa0:	20001168 	.word	0x20001168
 8002aa4:	44098000 	.word	0x44098000
 8002aa8:	44098000 	.word	0x44098000
 8002aac:	c4098000 	.word	0xc4098000
 8002ab0:	c4098000 	.word	0xc4098000
 8002ab4:	20001230 	.word	0x20001230
 8002ab8:	2000115c 	.word	0x2000115c
 8002abc:	20000200 	.word	0x20000200
 8002ac0:	20000204 	.word	0x20000204
 8002ac4:	20001154 	.word	0x20001154
 8002ac8:	200011f0 	.word	0x200011f0
 8002acc:	20001158 	.word	0x20001158
 8002ad0:	20001290 	.word	0x20001290
 8002ad4:	200011b8 	.word	0x200011b8
 8002ad8:	20001291 	.word	0x20001291
 8002adc:	00000000 	.word	0x00000000

08002ae0 <Revolute_CasCadeControl>:

void Revolute_CasCadeControl() {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
	float setpoint_rev_abs = Trapezoidal_GetCurrentAbsolute(&revProfile);
 8002ae6:	4874      	ldr	r0, [pc, #464]	@ (8002cb8 <Revolute_CasCadeControl+0x1d8>)
 8002ae8:	f7ff f86c 	bl	8001bc4 <Trapezoidal_GetCurrentAbsolute>
 8002aec:	ed87 0a03 	vstr	s0, [r7, #12]
	error_pos_re = setpoint_rev_abs - revolute_encoder.rads;
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002af2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b70      	ldr	r3, [pc, #448]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);
 8002b04:	4b6e      	ldr	r3, [pc, #440]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc4 <Revolute_CasCadeControl+0x1e4>)
 8002b0a:	60ba      	str	r2, [r7, #8]
 8002b0c:	607b      	str	r3, [r7, #4]
    out = (S->A0 * in) +
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b18:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	615a      	str	r2, [r3, #20]
    return (out);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4a57      	ldr	r2, [pc, #348]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b6a:	6013      	str	r3, [r2, #0]

	if (output_pos_re > 300) {
 8002b6c:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002ccc <Revolute_CasCadeControl+0x1ec>
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	dd03      	ble.n	8002b88 <Revolute_CasCadeControl+0xa8>
		output_pos_re = 300;
 8002b80:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b82:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <Revolute_CasCadeControl+0x1f0>)
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <Revolute_CasCadeControl+0xc2>
	} else if (output_pos_re < -300) {
 8002b88:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002cd4 <Revolute_CasCadeControl+0x1f4>
 8002b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d502      	bpl.n	8002ba2 <Revolute_CasCadeControl+0xc2>
		output_pos_re = -300;
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd8 <Revolute_CasCadeControl+0x1f8>)
 8002ba0:	601a      	str	r2, [r3, #0]
	}

	error_velo_re = output_pos_re - (revolute_encoder.radps / 2);
 8002ba2:	4b49      	ldr	r3, [pc, #292]	@ (8002cc8 <Revolute_CasCadeControl+0x1e8>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	4b44      	ldr	r3, [pc, #272]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002baa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002bae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002bb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <Revolute_CasCadeControl+0x1fc>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re, Ki_velo_re,
 8002bc0:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <Revolute_CasCadeControl+0x200>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <Revolute_CasCadeControl+0x204>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <Revolute_CasCadeControl+0x208>)
 8002bce:	edd3 6a00 	vldr	s13, [r3]
 8002bd2:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <Revolute_CasCadeControl+0x1fc>)
 8002bd4:	ed93 6a00 	vldr	s12, [r3]
 8002bd8:	eef0 1a46 	vmov.f32	s3, s12
 8002bdc:	eeb0 1a66 	vmov.f32	s2, s13
 8002be0:	eef0 0a47 	vmov.f32	s1, s14
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	4840      	ldr	r0, [pc, #256]	@ (8002cec <Revolute_CasCadeControl+0x20c>)
 8002bea:	f7fe fcf9 	bl	80015e0 <PIDCompute>
 8002bee:	eef0 7a40 	vmov.f32	s15, s0
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <Revolute_CasCadeControl+0x210>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
			Kd_velo_re, error_velo_re);

	if (revolute_flag == 1 && output_revolute > 0) {
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <Revolute_CasCadeControl+0x214>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10c      	bne.n	8002c1a <Revolute_CasCadeControl+0x13a>
 8002c00:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd04      	ble.n	8002c1a <Revolute_CasCadeControl+0x13a>
		output_revolute = 0;
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e018      	b.n	8002c4c <Revolute_CasCadeControl+0x16c>
	} else if (revolute_encoder.rads >= (2 * M_PI) && output_revolute < 0) {
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <Revolute_CasCadeControl+0x1dc>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc5e 	bl	80004e0 <__aeabi_f2d>
 8002c24:	a31e      	add	r3, pc, #120	@ (adr r3, 8002ca0 <Revolute_CasCadeControl+0x1c0>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd ff37 	bl	8000a9c <__aeabi_dcmpge>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <Revolute_CasCadeControl+0x16c>
 8002c34:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d503      	bpl.n	8002c4c <Revolute_CasCadeControl+0x16c>
		output_revolute = 0;
 8002c44:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
	}
	// Motor control
	if (error_pos_re <= 0.0035 && error_pos_re >= -0.0035) {
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc45 	bl	80004e0 <__aeabi_f2d>
 8002c56:	a314      	add	r3, pc, #80	@ (adr r3, 8002ca8 <Revolute_CasCadeControl+0x1c8>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd ff14 	bl	8000a88 <__aeabi_dcmple>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d011      	beq.n	8002c8a <Revolute_CasCadeControl+0x1aa>
 8002c66:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <Revolute_CasCadeControl+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc38 	bl	80004e0 <__aeabi_f2d>
 8002c70:	a30f      	add	r3, pc, #60	@ (adr r3, 8002cb0 <Revolute_CasCadeControl+0x1d0>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd ff11 	bl	8000a9c <__aeabi_dcmpge>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <Revolute_CasCadeControl+0x1aa>
		output_revolute = 0;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e004      	b.n	8002c94 <Revolute_CasCadeControl+0x1b4>
	} else {
		output_revolute = output_velo_re;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <Revolute_CasCadeControl+0x210>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <Revolute_CasCadeControl+0x218>)
 8002c90:	6013      	str	r3, [r2, #0]
	}
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	54442d18 	.word	0x54442d18
 8002ca4:	401921fb 	.word	0x401921fb
 8002ca8:	3126e979 	.word	0x3126e979
 8002cac:	3f6cac08 	.word	0x3f6cac08
 8002cb0:	3126e979 	.word	0x3126e979
 8002cb4:	bf6cac08 	.word	0xbf6cac08
 8002cb8:	20000b84 	.word	0x20000b84
 8002cbc:	2000123c 	.word	0x2000123c
 8002cc0:	2000129c 	.word	0x2000129c
 8002cc4:	20001194 	.word	0x20001194
 8002cc8:	20001298 	.word	0x20001298
 8002ccc:	43960000 	.word	0x43960000
 8002cd0:	43960000 	.word	0x43960000
 8002cd4:	c3960000 	.word	0xc3960000
 8002cd8:	c3960000 	.word	0xc3960000
 8002cdc:	200012a8 	.word	0x200012a8
 8002ce0:	20000214 	.word	0x20000214
 8002ce4:	20000218 	.word	0x20000218
 8002ce8:	200012a0 	.word	0x200012a0
 8002cec:	20001270 	.word	0x20001270
 8002cf0:	200012a4 	.word	0x200012a4
 8002cf4:	2000126c 	.word	0x2000126c
 8002cf8:	200011bc 	.word	0x200011bc
 8002cfc:	00000000 	.word	0x00000000

08002d00 <ball_screw_converter>:

void ball_screw_converter() {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <ball_screw_converter+0x50>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fbe9 	bl	80004e0 <__aeabi_f2d>
 8002d0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002d48 <ball_screw_converter+0x48>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fc3c 	bl	8000590 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	490d      	ldr	r1, [pc, #52]	@ (8002d54 <ball_screw_converter+0x54>)
 8002d1e:	e9c1 2300 	strd	r2, r3, [r1]
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <ball_screw_converter+0x58>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fbda 	bl	80004e0 <__aeabi_f2d>
 8002d2c:	a306      	add	r3, pc, #24	@ (adr r3, 8002d48 <ball_screw_converter+0x48>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc2d 	bl	8000590 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <ball_screw_converter+0x5c>)
 8002d3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	f3af 8000 	nop.w
 8002d48:	6dc9c883 	.word	0x6dc9c883
 8002d4c:	40045f30 	.word	0x40045f30
 8002d50:	200011c0 	.word	0x200011c0
 8002d54:	20001228 	.word	0x20001228
 8002d58:	20001214 	.word	0x20001214
 8002d5c:	20001230 	.word	0x20001230

08002d60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d70:	d105      	bne.n	8002d7e <HAL_GPIO_EXTI_Callback+0x1e>
		current_state = STATE_ERROR;
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d74:	2206      	movs	r2, #6
 8002d76:	701a      	strb	r2, [r3, #0]
		registerFrame[1].U16 = STATUS_IDLE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0x30>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	805a      	strh	r2, [r3, #2]
	}
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20001114 	.word	0x20001114
 8002d90:	20001088 	.word	0x20001088

08002d94 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	1a8a      	subs	r2, r1, r2
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4413      	add	r3, r2
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <mapf>:

float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002dd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002dda:	ed87 1a03 	vstr	s2, [r7, #12]
 8002dde:	edc7 1a02 	vstr	s3, [r7, #8]
 8002de2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002de6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dfe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e02:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b094      	sub	sp, #80	@ 0x50
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	6078      	str	r0, [r7, #4]

	// sensor timer 1000 hz
	if (htim == &htim2) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4ab2      	ldr	r2, [pc, #712]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f040 81ee 	bne.w	8003218 <HAL_TIM_PeriodElapsedCallback+0x3f0>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e42:	f004 fdd5 	bl	80079f0 <HAL_GPIO_TogglePin>
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002e46:	48af      	ldr	r0, [pc, #700]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002e48:	f7fe fcbe 	bl	80017c8 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002e4c:	48ae      	ldr	r0, [pc, #696]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e4e:	f7fe fcbb 	bl	80017c8 <QEIPosVelUpdate>
		//Limit Switch check
		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8002e52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e56:	48ad      	ldr	r0, [pc, #692]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e58:	f004 fd9a 	bl	8007990 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4bab      	ldr	r3, [pc, #684]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002e62:	701a      	strb	r2, [r3, #0]
		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8002e64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e68:	48a8      	ldr	r0, [pc, #672]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e6a:	f004 fd91 	bl	8007990 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4ba8      	ldr	r3, [pc, #672]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e74:	701a      	strb	r2, [r3, #0]
		limit_plot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e7a:	48a4      	ldr	r0, [pc, #656]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e7c:	f004 fd88 	bl	8007990 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	4ba4      	ldr	r3, [pc, #656]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e86:	701a      	strb	r2, [r3, #0]
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	@ 0x40
		for (int i = 0; i < 20; i++) {
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e94:	e018      	b.n	8002ec8 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if ((i & 1) == 0)
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIM_PeriodElapsedCallback+0x8a>
				sum_y += JOY_RawRead[i];
 8002ea0:	4a9e      	ldr	r2, [pc, #632]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eac:	4413      	add	r3, r2
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PeriodElapsedCallback+0x9a>
			else
				sum_x += JOY_RawRead[i];
 8002eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebe:	4413      	add	r3, r2
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
		for (int i = 0; i < 20; i++) {
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eca:	2b13      	cmp	r3, #19
 8002ecc:	dde3      	ble.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x6e>
		}

		int32_t raw_x = sum_x / 10;
 8002ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed0:	4a93      	ldr	r2, [pc, #588]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed6:	1092      	asrs	r2, r2, #2
 8002ed8:	17db      	asrs	r3, r3, #31
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
		int32_t raw_y = sum_y / 10;
 8002ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee6:	1092      	asrs	r2, r2, #2
 8002ee8:	17db      	asrs	r3, r3, #31
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34

		if (raw_x < 1700 && raw_x > 1500) {
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	dc07      	bgt.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002efe:	4293      	cmp	r3, r2
 8002f00:	dd02      	ble.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0xe0>
			raw_x = 3400 / 2;
 8002f02:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		if (raw_y < 1700 && raw_y > 1500) {
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	dc07      	bgt.n	8002f22 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	dd02      	ble.n	8002f22 <HAL_TIM_PeriodElapsedCallback+0xfa>
			raw_y = 3400 / 2;
 8002f1c:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002f22:	2364      	movs	r3, #100	@ 0x64
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002f2a:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002f2e:	2100      	movs	r1, #0
 8002f30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f32:	f7ff ff2f 	bl	8002d94 <map>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002f3c:	801a      	strh	r2, [r3, #0]
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002f3e:	2364      	movs	r3, #100	@ 0x64
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002f46:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f4e:	f7ff ff21 	bl	8002d94 <map>
 8002f52:	4603      	mov	r3, r0
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002f58:	801a      	strh	r2, [r3, #0]
//		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

		//Prismatic Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002f5c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
								- prismatic_radps_lowpass_prev);
 8002f60:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_encoder.radps
 8002f6a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002f6e:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002f72:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f7e:	edc3 7a00 	vstr	s15, [r3]

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002f84:	ed93 7a00 	vldr	s14, [r3]
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f92:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003138 <HAL_TIM_PeriodElapsedCallback+0x310>
 8002f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
		prismatic_acceleration = ((prismatic_radps_lowpass
 8002f9a:	4b68      	ldr	r3, [pc, #416]	@ (800313c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002f9c:	edc3 7a00 	vstr	s15, [r3]
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
 8002fa0:	4b64      	ldr	r3, [pc, #400]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a61      	ldr	r2, [pc, #388]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002fa6:	6013      	str	r3, [r2, #0]
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002faa:	ed93 7a00 	vldr	s14, [r3]
 8002fae:	4b64      	ldr	r3, [pc, #400]	@ (8003140 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_acceleration
 8002fb8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
 8002fca:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
		ball_screw_converter();
 8002fd0:	f7ff fe96 	bl	8002d00 <ball_screw_converter>
		// ==== Revolute Low‐Pass Filter ====
		// 1) กรองความเร็ว (rad/s) ของแกน Revolute
		revolute_radps_lowpass =
				revolute_radps_lowpass_prev
						+ alpha
								* (revolute_encoder.radps
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002fd6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
										- revolute_radps_lowpass_prev);
 8002fda:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
								* (revolute_encoder.radps
 8002fe4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
						+ alpha
 8002fec:	4b56      	ldr	r3, [pc, #344]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_radps_lowpass =
 8002ff6:	4b55      	ldr	r3, [pc, #340]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
		// 2) คำนวณอัตราเร่งดิบ (rad/s^2) จากความเปลี่ยนแปลงของค่าที่กรองแล้ว
		revolute_acceleration = (revolute_radps_lowpass
				- revolute_radps_lowpass_prev) / dt;
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ffe:	ed93 7a00 	vldr	s14, [r3]
 8003002:	4b51      	ldr	r3, [pc, #324]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800300c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003138 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003010:	eec7 7a26 	vdiv.f32	s15, s14, s13
		revolute_acceleration = (revolute_radps_lowpass
 8003014:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
		// 3) กรองอัตราเร่งให้ลื่น (หากต้องการใช้ค่าเร่งหลังกรอง)
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
				+ alpha
						* (revolute_acceleration
								- revolute_acceleration_lowpass_prev);
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800301c:	ed93 7a00 	vldr	s14, [r3]
 8003020:	4b4c      	ldr	r3, [pc, #304]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (revolute_acceleration
 800302a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003130 <HAL_TIM_PeriodElapsedCallback+0x308>
 800302e:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8003032:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
 800303c:	4b46      	ldr	r3, [pc, #280]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800303e:	edc3 7a00 	vstr	s15, [r3]
		// 4) เก็บสถานะย้อนกลับไว้ใช้รอบถัดไป
		revolute_radps_lowpass_prev = revolute_radps_lowpass;
 8003042:	4b42      	ldr	r3, [pc, #264]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a40      	ldr	r2, [pc, #256]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003048:	6013      	str	r3, [r2, #0]
		revolute_acceleration_lowpass_prev = revolute_acceleration_lowpass;
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a41      	ldr	r2, [pc, #260]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003050:	6013      	str	r3, [r2, #0]

		// Prox shimttrigger
//		revolute_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
		if (Prox_RawRead[0] > 3000) {
 8003052:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800305a:	4293      	cmp	r3, r2
 800305c:	d903      	bls.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x23e>
			revolute_flag = 0;
 800305e:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x250>
		} else if (Prox_RawRead[0] < 1500) {
 8003066:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800306e:	4293      	cmp	r3, r2
 8003070:	d802      	bhi.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x250>
			revolute_flag = 1;
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
		}

		//Servo
		if (registerFrame[4].U16 == 1) {
 8003078:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800307a:	891b      	ldrh	r3, [r3, #8]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_TIM_PeriodElapsedCallback+0x266>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1600);
 8003082:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800308a:	635a      	str	r2, [r3, #52]	@ 0x34
 800308c:	e009      	b.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0x27a>
		} else if (registerFrame[5].U16 == 1) {
 800308e:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003090:	895b      	ldrh	r3, [r3, #10]
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0x27a>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2200);
 8003098:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f640 0298 	movw	r2, #2200	@ 0x898
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_voltage);
		//button
		Joy_save = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80030a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030a6:	4819      	ldr	r0, [pc, #100]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030a8:	f004 fc72 	bl	8007990 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80030b2:	701a      	strb	r2, [r3, #0]
		Joy_run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80030b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030b8:	4814      	ldr	r0, [pc, #80]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030ba:	f004 fc69 	bl	8007990 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003170 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80030c4:	701a      	strb	r2, [r3, #0]
		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;
 80030c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ca:	482a      	ldr	r0, [pc, #168]	@ (8003174 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80030cc:	f004 fc60 	bl	8007990 <HAL_GPIO_ReadPin>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
		button_emer =
 80030de:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80030e0:	701a      	strb	r2, [r3, #0]

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 80030e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030e6:	4809      	ldr	r0, [pc, #36]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80030e8:	f004 fc52 	bl	8007990 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
						&& button_emer == 1) ? 1 : 0;
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d144      	bne.n	800317c <HAL_TIM_PeriodElapsedCallback+0x354>
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d140      	bne.n	800317c <HAL_TIM_PeriodElapsedCallback+0x354>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e03f      	b.n	800317e <HAL_TIM_PeriodElapsedCallback+0x356>
 80030fe:	bf00      	nop
 8003100:	20000504 	.word	0x20000504
 8003104:	200011c0 	.word	0x200011c0
 8003108:	2000123c 	.word	0x2000123c
 800310c:	48000400 	.word	0x48000400
 8003110:	20001291 	.word	0x20001291
 8003114:	20001290 	.word	0x20001290
 8003118:	20001293 	.word	0x20001293
 800311c:	200012c8 	.word	0x200012c8
 8003120:	66666667 	.word	0x66666667
 8003124:	200012f0 	.word	0x200012f0
 8003128:	200012f2 	.word	0x200012f2
 800312c:	20001210 	.word	0x20001210
 8003130:	3cf98536 	.word	0x3cf98536
 8003134:	20001214 	.word	0x20001214
 8003138:	3a83126f 	.word	0x3a83126f
 800313c:	20001218 	.word	0x20001218
 8003140:	20001220 	.word	0x20001220
 8003144:	2000121c 	.word	0x2000121c
 8003148:	200012ac 	.word	0x200012ac
 800314c:	200012b0 	.word	0x200012b0
 8003150:	200012b4 	.word	0x200012b4
 8003154:	200012b8 	.word	0x200012b8
 8003158:	200012bc 	.word	0x200012bc
 800315c:	20001304 	.word	0x20001304
 8003160:	2000126c 	.word	0x2000126c
 8003164:	20001088 	.word	0x20001088
 8003168:	20000834 	.word	0x20000834
 800316c:	200012f5 	.word	0x200012f5
 8003170:	200012f4 	.word	0x200012f4
 8003174:	48000800 	.word	0x48000800
 8003178:	2000131c 	.word	0x2000131c
 800317c:	2300      	movs	r3, #0
		button_reset =
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4ba1      	ldr	r3, [pc, #644]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003182:	701a      	strb	r2, [r3, #0]

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
 8003184:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003188:	48a0      	ldr	r0, [pc, #640]	@ (800340c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800318a:	f004 fc01 	bl	8007990 <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
						&& button_emer) ? 1 : 0;
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003194:	4b9e      	ldr	r3, [pc, #632]	@ (8003410 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_PeriodElapsedCallback+0x378>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_TIM_PeriodElapsedCallback+0x37a>
 80031a0:	2300      	movs	r3, #0
		button_run =
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003414 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80031a6:	701a      	strb	r2, [r3, #0]

		MotorSet(&prismatic_motor, 1000, output_prismatic);
 80031a8:	4b9b      	ldr	r3, [pc, #620]	@ (8003418 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eef0 0a67 	vmov.f32	s1, s15
 80031b2:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 800341c <HAL_TIM_PeriodElapsedCallback+0x5f4>
 80031b6:	489a      	ldr	r0, [pc, #616]	@ (8003420 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80031b8:	f001 f9f6 	bl	80045a8 <MotorSet>
		MotorSet(&revolute_motor, 1000, output_revolute);
 80031bc:	4b99      	ldr	r3, [pc, #612]	@ (8003424 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 800341c <HAL_TIM_PeriodElapsedCallback+0x5f4>
 80031ca:	4897      	ldr	r0, [pc, #604]	@ (8003428 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80031cc:	f001 f9ec 	bl	80045a8 <MotorSet>

		// Protocal
		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 80031d0:	4b96      	ldr	r3, [pc, #600]	@ (800342c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80031da:	428a      	cmp	r2, r1
 80031dc:	f173 0300 	sbcs.w	r3, r3, #0
 80031e0:	d311      	bcc.n	8003206 <HAL_TIM_PeriodElapsedCallback+0x3de>
			heartbeat_counter = 0;
 80031e2:	4992      	ldr	r1, [pc, #584]	@ (800342c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0x00].U16 =
					(registerFrame[0X00].U16 == 0) ? 22881 : 0;
 80031f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
			registerFrame[0x00].U16 =
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 80031fa:	f645 1261 	movw	r2, #22881	@ 0x5961
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PeriodElapsedCallback+0x3da>
 8003200:	2200      	movs	r2, #0
 8003202:	4b8b      	ldr	r3, [pc, #556]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003204:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	1c54      	adds	r4, r2, #1
 800320e:	f143 0500 	adc.w	r5, r3, #0
 8003212:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003214:	e9c3 4500 	strd	r4, r5, [r3]
	}

	// state timer 1000 hz
	if (htim == &htim5) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a86      	ldr	r2, [pc, #536]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f041 815f 	bne.w	80044e0 <HAL_TIM_PeriodElapsedCallback+0x16b8>

		registerFrame[11].U16 = (int) (300.0 - (ball_screw_pos * 10));
 8003222:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8003224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	4b83      	ldr	r3, [pc, #524]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800322e:	f7fd f9af 	bl	8000590 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	a16e      	add	r1, pc, #440	@ (adr r1, 80033f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800323c:	f7fc fff0 	bl	8000220 <__aeabi_dsub>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	f7fd fc52 	bl	8000af0 <__aeabi_d2iz>
 800324c:	4603      	mov	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	4b77      	ldr	r3, [pc, #476]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003252:	82da      	strh	r2, [r3, #22]
		registerFrame[12].U16 = (int) (revolute_encoder.rads * (18 / 2 * M_PI)
 8003254:	4b7a      	ldr	r3, [pc, #488]	@ (8003440 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f941 	bl	80004e0 <__aeabi_f2d>
 800325e:	a366      	add	r3, pc, #408	@ (adr r3, 80033f8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd f994 	bl	8000590 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
				* 10);
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	4b71      	ldr	r3, [pc, #452]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8003276:	f7fd f98b 	bl	8000590 <__aeabi_dmul>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
		registerFrame[12].U16 = (int) (revolute_encoder.rads * (18 / 2 * M_PI)
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	f7fd fc35 	bl	8000af0 <__aeabi_d2iz>
 8003286:	4603      	mov	r3, r0
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b69      	ldr	r3, [pc, #420]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800328c:	831a      	strh	r2, [r3, #24]
		registerFrame[13].U16 = (int) (ball_screw_vel * 10);
 800328e:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8003290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	4b68      	ldr	r3, [pc, #416]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800329a:	f7fd f979 	bl	8000590 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fd fc23 	bl	8000af0 <__aeabi_d2iz>
 80032aa:	4603      	mov	r3, r0
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b60      	ldr	r3, [pc, #384]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80032b0:	835a      	strh	r2, [r3, #26]
		registerFrame[14].U16 = (int) (revProfile.current_velocity
 80032b2:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f912 	bl	80004e0 <__aeabi_f2d>
				* (180 / 2 * M_PI) * 10);
 80032bc:	a350      	add	r3, pc, #320	@ (adr r3, 8003400 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f7fd f965 	bl	8000590 <__aeabi_dmul>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	4b5a      	ldr	r3, [pc, #360]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x614>)
 80032d4:	f7fd f95c 	bl	8000590 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
		registerFrame[14].U16 = (int) (revProfile.current_velocity
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fc06 	bl	8000af0 <__aeabi_d2iz>
 80032e4:	4603      	mov	r3, r0
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80032ea:	839a      	strh	r2, [r3, #28]
		registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
 80032ec:	4b57      	ldr	r3, [pc, #348]	@ (800344c <HAL_TIM_PeriodElapsedCallback+0x624>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80032f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fe:	ee17 3a90 	vmov	r3, s15
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b4a      	ldr	r3, [pc, #296]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003306:	83da      	strh	r2, [r3, #30]
		registerFrame[16].U16 = (int) (revolute_acceleration_lowpass * 10);
 8003308:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331a:	ee17 3a90 	vmov	r3, s15
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b43      	ldr	r3, [pc, #268]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003322:	841a      	strh	r2, [r3, #32]

		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
 8003324:	4b42      	ldr	r3, [pc, #264]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003326:	885b      	ldrh	r3, [r3, #2]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_TIM_PeriodElapsedCallback+0x510>
			current_state = STATE_STOPPING;
 8003332:	4b48      	ldr	r3, [pc, #288]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8003334:	2205      	movs	r2, #5
 8003336:	701a      	strb	r2, [r3, #0]
		}
		if ((registerFrame[1].U16 & STATUS_HOME) && pain_flang == 0) {
 8003338:	4b3d      	ldr	r3, [pc, #244]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800333a:	885b      	ldrh	r3, [r3, #2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x52e>
 8003346:	4b44      	ldr	r3, [pc, #272]	@ (8003458 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x52e>
			current_state = STATE_HOMING;
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e03c      	b.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		} else if ((registerFrame[1].U16 & STATUS_JOG) && running_flang == 0) {
 8003356:	4b36      	ldr	r3, [pc, #216]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003358:	885b      	ldrh	r3, [r3, #2]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_TIM_PeriodElapsedCallback+0x552>
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <HAL_TIM_PeriodElapsedCallback+0x552>
			current_state = STATE_JOGGING;
 800336c:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_JOG;
 8003372:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003374:	2202      	movs	r2, #2
 8003376:	829a      	strh	r2, [r3, #20]
 8003378:	e02a      	b.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		} else if (registerFrame[1].U16 & STATUS_POINT) {
 800337a:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800337c:	885b      	ldrh	r3, [r3, #2]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_TIM_PeriodElapsedCallback+0x574>
			current_state = STATE_POINT_MOVING;
 8003388:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800338a:	2203      	movs	r2, #3
 800338c:	701a      	strb	r2, [r3, #0]
			pointMoveNeedsInit = 1;
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_POINT;
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003396:	2204      	movs	r2, #4
 8003398:	829a      	strh	r2, [r3, #20]
 800339a:	e019      	b.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
 800339c:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800339e:	885b      	ldrh	r3, [r3, #2]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_TIM_PeriodElapsedCallback+0x590>
			current_state = STATE_GO_TO_TARGET;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80033ac:	2204      	movs	r2, #4
 80033ae:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
 80033b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033b2:	2208      	movs	r2, #8
 80033b4:	829a      	strh	r2, [r3, #20]
 80033b6:	e00b      	b.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		} else if (registerFrame[1].U16 & STATUS_IDLE) {
 80033b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033ba:	885b      	ldrh	r3, [r3, #2]
			current_state = STATE_IDLE;
		} else if (registerFrame[1].U16 & STATUS_TEST) {
 80033bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033be:	885b      	ldrh	r3, [r3, #2]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_TIM_PeriodElapsedCallback+0x5a8>
			current_state = STATE_TEST;
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80033cc:	2209      	movs	r2, #9
 80033ce:	701a      	strb	r2, [r3, #0]
		}

		if (registerFrame[4].U16 == 1 && registerFrame[5].U16 == 0) {
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033d2:	891b      	ldrh	r3, [r3, #8]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d144      	bne.n	8003464 <HAL_TIM_PeriodElapsedCallback+0x63c>
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033dc:	895b      	ldrh	r3, [r3, #10]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d13f      	bne.n	8003464 <HAL_TIM_PeriodElapsedCallback+0x63c>
			//Pen Up Servo On
			registerFrame[3].U16 = 1 << 0;
 80033e4:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	80da      	strh	r2, [r3, #6]
 80033ea:	e03e      	b.n	800346a <HAL_TIM_PeriodElapsedCallback+0x642>
 80033ec:	f3af 8000 	nop.w
 80033f0:	00000000 	.word	0x00000000
 80033f4:	4072c000 	.word	0x4072c000
 80033f8:	beccb2bb 	.word	0xbeccb2bb
 80033fc:	403c463a 	.word	0x403c463a
 8003400:	b73fefb5 	.word	0xb73fefb5
 8003404:	4071abe4 	.word	0x4071abe4
 8003408:	20001319 	.word	0x20001319
 800340c:	48000400 	.word	0x48000400
 8003410:	2000131c 	.word	0x2000131c
 8003414:	2000131b 	.word	0x2000131b
 8003418:	200011b8 	.word	0x200011b8
 800341c:	447a0000 	.word	0x447a0000
 8003420:	20001118 	.word	0x20001118
 8003424:	200011bc 	.word	0x200011bc
 8003428:	20001134 	.word	0x20001134
 800342c:	200012c0 	.word	0x200012c0
 8003430:	20001088 	.word	0x20001088
 8003434:	20000768 	.word	0x20000768
 8003438:	20001228 	.word	0x20001228
 800343c:	40240000 	.word	0x40240000
 8003440:	2000123c 	.word	0x2000123c
 8003444:	20001230 	.word	0x20001230
 8003448:	20000b84 	.word	0x20000b84
 800344c:	2000121c 	.word	0x2000121c
 8003450:	200012bc 	.word	0x200012bc
 8003454:	20001114 	.word	0x20001114
 8003458:	20001326 	.word	0x20001326
 800345c:	20001325 	.word	0x20001325
 8003460:	20001324 	.word	0x20001324
		} else {
			//Pen Doen Servo Off
			registerFrame[3].U16 = 1 << 1;
 8003464:	4b95      	ldr	r3, [pc, #596]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003466:	2202      	movs	r2, #2
 8003468:	80da      	strh	r2, [r3, #6]
		}

		if (button_reset == 1
 800346a:	4b95      	ldr	r3, [pc, #596]	@ (80036c0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x668>
				&& (current_state == STATE_ERROR || current_state == STATE_IDLE)
 8003472:	4b94      	ldr	r3, [pc, #592]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d003      	beq.n	8003482 <HAL_TIM_PeriodElapsedCallback+0x65a>
 800347a:	4b92      	ldr	r3, [pc, #584]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x668>
				&& button_emer == 1) {
 8003482:	4b91      	ldr	r3, [pc, #580]	@ (80036c8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x668>
			registerFrame[1].U16 = STATUS_HOME;
 800348a:	4b8c      	ldr	r3, [pc, #560]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 800348c:	2201      	movs	r2, #1
 800348e:	805a      	strh	r2, [r3, #2]
		}

		switch (current_state) {
 8003490:	4b8c      	ldr	r3, [pc, #560]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	3b01      	subs	r3, #1
 8003496:	2b08      	cmp	r3, #8
 8003498:	f201 801a 	bhi.w	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
 800349c:	a201      	add	r2, pc, #4	@ (adr r2, 80034a4 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	08003a85 	.word	0x08003a85
 80034ac:	08003f81 	.word	0x08003f81
 80034b0:	080041c3 	.word	0x080041c3
 80034b4:	08004291 	.word	0x08004291
 80034b8:	080042bb 	.word	0x080042bb
 80034bc:	08003db5 	.word	0x08003db5
 80034c0:	080035f7 	.word	0x080035f7
 80034c4:	08004365 	.word	0x08004365
		case STATE_HOMING:

			if (pen_flag == 0) {
 80034c8:	4b80      	ldr	r3, [pc, #512]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_TIM_PeriodElapsedCallback+0x6b4>
				pen_flag = 1;
 80034d0:	4b7e      	ldr	r3, [pc, #504]	@ (80036cc <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
				count_time = 0;
 80034d6:	4b7e      	ldr	r3, [pc, #504]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
			}

			if (count_time <= 1500) {
 80034dc:	4b7c      	ldr	r3, [pc, #496]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80034e4:	4293      	cmp	r3, r2
 80034e6:	dc14      	bgt.n	8003512 <HAL_TIM_PeriodElapsedCallback+0x6ea>
				output_prismatic = 0;
 80034e8:	4b7a      	ldr	r3, [pc, #488]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
				output_revolute = 0;
 80034f0:	4b79      	ldr	r3, [pc, #484]	@ (80036d8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
				registerFrame[4].U16 = 1;
 80034f8:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	811a      	strh	r2, [r3, #8]
				registerFrame[5].U16 = 0;
 80034fe:	4b6f      	ldr	r3, [pc, #444]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003500:	2200      	movs	r2, #0
 8003502:	815a      	strh	r2, [r3, #10]
				count_time++;
 8003504:	4b72      	ldr	r3, [pc, #456]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a71      	ldr	r2, [pc, #452]	@ (80036d0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800350c:	6013      	str	r3, [r2, #0]
				if (button_run == 1) {
					current_state = STATE_PAIN;
					pain_flang = 1;
				}
			}
			break;
 800350e:	f000 bfdc 	b.w	80044ca <HAL_TIM_PeriodElapsedCallback+0x16a2>
				if (limit_r != 1) {
 8003512:	4b72      	ldr	r3, [pc, #456]	@ (80036dc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d003      	beq.n	8003522 <HAL_TIM_PeriodElapsedCallback+0x6fa>
					output_prismatic = -(65535 / 2.0);
 800351a:	4b6e      	ldr	r3, [pc, #440]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800351c:	4a70      	ldr	r2, [pc, #448]	@ (80036e0 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e017      	b.n	8003552 <HAL_TIM_PeriodElapsedCallback+0x72a>
				} else if (limit_r == 1) {
 8003522:	4b6e      	ldr	r3, [pc, #440]	@ (80036dc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d113      	bne.n	8003552 <HAL_TIM_PeriodElapsedCallback+0x72a>
					limit_l_prev = 1;
 800352a:	4b6e      	ldr	r3, [pc, #440]	@ (80036e4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
					output_prismatic = 0;
 8003530:	4b68      	ldr	r3, [pc, #416]	@ (80036d4 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
					QEI_Reset(&prismatic_encoder);
 8003538:	486b      	ldr	r0, [pc, #428]	@ (80036e8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800353a:	f7fe f9e5 	bl	8001908 <QEI_Reset>
					QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800353e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003542:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 80036ec <HAL_TIM_PeriodElapsedCallback+0x8c4>
 8003546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800354a:	4969      	ldr	r1, [pc, #420]	@ (80036f0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800354c:	4866      	ldr	r0, [pc, #408]	@ (80036e8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800354e:	f7fe f909 	bl	8001764 <QEIInit>
				if (revolute_flag != 1) {
 8003552:	4b68      	ldr	r3, [pc, #416]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d003      	beq.n	8003562 <HAL_TIM_PeriodElapsedCallback+0x73a>
					output_revolute = -45000;
 800355a:	4b5f      	ldr	r3, [pc, #380]	@ (80036d8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800355c:	4a66      	ldr	r2, [pc, #408]	@ (80036f8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e017      	b.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x76a>
				} else if (revolute_flag == 1) {
 8003562:	4b64      	ldr	r3, [pc, #400]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d113      	bne.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x76a>
					revolute_homed = 1; // Check Proximity trick
 800356a:	4b64      	ldr	r3, [pc, #400]	@ (80036fc <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
					output_revolute = 0;
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
					QEI_Reset(&revolute_encoder);
 8003578:	4861      	ldr	r0, [pc, #388]	@ (8003700 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800357a:	f7fe f9c5 	bl	8001908 <QEI_Reset>
					QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 800357e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003582:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80036ec <HAL_TIM_PeriodElapsedCallback+0x8c4>
 8003586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358a:	495e      	ldr	r1, [pc, #376]	@ (8003704 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800358c:	485c      	ldr	r0, [pc, #368]	@ (8003700 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800358e:	f7fe f8e9 	bl	8001764 <QEIInit>
				registerFrame[11].U16 = 0;
 8003592:	4b4a      	ldr	r3, [pc, #296]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003594:	2200      	movs	r2, #0
 8003596:	82da      	strh	r2, [r3, #22]
				registerFrame[12].U16 = 0;
 8003598:	4b48      	ldr	r3, [pc, #288]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 800359a:	2200      	movs	r2, #0
 800359c:	831a      	strh	r2, [r3, #24]
				registerFrame[13].U16 = 0;
 800359e:	4b47      	ldr	r3, [pc, #284]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	835a      	strh	r2, [r3, #26]
				registerFrame[14].U16 = 0;
 80035a4:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	839a      	strh	r2, [r3, #28]
				registerFrame[15].U16 = 0;
 80035aa:	4b44      	ldr	r3, [pc, #272]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	83da      	strh	r2, [r3, #30]
				registerFrame[16].U16 = 0;
 80035b0:	4b42      	ldr	r3, [pc, #264]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	841a      	strh	r2, [r3, #32]
				target_position_prismatic = 0;
 80035b6:	4b54      	ldr	r3, [pc, #336]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
				target_position_revolute = 0;
 80035be:	4b53      	ldr	r3, [pc, #332]	@ (800370c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
				error_pos_re = 0;
 80035c6:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
				error_pos_pris = 0;
 80035ce:	4b51      	ldr	r3, [pc, #324]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
				registerFrame[10].U16 = STATUS_HOME;
 80035d6:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80035d8:	2201      	movs	r2, #1
 80035da:	829a      	strh	r2, [r3, #20]
				if (button_run == 1) {
 80035dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 8772 	bne.w	80044ca <HAL_TIM_PeriodElapsedCallback+0x16a2>
					current_state = STATE_PAIN;
 80035e6:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035e8:	2208      	movs	r2, #8
 80035ea:	701a      	strb	r2, [r3, #0]
					pain_flang = 1;
 80035ec:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
			break;
 80035f2:	f000 bf6a 	b.w	80044ca <HAL_TIM_PeriodElapsedCallback+0x16a2>
		case STATE_PAIN:
			// ถ้าวิ่งจนครบทุกจุด ให้ข้ามไปโฮมมิ่ง
			if (path_idx >= PATH_POINTS) {
 80035f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 80035fe:	d30d      	bcc.n	800361c <HAL_TIM_PeriodElapsedCallback+0x7f4>
				registerFrame[4].U16 = 1;
 8003600:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003602:	2201      	movs	r2, #1
 8003604:	811a      	strh	r2, [r3, #8]
				registerFrame[5].U16 = 0;
 8003606:	4b2d      	ldr	r3, [pc, #180]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003608:	2200      	movs	r2, #0
 800360a:	815a      	strh	r2, [r3, #10]
				pain_flang = 0;
 800360c:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
				current_state = STATE_HOMING;
 8003612:	4b2c      	ldr	r3, [pc, #176]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
				break;
 8003618:	f000 bf5a 	b.w	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
			}

			if (painInit) {
 800361c:	4b41      	ldr	r3, [pc, #260]	@ (8003724 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8188 	beq.w	8003936 <HAL_TIM_PeriodElapsedCallback+0xb0e>
				float x_mm = path[path_idx][0];
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	4a3f      	ldr	r2, [pc, #252]	@ (8003728 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
				float y_mm = path[path_idx][1];
 8003634:	4b3a      	ldr	r3, [pc, #232]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	4a3b      	ldr	r2, [pc, #236]	@ (8003728 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	3304      	adds	r3, #4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c

				if (x_mm == -1 && y_mm == -1) {
 8003644:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003648:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800364c:	eef4 7a47 	vcmp.f32	s15, s14
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	d120      	bne.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x870>
 8003656:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800365a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800365e:	eef4 7a47 	vcmp.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	d117      	bne.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x870>
					path_idx++;
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b2b      	ldr	r3, [pc, #172]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003672:	801a      	strh	r2, [r3, #0]
					x_mm = path[path_idx][0];
 8003674:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4a2b      	ldr	r2, [pc, #172]	@ (8003728 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
					y_mm = path[path_idx][1];
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c

					path_idx_prev = 1;
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003694:	2201      	movs	r2, #1
 8003696:	801a      	strh	r2, [r3, #0]
				}

				if (path_idx_prev > 0) {
 8003698:	4b24      	ldr	r3, [pc, #144]	@ (800372c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d047      	beq.n	8003730 <HAL_TIM_PeriodElapsedCallback+0x908>
					registerFrame[4].U16 = 1;
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	811a      	strh	r2, [r3, #8]
					registerFrame[5].U16 = 0;
 80036a6:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	815a      	strh	r2, [r3, #10]
					path_idx_prev--;
 80036ac:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e040      	b.n	800373c <HAL_TIM_PeriodElapsedCallback+0x914>
 80036ba:	bf00      	nop
 80036bc:	20001088 	.word	0x20001088
 80036c0:	20001319 	.word	0x20001319
 80036c4:	20001114 	.word	0x20001114
 80036c8:	2000131c 	.word	0x2000131c
 80036cc:	20001328 	.word	0x20001328
 80036d0:	20001300 	.word	0x20001300
 80036d4:	200011b8 	.word	0x200011b8
 80036d8:	200011bc 	.word	0x200011bc
 80036dc:	20001290 	.word	0x20001290
 80036e0:	c6ffff00 	.word	0xc6ffff00
 80036e4:	20001292 	.word	0x20001292
 80036e8:	200011c0 	.word	0x200011c0
 80036ec:	447a0000 	.word	0x447a0000
 80036f0:	2000069c 	.word	0x2000069c
 80036f4:	2000126c 	.word	0x2000126c
 80036f8:	c72fc800 	.word	0xc72fc800
 80036fc:	20001318 	.word	0x20001318
 8003700:	2000123c 	.word	0x2000123c
 8003704:	200005d0 	.word	0x200005d0
 8003708:	20001150 	.word	0x20001150
 800370c:	20001238 	.word	0x20001238
 8003710:	2000129c 	.word	0x2000129c
 8003714:	2000116c 	.word	0x2000116c
 8003718:	2000131b 	.word	0x2000131b
 800371c:	20001326 	.word	0x20001326
 8003720:	2000132a 	.word	0x2000132a
 8003724:	2000021c 	.word	0x2000021c
 8003728:	0800d428 	.word	0x0800d428
 800372c:	2000132c 	.word	0x2000132c
				} else {
					registerFrame[4].U16 = 0;
 8003730:	4b3f      	ldr	r3, [pc, #252]	@ (8003830 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8003732:	2200      	movs	r2, #0
 8003734:	811a      	strh	r2, [r3, #8]
					registerFrame[5].U16 = 1;
 8003736:	4b3e      	ldr	r3, [pc, #248]	@ (8003830 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8003738:	2201      	movs	r2, #1
 800373a:	815a      	strh	r2, [r3, #10]
				}

				theta = atan2(y_mm, x_mm);
 800373c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800373e:	f7fc fecf 	bl	80004e0 <__aeabi_f2d>
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
 8003746:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003748:	f7fc feca 	bl	80004e0 <__aeabi_f2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	ec43 2b11 	vmov	d1, r2, r3
 8003754:	ec45 4b10 	vmov	d0, r4, r5
 8003758:	f009 faca 	bl	800ccf0 <atan2>
 800375c:	ec53 2b10 	vmov	r2, r3, d0
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7fd fa0c 	bl	8000b80 <__aeabi_d2f>
 8003768:	4603      	mov	r3, r0
 800376a:	4a32      	ldr	r2, [pc, #200]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800376c:	6013      	str	r3, [r2, #0]
				if (theta < 0.0f)
 800376e:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8003770:	edd3 7a00 	vldr	s15, [r3]
 8003774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	d512      	bpl.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0x97c>
					theta += 2.0f * M_PI;
 800377e:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc feac 	bl	80004e0 <__aeabi_f2d>
 8003788:	a325      	add	r3, pc, #148	@ (adr r3, 8003820 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc fd49 	bl	8000224 <__adddf3>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9f1 	bl	8000b80 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a24      	ldr	r2, [pc, #144]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80037a2:	6013      	str	r3, [r2, #0]

				theta *= 2.0;
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]

				if (theta <= 2.0 * M_PI) {
 80037b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fe91 	bl	80004e0 <__aeabi_f2d>
 80037be:	a318      	add	r3, pc, #96	@ (adr r3, 8003820 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fd f960 	bl	8000a88 <__aeabi_dcmple>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d038      	beq.n	8003840 <HAL_TIM_PeriodElapsedCallback+0xa18>
					target_position_revolute = theta;
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80037d4:	6013      	str	r3, [r2, #0]
					target_position_prismatic = 300
							+ (sqrt((x_mm * x_mm) + (y_mm * y_mm)));
 80037d6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80037e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ea:	ee17 0a90 	vmov	r0, s15
 80037ee:	f7fc fe77 	bl	80004e0 <__aeabi_f2d>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	ec43 2b10 	vmov	d0, r2, r3
 80037fa:	f009 fa7b 	bl	800ccf4 <sqrt>
 80037fe:	ec51 0b10 	vmov	r0, r1, d0
 8003802:	a309      	add	r3, pc, #36	@ (adr r3, 8003828 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fc fd0c 	bl	8000224 <__adddf3>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f7fd f9b4 	bl	8000b80 <__aeabi_d2f>
 8003818:	4603      	mov	r3, r0
					target_position_prismatic = 300
 800381a:	4a08      	ldr	r2, [pc, #32]	@ (800383c <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e060      	b.n	80038e2 <HAL_TIM_PeriodElapsedCallback+0xaba>
 8003820:	54442d18 	.word	0x54442d18
 8003824:	401921fb 	.word	0x401921fb
 8003828:	00000000 	.word	0x00000000
 800382c:	4072c000 	.word	0x4072c000
 8003830:	20001088 	.word	0x20001088
 8003834:	20001320 	.word	0x20001320
 8003838:	20001238 	.word	0x20001238
 800383c:	20001150 	.word	0x20001150
				} else if (theta > 2.0 * M_PI) {
 8003840:	4bb5      	ldr	r3, [pc, #724]	@ (8003b18 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe4b 	bl	80004e0 <__aeabi_f2d>
 800384a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8003b00 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fd f92e 	bl	8000ab0 <__aeabi_dcmpgt>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d043      	beq.n	80038e2 <HAL_TIM_PeriodElapsedCallback+0xaba>
					target_position_revolute = (float) (fabs(M_PI - theta));
 800385a:	4baf      	ldr	r3, [pc, #700]	@ (8003b18 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fe3e 	bl	80004e0 <__aeabi_f2d>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	a1a7      	add	r1, pc, #668	@ (adr r1, 8003b08 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 800386a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800386e:	f7fc fcd7 	bl	8000220 <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4692      	mov	sl, r2
 8003878:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800387c:	4650      	mov	r0, sl
 800387e:	4659      	mov	r1, fp
 8003880:	f7fd f97e 	bl	8000b80 <__aeabi_d2f>
 8003884:	4603      	mov	r3, r0
 8003886:	4aa5      	ldr	r2, [pc, #660]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8003888:	6013      	str	r3, [r2, #0]
					target_position_prismatic = mapf(
							sqrt((x_mm * x_mm) + (y_mm * y_mm)), -300, 0, 300,
 800388a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800388e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003892:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800389a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389e:	ee17 0a90 	vmov	r0, s15
 80038a2:	f7fc fe1d 	bl	80004e0 <__aeabi_f2d>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	ec43 2b10 	vmov	d0, r2, r3
 80038ae:	f009 fa21 	bl	800ccf4 <sqrt>
 80038b2:	ec53 2b10 	vmov	r2, r3, d0
					target_position_prismatic = mapf(
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd f961 	bl	8000b80 <__aeabi_d2f>
 80038be:	4603      	mov	r3, r0
 80038c0:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8003b20 <HAL_TIM_PeriodElapsedCallback+0xcf8>
 80038c4:	eddf 1a97 	vldr	s3, [pc, #604]	@ 8003b24 <HAL_TIM_PeriodElapsedCallback+0xcfc>
 80038c8:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 8003b28 <HAL_TIM_PeriodElapsedCallback+0xd00>
 80038cc:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8003b2c <HAL_TIM_PeriodElapsedCallback+0xd04>
 80038d0:	ee00 3a10 	vmov	s0, r3
 80038d4:	f7ff fa7a 	bl	8002dcc <mapf>
 80038d8:	eef0 7a40 	vmov.f32	s15, s0
 80038dc:	4b94      	ldr	r3, [pc, #592]	@ (8003b30 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 80038de:	edc3 7a00 	vstr	s15, [r3]
							600);
				}

				Trapezoidal_Init(&prisProfile, (float) ball_screw_pos,
 80038e2:	4b94      	ldr	r3, [pc, #592]	@ (8003b34 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7fd f948 	bl	8000b80 <__aeabi_d2f>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003b30 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8003b38 <HAL_TIM_PeriodElapsedCallback+0xd10>
 80038fc:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 8003b3c <HAL_TIM_PeriodElapsedCallback+0xd14>
 8003900:	eef0 0a67 	vmov.f32	s1, s15
 8003904:	ee00 2a10 	vmov	s0, r2
 8003908:	488d      	ldr	r0, [pc, #564]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 800390a:	f7fe f8d5 	bl	8001ab8 <Trapezoidal_Init>
						target_position_prismatic, 550.0f, 250.0f);
				Trapezoidal_Init(&revProfile, revolute_encoder.rads,
 800390e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8003910:	edd3 7a06 	vldr	s15, [r3, #24]
 8003914:	4b81      	ldr	r3, [pc, #516]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8003916:	ed93 7a00 	vldr	s14, [r3]
 800391a:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8003b48 <HAL_TIM_PeriodElapsedCallback+0xd20>
 800391e:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003922:	eef0 0a47 	vmov.f32	s1, s14
 8003926:	eeb0 0a67 	vmov.f32	s0, s15
 800392a:	4888      	ldr	r0, [pc, #544]	@ (8003b4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 800392c:	f7fe f8c4 	bl	8001ab8 <Trapezoidal_Init>
						target_position_revolute, 2.0f, 0.4f);

				painInit = 0;
 8003930:	4b87      	ldr	r3, [pc, #540]	@ (8003b50 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
			}

			if (!prisProfile.finished)
 8003936:	4b82      	ldr	r3, [pc, #520]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003938:	7f1b      	ldrb	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_TIM_PeriodElapsedCallback+0xb24>
				Trapezoidal_Update(&prisProfile, dt);
 800393e:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8003b54 <HAL_TIM_PeriodElapsedCallback+0xd2c>
 8003942:	eeb0 0a67 	vmov.f32	s0, s15
 8003946:	487e      	ldr	r0, [pc, #504]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003948:	f7fe f80c 	bl	8001964 <Trapezoidal_Update>
			if (!revProfile.finished)
 800394c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 800394e:	7f1b      	ldrb	r3, [r3, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <HAL_TIM_PeriodElapsedCallback+0xb3a>
				Trapezoidal_Update(&revProfile, dt);
 8003954:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 8003b54 <HAL_TIM_PeriodElapsedCallback+0xd2c>
 8003958:	eeb0 0a67 	vmov.f32	s0, s15
 800395c:	487b      	ldr	r0, [pc, #492]	@ (8003b4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 800395e:	f7fe f801 	bl	8001964 <Trapezoidal_Update>
			Prismatic_CasCadeControl();
 8003962:	f7fe ffad 	bl	80028c0 <Prismatic_CasCadeControl>

			Kp_pos_re = 3.5; //3
 8003966:	4b7c      	ldr	r3, [pc, #496]	@ (8003b58 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8003968:	4a7c      	ldr	r2, [pc, #496]	@ (8003b5c <HAL_TIM_PeriodElapsedCallback+0xd34>)
 800396a:	601a      	str	r2, [r3, #0]
			Ki_pos_re = 0.0015; //0.00075
 800396c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 800396e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8003970:	601a      	str	r2, [r3, #0]
			Kd_pos_re = 0.0;
 8003972:	4b7d      	ldr	r3, [pc, #500]	@ (8003b68 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
//			Kp_pos_re = 15.0; //3
//			Ki_pos_re = 0.0; //0.00075
//			Kd_pos_re = 2.0;

			Kp_velo_re = 5000.0; //5000
 800397a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 800397c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b70 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 800397e:	601a      	str	r2, [r3, #0]
			Ki_velo_re = 0.5;//0.5
 8003980:	4b7c      	ldr	r3, [pc, #496]	@ (8003b74 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8003982:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003986:	601a      	str	r2, [r3, #0]
			Kd_velo_re = 0.0;
 8003988:	4b7b      	ldr	r3, [pc, #492]	@ (8003b78 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
//			Kp_velo_re = 3000.0; //5000
//			Ki_velo_re = 0.4;//0.5
//			Kd_velo_re = 0.0;

			PID_POS_re.Kp = Kp_pos_re;
 8003990:	4b71      	ldr	r3, [pc, #452]	@ (8003b58 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a79      	ldr	r2, [pc, #484]	@ (8003b7c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8003996:	6193      	str	r3, [r2, #24]
			PID_POS_re.Ki = Ki_pos_re;
 8003998:	4b71      	ldr	r3, [pc, #452]	@ (8003b60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a77      	ldr	r2, [pc, #476]	@ (8003b7c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800399e:	61d3      	str	r3, [r2, #28]
			PID_POS_re.Kd = Kd_pos_re;
 80039a0:	4b71      	ldr	r3, [pc, #452]	@ (8003b68 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a75      	ldr	r2, [pc, #468]	@ (8003b7c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 80039a6:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID_POS_re, 0);
 80039a8:	2100      	movs	r1, #0
 80039aa:	4874      	ldr	r0, [pc, #464]	@ (8003b7c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 80039ac:	f009 f92a 	bl	800cc04 <arm_pid_init_f32>
			Revolute_CasCadeControl();
 80039b0:	f7ff f896 	bl	8002ae0 <Revolute_CasCadeControl>

			if ((limit_r && output_prismatic < 0)
 80039b4:	4b72      	ldr	r3, [pc, #456]	@ (8003b80 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_PeriodElapsedCallback+0xba4>
 80039bc:	4b71      	ldr	r3, [pc, #452]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	d40b      	bmi.n	80039e4 <HAL_TIM_PeriodElapsedCallback+0xbbc>
					|| (limit_l && output_prismatic > 0))
 80039cc:	4b6e      	ldr	r3, [pc, #440]	@ (8003b88 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_TIM_PeriodElapsedCallback+0xbc4>
 80039d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	dd03      	ble.n	80039ec <HAL_TIM_PeriodElapsedCallback+0xbc4>
				output_prismatic = 0;
 80039e4:	4b67      	ldr	r3, [pc, #412]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
			if ((revolute_flag && output_revolute < 0)
 80039ec:	4b67      	ldr	r3, [pc, #412]	@ (8003b8c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_PeriodElapsedCallback+0xbdc>
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	d414      	bmi.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xc06>
					|| (revolute_encoder.rads >= 2.0f * M_PI
 8003a04:	4b4f      	ldr	r3, [pc, #316]	@ (8003b44 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd69 	bl	80004e0 <__aeabi_f2d>
 8003a0e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003b00 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f7fd f842 	bl	8000a9c <__aeabi_dcmpge>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0xc0e>
							&& output_revolute > 0))
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003b90 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	dd03      	ble.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0xc0e>
				output_revolute = 0;
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

//			if (prisProfile.finished && revProfile.finished) {
			if (prisProfile.finished && revProfile.finished
 8003a36:	4b42      	ldr	r3, [pc, #264]	@ (8003b40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003a38:	7f1b      	ldrb	r3, [r3, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8547 	beq.w	80044ce <HAL_TIM_PeriodElapsedCallback+0x16a6>
 8003a40:	4b42      	ldr	r3, [pc, #264]	@ (8003b4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8003a42:	7f1b      	ldrb	r3, [r3, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8542 	beq.w	80044ce <HAL_TIM_PeriodElapsedCallback+0x16a6>
					&& output_prismatic == 0 && output_revolute == 0) {
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	f040 8539 	bne.w	80044ce <HAL_TIM_PeriodElapsedCallback+0x16a6>
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8003a5e:	edd3 7a00 	vldr	s15, [r3]
 8003a62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	f040 8530 	bne.w	80044ce <HAL_TIM_PeriodElapsedCallback+0x16a6>
//				registerFrame[4].U16 = 0;
//				registerFrame[5].U16 = 1;
				path_idx++;
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8003a78:	801a      	strh	r2, [r3, #0]
				painInit = 1;
 8003a7a:	4b35      	ldr	r3, [pc, #212]	@ (8003b50 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003a80:	f000 bd25 	b.w	80044ce <HAL_TIM_PeriodElapsedCallback+0x16a6>
			//Call joystick mode
//			registerFrame[4].U16 = 1;
//			registerFrame[5].U16 = 0;
//			joy_flag = 1;

			if (limit_r == 1) {
 8003a84:	4b3e      	ldr	r3, [pc, #248]	@ (8003b80 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d103      	bne.n	8003a94 <HAL_TIM_PeriodElapsedCallback+0xc6c>
				output_prismatic = 0;
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
//				QEI_Reset(&prismatic_encoder);
//				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
			}

			if (revolute_flag == 1) {
 8003a94:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d103      	bne.n	8003aa4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
				output_revolute = 0;
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b90 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
//				QEI_Reset(&revolute_encoder);
//				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
			}

			output_prismatic = (Joy_x / 100.0) * 20000;
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 8003aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd06 	bl	80004bc <__aeabi_i2d>
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_TIM_PeriodElapsedCallback+0xd74>)
 8003ab6:	f7fc fe95 	bl	80007e4 <__aeabi_ddiv>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	a313      	add	r3, pc, #76	@ (adr r3, 8003b10 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fd62 	bl	8000590 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7fd f854 	bl	8000b80 <__aeabi_d2f>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003adc:	6013      	str	r3, [r2, #0]

			if (limit_r == 1 && output_prismatic < 0) {
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d15c      	bne.n	8003ba0 <HAL_TIM_PeriodElapsedCallback+0xd78>
 8003ae6:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	d554      	bpl.n	8003ba0 <HAL_TIM_PeriodElapsedCallback+0xd78>
				output_prismatic = 0;
 8003af6:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e05f      	b.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0xd98>
 8003b00:	54442d18 	.word	0x54442d18
 8003b04:	401921fb 	.word	0x401921fb
 8003b08:	54442d18 	.word	0x54442d18
 8003b0c:	400921fb 	.word	0x400921fb
 8003b10:	00000000 	.word	0x00000000
 8003b14:	40d38800 	.word	0x40d38800
 8003b18:	20001320 	.word	0x20001320
 8003b1c:	20001238 	.word	0x20001238
 8003b20:	44160000 	.word	0x44160000
 8003b24:	43960000 	.word	0x43960000
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	c3960000 	.word	0xc3960000
 8003b30:	20001150 	.word	0x20001150
 8003b34:	20001228 	.word	0x20001228
 8003b38:	437a0000 	.word	0x437a0000
 8003b3c:	44098000 	.word	0x44098000
 8003b40:	20000b58 	.word	0x20000b58
 8003b44:	2000123c 	.word	0x2000123c
 8003b48:	3ecccccd 	.word	0x3ecccccd
 8003b4c:	20000b84 	.word	0x20000b84
 8003b50:	2000021c 	.word	0x2000021c
 8003b54:	3a83126f 	.word	0x3a83126f
 8003b58:	2000020c 	.word	0x2000020c
 8003b5c:	40600000 	.word	0x40600000
 8003b60:	20000210 	.word	0x20000210
 8003b64:	3ac49ba6 	.word	0x3ac49ba6
 8003b68:	20001294 	.word	0x20001294
 8003b6c:	20000214 	.word	0x20000214
 8003b70:	459c4000 	.word	0x459c4000
 8003b74:	20000218 	.word	0x20000218
 8003b78:	200012a0 	.word	0x200012a0
 8003b7c:	20001194 	.word	0x20001194
 8003b80:	20001290 	.word	0x20001290
 8003b84:	200011b8 	.word	0x200011b8
 8003b88:	20001291 	.word	0x20001291
 8003b8c:	2000126c 	.word	0x2000126c
 8003b90:	200011bc 	.word	0x200011bc
 8003b94:	2000132a 	.word	0x2000132a
 8003b98:	200012f0 	.word	0x200012f0
 8003b9c:	40590000 	.word	0x40590000
			} else if (limit_l == 1 && output_prismatic > 0) {
 8003ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d60 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0xd98>
 8003ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8003d64 <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	dd03      	ble.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0xd98>
				output_prismatic = 0;
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d64 <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
			}

			output_revolute = (Joy_y / 100.0) * 30000.0;
 8003bc0:	4b69      	ldr	r3, [pc, #420]	@ (8003d68 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 8003bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fc fc78 	bl	80004bc <__aeabi_i2d>
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	4b66      	ldr	r3, [pc, #408]	@ (8003d6c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8003bd2:	f7fc fe07 	bl	80007e4 <__aeabi_ddiv>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	a35c      	add	r3, pc, #368	@ (adr r3, 8003d50 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fcd4 	bl	8000590 <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fc ffc6 	bl	8000b80 <__aeabi_d2f>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d70 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8003bf8:	6013      	str	r3, [r2, #0]

			if (revolute_flag == 1 && output_revolute < 0) {
 8003bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003d74 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d10c      	bne.n	8003c1c <HAL_TIM_PeriodElapsedCallback+0xdf4>
 8003c02:	4b5b      	ldr	r3, [pc, #364]	@ (8003d70 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	d504      	bpl.n	8003c1c <HAL_TIM_PeriodElapsedCallback+0xdf4>
				output_revolute = 0;
 8003c12:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e018      	b.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0xe26>
			} else if (revolute_encoder.rads >= (2 * M_PI)
 8003c1c:	4b56      	ldr	r3, [pc, #344]	@ (8003d78 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc5d 	bl	80004e0 <__aeabi_f2d>
 8003c26:	a34c      	add	r3, pc, #304	@ (adr r3, 8003d58 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc ff36 	bl	8000a9c <__aeabi_dcmpge>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0xe26>
					&& output_revolute > 0) {
 8003c36:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c44:	dd03      	ble.n	8003c4e <HAL_TIM_PeriodElapsedCallback+0xe26>
				output_revolute = 0;
 8003c46:	4b4a      	ldr	r3, [pc, #296]	@ (8003d70 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
			}

			if (button_reset == 1) {
 8003c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d7c <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10b      	bne.n	8003c6e <HAL_TIM_PeriodElapsedCallback+0xe46>
				count_run = 0;
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
				current_state = STATE_RUNING;
 8003c5c:	4b49      	ldr	r3, [pc, #292]	@ (8003d84 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8003c5e:	2207      	movs	r2, #7
 8003c60:	701a      	strb	r2, [r3, #0]
				pointRunNeedsInit = 1;
 8003c62:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
				running_flang = 1;
 8003c68:	4b48      	ldr	r3, [pc, #288]	@ (8003d8c <HAL_TIM_PeriodElapsedCallback+0xf64>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
//				registerFrame[4].U16 = 1;
//				registerFrame[5].U16 = 0;
			}

			if (button_run == 1 && button_run_prev == 0) {
 8003c6e:	4b48      	ldr	r3, [pc, #288]	@ (8003d90 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d165      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0xf1a>
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d161      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0xf1a>
				if (count >= 0 && count < 10) {
 8003c7e:	4b46      	ldr	r3, [pc, #280]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db55      	blt.n	8003d32 <HAL_TIM_PeriodElapsedCallback+0xf0a>
 8003c86:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	dc51      	bgt.n	8003d32 <HAL_TIM_PeriodElapsedCallback+0xf0a>
					registerFrame[20 + count * 2].U16 = ball_screw_pos * 10;
 8003c8e:	4b43      	ldr	r3, [pc, #268]	@ (8003d9c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8003c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	4b41      	ldr	r3, [pc, #260]	@ (8003da0 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8003c9a:	f7fc fc79 	bl	8000590 <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330a      	adds	r3, #10
 8003cac:	005c      	lsls	r4, r3, #1
 8003cae:	f7fc ff47 	bl	8000b40 <__aeabi_d2uiz>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8003cb8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					registerFrame[21 + count * 2].U16 = (revolute_encoder.rads
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d78 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fc0d 	bl	80004e0 <__aeabi_f2d>
							/ (2 * M_PI)) * 1800.0;
 8003cc6:	a324      	add	r3, pc, #144	@ (adr r3, 8003d58 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f7fc fd8a 	bl	80007e4 <__aeabi_ddiv>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 8003cde:	f7fc fc57 	bl	8000590 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
					registerFrame[21 + count * 2].U16 = (revolute_encoder.rads
 8003cea:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	f103 0415 	add.w	r4, r3, #21
 8003cf4:	f7fc ff24 	bl	8000b40 <__aeabi_d2uiz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8003cfe:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

					ten_point[count][0] = (float) ball_screw_pos;
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <HAL_TIM_PeriodElapsedCallback+0xf74>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	4923      	ldr	r1, [pc, #140]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003d0a:	680c      	ldr	r4, [r1, #0]
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f7fc ff36 	bl	8000b80 <__aeabi_d2f>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4925      	ldr	r1, [pc, #148]	@ (8003dac <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8003d18:	00e3      	lsls	r3, r4, #3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	601a      	str	r2, [r3, #0]
					ten_point[count][1] = (float) revolute_encoder.rads;
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8003d24:	6992      	ldr	r2, [r2, #24]
 8003d26:	4921      	ldr	r1, [pc, #132]	@ (8003dac <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e002      	b.n	8003d38 <HAL_TIM_PeriodElapsedCallback+0xf10>

//					registerFrame[18 + count * 2].U16 = (float) ball_screw_pos;
//					registerFrame[19 + count * 2].U16 =
//							(float) revolute_encoder.rads;
				} else {
					count = 0;
 8003d32:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
				}
				count++;
 8003d38:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a16      	ldr	r2, [pc, #88]	@ (8003d98 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8003d40:	6013      	str	r3, [r2, #0]
			}

			pen_flag = 0;
 8003d42:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
			break;
 8003d48:	e3c2      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w
 8003d50:	00000000 	.word	0x00000000
 8003d54:	40dd4c00 	.word	0x40dd4c00
 8003d58:	54442d18 	.word	0x54442d18
 8003d5c:	401921fb 	.word	0x401921fb
 8003d60:	20001291 	.word	0x20001291
 8003d64:	200011b8 	.word	0x200011b8
 8003d68:	200012f2 	.word	0x200012f2
 8003d6c:	40590000 	.word	0x40590000
 8003d70:	200011bc 	.word	0x200011bc
 8003d74:	2000126c 	.word	0x2000126c
 8003d78:	2000123c 	.word	0x2000123c
 8003d7c:	20001319 	.word	0x20001319
 8003d80:	200012fc 	.word	0x200012fc
 8003d84:	20001114 	.word	0x20001114
 8003d88:	20001327 	.word	0x20001327
 8003d8c:	20001325 	.word	0x20001325
 8003d90:	2000131b 	.word	0x2000131b
 8003d94:	20001388 	.word	0x20001388
 8003d98:	200012f8 	.word	0x200012f8
 8003d9c:	20001228 	.word	0x20001228
 8003da0:	40240000 	.word	0x40240000
 8003da4:	20001088 	.word	0x20001088
 8003da8:	409c2000 	.word	0x409c2000
 8003dac:	20001330 	.word	0x20001330
 8003db0:	20001328 	.word	0x20001328
		case STATE_RUNING:

			if (pointRunNeedsInit == 1) {
 8003db4:	4b9a      	ldr	r3, [pc, #616]	@ (8004020 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d146      	bne.n	8003e4a <HAL_TIM_PeriodElapsedCallback+0x1022>
				registerFrame[4].U16 = 1;
 8003dbc:	4b99      	ldr	r3, [pc, #612]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	811a      	strh	r2, [r3, #8]
				registerFrame[5].U16 = 0;
 8003dc2:	4b98      	ldr	r3, [pc, #608]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	815a      	strh	r2, [r3, #10]

				target_position_prismatic = (float) (ten_point[count_run][0]);
 8003dc8:	4b97      	ldr	r3, [pc, #604]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a97      	ldr	r2, [pc, #604]	@ (800402c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a96      	ldr	r2, [pc, #600]	@ (8004030 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003dd6:	6013      	str	r3, [r2, #0]
				target_position_revolute = (float) (ten_point[count_run][1]);
 8003dd8:	4b93      	ldr	r3, [pc, #588]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a93      	ldr	r2, [pc, #588]	@ (800402c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a93      	ldr	r2, [pc, #588]	@ (8004034 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003de8:	6013      	str	r3, [r2, #0]

				count_run++;
 8003dea:	4b8f      	ldr	r3, [pc, #572]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	4a8d      	ldr	r2, [pc, #564]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003df2:	6013      	str	r3, [r2, #0]

				float abs_start_pris = (float) ball_screw_pos;
 8003df4:	4b90      	ldr	r3, [pc, #576]	@ (8004038 <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc febf 	bl	8000b80 <__aeabi_d2f>
 8003e02:	4603      	mov	r3, r0
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
				float abs_goal_pris = target_position_prismatic;  // (mm)
 8003e06:	4b8a      	ldr	r3, [pc, #552]	@ (8004030 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
 8003e0c:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 800403c <HAL_TIM_PeriodElapsedCallback+0x1214>
 8003e10:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 8004040 <HAL_TIM_PeriodElapsedCallback+0x1218>
 8003e14:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003e18:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003e1c:	4889      	ldr	r0, [pc, #548]	@ (8004044 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003e1e:	f7fd fe4b 	bl	8001ab8 <Trapezoidal_Init>
						550.0f, // v_max (mm/s)
						250.0f); // a_max (mm/s²)

				float abs_start_rev = (float) revolute_encoder.rads;
 8003e22:	4b89      	ldr	r3, [pc, #548]	@ (8004048 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	623b      	str	r3, [r7, #32]
				float abs_goal_rev = target_position_revolute/* from registerFrame[65], converted to radians */;
 8003e28:	4b82      	ldr	r3, [pc, #520]	@ (8004034 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61fb      	str	r3, [r7, #28]

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
 8003e2e:	eddf 1a87 	vldr	s3, [pc, #540]	@ 800404c <HAL_TIM_PeriodElapsedCallback+0x1224>
 8003e32:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003e36:	edd7 0a07 	vldr	s1, [r7, #28]
 8003e3a:	ed97 0a08 	vldr	s0, [r7, #32]
 8003e3e:	4884      	ldr	r0, [pc, #528]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8003e40:	f7fd fe3a 	bl	8001ab8 <Trapezoidal_Init>
						0.4f); // a_max (rad/s²)
				pointRunNeedsInit = 0;
 8003e44:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
			}

			if (!prisProfile.finished) {
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	@ (8004044 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003e4c:	7f1b      	ldrb	r3, [r3, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <HAL_TIM_PeriodElapsedCallback+0x1034>
				Trapezoidal_Update(&prisProfile, 0.001f);
 8003e52:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8004054 <HAL_TIM_PeriodElapsedCallback+0x122c>
 8003e56:	487b      	ldr	r0, [pc, #492]	@ (8004044 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003e58:	f7fd fd84 	bl	8001964 <Trapezoidal_Update>
			}
			if (!revProfile.finished) {
 8003e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8003e5e:	7f1b      	ldrb	r3, [r3, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PeriodElapsedCallback+0x1046>
				Trapezoidal_Update(&revProfile, 0.001f);
 8003e64:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8004054 <HAL_TIM_PeriodElapsedCallback+0x122c>
 8003e68:	4879      	ldr	r0, [pc, #484]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8003e6a:	f7fd fd7b 	bl	8001964 <Trapezoidal_Update>
			}

			if (output_prismatic == 0 && output_revolute == 0
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004058 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d14d      	bne.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0x10f2>
 8003e7e:	4b77      	ldr	r3, [pc, #476]	@ (800405c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8c:	d145      	bne.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0x10f2>
					&& prisProfile.finished && revProfile.finished) {
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004044 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003e90:	7f1b      	ldrb	r3, [r3, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d041      	beq.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0x10f2>
 8003e96:	4b6e      	ldr	r3, [pc, #440]	@ (8004050 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8003e98:	7f1b      	ldrb	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d03d      	beq.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0x10f2>

				if (ten_flag == 0) {
 8003e9e:	4b70      	ldr	r3, [pc, #448]	@ (8004060 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_PeriodElapsedCallback+0x108c>
					ten_flag = 1;
 8003ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8004060 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
					ten_count = 0;
 8003eac:	4b6d      	ldr	r3, [pc, #436]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
				if (ten_flag == 0) {
 8003eb2:	e04e      	b.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>

				} else {
					if (ten_count <= 1500) {
 8003eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d813      	bhi.n	8003ee8 <HAL_TIM_PeriodElapsedCallback+0x10c0>
						registerFrame[4].U16 = 0;
 8003ec0:	4b58      	ldr	r3, [pc, #352]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	811a      	strh	r2, [r3, #8]
						registerFrame[5].U16 = 1;
 8003ec6:	4b57      	ldr	r3, [pc, #348]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	815a      	strh	r2, [r3, #10]
						output_prismatic = 0;
 8003ecc:	4b62      	ldr	r3, [pc, #392]	@ (8004058 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
						output_revolute = 0;
 8003ed4:	4b61      	ldr	r3, [pc, #388]	@ (800405c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
						ten_count++;
 8003edc:	4b61      	ldr	r3, [pc, #388]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a60      	ldr	r2, [pc, #384]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003ee4:	6013      	str	r3, [r2, #0]
				if (ten_flag == 0) {
 8003ee6:	e034      	b.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>
					} else if (ten_count <= 3000) {
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d80b      	bhi.n	8003f0c <HAL_TIM_PeriodElapsedCallback+0x10e4>
						registerFrame[4].U16 = 1;
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	811a      	strh	r2, [r3, #8]
						registerFrame[5].U16 = 0;
 8003efa:	4b4a      	ldr	r3, [pc, #296]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	815a      	strh	r2, [r3, #10]
						ten_count++;
 8003f00:	4b58      	ldr	r3, [pc, #352]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003f08:	6013      	str	r3, [r2, #0]
				if (ten_flag == 0) {
 8003f0a:	e022      	b.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>
					} else {
						pointRunNeedsInit = 1;
 8003f0c:	4b44      	ldr	r3, [pc, #272]	@ (8004020 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
						ten_flag = 0;
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
				if (ten_flag == 0) {
 8003f18:	e01b      	b.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>
					}
				}

			} else {

				Revolute_CasCadeControl();
 8003f1a:	f7fe fde1 	bl	8002ae0 <Revolute_CasCadeControl>
				Prismatic_CasCadeControl();
 8003f1e:	f7fe fccf 	bl	80028c0 <Prismatic_CasCadeControl>

				if (limit_r == 1 && limit_l_prev == 0) {
 8003f22:	4b51      	ldr	r3, [pc, #324]	@ (8004068 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_PeriodElapsedCallback+0x1112>
 8003f2a:	4b50      	ldr	r3, [pc, #320]	@ (800406c <HAL_TIM_PeriodElapsedCallback+0x1244>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_TIM_PeriodElapsedCallback+0x1112>
					output_prismatic = 0;
 8003f32:	4b49      	ldr	r3, [pc, #292]	@ (8004058 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
				}

				if (revolute_flag == 1 && revolute_homed == 0) {
 8003f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>
 8003f42:	4b4c      	ldr	r3, [pc, #304]	@ (8004074 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x112a>
					output_revolute = 0;
 8003f4a:	4b44      	ldr	r3, [pc, #272]	@ (800405c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
//			if (button_reset && !button_reset_prev) {
////				count_run++;
//				pointRunNeedsInit = 1;
//			}
//
			if (button_run == 1 || count_run > count) {
 8003f52:	4b49      	ldr	r3, [pc, #292]	@ (8004078 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d005      	beq.n	8003f66 <HAL_TIM_PeriodElapsedCallback+0x113e>
 8003f5a:	4b33      	ldr	r3, [pc, #204]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_TIM_PeriodElapsedCallback+0x1254>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	dd08      	ble.n	8003f78 <HAL_TIM_PeriodElapsedCallback+0x1150>
				running_flang = 0;
 8003f66:	4b46      	ldr	r3, [pc, #280]	@ (8004080 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
				current_state = STATE_JOGGING;
 8003f6c:	4b45      	ldr	r3, [pc, #276]	@ (8004084 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 8003f6e:	2202      	movs	r2, #2
 8003f70:	701a      	strb	r2, [r3, #0]
				count_run = 0;
 8003f72:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
			}
			pen_flag = 0;
 8003f78:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_TIM_PeriodElapsedCallback+0x1260>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
			break;
 8003f7e:	e2a7      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
		case STATE_POINT_MOVING:
//			registerFrame[4].U16 = 1;
//			registerFrame[5].U16 = 0;
			theta = (float) (registerFrame[65].U16);
 8003f80:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003f82:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f90:	4b3e      	ldr	r3, [pc, #248]	@ (800408c <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8003f92:	edc3 7a00 	vstr	s15, [r3]
			if (theta <= 1800) {
 8003f96:	4b3d      	ldr	r3, [pc, #244]	@ (800408c <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8003f98:	edd3 7a00 	vldr	s15, [r3]
 8003f9c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004090 <HAL_TIM_PeriodElapsedCallback+0x1268>
 8003fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	d878      	bhi.n	800409c <HAL_TIM_PeriodElapsedCallback+0x1274>
				target_position_revolute = (float) (registerFrame[65].U16
 8003faa:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003fac:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003fb0:	b29b      	uxth	r3, r3
						/ 1800.0) * (2.0 * M_PI);
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fa82 	bl	80004bc <__aeabi_i2d>
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	4b35      	ldr	r3, [pc, #212]	@ (8004094 <HAL_TIM_PeriodElapsedCallback+0x126c>)
 8003fbe:	f7fc fc11 	bl	80007e4 <__aeabi_ddiv>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
				target_position_revolute = (float) (registerFrame[65].U16
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7fc fdd9 	bl	8000b80 <__aeabi_d2f>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fa85 	bl	80004e0 <__aeabi_f2d>
						/ 1800.0) * (2.0 * M_PI);
 8003fd6:	a310      	add	r3, pc, #64	@ (adr r3, 8004018 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc fad8 	bl	8000590 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fc fdca 	bl	8000b80 <__aeabi_d2f>
 8003fec:	4603      	mov	r3, r0
				target_position_revolute = (float) (registerFrame[65].U16
 8003fee:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003ff0:	6013      	str	r3, [r2, #0]
				target_position_prismatic = 300 - (registerFrame[64].U16 / 10);
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003ff4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4a27      	ldr	r2, [pc, #156]	@ (8004098 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	b29b      	uxth	r3, r3
 8004004:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8004012:	edc3 7a00 	vstr	s15, [r3]
 8004016:	e0a1      	b.n	800415c <HAL_TIM_PeriodElapsedCallback+0x1334>
 8004018:	54442d18 	.word	0x54442d18
 800401c:	401921fb 	.word	0x401921fb
 8004020:	20001327 	.word	0x20001327
 8004024:	20001088 	.word	0x20001088
 8004028:	200012fc 	.word	0x200012fc
 800402c:	20001330 	.word	0x20001330
 8004030:	20001150 	.word	0x20001150
 8004034:	20001238 	.word	0x20001238
 8004038:	20001228 	.word	0x20001228
 800403c:	437a0000 	.word	0x437a0000
 8004040:	44098000 	.word	0x44098000
 8004044:	20000b58 	.word	0x20000b58
 8004048:	2000123c 	.word	0x2000123c
 800404c:	3ecccccd 	.word	0x3ecccccd
 8004050:	20000b84 	.word	0x20000b84
 8004054:	3a83126f 	.word	0x3a83126f
 8004058:	200011b8 	.word	0x200011b8
 800405c:	200011bc 	.word	0x200011bc
 8004060:	20001380 	.word	0x20001380
 8004064:	20001384 	.word	0x20001384
 8004068:	20001290 	.word	0x20001290
 800406c:	20001292 	.word	0x20001292
 8004070:	2000126c 	.word	0x2000126c
 8004074:	20001318 	.word	0x20001318
 8004078:	2000131b 	.word	0x2000131b
 800407c:	200012f8 	.word	0x200012f8
 8004080:	20001325 	.word	0x20001325
 8004084:	20001114 	.word	0x20001114
 8004088:	20001328 	.word	0x20001328
 800408c:	20001320 	.word	0x20001320
 8004090:	44e10000 	.word	0x44e10000
 8004094:	409c2000 	.word	0x409c2000
 8004098:	cccccccd 	.word	0xcccccccd
			} else if (theta >= 1800) {
 800409c:	4b90      	ldr	r3, [pc, #576]	@ (80042e0 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800409e:	edd3 7a00 	vldr	s15, [r3]
 80040a2:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80042e4 <HAL_TIM_PeriodElapsedCallback+0x14bc>
 80040a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	db55      	blt.n	800415c <HAL_TIM_PeriodElapsedCallback+0x1334>
				target_position_revolute = (float) (fabs(
						180 - registerFrame[65].U16 / 10.0));
 80040b0:	4b8d      	ldr	r3, [pc, #564]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 80040b2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc f9ff 	bl	80004bc <__aeabi_i2d>
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b8a      	ldr	r3, [pc, #552]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0x14c4>)
 80040c4:	f7fc fb8e 	bl	80007e4 <__aeabi_ddiv>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	4987      	ldr	r1, [pc, #540]	@ (80042f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 80040d2:	f7fc f8a5 	bl	8000220 <__aeabi_dsub>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
				target_position_revolute = (float) (fabs(
 80040da:	4690      	mov	r8, r2
 80040dc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80040e0:	4640      	mov	r0, r8
 80040e2:	4649      	mov	r1, r9
 80040e4:	f7fc fd4c 	bl	8000b80 <__aeabi_d2f>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4a82      	ldr	r2, [pc, #520]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 80040ec:	6013      	str	r3, [r2, #0]
				target_position_revolute = (float) (target_position_revolute
 80040ee:	4b81      	ldr	r3, [pc, #516]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80042f8 <HAL_TIM_PeriodElapsedCallback+0x14d0>
 80040f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040fc:	ee16 0a90 	vmov	r0, s13
 8004100:	f7fc f9ee 	bl	80004e0 <__aeabi_f2d>
						/ 180.0) * (2.0 * M_PI);
 8004104:	a374      	add	r3, pc, #464	@ (adr r3, 80042d8 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc fa41 	bl	8000590 <__aeabi_dmul>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f7fc fd33 	bl	8000b80 <__aeabi_d2f>
 800411a:	4603      	mov	r3, r0
				target_position_revolute = (float) (target_position_revolute
 800411c:	4a75      	ldr	r2, [pc, #468]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800411e:	6013      	str	r3, [r2, #0]
				target_position_prismatic = mapf((registerFrame[64].U16 / 10),
 8004120:	4b71      	ldr	r3, [pc, #452]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 8004122:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8004126:	b29b      	uxth	r3, r3
 8004128:	4a74      	ldr	r2, [pc, #464]	@ (80042fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	b29b      	uxth	r3, r3
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413a:	ed9f 2a71 	vldr	s4, [pc, #452]	@ 8004300 <HAL_TIM_PeriodElapsedCallback+0x14d8>
 800413e:	eddf 1a71 	vldr	s3, [pc, #452]	@ 8004304 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 8004142:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8004304 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 8004146:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8004308 <HAL_TIM_PeriodElapsedCallback+0x14e0>
 800414a:	eeb0 0a67 	vmov.f32	s0, s15
 800414e:	f7fe fe3d 	bl	8002dcc <mapf>
 8004152:	eef0 7a40 	vmov.f32	s15, s0
 8004156:	4b6d      	ldr	r3, [pc, #436]	@ (800430c <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8004158:	edc3 7a00 	vstr	s15, [r3]
						0, 300, 300, 600);
			}
			if (pointMoveNeedsInit) {
 800415c:	4b6c      	ldr	r3, [pc, #432]	@ (8004310 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02a      	beq.n	80041ba <HAL_TIM_PeriodElapsedCallback+0x1392>
				float abs_start_pris = (float) ball_screw_pos;
 8004164:	4b6b      	ldr	r3, [pc, #428]	@ (8004314 <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fd07 	bl	8000b80 <__aeabi_d2f>
 8004172:	4603      	mov	r3, r0
 8004174:	61bb      	str	r3, [r7, #24]
				float abs_goal_pris = target_position_prismatic;
 8004176:	4b65      	ldr	r3, [pc, #404]	@ (800430c <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]

				Trapezoidal_Init(&prisProfile, abs_start_pris, abs_goal_pris,
 800417c:	eddf 1a66 	vldr	s3, [pc, #408]	@ 8004318 <HAL_TIM_PeriodElapsedCallback+0x14f0>
 8004180:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 800431c <HAL_TIM_PeriodElapsedCallback+0x14f4>
 8004184:	edd7 0a05 	vldr	s1, [r7, #20]
 8004188:	ed97 0a06 	vldr	s0, [r7, #24]
 800418c:	4864      	ldr	r0, [pc, #400]	@ (8004320 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 800418e:	f7fd fc93 	bl	8001ab8 <Trapezoidal_Init>
						550.0f, 250.0f);

				float abs_start_rev = (float) revolute_encoder.rads;
 8004192:	4b64      	ldr	r3, [pc, #400]	@ (8004324 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	613b      	str	r3, [r7, #16]
				float abs_goal_rev = target_position_revolute;
 8004198:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]

				Trapezoidal_Init(&revProfile, abs_start_rev, abs_goal_rev, 2.0f, // v_max (rad/s)
 800419e:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8004328 <HAL_TIM_PeriodElapsedCallback+0x1500>
 80041a2:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 80041a6:	edd7 0a03 	vldr	s1, [r7, #12]
 80041aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80041ae:	485f      	ldr	r0, [pc, #380]	@ (800432c <HAL_TIM_PeriodElapsedCallback+0x1504>)
 80041b0:	f7fd fc82 	bl	8001ab8 <Trapezoidal_Init>
						0.4f); // a_max (rad/s²)

				pointMoveNeedsInit = 0;
 80041b4:	4b56      	ldr	r3, [pc, #344]	@ (8004310 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
			}
			pen_flag = 0;
 80041ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004330 <HAL_TIM_PeriodElapsedCallback+0x1508>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
			break;
 80041c0:	e186      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
		case STATE_GO_TO_TARGET:

			if (!prisProfile.finished) {
 80041c2:	4b57      	ldr	r3, [pc, #348]	@ (8004320 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 80041c4:	7f1b      	ldrb	r3, [r3, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_TIM_PeriodElapsedCallback+0x13ac>
				Trapezoidal_Update(&prisProfile, 0.001f);
 80041ca:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8004334 <HAL_TIM_PeriodElapsedCallback+0x150c>
 80041ce:	4854      	ldr	r0, [pc, #336]	@ (8004320 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 80041d0:	f7fd fbc8 	bl	8001964 <Trapezoidal_Update>
			}
			if (!revProfile.finished) {
 80041d4:	4b55      	ldr	r3, [pc, #340]	@ (800432c <HAL_TIM_PeriodElapsedCallback+0x1504>)
 80041d6:	7f1b      	ldrb	r3, [r3, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PeriodElapsedCallback+0x13be>
				Trapezoidal_Update(&revProfile, 0.001f);
 80041dc:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8004334 <HAL_TIM_PeriodElapsedCallback+0x150c>
 80041e0:	4852      	ldr	r0, [pc, #328]	@ (800432c <HAL_TIM_PeriodElapsedCallback+0x1504>)
 80041e2:	f7fd fbbf 	bl	8001964 <Trapezoidal_Update>
			}

			Revolute_CasCadeControl();
 80041e6:	f7fe fc7b 	bl	8002ae0 <Revolute_CasCadeControl>
			Prismatic_CasCadeControl();
 80041ea:	f7fe fb69 	bl	80028c0 <Prismatic_CasCadeControl>

			if (limit_r == 1 && limit_l_prev == 0) {
 80041ee:	4b52      	ldr	r3, [pc, #328]	@ (8004338 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d114      	bne.n	8004220 <HAL_TIM_PeriodElapsedCallback+0x13f8>
 80041f6:	4b51      	ldr	r3, [pc, #324]	@ (800433c <HAL_TIM_PeriodElapsedCallback+0x1514>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d110      	bne.n	8004220 <HAL_TIM_PeriodElapsedCallback+0x13f8>
				output_prismatic = 0;
 80041fe:	4b50      	ldr	r3, [pc, #320]	@ (8004340 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 8004206:	484f      	ldr	r0, [pc, #316]	@ (8004344 <HAL_TIM_PeriodElapsedCallback+0x151c>)
 8004208:	f7fd fb7e 	bl	8001908 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800420c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004210:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8004348 <HAL_TIM_PeriodElapsedCallback+0x1520>
 8004214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004218:	494c      	ldr	r1, [pc, #304]	@ (800434c <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800421a:	484a      	ldr	r0, [pc, #296]	@ (8004344 <HAL_TIM_PeriodElapsedCallback+0x151c>)
 800421c:	f7fd faa2 	bl	8001764 <QEIInit>
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
 8004220:	4b4b      	ldr	r3, [pc, #300]	@ (8004350 <HAL_TIM_PeriodElapsedCallback+0x1528>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d114      	bne.n	8004252 <HAL_TIM_PeriodElapsedCallback+0x142a>
 8004228:	4b4a      	ldr	r3, [pc, #296]	@ (8004354 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <HAL_TIM_PeriodElapsedCallback+0x142a>
				output_revolute = 0;
 8004230:	4b49      	ldr	r3, [pc, #292]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 8004238:	483a      	ldr	r0, [pc, #232]	@ (8004324 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800423a:	f7fd fb65 	bl	8001908 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 800423e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004242:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8004348 <HAL_TIM_PeriodElapsedCallback+0x1520>
 8004246:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800424a:	4944      	ldr	r1, [pc, #272]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x1534>)
 800424c:	4835      	ldr	r0, [pc, #212]	@ (8004324 <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800424e:	f7fd fa89 	bl	8001764 <QEIInit>
//			registerFrame[14].U16 = (int) (revProfile.current_velocity * (180 / 2 * M_PI)
//					* 10);
//			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
//			registerFrame[16].U16 = (int) (revolute_acceleration_lowpass * 10);

			if (output_prismatic == 0 && output_revolute == 0
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	eef5 7a40 	vcmp.f32	s15, #0.0
 800425c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004260:	d112      	bne.n	8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8004264:	edd3 7a00 	vldr	s15, [r3]
 8004268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	d10a      	bne.n	8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>
					&& prisProfile.finished && revProfile.finished) {
 8004272:	4b2b      	ldr	r3, [pc, #172]	@ (8004320 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 8004274:	7f1b      	ldrb	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>
 800427a:	4b2c      	ldr	r3, [pc, #176]	@ (800432c <HAL_TIM_PeriodElapsedCallback+0x1504>)
 800427c:	7f1b      	ldrb	r3, [r3, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_TIM_PeriodElapsedCallback+0x1460>
				registerFrame[1].U16 = STATUS_STOP;
 8004282:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 8004284:	2210      	movs	r2, #16
 8004286:	805a      	strh	r2, [r3, #2]
			}
//			if (prisProfile.finished && revProfile.finished && output_prismatic == 0 ) {
//				registerFrame[1].U16 = STATUS_STOP;
//			}
			pen_flag = 0;
 8004288:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <HAL_TIM_PeriodElapsedCallback+0x1508>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
			break;
 800428e:	e11f      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>

		case STATE_STOPPING:
			registerFrame[10].U16 = STATUS_STOP;
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 8004292:	2210      	movs	r2, #16
 8004294:	829a      	strh	r2, [r3, #20]
			revolute_homed = 0;
 8004296:	4b2f      	ldr	r3, [pc, #188]	@ (8004354 <HAL_TIM_PeriodElapsedCallback+0x152c>)
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
			limit_l_prev = 0;
 800429c:	4b27      	ldr	r3, [pc, #156]	@ (800433c <HAL_TIM_PeriodElapsedCallback+0x1514>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
			output_revolute = 0;
 80042a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 80042aa:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
//			registerFrame[4].U16 = 0;
//			registerFrame[5].U16 = 1;
			pen_flag = 0;
 80042b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004330 <HAL_TIM_PeriodElapsedCallback+0x1508>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
			break;
 80042b8:	e10a      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
 80042ba:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 80042c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
//			registerFrame[4].U16 = 0;
//			registerFrame[5].U16 = 1;
			pen_flag = 0;
 80042ca:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_TIM_PeriodElapsedCallback+0x1508>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
			pain_flang = 0;
 80042d0:	4b23      	ldr	r3, [pc, #140]	@ (8004360 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
			break;
 80042d6:	e0fb      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
 80042d8:	54442d18 	.word	0x54442d18
 80042dc:	401921fb 	.word	0x401921fb
 80042e0:	20001320 	.word	0x20001320
 80042e4:	44e10000 	.word	0x44e10000
 80042e8:	20001088 	.word	0x20001088
 80042ec:	40240000 	.word	0x40240000
 80042f0:	40668000 	.word	0x40668000
 80042f4:	20001238 	.word	0x20001238
 80042f8:	43340000 	.word	0x43340000
 80042fc:	cccccccd 	.word	0xcccccccd
 8004300:	44160000 	.word	0x44160000
 8004304:	43960000 	.word	0x43960000
 8004308:	00000000 	.word	0x00000000
 800430c:	20001150 	.word	0x20001150
 8004310:	20001324 	.word	0x20001324
 8004314:	20001228 	.word	0x20001228
 8004318:	437a0000 	.word	0x437a0000
 800431c:	44098000 	.word	0x44098000
 8004320:	20000b58 	.word	0x20000b58
 8004324:	2000123c 	.word	0x2000123c
 8004328:	3ecccccd 	.word	0x3ecccccd
 800432c:	20000b84 	.word	0x20000b84
 8004330:	20001328 	.word	0x20001328
 8004334:	3a83126f 	.word	0x3a83126f
 8004338:	20001290 	.word	0x20001290
 800433c:	20001292 	.word	0x20001292
 8004340:	200011b8 	.word	0x200011b8
 8004344:	200011c0 	.word	0x200011c0
 8004348:	447a0000 	.word	0x447a0000
 800434c:	2000069c 	.word	0x2000069c
 8004350:	2000126c 	.word	0x2000126c
 8004354:	20001318 	.word	0x20001318
 8004358:	200011bc 	.word	0x200011bc
 800435c:	200005d0 	.word	0x200005d0
 8004360:	20001326 	.word	0x20001326
		case STATE_TEST:
			if (limit_r == 1) {
 8004364:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d110      	bne.n	800438e <HAL_TIM_PeriodElapsedCallback+0x1566>
				output_prismatic = 0;
 800436c:	4b65      	ldr	r3, [pc, #404]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 8004374:	4864      	ldr	r0, [pc, #400]	@ (8004508 <HAL_TIM_PeriodElapsedCallback+0x16e0>)
 8004376:	f7fd fac7 	bl	8001908 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800437a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800437e:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 800450c <HAL_TIM_PeriodElapsedCallback+0x16e4>
 8004382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004386:	4962      	ldr	r1, [pc, #392]	@ (8004510 <HAL_TIM_PeriodElapsedCallback+0x16e8>)
 8004388:	485f      	ldr	r0, [pc, #380]	@ (8004508 <HAL_TIM_PeriodElapsedCallback+0x16e0>)
 800438a:	f7fd f9eb 	bl	8001764 <QEIInit>
			}

			if (revolute_flag == 1) {
 800438e:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <HAL_TIM_PeriodElapsedCallback+0x16ec>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d110      	bne.n	80043b8 <HAL_TIM_PeriodElapsedCallback+0x1590>
				output_revolute = 0;
 8004396:	4b60      	ldr	r3, [pc, #384]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 800439e:	485f      	ldr	r0, [pc, #380]	@ (800451c <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 80043a0:	f7fd fab2 	bl	8001908 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80043a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043a8:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800450c <HAL_TIM_PeriodElapsedCallback+0x16e4>
 80043ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043b0:	495b      	ldr	r1, [pc, #364]	@ (8004520 <HAL_TIM_PeriodElapsedCallback+0x16f8>)
 80043b2:	485a      	ldr	r0, [pc, #360]	@ (800451c <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 80043b4:	f7fd f9d6 	bl	8001764 <QEIInit>
			}

			output_prismatic = (Joy_x / 100.0) * 65535.0;
 80043b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004524 <HAL_TIM_PeriodElapsedCallback+0x16fc>)
 80043ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f87c 	bl	80004bc <__aeabi_i2d>
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	4b57      	ldr	r3, [pc, #348]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x1700>)
 80043ca:	f7fc fa0b 	bl	80007e4 <__aeabi_ddiv>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	a346      	add	r3, pc, #280	@ (adr r3, 80044f0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fc f8d8 	bl	8000590 <__aeabi_dmul>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7fc fbca 	bl	8000b80 <__aeabi_d2f>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4a45      	ldr	r2, [pc, #276]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 80043f0:	6013      	str	r3, [r2, #0]

			if (limit_r == 1 && output_prismatic < 0) {
 80043f2:	4b43      	ldr	r3, [pc, #268]	@ (8004500 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10c      	bne.n	8004414 <HAL_TIM_PeriodElapsedCallback+0x15ec>
 80043fa:	4b42      	ldr	r3, [pc, #264]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 80043fc:	edd3 7a00 	vldr	s15, [r3]
 8004400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	d504      	bpl.n	8004414 <HAL_TIM_PeriodElapsedCallback+0x15ec>
				output_prismatic = 0;
 800440a:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e00f      	b.n	8004434 <HAL_TIM_PeriodElapsedCallback+0x160c>
			} else if (limit_l == 1 && output_prismatic > 0) {
 8004414:	4b45      	ldr	r3, [pc, #276]	@ (800452c <HAL_TIM_PeriodElapsedCallback+0x1704>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10b      	bne.n	8004434 <HAL_TIM_PeriodElapsedCallback+0x160c>
 800441c:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	dd03      	ble.n	8004434 <HAL_TIM_PeriodElapsedCallback+0x160c>
				output_prismatic = 0;
 800442c:	4b35      	ldr	r3, [pc, #212]	@ (8004504 <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
			}

			output_revolute = (Joy_y / 100.0) * 65535.0;
 8004434:	4b3e      	ldr	r3, [pc, #248]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x1708>)
 8004436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc f83e 	bl	80004bc <__aeabi_i2d>
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x1700>)
 8004446:	f7fc f9cd 	bl	80007e4 <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	a327      	add	r3, pc, #156	@ (adr r3, 80044f0 <HAL_TIM_PeriodElapsedCallback+0x16c8>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fc f89a 	bl	8000590 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f7fc fb8c 	bl	8000b80 <__aeabi_d2f>
 8004468:	4603      	mov	r3, r0
 800446a:	4a2b      	ldr	r2, [pc, #172]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 800446c:	6013      	str	r3, [r2, #0]

			if (revolute_flag == 1 && output_revolute < 0) {
 800446e:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <HAL_TIM_PeriodElapsedCallback+0x16ec>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10c      	bne.n	8004490 <HAL_TIM_PeriodElapsedCallback+0x1668>
 8004476:	4b28      	ldr	r3, [pc, #160]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004484:	d504      	bpl.n	8004490 <HAL_TIM_PeriodElapsedCallback+0x1668>
				output_revolute = 0;
 8004486:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e018      	b.n	80044c2 <HAL_TIM_PeriodElapsedCallback+0x169a>
			} else if (revolute_encoder.rads >= (2 * M_PI)
 8004490:	4b22      	ldr	r3, [pc, #136]	@ (800451c <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc f823 	bl	80004e0 <__aeabi_f2d>
 800449a:	a317      	add	r3, pc, #92	@ (adr r3, 80044f8 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fc fafc 	bl	8000a9c <__aeabi_dcmpge>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_TIM_PeriodElapsedCallback+0x169a>
					&& output_revolute > 0) {
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 80044ac:	edd3 7a00 	vldr	s15, [r3]
 80044b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	dd03      	ble.n	80044c2 <HAL_TIM_PeriodElapsedCallback+0x169a>
				output_revolute = 0;
 80044ba:	4b17      	ldr	r3, [pc, #92]	@ (8004518 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
			}

			pen_flag = 0;
 80044c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004534 <HAL_TIM_PeriodElapsedCallback+0x170c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
			break;
 80044c8:	e002      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
			break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x16a8>
			break;
 80044ce:	bf00      	nop
		}
		button_reset_prev = button_reset;
 80044d0:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <HAL_TIM_PeriodElapsedCallback+0x1710>)
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_TIM_PeriodElapsedCallback+0x1714>)
 80044d6:	701a      	strb	r2, [r3, #0]
		button_run_prev = button_run;
 80044d8:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <HAL_TIM_PeriodElapsedCallback+0x1718>)
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	4b19      	ldr	r3, [pc, #100]	@ (8004544 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 80044de:	701a      	strb	r2, [r3, #0]
	}
}
 80044e0:	bf00      	nop
 80044e2:	3748      	adds	r7, #72	@ 0x48
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	00000000 	.word	0x00000000
 80044f4:	40efffe0 	.word	0x40efffe0
 80044f8:	54442d18 	.word	0x54442d18
 80044fc:	401921fb 	.word	0x401921fb
 8004500:	20001290 	.word	0x20001290
 8004504:	200011b8 	.word	0x200011b8
 8004508:	200011c0 	.word	0x200011c0
 800450c:	447a0000 	.word	0x447a0000
 8004510:	2000069c 	.word	0x2000069c
 8004514:	2000126c 	.word	0x2000126c
 8004518:	200011bc 	.word	0x200011bc
 800451c:	2000123c 	.word	0x2000123c
 8004520:	200005d0 	.word	0x200005d0
 8004524:	200012f0 	.word	0x200012f0
 8004528:	40590000 	.word	0x40590000
 800452c:	20001291 	.word	0x20001291
 8004530:	200012f2 	.word	0x200012f2
 8004534:	20001328 	.word	0x20001328
 8004538:	20001319 	.word	0x20001319
 800453c:	2000131a 	.word	0x2000131a
 8004540:	2000131b 	.word	0x2000131b
 8004544:	20001388 	.word	0x20001388

08004548 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800454c:	b672      	cpsid	i
}
 800454e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <Error_Handler+0x8>

08004554 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a0c      	ldr	r2, [pc, #48]	@ (80045a0 <MotorInit+0x4c>)
 800456e:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8b3a      	ldrh	r2, [r7, #24]
 8004586:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8004588:	68b8      	ldr	r0, [r7, #8]
 800458a:	f004 faf7 	bl	8008b7c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	4619      	mov	r1, r3
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f004 fc48 	bl	8008e28 <HAL_TIM_PWM_Start>
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0a21fe80 	.word	0x0a21fe80
 80045a4:	00000000 	.word	0x00000000

080045a8 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80045b4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 80045b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80045bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	d137      	bne.n	8004636 <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	895b      	ldrh	r3, [r3, #10]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <MotorSet+0x32>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 80045d8:	e104      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	895b      	ldrh	r3, [r3, #10]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d105      	bne.n	80045ee <MotorSet+0x46>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	6393      	str	r3, [r2, #56]	@ 0x38
 80045ec:	e0fa      	b.n	80047e4 <MotorSet+0x23c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	895b      	ldrh	r3, [r3, #10]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d105      	bne.n	8004602 <MotorSet+0x5a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004600:	e0f0      	b.n	80047e4 <MotorSet+0x23c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	895b      	ldrh	r3, [r3, #10]
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d105      	bne.n	8004616 <MotorSet+0x6e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	6413      	str	r3, [r2, #64]	@ 0x40
 8004614:	e0e6      	b.n	80047e4 <MotorSet+0x23c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	895b      	ldrh	r3, [r3, #10]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d105      	bne.n	800462a <MotorSet+0x82>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	6493      	str	r3, [r2, #72]	@ 0x48
 8004628:	e0dc      	b.n	80047e4 <MotorSet+0x23c>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004634:	e0d6      	b.n	80047e4 <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 7a02 	vldr	s14, [r7, #8]
 8004646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800464e:	ee17 2a90 	vmov	r2, s15
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800465e:	33fe      	adds	r3, #254	@ 0xfe
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb ff1b 	bl	800049c <__aeabi_ui2d>
 8004666:	a362      	add	r3, pc, #392	@ (adr r3, 80047f0 <MotorSet+0x248>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fc f8ba 	bl	80007e4 <__aeabi_ddiv>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f7fc fa62 	bl	8000b40 <__aeabi_d2uiz>
 800467c:	4603      	mov	r3, r0
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8a1b      	ldrh	r3, [r3, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80046aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ba:	ee17 3a90 	vmov	r3, s15
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8a5b      	ldrh	r3, [r3, #18]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb fef7 	bl	80004bc <__aeabi_i2d>
 80046ce:	4604      	mov	r4, r0
 80046d0:	460d      	mov	r5, r1
 80046d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046d6:	eef0 7ae7 	vabs.f32	s15, s15
 80046da:	ee17 0a90 	vmov	r0, s15
 80046de:	f7fb feff 	bl	80004e0 <__aeabi_f2d>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fb ff51 	bl	8000590 <__aeabi_dmul>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80047f0 <MotorSet+0x248>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fc f872 	bl	80007e4 <__aeabi_ddiv>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f7fc fa1a 	bl	8000b40 <__aeabi_d2uiz>
 800470c:	4603      	mov	r3, r0
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 8004716:	edd7 7a01 	vldr	s15, [r7, #4]
 800471a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	db08      	blt.n	8004736 <MotorSet+0x18e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6858      	ldr	r0, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	891b      	ldrh	r3, [r3, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	4619      	mov	r1, r3
 8004730:	f003 f946 	bl	80079c0 <HAL_GPIO_WritePin>
 8004734:	e007      	b.n	8004746 <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6858      	ldr	r0, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	891b      	ldrh	r3, [r3, #8]
 800473e:	2201      	movs	r2, #1
 8004740:	4619      	mov	r1, r3
 8004742:	f003 f93d 	bl	80079c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8a1a      	ldrh	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8a5a      	ldrh	r2, [r3, #18]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8a5a      	ldrh	r2, [r3, #18]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	895b      	ldrh	r3, [r3, #10]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <MotorSet+0x1d6>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6992      	ldr	r2, [r2, #24]
 800477a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800477c:	e032      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	895b      	ldrh	r3, [r3, #10]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d106      	bne.n	8004794 <MotorSet+0x1ec>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004792:	e027      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	895b      	ldrh	r3, [r3, #10]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d106      	bne.n	80047aa <MotorSet+0x202>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80047a8:	e01c      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	895b      	ldrh	r3, [r3, #10]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d106      	bne.n	80047c0 <MotorSet+0x218>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80047be:	e011      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	895b      	ldrh	r3, [r3, #10]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d106      	bne.n	80047d6 <MotorSet+0x22e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80047d4:	e006      	b.n	80047e4 <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80047e2:	e7ff      	b.n	80047e4 <MotorSet+0x23c>
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bdb0      	pop	{r4, r5, r7, pc}
 80047ec:	f3af 8000 	nop.w
 80047f0:	00000000 	.word	0x00000000
 80047f4:	40efffe0 	.word	0x40efffe0

080047f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <HAL_MspInit+0x44>)
 8004800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004802:	4a0e      	ldr	r2, [pc, #56]	@ (800483c <HAL_MspInit+0x44>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6613      	str	r3, [r2, #96]	@ 0x60
 800480a:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_MspInit+0x44>)
 800480c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_MspInit+0x44>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	4a08      	ldr	r2, [pc, #32]	@ (800483c <HAL_MspInit+0x44>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004820:	6593      	str	r3, [r2, #88]	@ 0x58
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_MspInit+0x44>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800482e:	f003 f9b5 	bl	8007b9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000

08004840 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b0a0      	sub	sp, #128	@ 0x80
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004858:	f107 0318 	add.w	r3, r7, #24
 800485c:	2254      	movs	r2, #84	@ 0x54
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f008 fa05 	bl	800cc70 <memset>
  if(hadc->Instance==ADC1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800486e:	d170      	bne.n	8004952 <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004874:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004876:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800487a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800487c:	f107 0318 	add.w	r3, r7, #24
 8004880:	4618      	mov	r0, r3
 8004882:	f003 fec9 	bl	8008618 <HAL_RCCEx_PeriphCLKConfig>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800488c:	f7ff fe5c 	bl	8004548 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004890:	4b6c      	ldr	r3, [pc, #432]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	4a6b      	ldr	r2, [pc, #428]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 8004898:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800489a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10b      	bne.n	80048ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80048a2:	4b69      	ldr	r3, [pc, #420]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	4a68      	ldr	r2, [pc, #416]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ae:	4b66      	ldr	r3, [pc, #408]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	4a62      	ldr	r2, [pc, #392]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048c6:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80048d2:	2306      	movs	r3, #6
 80048d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048d6:	2303      	movs	r3, #3
 80048d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048e2:	4619      	mov	r1, r3
 80048e4:	4859      	ldr	r0, [pc, #356]	@ (8004a4c <HAL_ADC_MspInit+0x20c>)
 80048e6:	f002 fed1 	bl	800768c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80048ea:	4b59      	ldr	r3, [pc, #356]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 80048ec:	4a59      	ldr	r2, [pc, #356]	@ (8004a54 <HAL_ADC_MspInit+0x214>)
 80048ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80048f0:	4b57      	ldr	r3, [pc, #348]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 80048f2:	2205      	movs	r2, #5
 80048f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048f6:	4b56      	ldr	r3, [pc, #344]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fc:	4b54      	ldr	r3, [pc, #336]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004902:	4b53      	ldr	r3, [pc, #332]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 8004904:	2280      	movs	r2, #128	@ 0x80
 8004906:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004908:	4b51      	ldr	r3, [pc, #324]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 800490a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800490e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004910:	4b4f      	ldr	r3, [pc, #316]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 8004912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004916:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004918:	4b4d      	ldr	r3, [pc, #308]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 800491a:	2220      	movs	r2, #32
 800491c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800491e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 8004920:	2200      	movs	r2, #0
 8004922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004924:	484a      	ldr	r0, [pc, #296]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 8004926:	f002 fb7f 	bl	8007028 <HAL_DMA_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8004930:	f7ff fe0a 	bl	8004548 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a46      	ldr	r2, [pc, #280]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 8004938:	655a      	str	r2, [r3, #84]	@ 0x54
 800493a:	4a45      	ldr	r2, [pc, #276]	@ (8004a50 <HAL_ADC_MspInit+0x210>)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004940:	2200      	movs	r2, #0
 8004942:	2100      	movs	r1, #0
 8004944:	2012      	movs	r0, #18
 8004946:	f002 fb3a 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800494a:	2012      	movs	r0, #18
 800494c:	f002 fb51 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004950:	e074      	b.n	8004a3c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a40      	ldr	r2, [pc, #256]	@ (8004a58 <HAL_ADC_MspInit+0x218>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d16f      	bne.n	8004a3c <HAL_ADC_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800495c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004960:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004962:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004966:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004968:	f107 0318 	add.w	r3, r7, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f003 fe53 	bl	8008618 <HAL_RCCEx_PeriphCLKConfig>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 8004978:	f7ff fde6 	bl	8004548 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800497c:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 8004984:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004986:	4b2f      	ldr	r3, [pc, #188]	@ (8004a44 <HAL_ADC_MspInit+0x204>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10b      	bne.n	80049a6 <HAL_ADC_MspInit+0x166>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800498e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 8004994:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800499a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a6:	4b28      	ldr	r3, [pc, #160]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	4a27      	ldr	r2, [pc, #156]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049b2:	4b25      	ldr	r3, [pc, #148]	@ (8004a48 <HAL_ADC_MspInit+0x208>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049be:	2301      	movs	r3, #1
 80049c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049c2:	2303      	movs	r3, #3
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80049ce:	4619      	mov	r1, r3
 80049d0:	481e      	ldr	r0, [pc, #120]	@ (8004a4c <HAL_ADC_MspInit+0x20c>)
 80049d2:	f002 fe5b 	bl	800768c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel4;
 80049d6:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049d8:	4a21      	ldr	r2, [pc, #132]	@ (8004a60 <HAL_ADC_MspInit+0x220>)
 80049da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80049dc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049de:	2224      	movs	r2, #36	@ 0x24
 80049e0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049e2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80049e8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049f0:	2280      	movs	r2, #128	@ 0x80
 80049f2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049f4:	4b19      	ldr	r3, [pc, #100]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049fa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049fc:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 80049fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a02:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a04:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 8004a06:	2220      	movs	r2, #32
 8004a08:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a10:	4812      	ldr	r0, [pc, #72]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 8004a12:	f002 fb09 	bl	8007028 <HAL_DMA_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8004a1c:	f7ff fd94 	bl	8004548 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0e      	ldr	r2, [pc, #56]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a26:	4a0d      	ldr	r2, [pc, #52]	@ (8004a5c <HAL_ADC_MspInit+0x21c>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2012      	movs	r0, #18
 8004a32:	f002 fac4 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004a36:	2012      	movs	r0, #18
 8004a38:	f002 fadb 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 8004a3c:	bf00      	nop
 8004a3e:	3780      	adds	r7, #128	@ 0x80
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	2000138c 	.word	0x2000138c
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	20000378 	.word	0x20000378
 8004a54:	40020030 	.word	0x40020030
 8004a58:	50000100 	.word	0x50000100
 8004a5c:	200003d8 	.word	0x200003d8
 8004a60:	40020044 	.word	0x40020044

08004a64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08e      	sub	sp, #56	@ 0x38
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb4 <HAL_TIM_Base_MspInit+0x150>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d132      	bne.n	8004aec <HAL_TIM_Base_MspInit+0x88>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a86:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a92:	4b49      	ldr	r3, [pc, #292]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9e:	4b46      	ldr	r3, [pc, #280]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa2:	4a45      	ldr	r2, [pc, #276]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aaa:	4b43      	ldr	r3, [pc, #268]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ac8:	2306      	movs	r3, #6
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ad6:	f002 fdd9 	bl	800768c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2019      	movs	r0, #25
 8004ae0:	f002 fa6d 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ae4:	2019      	movs	r0, #25
 8004ae6:	f002 fa84 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004aea:	e05e      	b.n	8004baa <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af4:	d114      	bne.n	8004b20 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004af6:	4b30      	ldr	r3, [pc, #192]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b02:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	201c      	movs	r0, #28
 8004b14:	f002 fa53 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b18:	201c      	movs	r0, #28
 8004b1a:	f002 fa6a 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 8004b1e:	e044      	b.n	8004baa <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM5)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a25      	ldr	r2, [pc, #148]	@ (8004bbc <HAL_TIM_Base_MspInit+0x158>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d114      	bne.n	8004b54 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b2a:	4b23      	ldr	r3, [pc, #140]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	4a22      	ldr	r2, [pc, #136]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b30:	f043 0308 	orr.w	r3, r3, #8
 8004b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b36:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004b42:	2200      	movs	r2, #0
 8004b44:	2100      	movs	r1, #0
 8004b46:	2032      	movs	r0, #50	@ 0x32
 8004b48:	f002 fa39 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004b4c:	2032      	movs	r0, #50	@ 0x32
 8004b4e:	f002 fa50 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 8004b52:	e02a      	b.n	8004baa <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_TIM_Base_MspInit+0x15c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b5e:	4b16      	ldr	r3, [pc, #88]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b62:	4a15      	ldr	r2, [pc, #84]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b6a:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
}
 8004b76:	e018      	b.n	8004baa <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM16)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <HAL_TIM_Base_MspInit+0x160>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d113      	bne.n	8004baa <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b86:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <HAL_TIM_Base_MspInit+0x154>)
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2019      	movs	r0, #25
 8004ba0:	f002 fa0d 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ba4:	2019      	movs	r0, #25
 8004ba6:	f002 fa24 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	3738      	adds	r7, #56	@ 0x38
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40013400 	.word	0x40013400
 8004bc4:	40014400 	.word	0x40014400

08004bc8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	@ 0x30
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 031c 	add.w	r3, r7, #28
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a36      	ldr	r2, [pc, #216]	@ (8004cc0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d131      	bne.n	8004c4e <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bea:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bee:	4a35      	ldr	r2, [pc, #212]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf6:	4b33      	ldr	r3, [pc, #204]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	4b30      	ldr	r3, [pc, #192]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c06:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c1a:	23c0      	movs	r3, #192	@ 0xc0
 8004c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c26:	2300      	movs	r3, #0
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c2e:	f107 031c 	add.w	r3, r7, #28
 8004c32:	4619      	mov	r1, r3
 8004c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c38:	f002 fd28 	bl	800768c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	201d      	movs	r0, #29
 8004c42:	f002 f9bc 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c46:	201d      	movs	r0, #29
 8004c48:	f002 f9d3 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c4c:	e034      	b.n	8004cb8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d12f      	bne.n	8004cb8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c5e:	f043 0304 	orr.w	r3, r3, #4
 8004c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c64:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c70:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c74:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c7c:	4b11      	ldr	r3, [pc, #68]	@ (8004cc4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c88:	23c0      	movs	r3, #192	@ 0xc0
 8004c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	480a      	ldr	r0, [pc, #40]	@ (8004ccc <HAL_TIM_Encoder_MspInit+0x104>)
 8004ca4:	f002 fcf2 	bl	800768c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	201e      	movs	r0, #30
 8004cae:	f002 f986 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cb2:	201e      	movs	r0, #30
 8004cb4:	f002 f99d 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 8004cb8:	bf00      	nop
 8004cba:	3730      	adds	r7, #48	@ 0x30
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	48000400 	.word	0x48000400

08004cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_TIM_MspPostInit+0xb0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d11e      	bne.n	8004d30 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf6:	4a23      	ldr	r2, [pc, #140]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cfe:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d1c:	2306      	movs	r3, #6
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	4619      	mov	r1, r3
 8004d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d2a:	f002 fcaf 	bl	800768c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004d2e:	e022      	b.n	8004d76 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a14      	ldr	r2, [pc, #80]	@ (8004d88 <HAL_TIM_MspPostInit+0xb8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d11d      	bne.n	8004d76 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3e:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d46:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <HAL_TIM_MspPostInit+0xb4>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8004d64:	2302      	movs	r3, #2
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d72:	f002 fc8b 	bl	800768c <HAL_GPIO_Init>
}
 8004d76:	bf00      	nop
 8004d78:	3728      	adds	r7, #40	@ 0x28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40013400 	.word	0x40013400

08004d8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b09e      	sub	sp, #120	@ 0x78
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004da4:	f107 0310 	add.w	r3, r7, #16
 8004da8:	2254      	movs	r2, #84	@ 0x54
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f007 ff5f 	bl	800cc70 <memset>
  if(huart->Instance==USART2)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a4d      	ldr	r2, [pc, #308]	@ (8004eec <HAL_UART_MspInit+0x160>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	f040 8092 	bne.w	8004ee2 <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dc6:	f107 0310 	add.w	r3, r7, #16
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 fc24 	bl	8008618 <HAL_RCCEx_PeriphCLKConfig>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004dd6:	f7ff fbb7 	bl	8004548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dda:	4b45      	ldr	r3, [pc, #276]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	4a44      	ldr	r2, [pc, #272]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de6:	4b42      	ldr	r3, [pc, #264]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef0 <HAL_UART_MspInit+0x164>)
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e16:	2300      	movs	r3, #0
 8004e18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e22:	4619      	mov	r1, r3
 8004e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e28:	f002 fc30 	bl	800768c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004e2c:	4b31      	ldr	r3, [pc, #196]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <HAL_UART_MspInit+0x16c>)
 8004e30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004e32:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e34:	221a      	movs	r2, #26
 8004e36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e38:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e46:	2280      	movs	r2, #128	@ 0x80
 8004e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e62:	4824      	ldr	r0, [pc, #144]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e64:	f002 f8e0 	bl	8007028 <HAL_DMA_Init>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004e6e:	f7ff fb6b 	bl	8004548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <HAL_UART_MspInit+0x168>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004e82:	4a1f      	ldr	r2, [pc, #124]	@ (8004f00 <HAL_UART_MspInit+0x174>)
 8004e84:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004e88:	221b      	movs	r2, #27
 8004e8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004e8e:	2210      	movs	r2, #16
 8004e90:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e98:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004e9a:	2280      	movs	r2, #128	@ 0x80
 8004e9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e9e:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ea4:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004eaa:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eb0:	4b12      	ldr	r3, [pc, #72]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004eb6:	4811      	ldr	r0, [pc, #68]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004eb8:	f002 f8b6 	bl	8007028 <HAL_DMA_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004ec2:	f7ff fb41 	bl	8004548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004eca:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8004efc <HAL_UART_MspInit+0x170>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2026      	movs	r0, #38	@ 0x26
 8004ed8:	f002 f871 	bl	8006fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004edc:	2026      	movs	r0, #38	@ 0x26
 8004ede:	f002 f888 	bl	8006ff2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004ee2:	bf00      	nop
 8004ee4:	3778      	adds	r7, #120	@ 0x78
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	20000a98 	.word	0x20000a98
 8004ef8:	40020008 	.word	0x40020008
 8004efc:	20000af8 	.word	0x20000af8
 8004f00:	4002001c 	.word	0x4002001c

08004f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <NMI_Handler+0x4>

08004f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <HardFault_Handler+0x4>

08004f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <MemManage_Handler+0x4>

08004f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <BusFault_Handler+0x4>

08004f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <UsageFault_Handler+0x4>

08004f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f5a:	f000 f915 	bl	8005188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004f66:	2008      	movs	r0, #8
 8004f68:	f002 fd5c 	bl	8007a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f74:	4802      	ldr	r0, [pc, #8]	@ (8004f80 <DMA1_Channel1_IRQHandler+0x10>)
 8004f76:	f002 fa3a 	bl	80073ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000a98 	.word	0x20000a98

08004f84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004f88:	4802      	ldr	r0, [pc, #8]	@ (8004f94 <DMA1_Channel2_IRQHandler+0x10>)
 8004f8a:	f002 fa30 	bl	80073ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000af8 	.word	0x20000af8

08004f98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	@ (8004fa8 <DMA1_Channel3_IRQHandler+0x10>)
 8004f9e:	f002 fa26 	bl	80073ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000378 	.word	0x20000378

08004fac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004fb0:	4802      	ldr	r0, [pc, #8]	@ (8004fbc <DMA1_Channel4_IRQHandler+0x10>)
 8004fb2:	f002 fa1c 	bl	80073ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200003d8 	.word	0x200003d8

08004fc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004fc4:	4803      	ldr	r0, [pc, #12]	@ (8004fd4 <ADC1_2_IRQHandler+0x14>)
 8004fc6:	f000 fdcd 	bl	8005b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004fca:	4803      	ldr	r0, [pc, #12]	@ (8004fd8 <ADC1_2_IRQHandler+0x18>)
 8004fcc:	f000 fdca 	bl	8005b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004fd0:	bf00      	nop
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200002a0 	.word	0x200002a0
 8004fd8:	2000030c 	.word	0x2000030c

08004fdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fe0:	4803      	ldr	r0, [pc, #12]	@ (8004ff0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004fe2:	f004 fb12 	bl	800960a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004fe6:	4803      	ldr	r0, [pc, #12]	@ (8004ff4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004fe8:	f004 fb0f 	bl	800960a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000438 	.word	0x20000438
 8004ff4:	20000900 	.word	0x20000900

08004ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ffc:	4802      	ldr	r0, [pc, #8]	@ (8005008 <TIM2_IRQHandler+0x10>)
 8004ffe:	f004 fb04 	bl	800960a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000504 	.word	0x20000504

0800500c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005010:	4802      	ldr	r0, [pc, #8]	@ (800501c <TIM3_IRQHandler+0x10>)
 8005012:	f004 fafa 	bl	800960a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200005d0 	.word	0x200005d0

08005020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005024:	4802      	ldr	r0, [pc, #8]	@ (8005030 <TIM4_IRQHandler+0x10>)
 8005026:	f004 faf0 	bl	800960a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000069c 	.word	0x2000069c

08005034 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005038:	4802      	ldr	r0, [pc, #8]	@ (8005044 <USART2_IRQHandler+0x10>)
 800503a:	f006 f8b9 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200009cc 	.word	0x200009cc

08005048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800504c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005050:	f002 fce8 	bl	8007a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800505c:	4802      	ldr	r0, [pc, #8]	@ (8005068 <TIM5_IRQHandler+0x10>)
 800505e:	f004 fad4 	bl	800960a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000768 	.word	0x20000768

0800506c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <SystemInit+0x20>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005076:	4a05      	ldr	r2, [pc, #20]	@ (800508c <SystemInit+0x20>)
 8005078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800507c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005090:	480d      	ldr	r0, [pc, #52]	@ (80050c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005092:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005094:	f7ff ffea 	bl	800506c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005098:	480c      	ldr	r0, [pc, #48]	@ (80050cc <LoopForever+0x6>)
  ldr r1, =_edata
 800509a:	490d      	ldr	r1, [pc, #52]	@ (80050d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800509c:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <LoopForever+0xe>)
  movs r3, #0
 800509e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80050a0:	e002      	b.n	80050a8 <LoopCopyDataInit>

080050a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050a6:	3304      	adds	r3, #4

080050a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ac:	d3f9      	bcc.n	80050a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ae:	4a0a      	ldr	r2, [pc, #40]	@ (80050d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050b0:	4c0a      	ldr	r4, [pc, #40]	@ (80050dc <LoopForever+0x16>)
  movs r3, #0
 80050b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050b4:	e001      	b.n	80050ba <LoopFillZerobss>

080050b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050b8:	3204      	adds	r2, #4

080050ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050bc:	d3fb      	bcc.n	80050b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050be:	f007 fde5 	bl	800cc8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050c2:	f7fc fd97 	bl	8001bf4 <main>

080050c6 <LoopForever>:

LoopForever:
    b LoopForever
 80050c6:	e7fe      	b.n	80050c6 <LoopForever>
  ldr   r0, =_estack
 80050c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050d0:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 80050d4:	0800f2f8 	.word	0x0800f2f8
  ldr r2, =_sbss
 80050d8:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80050dc:	200014cc 	.word	0x200014cc

080050e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050e0:	e7fe      	b.n	80050e0 <ADC3_IRQHandler>

080050e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050ec:	2003      	movs	r0, #3
 80050ee:	f001 ff5b 	bl	8006fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050f2:	2000      	movs	r0, #0
 80050f4:	f000 f80e 	bl	8005114 <HAL_InitTick>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	71fb      	strb	r3, [r7, #7]
 8005102:	e001      	b.n	8005108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005104:	f7ff fb78 	bl	80047f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005108:	79fb      	ldrb	r3, [r7, #7]

}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005120:	4b16      	ldr	r3, [pc, #88]	@ (800517c <HAL_InitTick+0x68>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d022      	beq.n	800516e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005128:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <HAL_InitTick+0x6c>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <HAL_InitTick+0x68>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005134:	fbb1 f3f3 	udiv	r3, r1, r3
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	4618      	mov	r0, r3
 800513e:	f001 ff66 	bl	800700e <HAL_SYSTICK_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d809      	bhi.n	8005162 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800514e:	2200      	movs	r2, #0
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	f001 ff32 	bl	8006fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800515a:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <HAL_InitTick+0x70>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e007      	b.n	8005172 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
 8005166:	e004      	b.n	8005172 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e001      	b.n	8005172 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000228 	.word	0x20000228
 8005180:	20000220 	.word	0x20000220
 8005184:	20000224 	.word	0x20000224

08005188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_IncTick+0x1c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_IncTick+0x20>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4413      	add	r3, r2
 8005196:	4a03      	ldr	r2, [pc, #12]	@ (80051a4 <HAL_IncTick+0x1c>)
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20001390 	.word	0x20001390
 80051a8:	20000228 	.word	0x20000228

080051ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return uwTick;
 80051b0:	4b03      	ldr	r3, [pc, #12]	@ (80051c0 <HAL_GetTick+0x14>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20001390 	.word	0x20001390

080051c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3360      	adds	r3, #96	@ 0x60
 800523e:	461a      	mov	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b08      	ldr	r3, [pc, #32]	@ (8005270 <LL_ADC_SetOffset+0x44>)
 800524e:	4013      	ands	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	03fff000 	.word	0x03fff000

08005274 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3360      	adds	r3, #96	@ 0x60
 8005282:	461a      	mov	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3360      	adds	r3, #96	@ 0x60
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3360      	adds	r3, #96	@ 0x60
 80052e6:	461a      	mov	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3360      	adds	r3, #96	@ 0x60
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	431a      	orrs	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	615a      	str	r2, [r3, #20]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800538e:	b480      	push	{r7}
 8005390:	b087      	sub	sp, #28
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3330      	adds	r3, #48	@ 0x30
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	4413      	add	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	211f      	movs	r1, #31
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	401a      	ands	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0e9b      	lsrs	r3, r3, #26
 80053c6:	f003 011f 	and.w	r1, r3, #31
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	431a      	orrs	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3314      	adds	r3, #20
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0e5b      	lsrs	r3, r3, #25
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	0d1b      	lsrs	r3, r3, #20
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2107      	movs	r1, #7
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	401a      	ands	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	0d1b      	lsrs	r3, r3, #20
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f003 0318 	and.w	r3, r3, #24
 8005486:	4908      	ldr	r1, [pc, #32]	@ (80054a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005488:	40d9      	lsrs	r1, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	400b      	ands	r3, r1
 800548e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005492:	431a      	orrs	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	0007ffff 	.word	0x0007ffff

080054ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 031f 	and.w	r3, r3, #31
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80054f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6093      	str	r3, [r2, #8]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800551c:	d101      	bne.n	8005522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005544:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800556c:	d101      	bne.n	8005572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <LL_ADC_IsEnabled+0x18>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <LL_ADC_IsEnabled+0x1a>
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055e2:	f043 0204 	orr.w	r2, r3, #4
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d101      	bne.n	800560e <LL_ADC_REG_IsConversionOngoing+0x18>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d101      	bne.n	8005634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005644:	b590      	push	{r4, r7, lr}
 8005646:	b089      	sub	sp, #36	@ 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e1a9      	b.n	80059b2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f8e7 	bl	8004840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff3f 	bl	8005508 <LL_ADC_IsDeepPowerDownEnabled>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff ff25 	bl	80054e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff ff5a 	bl	8005558 <LL_ADC_IsInternalRegulatorEnabled>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff3e 	bl	8005530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005928 <HAL_ADC_Init+0x2e4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	4a9c      	ldr	r2, [pc, #624]	@ (800592c <HAL_ADC_Init+0x2e8>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056c8:	e002      	b.n	80056d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f9      	bne.n	80056ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff3c 	bl	8005558 <LL_ADC_IsInternalRegulatorEnabled>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	f043 0210 	orr.w	r2, r3, #16
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ff75 	bl	80055f6 <LL_ADC_REG_IsConversionOngoing>
 800570c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 8142 	bne.w	80059a0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 813e 	bne.w	80059a0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800572c:	f043 0202 	orr.w	r2, r3, #2
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff35 	bl	80055a8 <LL_ADC_IsEnabled>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d141      	bne.n	80057c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800574c:	d004      	beq.n	8005758 <HAL_ADC_Init+0x114>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a77      	ldr	r2, [pc, #476]	@ (8005930 <HAL_ADC_Init+0x2ec>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d10f      	bne.n	8005778 <HAL_ADC_Init+0x134>
 8005758:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800575c:	f7ff ff24 	bl	80055a8 <LL_ADC_IsEnabled>
 8005760:	4604      	mov	r4, r0
 8005762:	4873      	ldr	r0, [pc, #460]	@ (8005930 <HAL_ADC_Init+0x2ec>)
 8005764:	f7ff ff20 	bl	80055a8 <LL_ADC_IsEnabled>
 8005768:	4603      	mov	r3, r0
 800576a:	4323      	orrs	r3, r4
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e012      	b.n	800579e <HAL_ADC_Init+0x15a>
 8005778:	486e      	ldr	r0, [pc, #440]	@ (8005934 <HAL_ADC_Init+0x2f0>)
 800577a:	f7ff ff15 	bl	80055a8 <LL_ADC_IsEnabled>
 800577e:	4604      	mov	r4, r0
 8005780:	486d      	ldr	r0, [pc, #436]	@ (8005938 <HAL_ADC_Init+0x2f4>)
 8005782:	f7ff ff11 	bl	80055a8 <LL_ADC_IsEnabled>
 8005786:	4603      	mov	r3, r0
 8005788:	431c      	orrs	r4, r3
 800578a:	486c      	ldr	r0, [pc, #432]	@ (800593c <HAL_ADC_Init+0x2f8>)
 800578c:	f7ff ff0c 	bl	80055a8 <LL_ADC_IsEnabled>
 8005790:	4603      	mov	r3, r0
 8005792:	4323      	orrs	r3, r4
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d012      	beq.n	80057c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057aa:	d004      	beq.n	80057b6 <HAL_ADC_Init+0x172>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5f      	ldr	r2, [pc, #380]	@ (8005930 <HAL_ADC_Init+0x2ec>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_ADC_Init+0x176>
 80057b6:	4a62      	ldr	r2, [pc, #392]	@ (8005940 <HAL_ADC_Init+0x2fc>)
 80057b8:	e000      	b.n	80057bc <HAL_ADC_Init+0x178>
 80057ba:	4a62      	ldr	r2, [pc, #392]	@ (8005944 <HAL_ADC_Init+0x300>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7ff fcfe 	bl	80051c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7f5b      	ldrb	r3, [r3, #29]
 80057cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80057d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80057de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d106      	bne.n	8005804 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	045b      	lsls	r3, r3, #17
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	4b48      	ldr	r3, [pc, #288]	@ (8005948 <HAL_ADC_Init+0x304>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	69b9      	ldr	r1, [r7, #24]
 8005830:	430b      	orrs	r3, r1
 8005832:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fee4 	bl	800561c <LL_ADC_INJ_IsConversionOngoing>
 8005854:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d17f      	bne.n	800595c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d17c      	bne.n	800595c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005866:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800586e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800587e:	f023 0302 	bic.w	r3, r3, #2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	430b      	orrs	r3, r1
 800588a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80058a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80058b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6911      	ldr	r1, [r2, #16]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	430b      	orrs	r3, r1
 80058be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80058c2:	e013      	b.n	80058ec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80058d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80058e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d12a      	bne.n	800594c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005918:	430a      	orrs	r2, r1
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	e019      	b.n	800595c <HAL_ADC_Init+0x318>
 8005928:	20000220 	.word	0x20000220
 800592c:	053e2d63 	.word	0x053e2d63
 8005930:	50000100 	.word	0x50000100
 8005934:	50000400 	.word	0x50000400
 8005938:	50000500 	.word	0x50000500
 800593c:	50000600 	.word	0x50000600
 8005940:	50000300 	.word	0x50000300
 8005944:	50000700 	.word	0x50000700
 8005948:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10c      	bne.n	800597e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	f023 010f 	bic.w	r1, r3, #15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30
 800597c:	e007      	b.n	800598e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 020f 	bic.w	r2, r2, #15
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800599e:	e007      	b.n	80059b0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a4:	f043 0210 	orr.w	r2, r3, #16
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3724      	adds	r7, #36	@ 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd90      	pop	{r4, r7, pc}
 80059ba:	bf00      	nop

080059bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d0:	d004      	beq.n	80059dc <HAL_ADC_Start_DMA+0x20>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5a      	ldr	r2, [pc, #360]	@ (8005b40 <HAL_ADC_Start_DMA+0x184>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_Start_DMA+0x24>
 80059dc:	4b59      	ldr	r3, [pc, #356]	@ (8005b44 <HAL_ADC_Start_DMA+0x188>)
 80059de:	e000      	b.n	80059e2 <HAL_ADC_Start_DMA+0x26>
 80059e0:	4b59      	ldr	r3, [pc, #356]	@ (8005b48 <HAL_ADC_Start_DMA+0x18c>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fd62 	bl	80054ac <LL_ADC_GetMultimode>
 80059e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fe01 	bl	80055f6 <LL_ADC_REG_IsConversionOngoing>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 809b 	bne.w	8005b32 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_ADC_Start_DMA+0x4e>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e096      	b.n	8005b38 <HAL_ADC_Start_DMA+0x17c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a4d      	ldr	r2, [pc, #308]	@ (8005b4c <HAL_ADC_Start_DMA+0x190>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d008      	beq.n	8005a2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d002      	beq.n	8005a2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b09      	cmp	r3, #9
 8005a2c:	d17a      	bne.n	8005b24 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 ff60 	bl	80068f4 <ADC_Enable>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d16d      	bne.n	8005b1a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a3a      	ldr	r2, [pc, #232]	@ (8005b40 <HAL_ADC_Start_DMA+0x184>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_ADC_Start_DMA+0xb4>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a3b      	ldr	r2, [pc, #236]	@ (8005b50 <HAL_ADC_Start_DMA+0x194>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d002      	beq.n	8005a6c <HAL_ADC_Start_DMA+0xb0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	e003      	b.n	8005a74 <HAL_ADC_Start_DMA+0xb8>
 8005a6c:	4b39      	ldr	r3, [pc, #228]	@ (8005b54 <HAL_ADC_Start_DMA+0x198>)
 8005a6e:	e001      	b.n	8005a74 <HAL_ADC_Start_DMA+0xb8>
 8005a70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d002      	beq.n	8005a82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d105      	bne.n	8005a8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f023 0206 	bic.w	r2, r3, #6
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60
 8005aa6:	e002      	b.n	8005aae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	4a29      	ldr	r2, [pc, #164]	@ (8005b58 <HAL_ADC_Start_DMA+0x19c>)
 8005ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	4a28      	ldr	r2, [pc, #160]	@ (8005b5c <HAL_ADC_Start_DMA+0x1a0>)
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <HAL_ADC_Start_DMA+0x1a4>)
 8005ac4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	221c      	movs	r2, #28
 8005acc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0210 	orr.w	r2, r2, #16
 8005ae4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3340      	adds	r3, #64	@ 0x40
 8005b00:	4619      	mov	r1, r3
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f001 fb37 	bl	8007178 <HAL_DMA_Start_IT>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fd5b 	bl	80055ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b18:	e00d      	b.n	8005b36 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005b22:	e008      	b.n	8005b36 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005b30:	e001      	b.n	8005b36 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	50000100 	.word	0x50000100
 8005b44:	50000300 	.word	0x50000300
 8005b48:	50000700 	.word	0x50000700
 8005b4c:	50000600 	.word	0x50000600
 8005b50:	50000500 	.word	0x50000500
 8005b54:	50000400 	.word	0x50000400
 8005b58:	08006a21 	.word	0x08006a21
 8005b5c:	08006af9 	.word	0x08006af9
 8005b60:	08006b15 	.word	0x08006b15

08005b64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b88:	d004      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x30>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a8e      	ldr	r2, [pc, #568]	@ (8005dc8 <HAL_ADC_IRQHandler+0x264>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <HAL_ADC_IRQHandler+0x34>
 8005b94:	4b8d      	ldr	r3, [pc, #564]	@ (8005dcc <HAL_ADC_IRQHandler+0x268>)
 8005b96:	e000      	b.n	8005b9a <HAL_ADC_IRQHandler+0x36>
 8005b98:	4b8d      	ldr	r3, [pc, #564]	@ (8005dd0 <HAL_ADC_IRQHandler+0x26c>)
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fc86 	bl	80054ac <LL_ADC_GetMultimode>
 8005ba0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_ADC_IRQHandler+0x78>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d012      	beq.n	8005bdc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f808 	bl	8006be4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_ADC_IRQHandler+0x8c>
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8094 	beq.w	8005d24 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 808e 	beq.w	8005d24 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fb9f 	bl	8005368 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d072      	beq.n	8005d16 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a64      	ldr	r2, [pc, #400]	@ (8005dc8 <HAL_ADC_IRQHandler+0x264>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_ADC_IRQHandler+0xea>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a65      	ldr	r2, [pc, #404]	@ (8005dd4 <HAL_ADC_IRQHandler+0x270>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d002      	beq.n	8005c4a <HAL_ADC_IRQHandler+0xe6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	e003      	b.n	8005c52 <HAL_ADC_IRQHandler+0xee>
 8005c4a:	4b63      	ldr	r3, [pc, #396]	@ (8005dd8 <HAL_ADC_IRQHandler+0x274>)
 8005c4c:	e001      	b.n	8005c52 <HAL_ADC_IRQHandler+0xee>
 8005c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d008      	beq.n	8005c6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d002      	beq.n	8005c6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b09      	cmp	r3, #9
 8005c6a:	d104      	bne.n	8005c76 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	e014      	b.n	8005ca0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a53      	ldr	r2, [pc, #332]	@ (8005dc8 <HAL_ADC_IRQHandler+0x264>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_ADC_IRQHandler+0x130>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a53      	ldr	r2, [pc, #332]	@ (8005dd4 <HAL_ADC_IRQHandler+0x270>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d002      	beq.n	8005c90 <HAL_ADC_IRQHandler+0x12c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	e003      	b.n	8005c98 <HAL_ADC_IRQHandler+0x134>
 8005c90:	4b51      	ldr	r3, [pc, #324]	@ (8005dd8 <HAL_ADC_IRQHandler+0x274>)
 8005c92:	e001      	b.n	8005c98 <HAL_ADC_IRQHandler+0x134>
 8005c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005c98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d135      	bne.n	8005d16 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d12e      	bne.n	8005d16 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fc9a 	bl	80055f6 <LL_ADC_REG_IsConversionOngoing>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11a      	bne.n	8005cfe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020c 	bic.w	r2, r2, #12
 8005cd6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d112      	bne.n	8005d16 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cfc:	e00b      	b.n	8005d16 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f043 0210 	orr.w	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f043 0201 	orr.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f984 	bl	8006024 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	220c      	movs	r2, #12
 8005d22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_ADC_IRQHandler+0x1d4>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80b3 	beq.w	8005eaa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80ad 	beq.w	8005eaa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fb3a 	bl	80053e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005d72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff faf5 	bl	8005368 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a10      	ldr	r2, [pc, #64]	@ (8005dc8 <HAL_ADC_IRQHandler+0x264>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_ADC_IRQHandler+0x23a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a11      	ldr	r2, [pc, #68]	@ (8005dd4 <HAL_ADC_IRQHandler+0x270>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d002      	beq.n	8005d9a <HAL_ADC_IRQHandler+0x236>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	e003      	b.n	8005da2 <HAL_ADC_IRQHandler+0x23e>
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <HAL_ADC_IRQHandler+0x274>)
 8005d9c:	e001      	b.n	8005da2 <HAL_ADC_IRQHandler+0x23e>
 8005d9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d008      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d002      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d10f      	bne.n	8005ddc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	e01f      	b.n	8005e06 <HAL_ADC_IRQHandler+0x2a2>
 8005dc6:	bf00      	nop
 8005dc8:	50000100 	.word	0x50000100
 8005dcc:	50000300 	.word	0x50000300
 8005dd0:	50000700 	.word	0x50000700
 8005dd4:	50000500 	.word	0x50000500
 8005dd8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a8b      	ldr	r2, [pc, #556]	@ (8006010 <HAL_ADC_IRQHandler+0x4ac>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_ADC_IRQHandler+0x296>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a8a      	ldr	r2, [pc, #552]	@ (8006014 <HAL_ADC_IRQHandler+0x4b0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d002      	beq.n	8005df6 <HAL_ADC_IRQHandler+0x292>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	e003      	b.n	8005dfe <HAL_ADC_IRQHandler+0x29a>
 8005df6:	4b88      	ldr	r3, [pc, #544]	@ (8006018 <HAL_ADC_IRQHandler+0x4b4>)
 8005df8:	e001      	b.n	8005dfe <HAL_ADC_IRQHandler+0x29a>
 8005dfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005dfe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d047      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_ADC_IRQHandler+0x2c2>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d03f      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d13a      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b40      	cmp	r3, #64	@ 0x40
 8005e32:	d133      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d12e      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fbea 	bl	800561c <LL_ADC_INJ_IsConversionOngoing>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11a      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d112      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e82:	e00b      	b.n	8005e9c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fe79 	bl	8006b94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2260      	movs	r2, #96	@ 0x60
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x374>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8be 	bl	800604c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2280      	movs	r2, #128	@ 0x80
 8005ed6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d012      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x3a4>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fe5f 	bl	8006bbc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x3d4>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fe51 	bl	8006bd0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d043      	beq.n	8005fca <HAL_ADC_IRQHandler+0x466>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03e      	beq.n	8005fca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f58:	e021      	b.n	8005f9e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f68:	d004      	beq.n	8005f74 <HAL_ADC_IRQHandler+0x410>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a28      	ldr	r2, [pc, #160]	@ (8006010 <HAL_ADC_IRQHandler+0x4ac>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x414>
 8005f74:	4b29      	ldr	r3, [pc, #164]	@ (800601c <HAL_ADC_IRQHandler+0x4b8>)
 8005f76:	e000      	b.n	8005f7a <HAL_ADC_IRQHandler+0x416>
 8005f78:	4b29      	ldr	r3, [pc, #164]	@ (8006020 <HAL_ADC_IRQHandler+0x4bc>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff faa4 	bl	80054c8 <LL_ADC_GetMultiDMATransfer>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005f86:	2301      	movs	r3, #1
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f8a:	e008      	b.n	8005f9e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb4:	f043 0202 	orr.w	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f84f 	bl	8006060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d018      	beq.n	8006006 <HAL_ADC_IRQHandler+0x4a2>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fdd1 	bl	8006ba8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	@ 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	50000100 	.word	0x50000100
 8006014:	50000500 	.word	0x50000500
 8006018:	50000400 	.word	0x50000400
 800601c:	50000300 	.word	0x50000300
 8006020:	50000700 	.word	0x50000700

08006024 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b0b6      	sub	sp, #216	@ 0xd8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800608e:	2b01      	cmp	r3, #1
 8006090:	d102      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x24>
 8006092:	2302      	movs	r3, #2
 8006094:	f000 bc13 	b.w	80068be <HAL_ADC_ConfigChannel+0x84a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff faa6 	bl	80055f6 <LL_ADC_REG_IsConversionOngoing>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 83f3 	bne.w	8006898 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7ff f965 	bl	800538e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fa94 	bl	80055f6 <LL_ADC_REG_IsConversionOngoing>
 80060ce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff faa0 	bl	800561c <LL_ADC_INJ_IsConversionOngoing>
 80060dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 81d9 	bne.w	800649c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 81d4 	bne.w	800649c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060fc:	d10f      	bne.n	800611e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2200      	movs	r2, #0
 8006108:	4619      	mov	r1, r3
 800610a:	f7ff f97f 	bl	800540c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff f913 	bl	8005342 <LL_ADC_SetSamplingTimeCommonConfig>
 800611c:	e00e      	b.n	800613c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	461a      	mov	r2, r3
 800612c:	f7ff f96e 	bl	800540c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff f903 	bl	8005342 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	08db      	lsrs	r3, r3, #3
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d022      	beq.n	80061a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800616e:	f7ff f85d 	bl	800522c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6919      	ldr	r1, [r3, #16]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	461a      	mov	r2, r3
 8006180:	f7ff f8a9 	bl	80052d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006190:	2b01      	cmp	r3, #1
 8006192:	d102      	bne.n	800619a <HAL_ADC_ConfigChannel+0x126>
 8006194:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006198:	e000      	b.n	800619c <HAL_ADC_ConfigChannel+0x128>
 800619a:	2300      	movs	r3, #0
 800619c:	461a      	mov	r2, r3
 800619e:	f7ff f8b5 	bl	800530c <LL_ADC_SetOffsetSaturation>
 80061a2:	e17b      	b.n	800649c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff f862 	bl	8005274 <LL_ADC_GetOffsetChannel>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <HAL_ADC_ConfigChannel+0x15c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff f857 	bl	8005274 <LL_ADC_GetOffsetChannel>
 80061c6:	4603      	mov	r3, r0
 80061c8:	0e9b      	lsrs	r3, r3, #26
 80061ca:	f003 021f 	and.w	r2, r3, #31
 80061ce:	e01e      	b.n	800620e <HAL_ADC_ConfigChannel+0x19a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f84c 	bl	8005274 <LL_ADC_GetOffsetChannel>
 80061dc:	4603      	mov	r3, r0
 80061de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061e6:	fa93 f3a3 	rbit	r3, r3
 80061ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80061fe:	2320      	movs	r3, #32
 8006200:	e004      	b.n	800620c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006206:	fab3 f383 	clz	r3, r3
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006216:	2b00      	cmp	r3, #0
 8006218:	d105      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x1b2>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	0e9b      	lsrs	r3, r3, #26
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	e018      	b.n	8006258 <HAL_ADC_ConfigChannel+0x1e4>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006232:	fa93 f3a3 	rbit	r3, r3
 8006236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800623a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800623e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800624a:	2320      	movs	r3, #32
 800624c:	e004      	b.n	8006258 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800624e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006252:	fab3 f383 	clz	r3, r3
 8006256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006258:	429a      	cmp	r2, r3
 800625a:	d106      	bne.n	800626a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f81b 	bl	80052a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2101      	movs	r1, #1
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe ffff 	bl	8005274 <LL_ADC_GetOffsetChannel>
 8006276:	4603      	mov	r3, r0
 8006278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <HAL_ADC_ConfigChannel+0x222>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2101      	movs	r1, #1
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fff4 	bl	8005274 <LL_ADC_GetOffsetChannel>
 800628c:	4603      	mov	r3, r0
 800628e:	0e9b      	lsrs	r3, r3, #26
 8006290:	f003 021f 	and.w	r2, r3, #31
 8006294:	e01e      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x260>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2101      	movs	r1, #1
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe ffe9 	bl	8005274 <LL_ADC_GetOffsetChannel>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80062b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80062bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e004      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80062c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x278>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	0e9b      	lsrs	r3, r3, #26
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	e018      	b.n	800631e <HAL_ADC_ConfigChannel+0x2aa>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006300:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006310:	2320      	movs	r3, #32
 8006312:	e004      	b.n	800631e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006318:	fab3 f383 	clz	r3, r3
 800631c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800631e:	429a      	cmp	r2, r3
 8006320:	d106      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe ffb8 	bl	80052a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe ff9c 	bl	8005274 <LL_ADC_GetOffsetChannel>
 800633c:	4603      	mov	r3, r0
 800633e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_ADC_ConfigChannel+0x2e8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2102      	movs	r1, #2
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe ff91 	bl	8005274 <LL_ADC_GetOffsetChannel>
 8006352:	4603      	mov	r3, r0
 8006354:	0e9b      	lsrs	r3, r3, #26
 8006356:	f003 021f 	and.w	r2, r3, #31
 800635a:	e01e      	b.n	800639a <HAL_ADC_ConfigChannel+0x326>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe ff86 	bl	8005274 <LL_ADC_GetOffsetChannel>
 8006368:	4603      	mov	r3, r0
 800636a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006372:	fa93 f3a3 	rbit	r3, r3
 8006376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800637a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800637e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800638a:	2320      	movs	r3, #32
 800638c:	e004      	b.n	8006398 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800638e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006392:	fab3 f383 	clz	r3, r3
 8006396:	b2db      	uxtb	r3, r3
 8006398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d105      	bne.n	80063b2 <HAL_ADC_ConfigChannel+0x33e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	0e9b      	lsrs	r3, r3, #26
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	e016      	b.n	80063e0 <HAL_ADC_ConfigChannel+0x36c>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063be:	fa93 f3a3 	rbit	r3, r3
 80063c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80063c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80063ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80063d2:	2320      	movs	r3, #32
 80063d4:	e004      	b.n	80063e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80063d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063da:	fab3 f383 	clz	r3, r3
 80063de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d106      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2102      	movs	r1, #2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe ff57 	bl	80052a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2103      	movs	r1, #3
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe ff3b 	bl	8005274 <LL_ADC_GetOffsetChannel>
 80063fe:	4603      	mov	r3, r0
 8006400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <HAL_ADC_ConfigChannel+0x3aa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2103      	movs	r1, #3
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe ff30 	bl	8005274 <LL_ADC_GetOffsetChannel>
 8006414:	4603      	mov	r3, r0
 8006416:	0e9b      	lsrs	r3, r3, #26
 8006418:	f003 021f 	and.w	r2, r3, #31
 800641c:	e017      	b.n	800644e <HAL_ADC_ConfigChannel+0x3da>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2103      	movs	r1, #3
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe ff25 	bl	8005274 <LL_ADC_GetOffsetChannel>
 800642a:	4603      	mov	r3, r0
 800642c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006430:	fa93 f3a3 	rbit	r3, r3
 8006434:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006438:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800643a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006440:	2320      	movs	r3, #32
 8006442:	e003      	b.n	800644c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006446:	fab3 f383 	clz	r3, r3
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006456:	2b00      	cmp	r3, #0
 8006458:	d105      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x3f2>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	0e9b      	lsrs	r3, r3, #26
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	e011      	b.n	800648a <HAL_ADC_ConfigChannel+0x416>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006476:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800647e:	2320      	movs	r3, #32
 8006480:	e003      	b.n	800648a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006484:	fab3 f383 	clz	r3, r3
 8006488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800648a:	429a      	cmp	r2, r3
 800648c:	d106      	bne.n	800649c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	2103      	movs	r1, #3
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe ff02 	bl	80052a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff f881 	bl	80055a8 <LL_ADC_IsEnabled>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 813d 	bne.w	8006728 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f7fe ffd2 	bl	8005464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4aa2      	ldr	r2, [pc, #648]	@ (8006750 <HAL_ADC_ConfigChannel+0x6dc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	f040 812e 	bne.w	8006728 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x480>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	0e9b      	lsrs	r3, r3, #26
 80064e2:	3301      	adds	r3, #1
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2b09      	cmp	r3, #9
 80064ea:	bf94      	ite	ls
 80064ec:	2301      	movls	r3, #1
 80064ee:	2300      	movhi	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e019      	b.n	8006528 <HAL_ADC_ConfigChannel+0x4b4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006504:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800650c:	2320      	movs	r3, #32
 800650e:	e003      	b.n	8006518 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006512:	fab3 f383 	clz	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	3301      	adds	r3, #1
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b09      	cmp	r3, #9
 8006520:	bf94      	ite	ls
 8006522:	2301      	movls	r3, #1
 8006524:	2300      	movhi	r3, #0
 8006526:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006528:	2b00      	cmp	r3, #0
 800652a:	d079      	beq.n	8006620 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006534:	2b00      	cmp	r3, #0
 8006536:	d107      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x4d4>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	0e9b      	lsrs	r3, r3, #26
 800653e:	3301      	adds	r3, #1
 8006540:	069b      	lsls	r3, r3, #26
 8006542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006546:	e015      	b.n	8006574 <HAL_ADC_ConfigChannel+0x500>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006550:	fa93 f3a3 	rbit	r3, r3
 8006554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006558:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800655a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006560:	2320      	movs	r3, #32
 8006562:	e003      	b.n	800656c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	fab3 f383 	clz	r3, r3
 800656a:	b2db      	uxtb	r3, r3
 800656c:	3301      	adds	r3, #1
 800656e:	069b      	lsls	r3, r3, #26
 8006570:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_ADC_ConfigChannel+0x520>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	0e9b      	lsrs	r3, r3, #26
 8006586:	3301      	adds	r3, #1
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	e017      	b.n	80065c4 <HAL_ADC_ConfigChannel+0x550>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659c:	fa93 f3a3 	rbit	r3, r3
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80065a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80065a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80065ac:	2320      	movs	r3, #32
 80065ae:	e003      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80065b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	3301      	adds	r3, #1
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2101      	movs	r1, #1
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x576>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0e9b      	lsrs	r3, r3, #26
 80065da:	3301      	adds	r3, #1
 80065dc:	f003 021f 	and.w	r2, r3, #31
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	051b      	lsls	r3, r3, #20
 80065e8:	e018      	b.n	800661c <HAL_ADC_ConfigChannel+0x5a8>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f2:	fa93 f3a3 	rbit	r3, r3
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006602:	2320      	movs	r3, #32
 8006604:	e003      	b.n	800660e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	b2db      	uxtb	r3, r3
 800660e:	3301      	adds	r3, #1
 8006610:	f003 021f 	and.w	r2, r3, #31
 8006614:	4613      	mov	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4413      	add	r3, r2
 800661a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800661c:	430b      	orrs	r3, r1
 800661e:	e07e      	b.n	800671e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <HAL_ADC_ConfigChannel+0x5c8>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	0e9b      	lsrs	r3, r3, #26
 8006632:	3301      	adds	r3, #1
 8006634:	069b      	lsls	r3, r3, #26
 8006636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800663a:	e015      	b.n	8006668 <HAL_ADC_ConfigChannel+0x5f4>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	fa93 f3a3 	rbit	r3, r3
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006654:	2320      	movs	r3, #32
 8006656:	e003      	b.n	8006660 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	fab3 f383 	clz	r3, r3
 800665e:	b2db      	uxtb	r3, r3
 8006660:	3301      	adds	r3, #1
 8006662:	069b      	lsls	r3, r3, #26
 8006664:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006670:	2b00      	cmp	r3, #0
 8006672:	d109      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x614>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	0e9b      	lsrs	r3, r3, #26
 800667a:	3301      	adds	r3, #1
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	2101      	movs	r1, #1
 8006682:	fa01 f303 	lsl.w	r3, r1, r3
 8006686:	e017      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x644>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	61fb      	str	r3, [r7, #28]
  return result;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80066a0:	2320      	movs	r3, #32
 80066a2:	e003      	b.n	80066ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	3301      	adds	r3, #1
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2101      	movs	r1, #1
 80066b4:	fa01 f303 	lsl.w	r3, r1, r3
 80066b8:	ea42 0103 	orr.w	r1, r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x670>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	0e9b      	lsrs	r3, r3, #26
 80066ce:	3301      	adds	r3, #1
 80066d0:	f003 021f 	and.w	r2, r3, #31
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	3b1e      	subs	r3, #30
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066e2:	e01b      	b.n	800671c <HAL_ADC_ConfigChannel+0x6a8>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	fa93 f3a3 	rbit	r3, r3
 80066f0:	613b      	str	r3, [r7, #16]
  return result;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80066fc:	2320      	movs	r3, #32
 80066fe:	e003      	b.n	8006708 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	fab3 f383 	clz	r3, r3
 8006706:	b2db      	uxtb	r3, r3
 8006708:	3301      	adds	r3, #1
 800670a:	f003 021f 	and.w	r2, r3, #31
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	3b1e      	subs	r3, #30
 8006716:	051b      	lsls	r3, r3, #20
 8006718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800671c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006722:	4619      	mov	r1, r3
 8006724:	f7fe fe72 	bl	800540c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b09      	ldr	r3, [pc, #36]	@ (8006754 <HAL_ADC_ConfigChannel+0x6e0>)
 800672e:	4013      	ands	r3, r2
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80be 	beq.w	80068b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800673e:	d004      	beq.n	800674a <HAL_ADC_ConfigChannel+0x6d6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a04      	ldr	r2, [pc, #16]	@ (8006758 <HAL_ADC_ConfigChannel+0x6e4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10a      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x6ec>
 800674a:	4b04      	ldr	r3, [pc, #16]	@ (800675c <HAL_ADC_ConfigChannel+0x6e8>)
 800674c:	e009      	b.n	8006762 <HAL_ADC_ConfigChannel+0x6ee>
 800674e:	bf00      	nop
 8006750:	407f0000 	.word	0x407f0000
 8006754:	80080000 	.word	0x80080000
 8006758:	50000100 	.word	0x50000100
 800675c:	50000300 	.word	0x50000300
 8006760:	4b59      	ldr	r3, [pc, #356]	@ (80068c8 <HAL_ADC_ConfigChannel+0x854>)
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fd54 	bl	8005210 <LL_ADC_GetCommonPathInternalCh>
 8006768:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a56      	ldr	r2, [pc, #344]	@ (80068cc <HAL_ADC_ConfigChannel+0x858>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_ADC_ConfigChannel+0x70c>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a55      	ldr	r2, [pc, #340]	@ (80068d0 <HAL_ADC_ConfigChannel+0x85c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d13a      	bne.n	80067f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d134      	bne.n	80067f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006794:	d005      	beq.n	80067a2 <HAL_ADC_ConfigChannel+0x72e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a4e      	ldr	r2, [pc, #312]	@ (80068d4 <HAL_ADC_ConfigChannel+0x860>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f040 8085 	bne.w	80068ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067aa:	d004      	beq.n	80067b6 <HAL_ADC_ConfigChannel+0x742>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a49      	ldr	r2, [pc, #292]	@ (80068d8 <HAL_ADC_ConfigChannel+0x864>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d101      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x746>
 80067b6:	4a49      	ldr	r2, [pc, #292]	@ (80068dc <HAL_ADC_ConfigChannel+0x868>)
 80067b8:	e000      	b.n	80067bc <HAL_ADC_ConfigChannel+0x748>
 80067ba:	4a43      	ldr	r2, [pc, #268]	@ (80068c8 <HAL_ADC_ConfigChannel+0x854>)
 80067bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fd0f 	bl	80051ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067cc:	4b44      	ldr	r3, [pc, #272]	@ (80068e0 <HAL_ADC_ConfigChannel+0x86c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	4a44      	ldr	r2, [pc, #272]	@ (80068e4 <HAL_ADC_ConfigChannel+0x870>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	099b      	lsrs	r3, r3, #6
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	4613      	mov	r3, r2
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067e6:	e002      	b.n	80067ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f9      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067f4:	e05a      	b.n	80068ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a3b      	ldr	r2, [pc, #236]	@ (80068e8 <HAL_ADC_ConfigChannel+0x874>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d125      	bne.n	800684c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11f      	bne.n	800684c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a31      	ldr	r2, [pc, #196]	@ (80068d8 <HAL_ADC_ConfigChannel+0x864>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d104      	bne.n	8006820 <HAL_ADC_ConfigChannel+0x7ac>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a34      	ldr	r2, [pc, #208]	@ (80068ec <HAL_ADC_ConfigChannel+0x878>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d047      	beq.n	80068b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006828:	d004      	beq.n	8006834 <HAL_ADC_ConfigChannel+0x7c0>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <HAL_ADC_ConfigChannel+0x864>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d101      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x7c4>
 8006834:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <HAL_ADC_ConfigChannel+0x868>)
 8006836:	e000      	b.n	800683a <HAL_ADC_ConfigChannel+0x7c6>
 8006838:	4a23      	ldr	r2, [pc, #140]	@ (80068c8 <HAL_ADC_ConfigChannel+0x854>)
 800683a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800683e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7fe fcd0 	bl	80051ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800684a:	e031      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a27      	ldr	r2, [pc, #156]	@ (80068f0 <HAL_ADC_ConfigChannel+0x87c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d12d      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800685a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d127      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <HAL_ADC_ConfigChannel+0x864>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d022      	beq.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006874:	d004      	beq.n	8006880 <HAL_ADC_ConfigChannel+0x80c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a17      	ldr	r2, [pc, #92]	@ (80068d8 <HAL_ADC_ConfigChannel+0x864>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x810>
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_ADC_ConfigChannel+0x868>)
 8006882:	e000      	b.n	8006886 <HAL_ADC_ConfigChannel+0x812>
 8006884:	4a10      	ldr	r2, [pc, #64]	@ (80068c8 <HAL_ADC_ConfigChannel+0x854>)
 8006886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800688a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fe fcaa 	bl	80051ea <LL_ADC_SetCommonPathInternalCh>
 8006896:	e00c      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80068aa:	e002      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068ac:	bf00      	nop
 80068ae:	e000      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80068ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80068be:	4618      	mov	r0, r3
 80068c0:	37d8      	adds	r7, #216	@ 0xd8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	50000700 	.word	0x50000700
 80068cc:	c3210000 	.word	0xc3210000
 80068d0:	90c00010 	.word	0x90c00010
 80068d4:	50000600 	.word	0x50000600
 80068d8:	50000100 	.word	0x50000100
 80068dc:	50000300 	.word	0x50000300
 80068e0:	20000220 	.word	0x20000220
 80068e4:	053e2d63 	.word	0x053e2d63
 80068e8:	c7520000 	.word	0xc7520000
 80068ec:	50000500 	.word	0x50000500
 80068f0:	cb840000 	.word	0xcb840000

080068f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fe4f 	bl	80055a8 <LL_ADC_IsEnabled>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d176      	bne.n	80069fe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	4b3c      	ldr	r3, [pc, #240]	@ (8006a08 <ADC_Enable+0x114>)
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	f043 0210 	orr.w	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e062      	b.n	8006a00 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fe1e 	bl	8005580 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800694c:	d004      	beq.n	8006958 <ADC_Enable+0x64>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a2e      	ldr	r2, [pc, #184]	@ (8006a0c <ADC_Enable+0x118>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <ADC_Enable+0x68>
 8006958:	4b2d      	ldr	r3, [pc, #180]	@ (8006a10 <ADC_Enable+0x11c>)
 800695a:	e000      	b.n	800695e <ADC_Enable+0x6a>
 800695c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a14 <ADC_Enable+0x120>)
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fc56 	bl	8005210 <LL_ADC_GetCommonPathInternalCh>
 8006964:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800696a:	2b00      	cmp	r3, #0
 800696c:	d013      	beq.n	8006996 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800696e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a18 <ADC_Enable+0x124>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	099b      	lsrs	r3, r3, #6
 8006974:	4a29      	ldr	r2, [pc, #164]	@ (8006a1c <ADC_Enable+0x128>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	099b      	lsrs	r3, r3, #6
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	4613      	mov	r3, r2
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006988:	e002      	b.n	8006990 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3b01      	subs	r3, #1
 800698e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f9      	bne.n	800698a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006996:	f7fe fc09 	bl	80051ac <HAL_GetTick>
 800699a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800699c:	e028      	b.n	80069f0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fe00 	bl	80055a8 <LL_ADC_IsEnabled>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fde4 	bl	8005580 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069b8:	f7fe fbf8 	bl	80051ac <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d914      	bls.n	80069f0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d00d      	beq.n	80069f0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d8:	f043 0210 	orr.w	r2, r3, #16
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e007      	b.n	8006a00 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d1cf      	bne.n	800699e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	8000003f 	.word	0x8000003f
 8006a0c:	50000100 	.word	0x50000100
 8006a10:	50000300 	.word	0x50000300
 8006a14:	50000700 	.word	0x50000700
 8006a18:	20000220 	.word	0x20000220
 8006a1c:	053e2d63 	.word	0x053e2d63

08006a20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a32:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d14b      	bne.n	8006ad2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d021      	beq.n	8006a98 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe fc85 	bl	8005368 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d032      	beq.n	8006aca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12b      	bne.n	8006aca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11f      	bne.n	8006aca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a96:	e018      	b.n	8006aca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d111      	bne.n	8006aca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aaa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff faaa 	bl	8006024 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ad0:	e00e      	b.n	8006af0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff fabe 	bl	8006060 <HAL_ADC_ErrorCallback>
}
 8006ae4:	e004      	b.n	8006af0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fa96 	bl	8006038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fa90 	bl	8006060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <LL_ADC_IsEnabled>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <LL_ADC_IsEnabled+0x18>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <LL_ADC_IsEnabled+0x1a>
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d101      	bne.n	8006b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b0a1      	sub	sp, #132	@ 0x84
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e0e7      	b.n	8006de6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006c22:	2300      	movs	r3, #0
 8006c24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c2e:	d102      	bne.n	8006c36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c30:	4b6f      	ldr	r3, [pc, #444]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	e009      	b.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d102      	bne.n	8006c46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006c40:	4b6d      	ldr	r3, [pc, #436]	@ (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	e001      	b.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0be      	b.n	8006de6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff ff7f 	bl	8006b6e <LL_ADC_REG_IsConversionOngoing>
 8006c70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff79 	bl	8006b6e <LL_ADC_REG_IsConversionOngoing>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 80a0 	bne.w	8006dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 809c 	bne.w	8006dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c94:	d004      	beq.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a55      	ldr	r2, [pc, #340]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d101      	bne.n	8006ca4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006ca0:	4b56      	ldr	r3, [pc, #344]	@ (8006dfc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006ca2:	e000      	b.n	8006ca6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006ca4:	4b56      	ldr	r3, [pc, #344]	@ (8006e00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006ca6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d04b      	beq.n	8006d48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6859      	ldr	r1, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cc2:	035b      	lsls	r3, r3, #13
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cd4:	d004      	beq.n	8006ce0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a45      	ldr	r2, [pc, #276]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10f      	bne.n	8006d00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006ce0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ce4:	f7ff ff30 	bl	8006b48 <LL_ADC_IsEnabled>
 8006ce8:	4604      	mov	r4, r0
 8006cea:	4841      	ldr	r0, [pc, #260]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006cec:	f7ff ff2c 	bl	8006b48 <LL_ADC_IsEnabled>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4323      	orrs	r3, r4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e012      	b.n	8006d26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006d00:	483c      	ldr	r0, [pc, #240]	@ (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006d02:	f7ff ff21 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d06:	4604      	mov	r4, r0
 8006d08:	483b      	ldr	r0, [pc, #236]	@ (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006d0a:	f7ff ff1d 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	431c      	orrs	r4, r3
 8006d12:	483c      	ldr	r0, [pc, #240]	@ (8006e04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006d14:	f7ff ff18 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4323      	orrs	r3, r4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d056      	beq.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d32:	f023 030f 	bic.w	r3, r3, #15
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	6811      	ldr	r1, [r2, #0]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	431a      	orrs	r2, r3
 8006d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d44:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d46:	e047      	b.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d5c:	d004      	beq.n	8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a23      	ldr	r2, [pc, #140]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10f      	bne.n	8006d88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006d68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006d6c:	f7ff feec 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d70:	4604      	mov	r4, r0
 8006d72:	481f      	ldr	r0, [pc, #124]	@ (8006df0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006d74:	f7ff fee8 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4323      	orrs	r3, r4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf0c      	ite	eq
 8006d80:	2301      	moveq	r3, #1
 8006d82:	2300      	movne	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e012      	b.n	8006dae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006d88:	481a      	ldr	r0, [pc, #104]	@ (8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006d8a:	f7ff fedd 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4819      	ldr	r0, [pc, #100]	@ (8006df8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006d92:	f7ff fed9 	bl	8006b48 <LL_ADC_IsEnabled>
 8006d96:	4603      	mov	r3, r0
 8006d98:	431c      	orrs	r4, r3
 8006d9a:	481a      	ldr	r0, [pc, #104]	@ (8006e04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006d9c:	f7ff fed4 	bl	8006b48 <LL_ADC_IsEnabled>
 8006da0:	4603      	mov	r3, r0
 8006da2:	4323      	orrs	r3, r4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d012      	beq.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006dba:	f023 030f 	bic.w	r3, r3, #15
 8006dbe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006dc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006dc2:	e009      	b.n	8006dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006dd6:	e000      	b.n	8006dda <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006de2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3784      	adds	r7, #132	@ 0x84
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd90      	pop	{r4, r7, pc}
 8006dee:	bf00      	nop
 8006df0:	50000100 	.word	0x50000100
 8006df4:	50000400 	.word	0x50000400
 8006df8:	50000500 	.word	0x50000500
 8006dfc:	50000300 	.word	0x50000300
 8006e00:	50000700 	.word	0x50000700
 8006e04:	50000600 	.word	0x50000600

08006e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e18:	4b0c      	ldr	r3, [pc, #48]	@ (8006e4c <__NVIC_SetPriorityGrouping+0x44>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e24:	4013      	ands	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3a:	4a04      	ldr	r2, [pc, #16]	@ (8006e4c <__NVIC_SetPriorityGrouping+0x44>)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	60d3      	str	r3, [r2, #12]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00

08006e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e54:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <__NVIC_GetPriorityGrouping+0x18>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	f003 0307 	and.w	r3, r3, #7
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	e000ed00 	.word	0xe000ed00

08006e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	db0b      	blt.n	8006e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	f003 021f 	and.w	r2, r3, #31
 8006e84:	4907      	ldr	r1, [pc, #28]	@ (8006ea4 <__NVIC_EnableIRQ+0x38>)
 8006e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	e000e100 	.word	0xe000e100

08006ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db0a      	blt.n	8006ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	490c      	ldr	r1, [pc, #48]	@ (8006ef4 <__NVIC_SetPriority+0x4c>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	0112      	lsls	r2, r2, #4
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	440b      	add	r3, r1
 8006ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ed0:	e00a      	b.n	8006ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4908      	ldr	r1, [pc, #32]	@ (8006ef8 <__NVIC_SetPriority+0x50>)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	3b04      	subs	r3, #4
 8006ee0:	0112      	lsls	r2, r2, #4
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	761a      	strb	r2, [r3, #24]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	e000e100 	.word	0xe000e100
 8006ef8:	e000ed00 	.word	0xe000ed00

08006efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f1c3 0307 	rsb	r3, r3, #7
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	bf28      	it	cs
 8006f1a:	2304      	movcs	r3, #4
 8006f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d902      	bls.n	8006f2c <NVIC_EncodePriority+0x30>
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3b03      	subs	r3, #3
 8006f2a:	e000      	b.n	8006f2e <NVIC_EncodePriority+0x32>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	401a      	ands	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f44:	f04f 31ff 	mov.w	r1, #4294967295
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4e:	43d9      	mvns	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f54:	4313      	orrs	r3, r2
         );
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3724      	adds	r7, #36	@ 0x24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f74:	d301      	bcc.n	8006f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f76:	2301      	movs	r3, #1
 8006f78:	e00f      	b.n	8006f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <SysTick_Config+0x40>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f82:	210f      	movs	r1, #15
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	f7ff ff8e 	bl	8006ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <SysTick_Config+0x40>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f92:	4b04      	ldr	r3, [pc, #16]	@ (8006fa4 <SysTick_Config+0x40>)
 8006f94:	2207      	movs	r2, #7
 8006f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	e000e010 	.word	0xe000e010

08006fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff ff29 	bl	8006e08 <__NVIC_SetPriorityGrouping>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fcc:	f7ff ff40 	bl	8006e50 <__NVIC_GetPriorityGrouping>
 8006fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	f7ff ff90 	bl	8006efc <NVIC_EncodePriority>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff ff5f 	bl	8006ea8 <__NVIC_SetPriority>
}
 8006fea:	bf00      	nop
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ff33 	bl	8006e6c <__NVIC_EnableIRQ>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ffa4 	bl	8006f64 <SysTick_Config>
 800701c:	4603      	mov	r3, r0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e08d      	b.n	8007156 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	4b47      	ldr	r3, [pc, #284]	@ (8007160 <HAL_DMA_Init+0x138>)
 8007042:	429a      	cmp	r2, r3
 8007044:	d80f      	bhi.n	8007066 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	4b45      	ldr	r3, [pc, #276]	@ (8007164 <HAL_DMA_Init+0x13c>)
 800704e:	4413      	add	r3, r2
 8007050:	4a45      	ldr	r2, [pc, #276]	@ (8007168 <HAL_DMA_Init+0x140>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	091b      	lsrs	r3, r3, #4
 8007058:	009a      	lsls	r2, r3, #2
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a42      	ldr	r2, [pc, #264]	@ (800716c <HAL_DMA_Init+0x144>)
 8007062:	641a      	str	r2, [r3, #64]	@ 0x40
 8007064:	e00e      	b.n	8007084 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	4b40      	ldr	r3, [pc, #256]	@ (8007170 <HAL_DMA_Init+0x148>)
 800706e:	4413      	add	r3, r2
 8007070:	4a3d      	ldr	r2, [pc, #244]	@ (8007168 <HAL_DMA_Init+0x140>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	009a      	lsls	r2, r3, #2
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a3c      	ldr	r2, [pc, #240]	@ (8007174 <HAL_DMA_Init+0x14c>)
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800709a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80070a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa76 	bl	80075c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070e4:	d102      	bne.n	80070ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007100:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d010      	beq.n	800712c <HAL_DMA_Init+0x104>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d80c      	bhi.n	800712c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa96 	bl	8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	e008      	b.n	800713e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40020407 	.word	0x40020407
 8007164:	bffdfff8 	.word	0xbffdfff8
 8007168:	cccccccd 	.word	0xcccccccd
 800716c:	40020000 	.word	0x40020000
 8007170:	bffdfbf8 	.word	0xbffdfbf8
 8007174:	40020400 	.word	0x40020400

08007178 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_DMA_Start_IT+0x20>
 8007194:	2302      	movs	r3, #2
 8007196:	e066      	b.n	8007266 <HAL_DMA_Start_IT+0xee>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d155      	bne.n	8007258 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f9bb 	bl	800754c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 020e 	orr.w	r2, r2, #14
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e00f      	b.n	8007210 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0204 	bic.w	r2, r2, #4
 80071fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 020a 	orr.w	r2, r2, #10
 800720e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800722c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007244:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e005      	b.n	8007264 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007260:	2302      	movs	r3, #2
 8007262:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d005      	beq.n	8007292 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2204      	movs	r2, #4
 800728a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e037      	b.n	8007302 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 020e 	bic.w	r2, r2, #14
 80072a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	f003 021f 	and.w	r2, r3, #31
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ce:	2101      	movs	r1, #1
 80072d0:	fa01 f202 	lsl.w	r2, r1, r2
 80072d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80072de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007300:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d00d      	beq.n	8007354 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2204      	movs	r2, #4
 800733c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	e047      	b.n	80073e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 020e 	bic.w	r2, r2, #14
 8007362:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	f003 021f 	and.w	r2, r3, #31
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f202 	lsl.w	r2, r1, r2
 8007396:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00c      	beq.n	80073c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
    }
  }
  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2204      	movs	r2, #4
 8007410:	409a      	lsls	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4013      	ands	r3, r2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d026      	beq.n	8007468 <HAL_DMA_IRQHandler+0x7a>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d021      	beq.n	8007468 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0204 	bic.w	r2, r2, #4
 8007440:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007446:	f003 021f 	and.w	r2, r3, #31
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	2104      	movs	r1, #4
 8007450:	fa01 f202 	lsl.w	r2, r1, r2
 8007454:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	d071      	beq.n	8007542 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007466:	e06c      	b.n	8007542 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2202      	movs	r2, #2
 8007472:	409a      	lsls	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02e      	beq.n	80074da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d029      	beq.n	80074da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 020a 	bic.w	r2, r2, #10
 80074a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b0:	f003 021f 	and.w	r2, r3, #31
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b8:	2102      	movs	r1, #2
 80074ba:	fa01 f202 	lsl.w	r2, r1, r2
 80074be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d038      	beq.n	8007542 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80074d8:	e033      	b.n	8007542 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	2208      	movs	r2, #8
 80074e4:	409a      	lsls	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4013      	ands	r3, r2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d02a      	beq.n	8007544 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d025      	beq.n	8007544 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 020e 	bic.w	r2, r2, #14
 8007506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750c:	f003 021f 	and.w	r2, r3, #31
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f202 	lsl.w	r2, r1, r2
 800751a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007542:	bf00      	nop
 8007544:	bf00      	nop
}
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007562:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757a:	f003 021f 	and.w	r2, r3, #31
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	2101      	movs	r1, #1
 8007584:	fa01 f202 	lsl.w	r2, r1, r2
 8007588:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b10      	cmp	r3, #16
 8007598:	d108      	bne.n	80075ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80075aa:	e007      	b.n	80075bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]
}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b16      	ldr	r3, [pc, #88]	@ (8007630 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80075d8:	429a      	cmp	r2, r3
 80075da:	d802      	bhi.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80075dc:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e001      	b.n	80075e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80075e2:	4b15      	ldr	r3, [pc, #84]	@ (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80075e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	3b08      	subs	r3, #8
 80075f2:	4a12      	ldr	r2, [pc, #72]	@ (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	091b      	lsrs	r3, r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	009a      	lsls	r2, r3, #2
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	461a      	mov	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a0b      	ldr	r2, [pc, #44]	@ (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007612:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2201      	movs	r2, #1
 800761c:	409a      	lsls	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40020407 	.word	0x40020407
 8007634:	40020800 	.word	0x40020800
 8007638:	40020820 	.word	0x40020820
 800763c:	cccccccd 	.word	0xcccccccd
 8007640:	40020880 	.word	0x40020880

08007644 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a08      	ldr	r2, [pc, #32]	@ (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007666:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2201      	movs	r2, #1
 8007672:	409a      	lsls	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	1000823f 	.word	0x1000823f
 8007688:	40020940 	.word	0x40020940

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800769a:	e15a      	b.n	8007952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	2101      	movs	r1, #1
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	fa01 f303 	lsl.w	r3, r1, r3
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 814c 	beq.w	800794c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d005      	beq.n	80076cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d130      	bne.n	800772e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2203      	movs	r2, #3
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4013      	ands	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007702:	2201      	movs	r2, #1
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43db      	mvns	r3, r3
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4013      	ands	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	091b      	lsrs	r3, r3, #4
 8007718:	f003 0201 	and.w	r2, r3, #1
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d017      	beq.n	800776a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	2203      	movs	r2, #3
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d123      	bne.n	80077be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	08da      	lsrs	r2, r3, #3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3208      	adds	r2, #8
 800777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	220f      	movs	r2, #15
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4013      	ands	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	08da      	lsrs	r2, r3, #3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3208      	adds	r2, #8
 80077b8:	6939      	ldr	r1, [r7, #16]
 80077ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2203      	movs	r2, #3
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4013      	ands	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f003 0203 	and.w	r2, r3, #3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a6 	beq.w	800794c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007800:	4b5b      	ldr	r3, [pc, #364]	@ (8007970 <HAL_GPIO_Init+0x2e4>)
 8007802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007804:	4a5a      	ldr	r2, [pc, #360]	@ (8007970 <HAL_GPIO_Init+0x2e4>)
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6613      	str	r3, [r2, #96]	@ 0x60
 800780c:	4b58      	ldr	r3, [pc, #352]	@ (8007970 <HAL_GPIO_Init+0x2e4>)
 800780e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007818:	4a56      	ldr	r2, [pc, #344]	@ (8007974 <HAL_GPIO_Init+0x2e8>)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	3302      	adds	r3, #2
 8007820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	220f      	movs	r2, #15
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	43db      	mvns	r3, r3
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4013      	ands	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007842:	d01f      	beq.n	8007884 <HAL_GPIO_Init+0x1f8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a4c      	ldr	r2, [pc, #304]	@ (8007978 <HAL_GPIO_Init+0x2ec>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d019      	beq.n	8007880 <HAL_GPIO_Init+0x1f4>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a4b      	ldr	r2, [pc, #300]	@ (800797c <HAL_GPIO_Init+0x2f0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <HAL_GPIO_Init+0x1f0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a4a      	ldr	r2, [pc, #296]	@ (8007980 <HAL_GPIO_Init+0x2f4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00d      	beq.n	8007878 <HAL_GPIO_Init+0x1ec>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a49      	ldr	r2, [pc, #292]	@ (8007984 <HAL_GPIO_Init+0x2f8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <HAL_GPIO_Init+0x1e8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a48      	ldr	r2, [pc, #288]	@ (8007988 <HAL_GPIO_Init+0x2fc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d101      	bne.n	8007870 <HAL_GPIO_Init+0x1e4>
 800786c:	2305      	movs	r3, #5
 800786e:	e00a      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007870:	2306      	movs	r3, #6
 8007872:	e008      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007874:	2304      	movs	r3, #4
 8007876:	e006      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007878:	2303      	movs	r3, #3
 800787a:	e004      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 800787c:	2302      	movs	r3, #2
 800787e:	e002      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007880:	2301      	movs	r3, #1
 8007882:	e000      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007884:	2300      	movs	r3, #0
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	f002 0203 	and.w	r2, r2, #3
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	4093      	lsls	r3, r2
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007896:	4937      	ldr	r1, [pc, #220]	@ (8007974 <HAL_GPIO_Init+0x2e8>)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	3302      	adds	r3, #2
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078a4:	4b39      	ldr	r3, [pc, #228]	@ (800798c <HAL_GPIO_Init+0x300>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4013      	ands	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078c8:	4a30      	ldr	r2, [pc, #192]	@ (800798c <HAL_GPIO_Init+0x300>)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078ce:	4b2f      	ldr	r3, [pc, #188]	@ (800798c <HAL_GPIO_Init+0x300>)
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	43db      	mvns	r3, r3
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4013      	ands	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078f2:	4a26      	ldr	r2, [pc, #152]	@ (800798c <HAL_GPIO_Init+0x300>)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80078f8:	4b24      	ldr	r3, [pc, #144]	@ (800798c <HAL_GPIO_Init+0x300>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	43db      	mvns	r3, r3
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4013      	ands	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800791c:	4a1b      	ldr	r2, [pc, #108]	@ (800798c <HAL_GPIO_Init+0x300>)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007922:	4b1a      	ldr	r3, [pc, #104]	@ (800798c <HAL_GPIO_Init+0x300>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	43db      	mvns	r3, r3
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4013      	ands	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007946:	4a11      	ldr	r2, [pc, #68]	@ (800798c <HAL_GPIO_Init+0x300>)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3301      	adds	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	fa22 f303 	lsr.w	r3, r2, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	f47f ae9d 	bne.w	800769c <HAL_GPIO_Init+0x10>
  }
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40021000 	.word	0x40021000
 8007974:	40010000 	.word	0x40010000
 8007978:	48000400 	.word	0x48000400
 800797c:	48000800 	.word	0x48000800
 8007980:	48000c00 	.word	0x48000c00
 8007984:	48001000 	.word	0x48001000
 8007988:	48001400 	.word	0x48001400
 800798c:	40010400 	.word	0x40010400

08007990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079a8:	2301      	movs	r3, #1
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e001      	b.n	80079b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	807b      	strh	r3, [r7, #2]
 80079cc:	4613      	mov	r3, r2
 80079ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079d0:	787b      	ldrb	r3, [r7, #1]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079d6:	887a      	ldrh	r2, [r7, #2]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079dc:	e002      	b.n	80079e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079de:	887a      	ldrh	r2, [r7, #2]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a02:	887a      	ldrh	r2, [r7, #2]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4013      	ands	r3, r2
 8007a08:	041a      	lsls	r2, r3, #16
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	43d9      	mvns	r1, r3
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	400b      	ands	r3, r1
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	619a      	str	r2, [r3, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007a2e:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a30:	695a      	ldr	r2, [r3, #20]
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a3a:	4a05      	ldr	r2, [pc, #20]	@ (8007a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fb f98c 	bl	8002d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40010400 	.word	0x40010400

08007a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d141      	bne.n	8007ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a62:	4b4b      	ldr	r3, [pc, #300]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a6e:	d131      	bne.n	8007ad4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a70:	4b47      	ldr	r3, [pc, #284]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a76:	4a46      	ldr	r2, [pc, #280]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a80:	4b43      	ldr	r3, [pc, #268]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a88:	4a41      	ldr	r2, [pc, #260]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a90:	4b40      	ldr	r3, [pc, #256]	@ (8007b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2232      	movs	r2, #50	@ 0x32
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	0c9b      	lsrs	r3, r3, #18
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007aa6:	e002      	b.n	8007aae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007aae:	4b38      	ldr	r3, [pc, #224]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aba:	d102      	bne.n	8007ac2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f2      	bne.n	8007aa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ac2:	4b33      	ldr	r3, [pc, #204]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ace:	d158      	bne.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e057      	b.n	8007b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ada:	4a2d      	ldr	r2, [pc, #180]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007ae4:	e04d      	b.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aec:	d141      	bne.n	8007b72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007aee:	4b28      	ldr	r3, [pc, #160]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afa:	d131      	bne.n	8007b60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007afc:	4b24      	ldr	r3, [pc, #144]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b02:	4a23      	ldr	r2, [pc, #140]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b0c:	4b20      	ldr	r3, [pc, #128]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b14:	4a1e      	ldr	r2, [pc, #120]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2232      	movs	r2, #50	@ 0x32
 8007b22:	fb02 f303 	mul.w	r3, r2, r3
 8007b26:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b28:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2c:	0c9b      	lsrs	r3, r3, #18
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b32:	e002      	b.n	8007b3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b3a:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b46:	d102      	bne.n	8007b4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f2      	bne.n	8007b34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b4e:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b5a:	d112      	bne.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e011      	b.n	8007b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b60:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b66:	4a0a      	ldr	r2, [pc, #40]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b70:	e007      	b.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b72:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b7a:	4a05      	ldr	r2, [pc, #20]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40007000 	.word	0x40007000
 8007b94:	20000220 	.word	0x20000220
 8007b98:	431bde83 	.word	0x431bde83

08007b9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4a04      	ldr	r2, [pc, #16]	@ (8007bb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007ba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007baa:	6093      	str	r3, [r2, #8]
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40007000 	.word	0x40007000

08007bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e2fe      	b.n	80081cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d075      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bda:	4b97      	ldr	r3, [pc, #604]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 030c 	and.w	r3, r3, #12
 8007be2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007be4:	4b94      	ldr	r3, [pc, #592]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b0c      	cmp	r3, #12
 8007bf2:	d102      	bne.n	8007bfa <HAL_RCC_OscConfig+0x3e>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d002      	beq.n	8007c00 <HAL_RCC_OscConfig+0x44>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d10b      	bne.n	8007c18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c00:	4b8d      	ldr	r3, [pc, #564]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05b      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x108>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d157      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e2d9      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c20:	d106      	bne.n	8007c30 <HAL_RCC_OscConfig+0x74>
 8007c22:	4b85      	ldr	r3, [pc, #532]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a84      	ldr	r2, [pc, #528]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	e01d      	b.n	8007c6c <HAL_RCC_OscConfig+0xb0>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCC_OscConfig+0x98>
 8007c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4b7c      	ldr	r3, [pc, #496]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e00b      	b.n	8007c6c <HAL_RCC_OscConfig+0xb0>
 8007c54:	4b78      	ldr	r3, [pc, #480]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a77      	ldr	r2, [pc, #476]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4b75      	ldr	r3, [pc, #468]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a74      	ldr	r2, [pc, #464]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d013      	beq.n	8007c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fd fa9a 	bl	80051ac <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c7c:	f7fd fa96 	bl	80051ac <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b64      	cmp	r3, #100	@ 0x64
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e29e      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0f0      	beq.n	8007c7c <HAL_RCC_OscConfig+0xc0>
 8007c9a:	e014      	b.n	8007cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9c:	f7fd fa86 	bl	80051ac <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca4:	f7fd fa82 	bl	80051ac <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b64      	cmp	r3, #100	@ 0x64
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e28a      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cb6:	4b60      	ldr	r3, [pc, #384]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f0      	bne.n	8007ca4 <HAL_RCC_OscConfig+0xe8>
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d075      	beq.n	8007dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cd2:	4b59      	ldr	r3, [pc, #356]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cdc:	4b56      	ldr	r3, [pc, #344]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b0c      	cmp	r3, #12
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x136>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d002      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x13c>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d11f      	bne.n	8007d38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_OscConfig+0x154>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e25d      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d10:	4b49      	ldr	r3, [pc, #292]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	4946      	ldr	r1, [pc, #280]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d24:	4b45      	ldr	r3, [pc, #276]	@ (8007e3c <HAL_RCC_OscConfig+0x280>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fd f9f3 	bl	8005114 <HAL_InitTick>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d043      	beq.n	8007dbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e249      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d023      	beq.n	8007d88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d40:	4b3d      	ldr	r3, [pc, #244]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a3c      	ldr	r2, [pc, #240]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fd fa2e 	bl	80051ac <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d54:	f7fd fa2a 	bl	80051ac <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e232      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d66:	4b34      	ldr	r3, [pc, #208]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d72:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	061b      	lsls	r3, r3, #24
 8007d80:	492d      	ldr	r1, [pc, #180]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]
 8007d86:	e01a      	b.n	8007dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d88:	4b2b      	ldr	r3, [pc, #172]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d94:	f7fd fa0a 	bl	80051ac <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d9c:	f7fd fa06 	bl	80051ac <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e20e      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dae:	4b22      	ldr	r3, [pc, #136]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f0      	bne.n	8007d9c <HAL_RCC_OscConfig+0x1e0>
 8007dba:	e000      	b.n	8007dbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d041      	beq.n	8007e4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01c      	beq.n	8007e0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dd8:	4a17      	ldr	r2, [pc, #92]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	f043 0301 	orr.w	r3, r3, #1
 8007dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de2:	f7fd f9e3 	bl	80051ac <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dea:	f7fd f9df 	bl	80051ac <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e1e7      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <HAL_RCC_OscConfig+0x22e>
 8007e0a:	e020      	b.n	8007e4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e12:	4a09      	ldr	r2, [pc, #36]	@ (8007e38 <HAL_RCC_OscConfig+0x27c>)
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1c:	f7fd f9c6 	bl	80051ac <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e22:	e00d      	b.n	8007e40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e24:	f7fd f9c2 	bl	80051ac <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d906      	bls.n	8007e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e1ca      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
 8007e36:	bf00      	nop
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	20000224 	.word	0x20000224
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e40:	4b8c      	ldr	r3, [pc, #560]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1ea      	bne.n	8007e24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80a6 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e60:	4b84      	ldr	r3, [pc, #528]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_OscConfig+0x2b4>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_OscConfig+0x2b6>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e76:	4b7f      	ldr	r3, [pc, #508]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e82:	4b7c      	ldr	r3, [pc, #496]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e92:	4b79      	ldr	r3, [pc, #484]	@ (8008078 <HAL_RCC_OscConfig+0x4bc>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d118      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e9e:	4b76      	ldr	r3, [pc, #472]	@ (8008078 <HAL_RCC_OscConfig+0x4bc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a75      	ldr	r2, [pc, #468]	@ (8008078 <HAL_RCC_OscConfig+0x4bc>)
 8007ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eaa:	f7fd f97f 	bl	80051ac <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eb2:	f7fd f97b 	bl	80051ac <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e183      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8008078 <HAL_RCC_OscConfig+0x4bc>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d108      	bne.n	8007eea <HAL_RCC_OscConfig+0x32e>
 8007ed8:	4b66      	ldr	r3, [pc, #408]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ede:	4a65      	ldr	r2, [pc, #404]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ee8:	e024      	b.n	8007f34 <HAL_RCC_OscConfig+0x378>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d110      	bne.n	8007f14 <HAL_RCC_OscConfig+0x358>
 8007ef2:	4b60      	ldr	r3, [pc, #384]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007efa:	f043 0304 	orr.w	r3, r3, #4
 8007efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f02:	4b5c      	ldr	r3, [pc, #368]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f08:	4a5a      	ldr	r2, [pc, #360]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f12:	e00f      	b.n	8007f34 <HAL_RCC_OscConfig+0x378>
 8007f14:	4b57      	ldr	r3, [pc, #348]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1a:	4a56      	ldr	r2, [pc, #344]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f24:	4b53      	ldr	r3, [pc, #332]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2a:	4a52      	ldr	r2, [pc, #328]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f2c:	f023 0304 	bic.w	r3, r3, #4
 8007f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3c:	f7fd f936 	bl	80051ac <HAL_GetTick>
 8007f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f42:	e00a      	b.n	8007f5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f44:	f7fd f932 	bl	80051ac <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e138      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f5a:	4b46      	ldr	r3, [pc, #280]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0ed      	beq.n	8007f44 <HAL_RCC_OscConfig+0x388>
 8007f68:	e015      	b.n	8007f96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f6a:	f7fd f91f 	bl	80051ac <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fd f91b 	bl	80051ac <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e121      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f88:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1ed      	bne.n	8007f72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f96:	7ffb      	ldrb	r3, [r7, #31]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d105      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9c:	4b35      	ldr	r3, [pc, #212]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa0:	4a34      	ldr	r2, [pc, #208]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d03c      	beq.n	800802e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01c      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fcc:	f7fd f8ee 	bl	80051ac <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fd4:	f7fd f8ea 	bl	80051ac <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e0f2      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fe6:	4b23      	ldr	r3, [pc, #140]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0ef      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x418>
 8007ff4:	e01b      	b.n	800802e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8007ffe:	f023 0301 	bic.w	r3, r3, #1
 8008002:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008006:	f7fd f8d1 	bl	80051ac <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800800e:	f7fd f8cd 	bl	80051ac <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e0d5      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008020:	4b14      	ldr	r3, [pc, #80]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8008022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1ef      	bne.n	800800e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80c9 	beq.w	80081ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008038:	4b0e      	ldr	r3, [pc, #56]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030c 	and.w	r3, r3, #12
 8008040:	2b0c      	cmp	r3, #12
 8008042:	f000 8083 	beq.w	800814c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d15e      	bne.n	800810c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804e:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a08      	ldr	r2, [pc, #32]	@ (8008074 <HAL_RCC_OscConfig+0x4b8>)
 8008054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805a:	f7fd f8a7 	bl	80051ac <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008060:	e00c      	b.n	800807c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008062:	f7fd f8a3 	bl	80051ac <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d905      	bls.n	800807c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e0ab      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
 8008074:	40021000 	.word	0x40021000
 8008078:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800807c:	4b55      	ldr	r3, [pc, #340]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1ec      	bne.n	8008062 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008088:	4b52      	ldr	r3, [pc, #328]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	4b52      	ldr	r3, [pc, #328]	@ (80081d8 <HAL_RCC_OscConfig+0x61c>)
 800808e:	4013      	ands	r3, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6a11      	ldr	r1, [r2, #32]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008098:	3a01      	subs	r2, #1
 800809a:	0112      	lsls	r2, r2, #4
 800809c:	4311      	orrs	r1, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80080a2:	0212      	lsls	r2, r2, #8
 80080a4:	4311      	orrs	r1, r2
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80080aa:	0852      	lsrs	r2, r2, #1
 80080ac:	3a01      	subs	r2, #1
 80080ae:	0552      	lsls	r2, r2, #21
 80080b0:	4311      	orrs	r1, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80080b6:	0852      	lsrs	r2, r2, #1
 80080b8:	3a01      	subs	r2, #1
 80080ba:	0652      	lsls	r2, r2, #25
 80080bc:	4311      	orrs	r1, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80080c2:	06d2      	lsls	r2, r2, #27
 80080c4:	430a      	orrs	r2, r1
 80080c6:	4943      	ldr	r1, [pc, #268]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080cc:	4b41      	ldr	r3, [pc, #260]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a40      	ldr	r2, [pc, #256]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 80080d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080d8:	4b3e      	ldr	r3, [pc, #248]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4a3d      	ldr	r2, [pc, #244]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 80080de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e4:	f7fd f862 	bl	80051ac <HAL_GetTick>
 80080e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fd f85e 	bl	80051ac <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e066      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080fe:	4b35      	ldr	r3, [pc, #212]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x530>
 800810a:	e05e      	b.n	80081ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810c:	4b31      	ldr	r3, [pc, #196]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a30      	ldr	r2, [pc, #192]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 8008112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fd f848 	bl	80051ac <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fd f844 	bl	80051ac <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e04c      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008132:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800813e:	4b25      	ldr	r3, [pc, #148]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	4924      	ldr	r1, [pc, #144]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 8008144:	4b25      	ldr	r3, [pc, #148]	@ (80081dc <HAL_RCC_OscConfig+0x620>)
 8008146:	4013      	ands	r3, r2
 8008148:	60cb      	str	r3, [r1, #12]
 800814a:	e03e      	b.n	80081ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e039      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008158:	4b1e      	ldr	r3, [pc, #120]	@ (80081d4 <HAL_RCC_OscConfig+0x618>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 0203 	and.w	r2, r3, #3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	429a      	cmp	r2, r3
 800816a:	d12c      	bne.n	80081c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008176:	3b01      	subs	r3, #1
 8008178:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	429a      	cmp	r2, r3
 800817c:	d123      	bne.n	80081c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800818a:	429a      	cmp	r2, r3
 800818c:	d11b      	bne.n	80081c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800819a:	429a      	cmp	r2, r3
 800819c:	d113      	bne.n	80081c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a8:	085b      	lsrs	r3, r3, #1
 80081aa:	3b01      	subs	r3, #1
 80081ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d109      	bne.n	80081c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	3b01      	subs	r3, #1
 80081c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d001      	beq.n	80081ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40021000 	.word	0x40021000
 80081d8:	019f800c 	.word	0x019f800c
 80081dc:	feeefffc 	.word	0xfeeefffc

080081e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e11e      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081f8:	4b91      	ldr	r3, [pc, #580]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d910      	bls.n	8008228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	4b8e      	ldr	r3, [pc, #568]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f023 020f 	bic.w	r2, r3, #15
 800820e:	498c      	ldr	r1, [pc, #560]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008216:	4b8a      	ldr	r3, [pc, #552]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d001      	beq.n	8008228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e106      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d073      	beq.n	800831c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b03      	cmp	r3, #3
 800823a:	d129      	bne.n	8008290 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800823c:	4b81      	ldr	r3, [pc, #516]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e0f4      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800824c:	f000 f99e 	bl	800858c <RCC_GetSysClockFreqFromPLLSource>
 8008250:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	4a7c      	ldr	r2, [pc, #496]	@ (8008448 <HAL_RCC_ClockConfig+0x268>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d93f      	bls.n	80082da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800825a:	4b7a      	ldr	r3, [pc, #488]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800826e:	2b00      	cmp	r3, #0
 8008270:	d033      	beq.n	80082da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008276:	2b00      	cmp	r3, #0
 8008278:	d12f      	bne.n	80082da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800827a:	4b72      	ldr	r3, [pc, #456]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008282:	4a70      	ldr	r2, [pc, #448]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800828a:	2380      	movs	r3, #128	@ 0x80
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e024      	b.n	80082da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d107      	bne.n	80082a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008298:	4b6a      	ldr	r3, [pc, #424]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e0c6      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082a8:	4b66      	ldr	r3, [pc, #408]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0be      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80082b8:	f000 f8ce 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 80082bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4a61      	ldr	r2, [pc, #388]	@ (8008448 <HAL_RCC_ClockConfig+0x268>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d909      	bls.n	80082da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082ce:	4a5d      	ldr	r2, [pc, #372]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80082d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80082d6:	2380      	movs	r3, #128	@ 0x80
 80082d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082da:	4b5a      	ldr	r3, [pc, #360]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f023 0203 	bic.w	r2, r3, #3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4957      	ldr	r1, [pc, #348]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ec:	f7fc ff5e 	bl	80051ac <HAL_GetTick>
 80082f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f2:	e00a      	b.n	800830a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f4:	f7fc ff5a 	bl	80051ac <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e095      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830a:	4b4e      	ldr	r3, [pc, #312]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 020c 	and.w	r2, r3, #12
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	429a      	cmp	r2, r3
 800831a:	d1eb      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d023      	beq.n	8008370 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008334:	4b43      	ldr	r3, [pc, #268]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	4a42      	ldr	r2, [pc, #264]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800833a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800833e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800834c:	4b3d      	ldr	r3, [pc, #244]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008354:	4a3b      	ldr	r2, [pc, #236]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800835a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800835c:	4b39      	ldr	r3, [pc, #228]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4936      	ldr	r1, [pc, #216]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800836a:	4313      	orrs	r3, r2
 800836c:	608b      	str	r3, [r1, #8]
 800836e:	e008      	b.n	8008382 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b80      	cmp	r3, #128	@ 0x80
 8008374:	d105      	bne.n	8008382 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008376:	4b33      	ldr	r3, [pc, #204]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	4a32      	ldr	r2, [pc, #200]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 800837c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008380:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008382:	4b2f      	ldr	r3, [pc, #188]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d21d      	bcs.n	80083cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008390:	4b2b      	ldr	r3, [pc, #172]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f023 020f 	bic.w	r2, r3, #15
 8008398:	4929      	ldr	r1, [pc, #164]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083a0:	f7fc ff04 	bl	80051ac <HAL_GetTick>
 80083a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a6:	e00a      	b.n	80083be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a8:	f7fc ff00 	bl	80051ac <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e03b      	b.n	8008436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083be:	4b20      	ldr	r3, [pc, #128]	@ (8008440 <HAL_RCC_ClockConfig+0x260>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d1ed      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4917      	ldr	r1, [pc, #92]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083f6:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	490f      	ldr	r1, [pc, #60]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008406:	4313      	orrs	r3, r2
 8008408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800840a:	f000 f825 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 800840e:	4602      	mov	r2, r0
 8008410:	4b0c      	ldr	r3, [pc, #48]	@ (8008444 <HAL_RCC_ClockConfig+0x264>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	091b      	lsrs	r3, r3, #4
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	490c      	ldr	r1, [pc, #48]	@ (800844c <HAL_RCC_ClockConfig+0x26c>)
 800841c:	5ccb      	ldrb	r3, [r1, r3]
 800841e:	f003 031f 	and.w	r3, r3, #31
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	4a0a      	ldr	r2, [pc, #40]	@ (8008450 <HAL_RCC_ClockConfig+0x270>)
 8008428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800842a:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <HAL_RCC_ClockConfig+0x274>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fc fe70 	bl	8005114 <HAL_InitTick>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40022000 	.word	0x40022000
 8008444:	40021000 	.word	0x40021000
 8008448:	04c4b400 	.word	0x04c4b400
 800844c:	0800f228 	.word	0x0800f228
 8008450:	20000220 	.word	0x20000220
 8008454:	20000224 	.word	0x20000224

08008458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800845e:	4b2c      	ldr	r3, [pc, #176]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 030c 	and.w	r3, r3, #12
 8008466:	2b04      	cmp	r3, #4
 8008468:	d102      	bne.n	8008470 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800846a:	4b2a      	ldr	r3, [pc, #168]	@ (8008514 <HAL_RCC_GetSysClockFreq+0xbc>)
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	e047      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008470:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 030c 	and.w	r3, r3, #12
 8008478:	2b08      	cmp	r3, #8
 800847a:	d102      	bne.n	8008482 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800847c:	4b26      	ldr	r3, [pc, #152]	@ (8008518 <HAL_RCC_GetSysClockFreq+0xc0>)
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	e03e      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008482:	4b23      	ldr	r3, [pc, #140]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 030c 	and.w	r3, r3, #12
 800848a:	2b0c      	cmp	r3, #12
 800848c:	d136      	bne.n	80084fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800848e:	4b20      	ldr	r3, [pc, #128]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008498:	4b1d      	ldr	r3, [pc, #116]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	091b      	lsrs	r3, r3, #4
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d10c      	bne.n	80084c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	4a16      	ldr	r2, [pc, #88]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084b6:	68d2      	ldr	r2, [r2, #12]
 80084b8:	0a12      	lsrs	r2, r2, #8
 80084ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80084be:	fb02 f303 	mul.w	r3, r2, r3
 80084c2:	617b      	str	r3, [r7, #20]
      break;
 80084c4:	e00c      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084c6:	4a13      	ldr	r2, [pc, #76]	@ (8008514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ce:	4a10      	ldr	r2, [pc, #64]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d0:	68d2      	ldr	r2, [r2, #12]
 80084d2:	0a12      	lsrs	r2, r2, #8
 80084d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	617b      	str	r3, [r7, #20]
      break;
 80084de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	0e5b      	lsrs	r3, r3, #25
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	3301      	adds	r3, #1
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	e001      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008500:	693b      	ldr	r3, [r7, #16]
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40021000 	.word	0x40021000
 8008514:	00f42400 	.word	0x00f42400
 8008518:	016e3600 	.word	0x016e3600

0800851c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008520:	4b03      	ldr	r3, [pc, #12]	@ (8008530 <HAL_RCC_GetHCLKFreq+0x14>)
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000220 	.word	0x20000220

08008534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008538:	f7ff fff0 	bl	800851c <HAL_RCC_GetHCLKFreq>
 800853c:	4602      	mov	r2, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	4904      	ldr	r1, [pc, #16]	@ (800855c <HAL_RCC_GetPCLK1Freq+0x28>)
 800854a:	5ccb      	ldrb	r3, [r1, r3]
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40021000 	.word	0x40021000
 800855c:	0800f238 	.word	0x0800f238

08008560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008564:	f7ff ffda 	bl	800851c <HAL_RCC_GetHCLKFreq>
 8008568:	4602      	mov	r2, r0
 800856a:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	0adb      	lsrs	r3, r3, #11
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	4904      	ldr	r1, [pc, #16]	@ (8008588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008576:	5ccb      	ldrb	r3, [r1, r3]
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000
 8008588:	0800f238 	.word	0x0800f238

0800858c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008592:	4b1e      	ldr	r3, [pc, #120]	@ (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800859c:	4b1b      	ldr	r3, [pc, #108]	@ (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d10c      	bne.n	80085ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085b0:	4a17      	ldr	r2, [pc, #92]	@ (8008610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b8:	4a14      	ldr	r2, [pc, #80]	@ (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ba:	68d2      	ldr	r2, [r2, #12]
 80085bc:	0a12      	lsrs	r2, r2, #8
 80085be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	617b      	str	r3, [r7, #20]
    break;
 80085c8:	e00c      	b.n	80085e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085ca:	4a12      	ldr	r2, [pc, #72]	@ (8008614 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d2:	4a0e      	ldr	r2, [pc, #56]	@ (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085d4:	68d2      	ldr	r2, [r2, #12]
 80085d6:	0a12      	lsrs	r2, r2, #8
 80085d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085dc:	fb02 f303 	mul.w	r3, r2, r3
 80085e0:	617b      	str	r3, [r7, #20]
    break;
 80085e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085e4:	4b09      	ldr	r3, [pc, #36]	@ (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	0e5b      	lsrs	r3, r3, #25
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	3301      	adds	r3, #1
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80085fe:	687b      	ldr	r3, [r7, #4]
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	40021000 	.word	0x40021000
 8008610:	016e3600 	.word	0x016e3600
 8008614:	00f42400 	.word	0x00f42400

08008618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008620:	2300      	movs	r3, #0
 8008622:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008624:	2300      	movs	r3, #0
 8008626:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8098 	beq.w	8008766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008636:	2300      	movs	r3, #0
 8008638:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800863a:	4b43      	ldr	r3, [pc, #268]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800863e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008646:	4b40      	ldr	r3, [pc, #256]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800864a:	4a3f      	ldr	r2, [pc, #252]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800864c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008650:	6593      	str	r3, [r2, #88]	@ 0x58
 8008652:	4b3d      	ldr	r3, [pc, #244]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800865e:	2301      	movs	r3, #1
 8008660:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008662:	4b3a      	ldr	r3, [pc, #232]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a39      	ldr	r2, [pc, #228]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800866c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800866e:	f7fc fd9d 	bl	80051ac <HAL_GetTick>
 8008672:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008674:	e009      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008676:	f7fc fd99 	bl	80051ac <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d902      	bls.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	74fb      	strb	r3, [r7, #19]
        break;
 8008688:	e005      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800868a:	4b30      	ldr	r3, [pc, #192]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0ef      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008696:	7cfb      	ldrb	r3, [r7, #19]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d159      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800869c:	4b2a      	ldr	r3, [pc, #168]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01e      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d019      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086b8:	4b23      	ldr	r3, [pc, #140]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086c4:	4b20      	ldr	r3, [pc, #128]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086da:	4a1b      	ldr	r2, [pc, #108]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086e4:	4a18      	ldr	r2, [pc, #96]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d016      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f6:	f7fc fd59 	bl	80051ac <HAL_GetTick>
 80086fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086fc:	e00b      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7fc fd55 	bl	80051ac <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800870c:	4293      	cmp	r3, r2
 800870e:	d902      	bls.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	74fb      	strb	r3, [r7, #19]
            break;
 8008714:	e006      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0ec      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008724:	7cfb      	ldrb	r3, [r7, #19]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800872a:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008738:	4903      	ldr	r1, [pc, #12]	@ (8008748 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008740:	e008      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008742:	7cfb      	ldrb	r3, [r7, #19]
 8008744:	74bb      	strb	r3, [r7, #18]
 8008746:	e005      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008748:	40021000 	.word	0x40021000
 800874c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008750:	7cfb      	ldrb	r3, [r7, #19]
 8008752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008754:	7c7b      	ldrb	r3, [r7, #17]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d105      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800875a:	4ba7      	ldr	r3, [pc, #668]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800875c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800875e:	4aa6      	ldr	r2, [pc, #664]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008764:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008772:	4ba1      	ldr	r3, [pc, #644]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008778:	f023 0203 	bic.w	r2, r3, #3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	499d      	ldr	r1, [pc, #628]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008782:	4313      	orrs	r3, r2
 8008784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008794:	4b98      	ldr	r3, [pc, #608]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879a:	f023 020c 	bic.w	r2, r3, #12
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4995      	ldr	r1, [pc, #596]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087b6:	4b90      	ldr	r3, [pc, #576]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	498c      	ldr	r1, [pc, #560]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0308 	and.w	r3, r3, #8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087d8:	4b87      	ldr	r3, [pc, #540]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	4984      	ldr	r1, [pc, #528]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087fa:	4b7f      	ldr	r3, [pc, #508]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	497b      	ldr	r1, [pc, #492]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800881c:	4b76      	ldr	r3, [pc, #472]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008822:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	4973      	ldr	r1, [pc, #460]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800882c:	4313      	orrs	r3, r2
 800882e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800883e:	4b6e      	ldr	r3, [pc, #440]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008844:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	496a      	ldr	r1, [pc, #424]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008860:	4b65      	ldr	r3, [pc, #404]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008866:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	4962      	ldr	r1, [pc, #392]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008870:	4313      	orrs	r3, r2
 8008872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008882:	4b5d      	ldr	r3, [pc, #372]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008888:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	4959      	ldr	r1, [pc, #356]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088a4:	4b54      	ldr	r3, [pc, #336]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088aa:	f023 0203 	bic.w	r2, r3, #3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b2:	4951      	ldr	r1, [pc, #324]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088c6:	4b4c      	ldr	r3, [pc, #304]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	4948      	ldr	r1, [pc, #288]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d015      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088e8:	4b43      	ldr	r3, [pc, #268]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	4940      	ldr	r1, [pc, #256]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008906:	d105      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008908:	4b3b      	ldr	r3, [pc, #236]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	4a3a      	ldr	r2, [pc, #232]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008912:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800891c:	2b00      	cmp	r3, #0
 800891e:	d015      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008920:	4b35      	ldr	r3, [pc, #212]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008926:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800892e:	4932      	ldr	r1, [pc, #200]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800893e:	d105      	bne.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008940:	4b2d      	ldr	r3, [pc, #180]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	4a2c      	ldr	r2, [pc, #176]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800894a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d015      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008958:	4b27      	ldr	r3, [pc, #156]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	4924      	ldr	r1, [pc, #144]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008976:	d105      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008978:	4b1f      	ldr	r3, [pc, #124]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	4a1e      	ldr	r2, [pc, #120]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008982:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d015      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008990:	4b19      	ldr	r3, [pc, #100]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008996:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899e:	4916      	ldr	r1, [pc, #88]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ae:	d105      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089b0:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	4a10      	ldr	r2, [pc, #64]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d019      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089c8:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	4908      	ldr	r1, [pc, #32]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e6:	d109      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089e8:	4b03      	ldr	r3, [pc, #12]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	4a02      	ldr	r2, [pc, #8]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089f2:	60d3      	str	r3, [r2, #12]
 80089f4:	e002      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80089f6:	bf00      	nop
 80089f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d015      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008a08:	4b29      	ldr	r3, [pc, #164]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a16:	4926      	ldr	r1, [pc, #152]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a26:	d105      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a28:	4b21      	ldr	r3, [pc, #132]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4a20      	ldr	r2, [pc, #128]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d015      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008a40:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a4e:	4918      	ldr	r1, [pc, #96]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5e:	d105      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a60:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	4a12      	ldr	r2, [pc, #72]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d015      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a78:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a86:	490a      	ldr	r1, [pc, #40]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a96:	d105      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a98:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	4a04      	ldr	r2, [pc, #16]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	40021000 	.word	0x40021000

08008ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e054      	b.n	8008b70 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d111      	bne.n	8008af6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 ff92 	bl	800aa04 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a23      	ldr	r2, [pc, #140]	@ (8008b78 <HAL_TIM_Base_Init+0xc4>)
 8008aec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f001 fadb 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	08004a65 	.word	0x08004a65

08008b7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d001      	beq.n	8008b94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e04c      	b.n	8008c2e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a26      	ldr	r2, [pc, #152]	@ (8008c3c <HAL_TIM_Base_Start+0xc0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d022      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bae:	d01d      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a22      	ldr	r2, [pc, #136]	@ (8008c40 <HAL_TIM_Base_Start+0xc4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d018      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a21      	ldr	r2, [pc, #132]	@ (8008c44 <HAL_TIM_Base_Start+0xc8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d013      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8008c48 <HAL_TIM_Base_Start+0xcc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00e      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c4c <HAL_TIM_Base_Start+0xd0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d009      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c50 <HAL_TIM_Base_Start+0xd4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d004      	beq.n	8008bec <HAL_TIM_Base_Start+0x70>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c54 <HAL_TIM_Base_Start+0xd8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d115      	bne.n	8008c18 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	4b19      	ldr	r3, [pc, #100]	@ (8008c58 <HAL_TIM_Base_Start+0xdc>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b06      	cmp	r3, #6
 8008bfc:	d015      	beq.n	8008c2a <HAL_TIM_Base_Start+0xae>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c04:	d011      	beq.n	8008c2a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f042 0201 	orr.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c16:	e008      	b.n	8008c2a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e000      	b.n	8008c2c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40013400 	.word	0x40013400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40015000 	.word	0x40015000
 8008c58:	00010007 	.word	0x00010007

08008c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d001      	beq.n	8008c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e054      	b.n	8008d1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a26      	ldr	r2, [pc, #152]	@ (8008d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d022      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9e:	d01d      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a22      	ldr	r2, [pc, #136]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a21      	ldr	r2, [pc, #132]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d3c <HAL_TIM_Base_Start_IT+0xe0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8008d40 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d44 <HAL_TIM_Base_Start_IT+0xe8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d115      	bne.n	8008d08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	4b19      	ldr	r3, [pc, #100]	@ (8008d48 <HAL_TIM_Base_Start_IT+0xec>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d015      	beq.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cf4:	d011      	beq.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0201 	orr.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	e008      	b.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40012c00 	.word	0x40012c00
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40013400 	.word	0x40013400
 8008d40:	40014000 	.word	0x40014000
 8008d44:	40015000 	.word	0x40015000
 8008d48:	00010007 	.word	0x00010007

08008d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e054      	b.n	8008e08 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d111      	bne.n	8008d8e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fe46 	bl	800aa04 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a23      	ldr	r2, [pc, #140]	@ (8008e10 <HAL_TIM_PWM_Init+0xc4>)
 8008d84:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f001 f98f 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	08008e15 	.word	0x08008e15

08008e14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d109      	bne.n	8008e4c <HAL_TIM_PWM_Start+0x24>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	bf14      	ite	ne
 8008e44:	2301      	movne	r3, #1
 8008e46:	2300      	moveq	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	e03c      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x9e>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d109      	bne.n	8008e66 <HAL_TIM_PWM_Start+0x3e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	bf14      	ite	ne
 8008e5e:	2301      	movne	r3, #1
 8008e60:	2300      	moveq	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	e02f      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x9e>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d109      	bne.n	8008e80 <HAL_TIM_PWM_Start+0x58>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	bf14      	ite	ne
 8008e78:	2301      	movne	r3, #1
 8008e7a:	2300      	moveq	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	e022      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x9e>
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b0c      	cmp	r3, #12
 8008e84:	d109      	bne.n	8008e9a <HAL_TIM_PWM_Start+0x72>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	e015      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x9e>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d109      	bne.n	8008eb4 <HAL_TIM_PWM_Start+0x8c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	bf14      	ite	ne
 8008eac:	2301      	movne	r3, #1
 8008eae:	2300      	moveq	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	e008      	b.n	8008ec6 <HAL_TIM_PWM_Start+0x9e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e0a6      	b.n	800901c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <HAL_TIM_PWM_Start+0xb6>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008edc:	e023      	b.n	8008f26 <HAL_TIM_PWM_Start+0xfe>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d104      	bne.n	8008eee <HAL_TIM_PWM_Start+0xc6>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eec:	e01b      	b.n	8008f26 <HAL_TIM_PWM_Start+0xfe>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	d104      	bne.n	8008efe <HAL_TIM_PWM_Start+0xd6>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008efc:	e013      	b.n	8008f26 <HAL_TIM_PWM_Start+0xfe>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b0c      	cmp	r3, #12
 8008f02:	d104      	bne.n	8008f0e <HAL_TIM_PWM_Start+0xe6>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f0c:	e00b      	b.n	8008f26 <HAL_TIM_PWM_Start+0xfe>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d104      	bne.n	8008f1e <HAL_TIM_PWM_Start+0xf6>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f1c:	e003      	b.n	8008f26 <HAL_TIM_PWM_Start+0xfe>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 fd42 	bl	800a9b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a3a      	ldr	r2, [pc, #232]	@ (8009024 <HAL_TIM_PWM_Start+0x1fc>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d018      	beq.n	8008f70 <HAL_TIM_PWM_Start+0x148>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a39      	ldr	r2, [pc, #228]	@ (8009028 <HAL_TIM_PWM_Start+0x200>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d013      	beq.n	8008f70 <HAL_TIM_PWM_Start+0x148>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a37      	ldr	r2, [pc, #220]	@ (800902c <HAL_TIM_PWM_Start+0x204>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00e      	beq.n	8008f70 <HAL_TIM_PWM_Start+0x148>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a36      	ldr	r2, [pc, #216]	@ (8009030 <HAL_TIM_PWM_Start+0x208>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d009      	beq.n	8008f70 <HAL_TIM_PWM_Start+0x148>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a34      	ldr	r2, [pc, #208]	@ (8009034 <HAL_TIM_PWM_Start+0x20c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d004      	beq.n	8008f70 <HAL_TIM_PWM_Start+0x148>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a33      	ldr	r2, [pc, #204]	@ (8009038 <HAL_TIM_PWM_Start+0x210>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d101      	bne.n	8008f74 <HAL_TIM_PWM_Start+0x14c>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e000      	b.n	8008f76 <HAL_TIM_PWM_Start+0x14e>
 8008f74:	2300      	movs	r3, #0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a25      	ldr	r2, [pc, #148]	@ (8009024 <HAL_TIM_PWM_Start+0x1fc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d022      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9c:	d01d      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a26      	ldr	r2, [pc, #152]	@ (800903c <HAL_TIM_PWM_Start+0x214>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d018      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a24      	ldr	r2, [pc, #144]	@ (8009040 <HAL_TIM_PWM_Start+0x218>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d013      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a23      	ldr	r2, [pc, #140]	@ (8009044 <HAL_TIM_PWM_Start+0x21c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00e      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a19      	ldr	r2, [pc, #100]	@ (8009028 <HAL_TIM_PWM_Start+0x200>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d009      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a18      	ldr	r2, [pc, #96]	@ (800902c <HAL_TIM_PWM_Start+0x204>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d004      	beq.n	8008fda <HAL_TIM_PWM_Start+0x1b2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	@ (8009038 <HAL_TIM_PWM_Start+0x210>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d115      	bne.n	8009006 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	4b19      	ldr	r3, [pc, #100]	@ (8009048 <HAL_TIM_PWM_Start+0x220>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b06      	cmp	r3, #6
 8008fea:	d015      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1f0>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff2:	d011      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009004:	e008      	b.n	8009018 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0201 	orr.w	r2, r2, #1
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e000      	b.n	800901a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800
 8009038:	40015000 	.word	0x40015000
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	00010007 	.word	0x00010007

0800904c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e04c      	b.n	80090fa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d111      	bne.n	8009090 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 fcc5 	bl	800aa04 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1f      	ldr	r2, [pc, #124]	@ (8009104 <HAL_TIM_OnePulse_Init+0xb8>)
 8009086:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f001 f80e 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0208 	bic.w	r2, r2, #8
 80090b6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6819      	ldr	r1, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	08009109 	.word	0x08009109

08009108 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800912c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009134:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009144:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d108      	bne.n	800915e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d105      	bne.n	800915e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009152:	7b7b      	ldrb	r3, [r7, #13]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d102      	bne.n	800915e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009158:	7b3b      	ldrb	r3, [r7, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d001      	beq.n	8009162 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e059      	b.n	8009216 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2202      	movs	r2, #2
 800917e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0202 	orr.w	r2, r2, #2
 8009190:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0204 	orr.w	r2, r2, #4
 80091a0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2201      	movs	r2, #1
 80091a8:	2100      	movs	r1, #0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 fc04 	bl	800a9b8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	2104      	movs	r1, #4
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 fbfd 	bl	800a9b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a17      	ldr	r2, [pc, #92]	@ (8009220 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d018      	beq.n	80091fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d013      	beq.n	80091fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a14      	ldr	r2, [pc, #80]	@ (8009228 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00e      	beq.n	80091fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a12      	ldr	r2, [pc, #72]	@ (800922c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d009      	beq.n	80091fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a11      	ldr	r2, [pc, #68]	@ (8009230 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009234 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_OnePulse_Start_IT+0xe2>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d007      	beq.n	8009214 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009212:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	40012c00 	.word	0x40012c00
 8009224:	40013400 	.word	0x40013400
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800
 8009234:	40015000 	.word	0x40015000

08009238 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0a2      	b.n	8009392 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d111      	bne.n	800927c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fbcf 	bl	800aa04 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a4a      	ldr	r2, [pc, #296]	@ (800939c <HAL_TIM_Encoder_Init+0x164>)
 8009272:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009292:	f023 0307 	bic.w	r3, r3, #7
 8009296:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f000 ff0e 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092d0:	f023 0303 	bic.w	r3, r3, #3
 80092d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	4313      	orrs	r3, r2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80092ee:	f023 030c 	bic.w	r3, r3, #12
 80092f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	4313      	orrs	r3, r2
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	011a      	lsls	r2, r3, #4
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	031b      	lsls	r3, r3, #12
 800931e:	4313      	orrs	r3, r2
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800932c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009334:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	4313      	orrs	r3, r2
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	08004bc9 	.word	0x08004bc9

080093a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80093b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d110      	bne.n	80093f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d102      	bne.n	80093dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80093d6:	7b7b      	ldrb	r3, [r7, #13]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d001      	beq.n	80093e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e069      	b.n	80094b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093f0:	e031      	b.n	8009456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d110      	bne.n	800941a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d102      	bne.n	8009404 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093fe:	7b3b      	ldrb	r3, [r7, #12]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d001      	beq.n	8009408 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e055      	b.n	80094b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009418:	e01d      	b.n	8009456 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d108      	bne.n	8009432 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d105      	bne.n	8009432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009426:	7b7b      	ldrb	r3, [r7, #13]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d102      	bne.n	8009432 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800942c:	7b3b      	ldrb	r3, [r7, #12]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d001      	beq.n	8009436 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e03e      	b.n	80094b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2202      	movs	r2, #2
 800943a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2202      	movs	r2, #2
 800944a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_TIM_Encoder_Start+0xc4>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b04      	cmp	r3, #4
 8009460:	d008      	beq.n	8009474 <HAL_TIM_Encoder_Start+0xd4>
 8009462:	e00f      	b.n	8009484 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2201      	movs	r2, #1
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f001 faa3 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 8009472:	e016      	b.n	80094a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2201      	movs	r2, #1
 800947a:	2104      	movs	r1, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f001 fa9b 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 8009482:	e00e      	b.n	80094a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2201      	movs	r2, #1
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fa93 	bl	800a9b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2201      	movs	r2, #1
 8009498:	2104      	movs	r1, #4
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fa8c 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 80094a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <HAL_TIM_Encoder_Stop+0x18>
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d008      	beq.n	80094e4 <HAL_TIM_Encoder_Stop+0x28>
 80094d2:	e00f      	b.n	80094f4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2200      	movs	r2, #0
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 fa6b 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 80094e2:	e016      	b.n	8009512 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2200      	movs	r2, #0
 80094ea:	2104      	movs	r1, #4
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 fa63 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 80094f2:	e00e      	b.n	8009512 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fa5b 	bl	800a9b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2200      	movs	r2, #0
 8009508:	2104      	movs	r1, #4
 800950a:	4618      	mov	r0, r3
 800950c:	f001 fa54 	bl	800a9b8 <TIM_CCxChannelCmd>
      break;
 8009510:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6a1a      	ldr	r2, [r3, #32]
 8009518:	f241 1311 	movw	r3, #4369	@ 0x1111
 800951c:	4013      	ands	r3, r2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10f      	bne.n	8009542 <HAL_TIM_Encoder_Stop+0x86>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	f244 4344 	movw	r3, #17476	@ 0x4444
 800952c:	4013      	ands	r3, r2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <HAL_TIM_Encoder_Stop+0x86>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0201 	bic.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <HAL_TIM_Encoder_Stop+0x92>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b04      	cmp	r3, #4
 800954c:	d148      	bne.n	80095e0 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <HAL_TIM_Encoder_Stop+0xa2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800955c:	e023      	b.n	80095a6 <HAL_TIM_Encoder_Stop+0xea>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b04      	cmp	r3, #4
 8009562:	d104      	bne.n	800956e <HAL_TIM_Encoder_Stop+0xb2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800956c:	e01b      	b.n	80095a6 <HAL_TIM_Encoder_Stop+0xea>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d104      	bne.n	800957e <HAL_TIM_Encoder_Stop+0xc2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800957c:	e013      	b.n	80095a6 <HAL_TIM_Encoder_Stop+0xea>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b0c      	cmp	r3, #12
 8009582:	d104      	bne.n	800958e <HAL_TIM_Encoder_Stop+0xd2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800958c:	e00b      	b.n	80095a6 <HAL_TIM_Encoder_Stop+0xea>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b10      	cmp	r3, #16
 8009592:	d104      	bne.n	800959e <HAL_TIM_Encoder_Stop+0xe2>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800959c:	e003      	b.n	80095a6 <HAL_TIM_Encoder_Stop+0xea>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <HAL_TIM_Encoder_Stop+0xfa>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b4:	e024      	b.n	8009600 <HAL_TIM_Encoder_Stop+0x144>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d104      	bne.n	80095c6 <HAL_TIM_Encoder_Stop+0x10a>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095c4:	e01c      	b.n	8009600 <HAL_TIM_Encoder_Stop+0x144>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d104      	bne.n	80095d6 <HAL_TIM_Encoder_Stop+0x11a>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095d4:	e014      	b.n	8009600 <HAL_TIM_Encoder_Stop+0x144>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80095de:	e00f      	b.n	8009600 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d026      	beq.n	800967a <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d021      	beq.n	800967a <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f06f 0202 	mvn.w	r2, #2
 800963e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 0303 	and.w	r3, r3, #3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
 800965e:	e009      	b.n	8009674 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d026      	beq.n	80096d2 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0304 	and.w	r3, r3, #4
 800968a:	2b00      	cmp	r3, #0
 800968c:	d021      	beq.n	80096d2 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f06f 0204 	mvn.w	r2, #4
 8009696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	e009      	b.n	80096cc <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d026      	beq.n	800972a <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f003 0308 	and.w	r3, r3, #8
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d021      	beq.n	800972a <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f06f 0208 	mvn.w	r2, #8
 80096ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2204      	movs	r2, #4
 80096f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
 800970e:	e009      	b.n	8009724 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	2b00      	cmp	r3, #0
 8009732:	d026      	beq.n	8009782 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	d021      	beq.n	8009782 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0210 	mvn.w	r2, #16
 8009746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2208      	movs	r2, #8
 800974c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
 8009766:	e009      	b.n	800977c <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00e      	beq.n	80097aa <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f06f 0201 	mvn.w	r2, #1
 800979e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d009      	beq.n	80097dc <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80097d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d009      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80097f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00e      	beq.n	800982c <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00e      	beq.n	8009854 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f06f 0220 	mvn.w	r2, #32
 8009848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80098c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00e      	beq.n	80098f4 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80098e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009916:	2302      	movs	r3, #2
 8009918:	e0ff      	b.n	8009b1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b14      	cmp	r3, #20
 8009926:	f200 80f0 	bhi.w	8009b0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009985 	.word	0x08009985
 8009934:	08009b0b 	.word	0x08009b0b
 8009938:	08009b0b 	.word	0x08009b0b
 800993c:	08009b0b 	.word	0x08009b0b
 8009940:	080099c5 	.word	0x080099c5
 8009944:	08009b0b 	.word	0x08009b0b
 8009948:	08009b0b 	.word	0x08009b0b
 800994c:	08009b0b 	.word	0x08009b0b
 8009950:	08009a07 	.word	0x08009a07
 8009954:	08009b0b 	.word	0x08009b0b
 8009958:	08009b0b 	.word	0x08009b0b
 800995c:	08009b0b 	.word	0x08009b0b
 8009960:	08009a47 	.word	0x08009a47
 8009964:	08009b0b 	.word	0x08009b0b
 8009968:	08009b0b 	.word	0x08009b0b
 800996c:	08009b0b 	.word	0x08009b0b
 8009970:	08009a89 	.word	0x08009a89
 8009974:	08009b0b 	.word	0x08009b0b
 8009978:	08009b0b 	.word	0x08009b0b
 800997c:	08009b0b 	.word	0x08009b0b
 8009980:	08009ac9 	.word	0x08009ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fc4e 	bl	800a22c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0208 	orr.w	r2, r2, #8
 800999e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0204 	bic.w	r2, r2, #4
 80099ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6999      	ldr	r1, [r3, #24]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	619a      	str	r2, [r3, #24]
      break;
 80099c2:	e0a5      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fcc8 	bl	800a360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6999      	ldr	r1, [r3, #24]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	619a      	str	r2, [r3, #24]
      break;
 8009a04:	e084      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fd3b 	bl	800a488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0208 	orr.w	r2, r2, #8
 8009a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0204 	bic.w	r2, r2, #4
 8009a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69d9      	ldr	r1, [r3, #28]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	61da      	str	r2, [r3, #28]
      break;
 8009a44:	e064      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fdad 	bl	800a5ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69d9      	ldr	r1, [r3, #28]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	021a      	lsls	r2, r3, #8
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	61da      	str	r2, [r3, #28]
      break;
 8009a86:	e043      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fe20 	bl	800a6d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0208 	orr.w	r2, r2, #8
 8009aa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0204 	bic.w	r2, r2, #4
 8009ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009ac6:	e023      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fe6a 	bl	800a7a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ae2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009af2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	021a      	lsls	r2, r3, #8
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009b08:	e002      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop

08009b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d101      	bne.n	8009b40 <HAL_TIM_ConfigClockSource+0x1c>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e0f6      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x20a>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009b5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a6f      	ldr	r2, [pc, #444]	@ (8009d38 <HAL_TIM_ConfigClockSource+0x214>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	f000 80c1 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b80:	4a6d      	ldr	r2, [pc, #436]	@ (8009d38 <HAL_TIM_ConfigClockSource+0x214>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f200 80c6 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b88:	4a6c      	ldr	r2, [pc, #432]	@ (8009d3c <HAL_TIM_ConfigClockSource+0x218>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f000 80b9 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009b90:	4a6a      	ldr	r2, [pc, #424]	@ (8009d3c <HAL_TIM_ConfigClockSource+0x218>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	f200 80be 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b98:	4a69      	ldr	r2, [pc, #420]	@ (8009d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	f000 80b1 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009ba0:	4a67      	ldr	r2, [pc, #412]	@ (8009d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f200 80b6 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ba8:	4a66      	ldr	r2, [pc, #408]	@ (8009d44 <HAL_TIM_ConfigClockSource+0x220>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f000 80a9 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009bb0:	4a64      	ldr	r2, [pc, #400]	@ (8009d44 <HAL_TIM_ConfigClockSource+0x220>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	f200 80ae 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bb8:	4a63      	ldr	r2, [pc, #396]	@ (8009d48 <HAL_TIM_ConfigClockSource+0x224>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f000 80a1 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009bc0:	4a61      	ldr	r2, [pc, #388]	@ (8009d48 <HAL_TIM_ConfigClockSource+0x224>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	f200 80a6 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bc8:	4a60      	ldr	r2, [pc, #384]	@ (8009d4c <HAL_TIM_ConfigClockSource+0x228>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	f000 8099 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8009d4c <HAL_TIM_ConfigClockSource+0x228>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f200 809e 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009bdc:	f000 8091 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009be0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009be4:	f200 8096 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bec:	f000 8089 	beq.w	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bf4:	f200 808e 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bfc:	d03e      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x158>
 8009bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c02:	f200 8087 	bhi.w	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c0a:	f000 8086 	beq.w	8009d1a <HAL_TIM_ConfigClockSource+0x1f6>
 8009c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c12:	d87f      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c14:	2b70      	cmp	r3, #112	@ 0x70
 8009c16:	d01a      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x12a>
 8009c18:	2b70      	cmp	r3, #112	@ 0x70
 8009c1a:	d87b      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c1c:	2b60      	cmp	r3, #96	@ 0x60
 8009c1e:	d050      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x19e>
 8009c20:	2b60      	cmp	r3, #96	@ 0x60
 8009c22:	d877      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c24:	2b50      	cmp	r3, #80	@ 0x50
 8009c26:	d03c      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0x17e>
 8009c28:	2b50      	cmp	r3, #80	@ 0x50
 8009c2a:	d873      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c2c:	2b40      	cmp	r3, #64	@ 0x40
 8009c2e:	d058      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x1be>
 8009c30:	2b40      	cmp	r3, #64	@ 0x40
 8009c32:	d86f      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c34:	2b30      	cmp	r3, #48	@ 0x30
 8009c36:	d064      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009c38:	2b30      	cmp	r3, #48	@ 0x30
 8009c3a:	d86b      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d060      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d867      	bhi.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d05c      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d05a      	beq.n	8009d02 <HAL_TIM_ConfigClockSource+0x1de>
 8009c4c:	e062      	b.n	8009d14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c5e:	f000 fe8b 	bl	800a978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	609a      	str	r2, [r3, #8]
      break;
 8009c7a:	e04f      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c8c:	f000 fe74 	bl	800a978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c9e:	609a      	str	r2, [r3, #8]
      break;
 8009ca0:	e03c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 fde6 	bl	800a880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2150      	movs	r1, #80	@ 0x50
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 fe3f 	bl	800a93e <TIM_ITRx_SetConfig>
      break;
 8009cc0:	e02c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f000 fe05 	bl	800a8de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2160      	movs	r1, #96	@ 0x60
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fe2f 	bl	800a93e <TIM_ITRx_SetConfig>
      break;
 8009ce0:	e01c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f000 fdc6 	bl	800a880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2140      	movs	r1, #64	@ 0x40
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fe1f 	bl	800a93e <TIM_ITRx_SetConfig>
      break;
 8009d00:	e00c      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f000 fe16 	bl	800a93e <TIM_ITRx_SetConfig>
      break;
 8009d12:	e003      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
      break;
 8009d18:	e000      	b.n	8009d1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	00100070 	.word	0x00100070
 8009d3c:	00100060 	.word	0x00100060
 8009d40:	00100050 	.word	0x00100050
 8009d44:	00100040 	.word	0x00100040
 8009d48:	00100030 	.word	0x00100030
 8009d4c:	00100020 	.word	0x00100020

08009d50 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e14a      	b.n	800a0b6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	f040 80dd 	bne.w	8009fe8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	2b1f      	cmp	r3, #31
 8009e32:	f200 80d6 	bhi.w	8009fe2 <HAL_TIM_RegisterCallback+0x1de>
 8009e36:	a201      	add	r2, pc, #4	@ (adr r2, 8009e3c <HAL_TIM_RegisterCallback+0x38>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009ebd 	.word	0x08009ebd
 8009e40:	08009ec5 	.word	0x08009ec5
 8009e44:	08009ecd 	.word	0x08009ecd
 8009e48:	08009ed5 	.word	0x08009ed5
 8009e4c:	08009edd 	.word	0x08009edd
 8009e50:	08009ee5 	.word	0x08009ee5
 8009e54:	08009eed 	.word	0x08009eed
 8009e58:	08009ef5 	.word	0x08009ef5
 8009e5c:	08009efd 	.word	0x08009efd
 8009e60:	08009f05 	.word	0x08009f05
 8009e64:	08009f0d 	.word	0x08009f0d
 8009e68:	08009f15 	.word	0x08009f15
 8009e6c:	08009f1d 	.word	0x08009f1d
 8009e70:	08009f25 	.word	0x08009f25
 8009e74:	08009f2f 	.word	0x08009f2f
 8009e78:	08009f39 	.word	0x08009f39
 8009e7c:	08009f43 	.word	0x08009f43
 8009e80:	08009f4d 	.word	0x08009f4d
 8009e84:	08009f57 	.word	0x08009f57
 8009e88:	08009f61 	.word	0x08009f61
 8009e8c:	08009f6b 	.word	0x08009f6b
 8009e90:	08009f75 	.word	0x08009f75
 8009e94:	08009f7f 	.word	0x08009f7f
 8009e98:	08009f89 	.word	0x08009f89
 8009e9c:	08009f93 	.word	0x08009f93
 8009ea0:	08009f9d 	.word	0x08009f9d
 8009ea4:	08009fa7 	.word	0x08009fa7
 8009ea8:	08009fb1 	.word	0x08009fb1
 8009eac:	08009fbb 	.word	0x08009fbb
 8009eb0:	08009fc5 	.word	0x08009fc5
 8009eb4:	08009fcf 	.word	0x08009fcf
 8009eb8:	08009fd9 	.word	0x08009fd9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009ec2:	e0f7      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009eca:	e0f3      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009ed2:	e0ef      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009eda:	e0eb      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009ee2:	e0e7      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009eea:	e0e3      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009ef2:	e0df      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009efa:	e0db      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009f02:	e0d7      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009f0a:	e0d3      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009f12:	e0cf      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009f1a:	e0cb      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009f22:	e0c7      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009f2c:	e0c2      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009f36:	e0bd      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009f40:	e0b8      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009f4a:	e0b3      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009f54:	e0ae      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009f5e:	e0a9      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f68:	e0a4      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f72:	e09f      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f7c:	e09a      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f86:	e095      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009f90:	e090      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009f9a:	e08b      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009fa4:	e086      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009fae:	e081      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009fb8:	e07c      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009fc2:	e077      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009fcc:	e072      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009fd6:	e06d      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fe0:	e068      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
        break;
 8009fe6:	e065      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d15d      	bne.n	800a0b0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	2b0d      	cmp	r3, #13
 8009ff8:	d857      	bhi.n	800a0aa <HAL_TIM_RegisterCallback+0x2a6>
 8009ffa:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <HAL_TIM_RegisterCallback+0x1fc>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a039 	.word	0x0800a039
 800a004:	0800a041 	.word	0x0800a041
 800a008:	0800a049 	.word	0x0800a049
 800a00c:	0800a051 	.word	0x0800a051
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a061 	.word	0x0800a061
 800a018:	0800a069 	.word	0x0800a069
 800a01c:	0800a071 	.word	0x0800a071
 800a020:	0800a079 	.word	0x0800a079
 800a024:	0800a081 	.word	0x0800a081
 800a028:	0800a089 	.word	0x0800a089
 800a02c:	0800a091 	.word	0x0800a091
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a0a1 	.word	0x0800a0a1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a03e:	e039      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a046:	e035      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a04e:	e031      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a056:	e02d      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a05e:	e029      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a066:	e025      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a06e:	e021      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a076:	e01d      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a07e:	e019      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a086:	e015      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a08e:	e011      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a096:	e00d      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a09e:	e009      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a0a8:	e004      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
        break;
 800a0ae:	e001      	b.n	800a0b4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a4c      	ldr	r2, [pc, #304]	@ (800a208 <TIM_Base_SetConfig+0x144>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d017      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e2:	d013      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a49      	ldr	r2, [pc, #292]	@ (800a20c <TIM_Base_SetConfig+0x148>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00f      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a48      	ldr	r2, [pc, #288]	@ (800a210 <TIM_Base_SetConfig+0x14c>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00b      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a47      	ldr	r2, [pc, #284]	@ (800a214 <TIM_Base_SetConfig+0x150>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d007      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a46      	ldr	r2, [pc, #280]	@ (800a218 <TIM_Base_SetConfig+0x154>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_Base_SetConfig+0x48>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a45      	ldr	r2, [pc, #276]	@ (800a21c <TIM_Base_SetConfig+0x158>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d108      	bne.n	800a11e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a39      	ldr	r2, [pc, #228]	@ (800a208 <TIM_Base_SetConfig+0x144>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d023      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12c:	d01f      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a36      	ldr	r2, [pc, #216]	@ (800a20c <TIM_Base_SetConfig+0x148>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01b      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a35      	ldr	r2, [pc, #212]	@ (800a210 <TIM_Base_SetConfig+0x14c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d017      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a34      	ldr	r2, [pc, #208]	@ (800a214 <TIM_Base_SetConfig+0x150>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a33      	ldr	r2, [pc, #204]	@ (800a218 <TIM_Base_SetConfig+0x154>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00f      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a33      	ldr	r2, [pc, #204]	@ (800a220 <TIM_Base_SetConfig+0x15c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00b      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a32      	ldr	r2, [pc, #200]	@ (800a224 <TIM_Base_SetConfig+0x160>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a31      	ldr	r2, [pc, #196]	@ (800a228 <TIM_Base_SetConfig+0x164>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_Base_SetConfig+0xaa>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a2c      	ldr	r2, [pc, #176]	@ (800a21c <TIM_Base_SetConfig+0x158>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d108      	bne.n	800a180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a18      	ldr	r2, [pc, #96]	@ (800a208 <TIM_Base_SetConfig+0x144>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d013      	beq.n	800a1d4 <TIM_Base_SetConfig+0x110>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a218 <TIM_Base_SetConfig+0x154>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00f      	beq.n	800a1d4 <TIM_Base_SetConfig+0x110>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a220 <TIM_Base_SetConfig+0x15c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00b      	beq.n	800a1d4 <TIM_Base_SetConfig+0x110>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <TIM_Base_SetConfig+0x160>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d007      	beq.n	800a1d4 <TIM_Base_SetConfig+0x110>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a18      	ldr	r2, [pc, #96]	@ (800a228 <TIM_Base_SetConfig+0x164>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_Base_SetConfig+0x110>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a13      	ldr	r2, [pc, #76]	@ (800a21c <TIM_Base_SetConfig+0x158>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d103      	bne.n	800a1dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d105      	bne.n	800a1fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f023 0201 	bic.w	r2, r3, #1
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	611a      	str	r2, [r3, #16]
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40012c00 	.word	0x40012c00
 800a20c:	40000400 	.word	0x40000400
 800a210:	40000800 	.word	0x40000800
 800a214:	40000c00 	.word	0x40000c00
 800a218:	40013400 	.word	0x40013400
 800a21c:	40015000 	.word	0x40015000
 800a220:	40014000 	.word	0x40014000
 800a224:	40014400 	.word	0x40014400
 800a228:	40014800 	.word	0x40014800

0800a22c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	f023 0201 	bic.w	r2, r3, #1
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f023 0302 	bic.w	r3, r3, #2
 800a278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a30      	ldr	r2, [pc, #192]	@ (800a348 <TIM_OC1_SetConfig+0x11c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d013      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x88>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a2f      	ldr	r2, [pc, #188]	@ (800a34c <TIM_OC1_SetConfig+0x120>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00f      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x88>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a2e      	ldr	r2, [pc, #184]	@ (800a350 <TIM_OC1_SetConfig+0x124>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00b      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x88>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a2d      	ldr	r2, [pc, #180]	@ (800a354 <TIM_OC1_SetConfig+0x128>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d007      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x88>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a2c      	ldr	r2, [pc, #176]	@ (800a358 <TIM_OC1_SetConfig+0x12c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x88>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a2b      	ldr	r2, [pc, #172]	@ (800a35c <TIM_OC1_SetConfig+0x130>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10c      	bne.n	800a2ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f023 0308 	bic.w	r3, r3, #8
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0304 	bic.w	r3, r3, #4
 800a2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a348 <TIM_OC1_SetConfig+0x11c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d013      	beq.n	800a2fe <TIM_OC1_SetConfig+0xd2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a34c <TIM_OC1_SetConfig+0x120>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00f      	beq.n	800a2fe <TIM_OC1_SetConfig+0xd2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a350 <TIM_OC1_SetConfig+0x124>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d00b      	beq.n	800a2fe <TIM_OC1_SetConfig+0xd2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a354 <TIM_OC1_SetConfig+0x128>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d007      	beq.n	800a2fe <TIM_OC1_SetConfig+0xd2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a19      	ldr	r2, [pc, #100]	@ (800a358 <TIM_OC1_SetConfig+0x12c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d003      	beq.n	800a2fe <TIM_OC1_SetConfig+0xd2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a18      	ldr	r2, [pc, #96]	@ (800a35c <TIM_OC1_SetConfig+0x130>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d111      	bne.n	800a322 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a30c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	4313      	orrs	r3, r2
 800a316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	621a      	str	r2, [r3, #32]
}
 800a33c:	bf00      	nop
 800a33e:	371c      	adds	r7, #28
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	40012c00 	.word	0x40012c00
 800a34c:	40013400 	.word	0x40013400
 800a350:	40014000 	.word	0x40014000
 800a354:	40014400 	.word	0x40014400
 800a358:	40014800 	.word	0x40014800
 800a35c:	40015000 	.word	0x40015000

0800a360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	f023 0210 	bic.w	r2, r3, #16
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f023 0320 	bic.w	r3, r3, #32
 800a3ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a2c      	ldr	r2, [pc, #176]	@ (800a470 <TIM_OC2_SetConfig+0x110>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d007      	beq.n	800a3d4 <TIM_OC2_SetConfig+0x74>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a474 <TIM_OC2_SetConfig+0x114>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_OC2_SetConfig+0x74>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a2a      	ldr	r2, [pc, #168]	@ (800a478 <TIM_OC2_SetConfig+0x118>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d10d      	bne.n	800a3f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a470 <TIM_OC2_SetConfig+0x110>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d013      	beq.n	800a420 <TIM_OC2_SetConfig+0xc0>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a474 <TIM_OC2_SetConfig+0x114>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00f      	beq.n	800a420 <TIM_OC2_SetConfig+0xc0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a1e      	ldr	r2, [pc, #120]	@ (800a47c <TIM_OC2_SetConfig+0x11c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d00b      	beq.n	800a420 <TIM_OC2_SetConfig+0xc0>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a1d      	ldr	r2, [pc, #116]	@ (800a480 <TIM_OC2_SetConfig+0x120>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d007      	beq.n	800a420 <TIM_OC2_SetConfig+0xc0>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a1c      	ldr	r2, [pc, #112]	@ (800a484 <TIM_OC2_SetConfig+0x124>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d003      	beq.n	800a420 <TIM_OC2_SetConfig+0xc0>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a17      	ldr	r2, [pc, #92]	@ (800a478 <TIM_OC2_SetConfig+0x118>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d113      	bne.n	800a448 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a42e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4313      	orrs	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	621a      	str	r2, [r3, #32]
}
 800a462:	bf00      	nop
 800a464:	371c      	adds	r7, #28
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	40012c00 	.word	0x40012c00
 800a474:	40013400 	.word	0x40013400
 800a478:	40015000 	.word	0x40015000
 800a47c:	40014000 	.word	0x40014000
 800a480:	40014400 	.word	0x40014400
 800a484:	40014800 	.word	0x40014800

0800a488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 0303 	bic.w	r3, r3, #3
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a2b      	ldr	r2, [pc, #172]	@ (800a594 <TIM_OC3_SetConfig+0x10c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d007      	beq.n	800a4fa <TIM_OC3_SetConfig+0x72>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a2a      	ldr	r2, [pc, #168]	@ (800a598 <TIM_OC3_SetConfig+0x110>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d003      	beq.n	800a4fa <TIM_OC3_SetConfig+0x72>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a29      	ldr	r2, [pc, #164]	@ (800a59c <TIM_OC3_SetConfig+0x114>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d10d      	bne.n	800a516 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	021b      	lsls	r3, r3, #8
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a1e      	ldr	r2, [pc, #120]	@ (800a594 <TIM_OC3_SetConfig+0x10c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d013      	beq.n	800a546 <TIM_OC3_SetConfig+0xbe>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a1d      	ldr	r2, [pc, #116]	@ (800a598 <TIM_OC3_SetConfig+0x110>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00f      	beq.n	800a546 <TIM_OC3_SetConfig+0xbe>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a0 <TIM_OC3_SetConfig+0x118>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d00b      	beq.n	800a546 <TIM_OC3_SetConfig+0xbe>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a4 <TIM_OC3_SetConfig+0x11c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d007      	beq.n	800a546 <TIM_OC3_SetConfig+0xbe>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <TIM_OC3_SetConfig+0x120>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d003      	beq.n	800a546 <TIM_OC3_SetConfig+0xbe>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a16      	ldr	r2, [pc, #88]	@ (800a59c <TIM_OC3_SetConfig+0x114>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d113      	bne.n	800a56e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a54c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	621a      	str	r2, [r3, #32]
}
 800a588:	bf00      	nop
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	40012c00 	.word	0x40012c00
 800a598:	40013400 	.word	0x40013400
 800a59c:	40015000 	.word	0x40015000
 800a5a0:	40014000 	.word	0x40014000
 800a5a4:	40014400 	.word	0x40014400
 800a5a8:	40014800 	.word	0x40014800

0800a5ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	031b      	lsls	r3, r3, #12
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4313      	orrs	r3, r2
 800a606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a2c      	ldr	r2, [pc, #176]	@ (800a6bc <TIM_OC4_SetConfig+0x110>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d007      	beq.n	800a620 <TIM_OC4_SetConfig+0x74>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a2b      	ldr	r2, [pc, #172]	@ (800a6c0 <TIM_OC4_SetConfig+0x114>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d003      	beq.n	800a620 <TIM_OC4_SetConfig+0x74>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6c4 <TIM_OC4_SetConfig+0x118>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10d      	bne.n	800a63c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	031b      	lsls	r3, r3, #12
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	4313      	orrs	r3, r2
 800a632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a63a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6bc <TIM_OC4_SetConfig+0x110>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d013      	beq.n	800a66c <TIM_OC4_SetConfig+0xc0>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a1e      	ldr	r2, [pc, #120]	@ (800a6c0 <TIM_OC4_SetConfig+0x114>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00f      	beq.n	800a66c <TIM_OC4_SetConfig+0xc0>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a1e      	ldr	r2, [pc, #120]	@ (800a6c8 <TIM_OC4_SetConfig+0x11c>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d00b      	beq.n	800a66c <TIM_OC4_SetConfig+0xc0>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a1d      	ldr	r2, [pc, #116]	@ (800a6cc <TIM_OC4_SetConfig+0x120>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d007      	beq.n	800a66c <TIM_OC4_SetConfig+0xc0>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d0 <TIM_OC4_SetConfig+0x124>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d003      	beq.n	800a66c <TIM_OC4_SetConfig+0xc0>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a17      	ldr	r2, [pc, #92]	@ (800a6c4 <TIM_OC4_SetConfig+0x118>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d113      	bne.n	800a694 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a672:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a67a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	019b      	lsls	r3, r3, #6
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	4313      	orrs	r3, r2
 800a686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	019b      	lsls	r3, r3, #6
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	4313      	orrs	r3, r2
 800a692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	621a      	str	r2, [r3, #32]
}
 800a6ae:	bf00      	nop
 800a6b0:	371c      	adds	r7, #28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	40012c00 	.word	0x40012c00
 800a6c0:	40013400 	.word	0x40013400
 800a6c4:	40015000 	.word	0x40015000
 800a6c8:	40014000 	.word	0x40014000
 800a6cc:	40014400 	.word	0x40014400
 800a6d0:	40014800 	.word	0x40014800

0800a6d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
 800a6e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	4313      	orrs	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a19      	ldr	r2, [pc, #100]	@ (800a790 <TIM_OC5_SetConfig+0xbc>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d013      	beq.n	800a756 <TIM_OC5_SetConfig+0x82>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a18      	ldr	r2, [pc, #96]	@ (800a794 <TIM_OC5_SetConfig+0xc0>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00f      	beq.n	800a756 <TIM_OC5_SetConfig+0x82>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a17      	ldr	r2, [pc, #92]	@ (800a798 <TIM_OC5_SetConfig+0xc4>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00b      	beq.n	800a756 <TIM_OC5_SetConfig+0x82>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a16      	ldr	r2, [pc, #88]	@ (800a79c <TIM_OC5_SetConfig+0xc8>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <TIM_OC5_SetConfig+0x82>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a15      	ldr	r2, [pc, #84]	@ (800a7a0 <TIM_OC5_SetConfig+0xcc>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d003      	beq.n	800a756 <TIM_OC5_SetConfig+0x82>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a14      	ldr	r2, [pc, #80]	@ (800a7a4 <TIM_OC5_SetConfig+0xd0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d109      	bne.n	800a76a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a75c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	021b      	lsls	r3, r3, #8
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	4313      	orrs	r3, r2
 800a768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	621a      	str	r2, [r3, #32]
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	40012c00 	.word	0x40012c00
 800a794:	40013400 	.word	0x40013400
 800a798:	40014000 	.word	0x40014000
 800a79c:	40014400 	.word	0x40014400
 800a7a0:	40014800 	.word	0x40014800
 800a7a4:	40015000 	.word	0x40015000

0800a7a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	051b      	lsls	r3, r3, #20
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a868 <TIM_OC6_SetConfig+0xc0>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d013      	beq.n	800a82c <TIM_OC6_SetConfig+0x84>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a19      	ldr	r2, [pc, #100]	@ (800a86c <TIM_OC6_SetConfig+0xc4>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00f      	beq.n	800a82c <TIM_OC6_SetConfig+0x84>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a18      	ldr	r2, [pc, #96]	@ (800a870 <TIM_OC6_SetConfig+0xc8>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d00b      	beq.n	800a82c <TIM_OC6_SetConfig+0x84>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a17      	ldr	r2, [pc, #92]	@ (800a874 <TIM_OC6_SetConfig+0xcc>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d007      	beq.n	800a82c <TIM_OC6_SetConfig+0x84>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a16      	ldr	r2, [pc, #88]	@ (800a878 <TIM_OC6_SetConfig+0xd0>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d003      	beq.n	800a82c <TIM_OC6_SetConfig+0x84>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a15      	ldr	r2, [pc, #84]	@ (800a87c <TIM_OC6_SetConfig+0xd4>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d109      	bne.n	800a840 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	029b      	lsls	r3, r3, #10
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	621a      	str	r2, [r3, #32]
}
 800a85a:	bf00      	nop
 800a85c:	371c      	adds	r7, #28
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40012c00 	.word	0x40012c00
 800a86c:	40013400 	.word	0x40013400
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800
 800a87c:	40015000 	.word	0x40015000

0800a880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f023 0201 	bic.w	r2, r3, #1
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f023 030a 	bic.w	r3, r3, #10
 800a8bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	621a      	str	r2, [r3, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b087      	sub	sp, #28
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	60b9      	str	r1, [r7, #8]
 800a8e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	f023 0210 	bic.w	r2, r3, #16
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	031b      	lsls	r3, r3, #12
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	4313      	orrs	r3, r2
 800a912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a91a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	621a      	str	r2, [r3, #32]
}
 800a932:	bf00      	nop
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4313      	orrs	r3, r2
 800a960:	f043 0307 	orr.w	r3, r3, #7
 800a964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	609a      	str	r2, [r3, #8]
}
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	021a      	lsls	r2, r3, #8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	609a      	str	r2, [r3, #8]
}
 800a9ac:	bf00      	nop
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a1a      	ldr	r2, [r3, #32]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	401a      	ands	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a1a      	ldr	r2, [r3, #32]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f003 031f 	and.w	r3, r3, #31
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	621a      	str	r2, [r3, #32]
}
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a26      	ldr	r2, [pc, #152]	@ (800aaa8 <TIM_ResetCallback+0xa4>)
 800aa10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a25      	ldr	r2, [pc, #148]	@ (800aaac <TIM_ResetCallback+0xa8>)
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a24      	ldr	r2, [pc, #144]	@ (800aab0 <TIM_ResetCallback+0xac>)
 800aa20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a23      	ldr	r2, [pc, #140]	@ (800aab4 <TIM_ResetCallback+0xb0>)
 800aa28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a22      	ldr	r2, [pc, #136]	@ (800aab8 <TIM_ResetCallback+0xb4>)
 800aa30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a21      	ldr	r2, [pc, #132]	@ (800aabc <TIM_ResetCallback+0xb8>)
 800aa38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a20      	ldr	r2, [pc, #128]	@ (800aac0 <TIM_ResetCallback+0xbc>)
 800aa40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a1f      	ldr	r2, [pc, #124]	@ (800aac4 <TIM_ResetCallback+0xc0>)
 800aa48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a1e      	ldr	r2, [pc, #120]	@ (800aac8 <TIM_ResetCallback+0xc4>)
 800aa50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a1d      	ldr	r2, [pc, #116]	@ (800aacc <TIM_ResetCallback+0xc8>)
 800aa58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a1c      	ldr	r2, [pc, #112]	@ (800aad0 <TIM_ResetCallback+0xcc>)
 800aa60:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1b      	ldr	r2, [pc, #108]	@ (800aad4 <TIM_ResetCallback+0xd0>)
 800aa68:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1a      	ldr	r2, [pc, #104]	@ (800aad8 <TIM_ResetCallback+0xd4>)
 800aa70:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a19      	ldr	r2, [pc, #100]	@ (800aadc <TIM_ResetCallback+0xd8>)
 800aa78:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a18      	ldr	r2, [pc, #96]	@ (800aae0 <TIM_ResetCallback+0xdc>)
 800aa80:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a17      	ldr	r2, [pc, #92]	@ (800aae4 <TIM_ResetCallback+0xe0>)
 800aa88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a16      	ldr	r2, [pc, #88]	@ (800aae8 <TIM_ResetCallback+0xe4>)
 800aa90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a15      	ldr	r2, [pc, #84]	@ (800aaec <TIM_ResetCallback+0xe8>)
 800aa98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	08002e29 	.word	0x08002e29
 800aaac:	08009d51 	.word	0x08009d51
 800aab0:	08009dc9 	.word	0x08009dc9
 800aab4:	08009ddd 	.word	0x08009ddd
 800aab8:	08009d79 	.word	0x08009d79
 800aabc:	08009d8d 	.word	0x08009d8d
 800aac0:	08009d65 	.word	0x08009d65
 800aac4:	08009da1 	.word	0x08009da1
 800aac8:	08009db5 	.word	0x08009db5
 800aacc:	08009df1 	.word	0x08009df1
 800aad0:	0800ad45 	.word	0x0800ad45
 800aad4:	0800ad59 	.word	0x0800ad59
 800aad8:	0800ad6d 	.word	0x0800ad6d
 800aadc:	0800ad81 	.word	0x0800ad81
 800aae0:	0800ad95 	.word	0x0800ad95
 800aae4:	0800ada9 	.word	0x0800ada9
 800aae8:	0800adbd 	.word	0x0800adbd
 800aaec:	0800add1 	.word	0x0800add1

0800aaf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d101      	bne.n	800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab04:	2302      	movs	r3, #2
 800ab06:	e074      	b.n	800abf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a34      	ldr	r2, [pc, #208]	@ (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d009      	beq.n	800ab46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a33      	ldr	r2, [pc, #204]	@ (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d004      	beq.n	800ab46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a31      	ldr	r2, [pc, #196]	@ (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d108      	bne.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ab5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a21      	ldr	r2, [pc, #132]	@ (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d022      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab88:	d01d      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d018      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a1d      	ldr	r2, [pc, #116]	@ (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d013      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a1c      	ldr	r2, [pc, #112]	@ (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00e      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a15      	ldr	r2, [pc, #84]	@ (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d009      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a18      	ldr	r2, [pc, #96]	@ (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d004      	beq.n	800abc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a11      	ldr	r2, [pc, #68]	@ (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d10c      	bne.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	40012c00 	.word	0x40012c00
 800ac04:	40013400 	.word	0x40013400
 800ac08:	40015000 	.word	0x40015000
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	40000800 	.word	0x40000800
 800ac14:	40000c00 	.word	0x40000c00
 800ac18:	40014000 	.word	0x40014000

0800ac1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d101      	bne.n	800ac38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac34:	2302      	movs	r3, #2
 800ac36:	e078      	b.n	800ad2a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	041b      	lsls	r3, r3, #16
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d009      	beq.n	800acde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a1b      	ldr	r2, [pc, #108]	@ (800ad3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d004      	beq.n	800acde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a19      	ldr	r2, [pc, #100]	@ (800ad40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d11c      	bne.n	800ad18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace8:	051b      	lsls	r3, r3, #20
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad14:	4313      	orrs	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	40012c00 	.word	0x40012c00
 800ad3c:	40013400 	.word	0x40013400
 800ad40:	40015000 	.word	0x40015000

0800ad44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e050      	b.n	800ae98 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d114      	bne.n	800ae2a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fde5 	bl	800b9d8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a21      	ldr	r2, [pc, #132]	@ (800aea0 <HAL_UART_Init+0xbc>)
 800ae1c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2224      	movs	r2, #36	@ 0x24
 800ae2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0201 	bic.w	r2, r2, #1
 800ae40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f001 f912 	bl	800c074 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fe13 	bl	800ba7c <UART_SetConfig>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e01b      	b.n	800ae98 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f042 0201 	orr.w	r2, r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 f991 	bl	800c1b8 <UART_CheckIdleState>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	08004d8d 	.word	0x08004d8d

0800aea4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	460b      	mov	r3, r1
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aec2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e09c      	b.n	800b00a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d16c      	bne.n	800afb4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	2b0c      	cmp	r3, #12
 800aede:	d85e      	bhi.n	800af9e <HAL_UART_RegisterCallback+0xfa>
 800aee0:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <HAL_UART_RegisterCallback+0x44>)
 800aee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee6:	bf00      	nop
 800aee8:	0800af1d 	.word	0x0800af1d
 800aeec:	0800af27 	.word	0x0800af27
 800aef0:	0800af31 	.word	0x0800af31
 800aef4:	0800af3b 	.word	0x0800af3b
 800aef8:	0800af45 	.word	0x0800af45
 800aefc:	0800af4f 	.word	0x0800af4f
 800af00:	0800af59 	.word	0x0800af59
 800af04:	0800af63 	.word	0x0800af63
 800af08:	0800af6d 	.word	0x0800af6d
 800af0c:	0800af77 	.word	0x0800af77
 800af10:	0800af81 	.word	0x0800af81
 800af14:	0800af8b 	.word	0x0800af8b
 800af18:	0800af95 	.word	0x0800af95
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800af24:	e070      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800af2e:	e06b      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800af38:	e066      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800af42:	e061      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800af4c:	e05c      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800af56:	e057      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800af60:	e052      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800af6a:	e04d      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800af74:	e048      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800af7e:	e043      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800af88:	e03e      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800af92:	e039      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800af9c:	e034      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afa4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]
        break;
 800afb2:	e029      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d11a      	bne.n	800aff4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	2b0b      	cmp	r3, #11
 800afc2:	d002      	beq.n	800afca <HAL_UART_RegisterCallback+0x126>
 800afc4:	2b0c      	cmp	r3, #12
 800afc6:	d005      	beq.n	800afd4 <HAL_UART_RegisterCallback+0x130>
 800afc8:	e009      	b.n	800afde <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800afd2:	e019      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800afdc:	e014      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
        break;
 800aff2:	e009      	b.n	800b008 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	@ 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	4613      	mov	r3, r2
 800b024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	d167      	bne.n	800b100 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <HAL_UART_Transmit_DMA+0x24>
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e060      	b.n	800b102 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	88fa      	ldrh	r2, [r7, #6]
 800b04a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	88fa      	ldrh	r2, [r7, #6]
 800b052:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2221      	movs	r2, #33	@ 0x21
 800b062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d028      	beq.n	800b0c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b072:	4a26      	ldr	r2, [pc, #152]	@ (800b10c <HAL_UART_Transmit_DMA+0xf4>)
 800b074:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b07a:	4a25      	ldr	r2, [pc, #148]	@ (800b110 <HAL_UART_Transmit_DMA+0xf8>)
 800b07c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b082:	4a24      	ldr	r2, [pc, #144]	@ (800b114 <HAL_UART_Transmit_DMA+0xfc>)
 800b084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b08a:	2200      	movs	r2, #0
 800b08c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b096:	4619      	mov	r1, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3328      	adds	r3, #40	@ 0x28
 800b09e:	461a      	mov	r2, r3
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	f7fc f869 	bl	8007178 <HAL_DMA_Start_IT>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d009      	beq.n	800b0c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2210      	movs	r2, #16
 800b0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e020      	b.n	800b102 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2240      	movs	r2, #64	@ 0x40
 800b0c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0e8:	623a      	str	r2, [r7, #32]
 800b0ea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	69f9      	ldr	r1, [r7, #28]
 800b0ee:	6a3a      	ldr	r2, [r7, #32]
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e5      	bne.n	800b0c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e000      	b.n	800b102 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b100:	2302      	movs	r3, #2
  }
}
 800b102:	4618      	mov	r0, r3
 800b104:	3728      	adds	r7, #40	@ 0x28
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	0800c683 	.word	0x0800c683
 800b110:	0800c721 	.word	0x0800c721
 800b114:	0800c8bb 	.word	0x0800c8bb

0800b118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08a      	sub	sp, #40	@ 0x28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b12c:	2b20      	cmp	r3, #32
 800b12e:	d137      	bne.n	800b1a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <HAL_UART_Receive_DMA+0x24>
 800b136:	88fb      	ldrh	r3, [r7, #6]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e030      	b.n	800b1a2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a18      	ldr	r2, [pc, #96]	@ (800b1ac <HAL_UART_Receive_DMA+0x94>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d01f      	beq.n	800b190 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d018      	beq.n	800b190 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	613b      	str	r3, [r7, #16]
   return(result);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b172:	627b      	str	r3, [r7, #36]	@ 0x24
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	623b      	str	r3, [r7, #32]
 800b17e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	69f9      	ldr	r1, [r7, #28]
 800b182:	6a3a      	ldr	r2, [r7, #32]
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	61bb      	str	r3, [r7, #24]
   return(result);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e6      	bne.n	800b15e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	461a      	mov	r2, r3
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f001 f926 	bl	800c3e8 <UART_Start_Receive_DMA>
 800b19c:	4603      	mov	r3, r0
 800b19e:	e000      	b.n	800b1a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1a0:	2302      	movs	r3, #2
  }
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3728      	adds	r7, #40	@ 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40008000 	.word	0x40008000

0800b1b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b0ba      	sub	sp, #232	@ 0xe8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1de:	4013      	ands	r3, r2
 800b1e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b1e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d11b      	bne.n	800b224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d015      	beq.n	800b224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1fc:	f003 0320 	and.w	r3, r3, #32
 800b200:	2b00      	cmp	r3, #0
 800b202:	d105      	bne.n	800b210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 8312 	beq.w	800b83e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	4798      	blx	r3
      }
      return;
 800b222:	e30c      	b.n	800b83e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8129 	beq.w	800b480 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b22e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b232:	4b90      	ldr	r3, [pc, #576]	@ (800b474 <HAL_UART_IRQHandler+0x2c4>)
 800b234:	4013      	ands	r3, r2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b23a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b23e:	4b8e      	ldr	r3, [pc, #568]	@ (800b478 <HAL_UART_IRQHandler+0x2c8>)
 800b240:	4013      	ands	r3, r2
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 811c 	beq.w	800b480 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <HAL_UART_IRQHandler+0xc8>
 800b254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00b      	beq.n	800b278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2201      	movs	r2, #1
 800b266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b26e:	f043 0201 	orr.w	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b27c:	f003 0302 	and.w	r3, r3, #2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d011      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xf8>
 800b284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2202      	movs	r2, #2
 800b296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b29e:	f043 0204 	orr.w	r2, r3, #4
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d011      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x128>
 800b2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ce:	f043 0202 	orr.w	r2, r3, #2
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d017      	beq.n	800b314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d105      	bne.n	800b2fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2f4:	4b5f      	ldr	r3, [pc, #380]	@ (800b474 <HAL_UART_IRQHandler+0x2c4>)
 800b2f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00b      	beq.n	800b314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2208      	movs	r2, #8
 800b302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b30a:	f043 0208 	orr.w	r2, r3, #8
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d012      	beq.n	800b346 <HAL_UART_IRQHandler+0x196>
 800b320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b33c:	f043 0220 	orr.w	r2, r3, #32
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 8278 	beq.w	800b842 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d013      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b362:	f003 0320 	and.w	r3, r3, #32
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b36e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d007      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b38c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39a:	2b40      	cmp	r3, #64	@ 0x40
 800b39c:	d005      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b39e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d058      	beq.n	800b45c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 f903 	bl	800c5b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ba:	2b40      	cmp	r3, #64	@ 0x40
 800b3bc:	d148      	bne.n	800b450 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1d9      	bne.n	800b3be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b410:	2b00      	cmp	r3, #0
 800b412:	d017      	beq.n	800b444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41a:	4a18      	ldr	r2, [pc, #96]	@ (800b47c <HAL_UART_IRQHandler+0x2cc>)
 800b41c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b424:	4618      	mov	r0, r3
 800b426:	f7fb ff7b 	bl	8007320 <HAL_DMA_Abort_IT>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01f      	beq.n	800b470 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b43e:	4610      	mov	r0, r2
 800b440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b442:	e015      	b.n	800b470 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44e:	e00f      	b.n	800b470 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45a:	e009      	b.n	800b470 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b46e:	e1e8      	b.n	800b842 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b470:	bf00      	nop
    return;
 800b472:	e1e6      	b.n	800b842 <HAL_UART_IRQHandler+0x692>
 800b474:	10000001 	.word	0x10000001
 800b478:	04000120 	.word	0x04000120
 800b47c:	0800c93f 	.word	0x0800c93f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b484:	2b01      	cmp	r3, #1
 800b486:	f040 8176 	bne.w	800b776 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b48e:	f003 0310 	and.w	r3, r3, #16
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 816f 	beq.w	800b776 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 8168 	beq.w	800b776 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2210      	movs	r2, #16
 800b4ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b8:	2b40      	cmp	r3, #64	@ 0x40
 800b4ba:	f040 80dc 	bne.w	800b676 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80b1 	beq.w	800b638 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	f080 80a9 	bcs.w	800b638 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 8087 	bne.w	800b612 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b510:	e853 3f00 	ldrex	r3, [r3]
 800b514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
 800b52a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b52e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b532:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b53a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1da      	bne.n	800b504 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b55e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b560:	f023 0301 	bic.w	r3, r3, #1
 800b564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3308      	adds	r3, #8
 800b56e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b57a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b57e:	e841 2300 	strex	r3, r2, [r1]
 800b582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e1      	bne.n	800b54e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3308      	adds	r3, #8
 800b590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b59a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b59c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b5ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1e3      	bne.n	800b58a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5e0:	f023 0310 	bic.w	r3, r3, #16
 800b5e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e4      	bne.n	800b5d0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fb fe2e 	bl	800726e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2202      	movs	r2, #2
 800b616:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b62a:	b292      	uxth	r2, r2
 800b62c:	1a8a      	subs	r2, r1, r2
 800b62e:	b292      	uxth	r2, r2
 800b630:	4611      	mov	r1, r2
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b636:	e106      	b.n	800b846 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b63e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b642:	429a      	cmp	r2, r3
 800b644:	f040 80ff 	bne.w	800b846 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b20      	cmp	r3, #32
 800b658:	f040 80f5 	bne.w	800b846 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b66e:	4611      	mov	r1, r2
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	4798      	blx	r3
      return;
 800b674:	e0e7      	b.n	800b846 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b682:	b29b      	uxth	r3, r3
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b690:	b29b      	uxth	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 80d9 	beq.w	800b84a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 80d4 	beq.w	800b84a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6aa:	e853 3f00 	ldrex	r3, [r3]
 800b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b6c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6cc:	e841 2300 	strex	r3, r2, [r1]
 800b6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e4      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3308      	adds	r3, #8
 800b6de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	623b      	str	r3, [r7, #32]
   return(result);
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6ee:	f023 0301 	bic.w	r3, r3, #1
 800b6f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b700:	633a      	str	r2, [r7, #48]	@ 0x30
 800b702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b708:	e841 2300 	strex	r3, r2, [r1]
 800b70c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e1      	bne.n	800b6d8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2220      	movs	r2, #32
 800b718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	60fb      	str	r3, [r7, #12]
   return(result);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f023 0310 	bic.w	r3, r3, #16
 800b73c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	69b9      	ldr	r1, [r7, #24]
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	617b      	str	r3, [r7, #20]
   return(result);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e4      	bne.n	800b728 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b76a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b76e:	4611      	mov	r1, r2
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b774:	e069      	b.n	800b84a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b77a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d010      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x5f4>
 800b782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b796:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7a2:	e055      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d014      	beq.n	800b7da <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b7bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d008      	beq.n	800b7da <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d03e      	beq.n	800b84e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	4798      	blx	r3
    }
    return;
 800b7d8:	e039      	b.n	800b84e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <HAL_UART_IRQHandler+0x64a>
 800b7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f001 f8b7 	bl	800c966 <UART_EndTransmit_IT>
    return;
 800b7f8:	e02a      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00b      	beq.n	800b81e <HAL_UART_IRQHandler+0x66e>
 800b806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b80a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d005      	beq.n	800b81e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b81c:	e018      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b822:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d012      	beq.n	800b850 <HAL_UART_IRQHandler+0x6a0>
 800b82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da0e      	bge.n	800b850 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b83c:	e008      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b83e:	bf00      	nop
 800b840:	e006      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b842:	bf00      	nop
 800b844:	e004      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b846:	bf00      	nop
 800b848:	e002      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b84e:	bf00      	nop
  }
}
 800b850:	37e8      	adds	r7, #232	@ 0xe8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop

0800b858 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a09      	ldr	r2, [pc, #36]	@ (800b944 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d009      	beq.n	800b938 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	615a      	str	r2, [r3, #20]
  }
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	40008000 	.word	0x40008000

0800b948 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a18      	ldr	r2, [pc, #96]	@ (800b9b8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d027      	beq.n	800b9aa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b960:	2b20      	cmp	r3, #32
 800b962:	d120      	bne.n	800b9a6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b96e:	2302      	movs	r3, #2
 800b970:	e01c      	b.n	800b9ac <HAL_UART_EnableReceiverTimeout+0x64>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2224      	movs	r2, #36	@ 0x24
 800b97e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b990:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e002      	b.n	800b9ac <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e000      	b.n	800b9ac <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
  }
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	40008000 	.word	0x40008000

0800b9bc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a1a      	ldr	r2, [pc, #104]	@ (800ba4c <UART_InitCallbacksToDefault+0x74>)
 800b9e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a19      	ldr	r2, [pc, #100]	@ (800ba50 <UART_InitCallbacksToDefault+0x78>)
 800b9ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a18      	ldr	r2, [pc, #96]	@ (800ba54 <UART_InitCallbacksToDefault+0x7c>)
 800b9f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a17      	ldr	r2, [pc, #92]	@ (800ba58 <UART_InitCallbacksToDefault+0x80>)
 800b9fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a16      	ldr	r2, [pc, #88]	@ (800ba5c <UART_InitCallbacksToDefault+0x84>)
 800ba04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a15      	ldr	r2, [pc, #84]	@ (800ba60 <UART_InitCallbacksToDefault+0x88>)
 800ba0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a14      	ldr	r2, [pc, #80]	@ (800ba64 <UART_InitCallbacksToDefault+0x8c>)
 800ba14:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a13      	ldr	r2, [pc, #76]	@ (800ba68 <UART_InitCallbacksToDefault+0x90>)
 800ba1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a12      	ldr	r2, [pc, #72]	@ (800ba6c <UART_InitCallbacksToDefault+0x94>)
 800ba24:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a11      	ldr	r2, [pc, #68]	@ (800ba70 <UART_InitCallbacksToDefault+0x98>)
 800ba2c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a10      	ldr	r2, [pc, #64]	@ (800ba74 <UART_InitCallbacksToDefault+0x9c>)
 800ba34:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a0f      	ldr	r2, [pc, #60]	@ (800ba78 <UART_InitCallbacksToDefault+0xa0>)
 800ba3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	0800b86d 	.word	0x0800b86d
 800ba50:	0800b859 	.word	0x0800b859
 800ba54:	0800b895 	.word	0x0800b895
 800ba58:	0800b881 	.word	0x0800b881
 800ba5c:	0800b8a9 	.word	0x0800b8a9
 800ba60:	0800b8bd 	.word	0x0800b8bd
 800ba64:	0800b8d1 	.word	0x0800b8d1
 800ba68:	0800b8e5 	.word	0x0800b8e5
 800ba6c:	0800c9c1 	.word	0x0800c9c1
 800ba70:	0800c9d5 	.word	0x0800c9d5
 800ba74:	0800c9e9 	.word	0x0800c9e9
 800ba78:	0800b8f9 	.word	0x0800b8f9

0800ba7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba80:	b08c      	sub	sp, #48	@ 0x30
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	431a      	orrs	r2, r3
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	4baa      	ldr	r3, [pc, #680]	@ (800bd54 <UART_SetConfig+0x2d8>)
 800baac:	4013      	ands	r3, r2
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bab4:	430b      	orrs	r3, r1
 800bab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	68da      	ldr	r2, [r3, #12]
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a9f      	ldr	r2, [pc, #636]	@ (800bd58 <UART_SetConfig+0x2dc>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d004      	beq.n	800bae8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bae4:	4313      	orrs	r3, r2
 800bae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800baf2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	6812      	ldr	r2, [r2, #0]
 800bafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bafc:	430b      	orrs	r3, r1
 800bafe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb06:	f023 010f 	bic.w	r1, r3, #15
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a90      	ldr	r2, [pc, #576]	@ (800bd5c <UART_SetConfig+0x2e0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d125      	bne.n	800bb6c <UART_SetConfig+0xf0>
 800bb20:	4b8f      	ldr	r3, [pc, #572]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d81a      	bhi.n	800bb64 <UART_SetConfig+0xe8>
 800bb2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb34 <UART_SetConfig+0xb8>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb45 	.word	0x0800bb45
 800bb38:	0800bb55 	.word	0x0800bb55
 800bb3c:	0800bb4d 	.word	0x0800bb4d
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	2301      	movs	r3, #1
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb4a:	e116      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb52:	e112      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bb54:	2304      	movs	r3, #4
 800bb56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb5a:	e10e      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bb5c:	2308      	movs	r3, #8
 800bb5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb62:	e10a      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bb64:	2310      	movs	r3, #16
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb6a:	e106      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a7c      	ldr	r2, [pc, #496]	@ (800bd64 <UART_SetConfig+0x2e8>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d138      	bne.n	800bbe8 <UART_SetConfig+0x16c>
 800bb76:	4b7a      	ldr	r3, [pc, #488]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb7c:	f003 030c 	and.w	r3, r3, #12
 800bb80:	2b0c      	cmp	r3, #12
 800bb82:	d82d      	bhi.n	800bbe0 <UART_SetConfig+0x164>
 800bb84:	a201      	add	r2, pc, #4	@ (adr r2, 800bb8c <UART_SetConfig+0x110>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bbc1 	.word	0x0800bbc1
 800bb90:	0800bbe1 	.word	0x0800bbe1
 800bb94:	0800bbe1 	.word	0x0800bbe1
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bbd1 	.word	0x0800bbd1
 800bba0:	0800bbe1 	.word	0x0800bbe1
 800bba4:	0800bbe1 	.word	0x0800bbe1
 800bba8:	0800bbe1 	.word	0x0800bbe1
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbe1 	.word	0x0800bbe1
 800bbb4:	0800bbe1 	.word	0x0800bbe1
 800bbb8:	0800bbe1 	.word	0x0800bbe1
 800bbbc:	0800bbd9 	.word	0x0800bbd9
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbc6:	e0d8      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bbc8:	2302      	movs	r3, #2
 800bbca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbce:	e0d4      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bbd0:	2304      	movs	r3, #4
 800bbd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbd6:	e0d0      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bbd8:	2308      	movs	r3, #8
 800bbda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbde:	e0cc      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bbe0:	2310      	movs	r3, #16
 800bbe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbe6:	e0c8      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a5e      	ldr	r2, [pc, #376]	@ (800bd68 <UART_SetConfig+0x2ec>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d125      	bne.n	800bc3e <UART_SetConfig+0x1c2>
 800bbf2:	4b5b      	ldr	r3, [pc, #364]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bbf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bbfc:	2b30      	cmp	r3, #48	@ 0x30
 800bbfe:	d016      	beq.n	800bc2e <UART_SetConfig+0x1b2>
 800bc00:	2b30      	cmp	r3, #48	@ 0x30
 800bc02:	d818      	bhi.n	800bc36 <UART_SetConfig+0x1ba>
 800bc04:	2b20      	cmp	r3, #32
 800bc06:	d00a      	beq.n	800bc1e <UART_SetConfig+0x1a2>
 800bc08:	2b20      	cmp	r3, #32
 800bc0a:	d814      	bhi.n	800bc36 <UART_SetConfig+0x1ba>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <UART_SetConfig+0x19a>
 800bc10:	2b10      	cmp	r3, #16
 800bc12:	d008      	beq.n	800bc26 <UART_SetConfig+0x1aa>
 800bc14:	e00f      	b.n	800bc36 <UART_SetConfig+0x1ba>
 800bc16:	2300      	movs	r3, #0
 800bc18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc1c:	e0ad      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc24:	e0a9      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc26:	2304      	movs	r3, #4
 800bc28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc2c:	e0a5      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc2e:	2308      	movs	r3, #8
 800bc30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc34:	e0a1      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc36:	2310      	movs	r3, #16
 800bc38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc3c:	e09d      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a4a      	ldr	r2, [pc, #296]	@ (800bd6c <UART_SetConfig+0x2f0>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d125      	bne.n	800bc94 <UART_SetConfig+0x218>
 800bc48:	4b45      	ldr	r3, [pc, #276]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bc52:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc54:	d016      	beq.n	800bc84 <UART_SetConfig+0x208>
 800bc56:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc58:	d818      	bhi.n	800bc8c <UART_SetConfig+0x210>
 800bc5a:	2b80      	cmp	r3, #128	@ 0x80
 800bc5c:	d00a      	beq.n	800bc74 <UART_SetConfig+0x1f8>
 800bc5e:	2b80      	cmp	r3, #128	@ 0x80
 800bc60:	d814      	bhi.n	800bc8c <UART_SetConfig+0x210>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <UART_SetConfig+0x1f0>
 800bc66:	2b40      	cmp	r3, #64	@ 0x40
 800bc68:	d008      	beq.n	800bc7c <UART_SetConfig+0x200>
 800bc6a:	e00f      	b.n	800bc8c <UART_SetConfig+0x210>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc72:	e082      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc74:	2302      	movs	r3, #2
 800bc76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc7a:	e07e      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc82:	e07a      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc84:	2308      	movs	r3, #8
 800bc86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc8a:	e076      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc92:	e072      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a35      	ldr	r2, [pc, #212]	@ (800bd70 <UART_SetConfig+0x2f4>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d12a      	bne.n	800bcf4 <UART_SetConfig+0x278>
 800bc9e:	4b30      	ldr	r3, [pc, #192]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcac:	d01a      	beq.n	800bce4 <UART_SetConfig+0x268>
 800bcae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcb2:	d81b      	bhi.n	800bcec <UART_SetConfig+0x270>
 800bcb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcb8:	d00c      	beq.n	800bcd4 <UART_SetConfig+0x258>
 800bcba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcbe:	d815      	bhi.n	800bcec <UART_SetConfig+0x270>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <UART_SetConfig+0x250>
 800bcc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcc8:	d008      	beq.n	800bcdc <UART_SetConfig+0x260>
 800bcca:	e00f      	b.n	800bcec <UART_SetConfig+0x270>
 800bccc:	2300      	movs	r3, #0
 800bcce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcd2:	e052      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcda:	e04e      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bcdc:	2304      	movs	r3, #4
 800bcde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bce2:	e04a      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bce4:	2308      	movs	r3, #8
 800bce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcea:	e046      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bcec:	2310      	movs	r3, #16
 800bcee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcf2:	e042      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a17      	ldr	r2, [pc, #92]	@ (800bd58 <UART_SetConfig+0x2dc>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d13a      	bne.n	800bd74 <UART_SetConfig+0x2f8>
 800bcfe:	4b18      	ldr	r3, [pc, #96]	@ (800bd60 <UART_SetConfig+0x2e4>)
 800bd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bd08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bd0c:	d01a      	beq.n	800bd44 <UART_SetConfig+0x2c8>
 800bd0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bd12:	d81b      	bhi.n	800bd4c <UART_SetConfig+0x2d0>
 800bd14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd18:	d00c      	beq.n	800bd34 <UART_SetConfig+0x2b8>
 800bd1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd1e:	d815      	bhi.n	800bd4c <UART_SetConfig+0x2d0>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <UART_SetConfig+0x2b0>
 800bd24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd28:	d008      	beq.n	800bd3c <UART_SetConfig+0x2c0>
 800bd2a:	e00f      	b.n	800bd4c <UART_SetConfig+0x2d0>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd32:	e022      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bd34:	2302      	movs	r3, #2
 800bd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd3a:	e01e      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bd3c:	2304      	movs	r3, #4
 800bd3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd42:	e01a      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bd44:	2308      	movs	r3, #8
 800bd46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd4a:	e016      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bd4c:	2310      	movs	r3, #16
 800bd4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd52:	e012      	b.n	800bd7a <UART_SetConfig+0x2fe>
 800bd54:	cfff69f3 	.word	0xcfff69f3
 800bd58:	40008000 	.word	0x40008000
 800bd5c:	40013800 	.word	0x40013800
 800bd60:	40021000 	.word	0x40021000
 800bd64:	40004400 	.word	0x40004400
 800bd68:	40004800 	.word	0x40004800
 800bd6c:	40004c00 	.word	0x40004c00
 800bd70:	40005000 	.word	0x40005000
 800bd74:	2310      	movs	r3, #16
 800bd76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4aae      	ldr	r2, [pc, #696]	@ (800c038 <UART_SetConfig+0x5bc>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	f040 8097 	bne.w	800beb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd8a:	2b08      	cmp	r3, #8
 800bd8c:	d823      	bhi.n	800bdd6 <UART_SetConfig+0x35a>
 800bd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <UART_SetConfig+0x318>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bdb9 	.word	0x0800bdb9
 800bd98:	0800bdd7 	.word	0x0800bdd7
 800bd9c:	0800bdc1 	.word	0x0800bdc1
 800bda0:	0800bdd7 	.word	0x0800bdd7
 800bda4:	0800bdc7 	.word	0x0800bdc7
 800bda8:	0800bdd7 	.word	0x0800bdd7
 800bdac:	0800bdd7 	.word	0x0800bdd7
 800bdb0:	0800bdd7 	.word	0x0800bdd7
 800bdb4:	0800bdcf 	.word	0x0800bdcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdb8:	f7fc fbbc 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800bdbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdbe:	e010      	b.n	800bde2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdc0:	4b9e      	ldr	r3, [pc, #632]	@ (800c03c <UART_SetConfig+0x5c0>)
 800bdc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdc4:	e00d      	b.n	800bde2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdc6:	f7fc fb47 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 800bdca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdcc:	e009      	b.n	800bde2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdd4:	e005      	b.n	800bde2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bde0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 8130 	beq.w	800c04a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdee:	4a94      	ldr	r2, [pc, #592]	@ (800c040 <UART_SetConfig+0x5c4>)
 800bdf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	4613      	mov	r3, r2
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	4413      	add	r3, r2
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d305      	bcc.n	800be1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	429a      	cmp	r2, r3
 800be18:	d903      	bls.n	800be22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800be20:	e113      	b.n	800c04a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be24:	2200      	movs	r2, #0
 800be26:	60bb      	str	r3, [r7, #8]
 800be28:	60fa      	str	r2, [r7, #12]
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	4a84      	ldr	r2, [pc, #528]	@ (800c040 <UART_SetConfig+0x5c4>)
 800be30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be34:	b29b      	uxth	r3, r3
 800be36:	2200      	movs	r2, #0
 800be38:	603b      	str	r3, [r7, #0]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be44:	f7f4 feec 	bl	8000c20 <__aeabi_uldivmod>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4610      	mov	r0, r2
 800be4e:	4619      	mov	r1, r3
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	f04f 0300 	mov.w	r3, #0
 800be58:	020b      	lsls	r3, r1, #8
 800be5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be5e:	0202      	lsls	r2, r0, #8
 800be60:	6979      	ldr	r1, [r7, #20]
 800be62:	6849      	ldr	r1, [r1, #4]
 800be64:	0849      	lsrs	r1, r1, #1
 800be66:	2000      	movs	r0, #0
 800be68:	460c      	mov	r4, r1
 800be6a:	4605      	mov	r5, r0
 800be6c:	eb12 0804 	adds.w	r8, r2, r4
 800be70:	eb43 0905 	adc.w	r9, r3, r5
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	469a      	mov	sl, r3
 800be7c:	4693      	mov	fp, r2
 800be7e:	4652      	mov	r2, sl
 800be80:	465b      	mov	r3, fp
 800be82:	4640      	mov	r0, r8
 800be84:	4649      	mov	r1, r9
 800be86:	f7f4 fecb 	bl	8000c20 <__aeabi_uldivmod>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4613      	mov	r3, r2
 800be90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be98:	d308      	bcc.n	800beac <UART_SetConfig+0x430>
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bea0:	d204      	bcs.n	800beac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a3a      	ldr	r2, [r7, #32]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	e0ce      	b.n	800c04a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800beb2:	e0ca      	b.n	800c04a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bebc:	d166      	bne.n	800bf8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bebe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d827      	bhi.n	800bf16 <UART_SetConfig+0x49a>
 800bec6:	a201      	add	r2, pc, #4	@ (adr r2, 800becc <UART_SetConfig+0x450>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bef1 	.word	0x0800bef1
 800bed0:	0800bef9 	.word	0x0800bef9
 800bed4:	0800bf01 	.word	0x0800bf01
 800bed8:	0800bf17 	.word	0x0800bf17
 800bedc:	0800bf07 	.word	0x0800bf07
 800bee0:	0800bf17 	.word	0x0800bf17
 800bee4:	0800bf17 	.word	0x0800bf17
 800bee8:	0800bf17 	.word	0x0800bf17
 800beec:	0800bf0f 	.word	0x0800bf0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bef0:	f7fc fb20 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800bef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bef6:	e014      	b.n	800bf22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bef8:	f7fc fb32 	bl	8008560 <HAL_RCC_GetPCLK2Freq>
 800befc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800befe:	e010      	b.n	800bf22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf00:	4b4e      	ldr	r3, [pc, #312]	@ (800c03c <UART_SetConfig+0x5c0>)
 800bf02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf04:	e00d      	b.n	800bf22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf06:	f7fc faa7 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 800bf0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf0c:	e009      	b.n	800bf22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf14:	e005      	b.n	800bf22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bf20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 8090 	beq.w	800c04a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2e:	4a44      	ldr	r2, [pc, #272]	@ (800c040 <UART_SetConfig+0x5c4>)
 800bf30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf34:	461a      	mov	r2, r3
 800bf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf38:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf3c:	005a      	lsls	r2, r3, #1
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	085b      	lsrs	r3, r3, #1
 800bf44:	441a      	add	r2, r3
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	2b0f      	cmp	r3, #15
 800bf54:	d916      	bls.n	800bf84 <UART_SetConfig+0x508>
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf5c:	d212      	bcs.n	800bf84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f023 030f 	bic.w	r3, r3, #15
 800bf66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	085b      	lsrs	r3, r3, #1
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	8bfb      	ldrh	r3, [r7, #30]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	8bfa      	ldrh	r2, [r7, #30]
 800bf80:	60da      	str	r2, [r3, #12]
 800bf82:	e062      	b.n	800c04a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bf8a:	e05e      	b.n	800c04a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d828      	bhi.n	800bfe6 <UART_SetConfig+0x56a>
 800bf94:	a201      	add	r2, pc, #4	@ (adr r2, 800bf9c <UART_SetConfig+0x520>)
 800bf96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9a:	bf00      	nop
 800bf9c:	0800bfc1 	.word	0x0800bfc1
 800bfa0:	0800bfc9 	.word	0x0800bfc9
 800bfa4:	0800bfd1 	.word	0x0800bfd1
 800bfa8:	0800bfe7 	.word	0x0800bfe7
 800bfac:	0800bfd7 	.word	0x0800bfd7
 800bfb0:	0800bfe7 	.word	0x0800bfe7
 800bfb4:	0800bfe7 	.word	0x0800bfe7
 800bfb8:	0800bfe7 	.word	0x0800bfe7
 800bfbc:	0800bfdf 	.word	0x0800bfdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfc0:	f7fc fab8 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800bfc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bfc6:	e014      	b.n	800bff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfc8:	f7fc faca 	bl	8008560 <HAL_RCC_GetPCLK2Freq>
 800bfcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bfce:	e010      	b.n	800bff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfd0:	4b1a      	ldr	r3, [pc, #104]	@ (800c03c <UART_SetConfig+0x5c0>)
 800bfd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bfd4:	e00d      	b.n	800bff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfd6:	f7fc fa3f 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 800bfda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bfdc:	e009      	b.n	800bff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bfe4:	e005      	b.n	800bff2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bff0:	bf00      	nop
    }

    if (pclk != 0U)
 800bff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d028      	beq.n	800c04a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffc:	4a10      	ldr	r2, [pc, #64]	@ (800c040 <UART_SetConfig+0x5c4>)
 800bffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c002:	461a      	mov	r2, r3
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	fbb3 f2f2 	udiv	r2, r3, r2
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	085b      	lsrs	r3, r3, #1
 800c010:	441a      	add	r2, r3
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	2b0f      	cmp	r3, #15
 800c020:	d910      	bls.n	800c044 <UART_SetConfig+0x5c8>
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c028:	d20c      	bcs.n	800c044 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60da      	str	r2, [r3, #12]
 800c034:	e009      	b.n	800c04a <UART_SetConfig+0x5ce>
 800c036:	bf00      	nop
 800c038:	40008000 	.word	0x40008000
 800c03c:	00f42400 	.word	0x00f42400
 800c040:	0800f240 	.word	0x0800f240
      }
      else
      {
        ret = HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2201      	movs	r2, #1
 800c056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2200      	movs	r2, #0
 800c05e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2200      	movs	r2, #0
 800c064:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c066:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3730      	adds	r7, #48	@ 0x30
 800c06e:	46bd      	mov	sp, r7
 800c070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c080:	f003 0308 	and.w	r3, r3, #8
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00a      	beq.n	800c09e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00a      	beq.n	800c0e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e6:	f003 0304 	and.w	r3, r3, #4
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00a      	beq.n	800c104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	430a      	orrs	r2, r1
 800c102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00a      	beq.n	800c126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	430a      	orrs	r2, r1
 800c124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	d01a      	beq.n	800c18a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	430a      	orrs	r2, r1
 800c168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c16e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c172:	d10a      	bne.n	800c18a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00a      	beq.n	800c1ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	605a      	str	r2, [r3, #4]
  }
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b098      	sub	sp, #96	@ 0x60
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1c8:	f7f8 fff0 	bl	80051ac <HAL_GetTick>
 800c1cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0308 	and.w	r3, r3, #8
 800c1d8:	2b08      	cmp	r3, #8
 800c1da:	d12f      	bne.n	800c23c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f88e 	bl	800c30c <UART_WaitOnFlagUntilTimeout>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d022      	beq.n	800c23c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fe:	e853 3f00 	ldrex	r3, [r3]
 800c202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c20a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	461a      	mov	r2, r3
 800c212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c214:	647b      	str	r3, [r7, #68]	@ 0x44
 800c216:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c21a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e6      	bne.n	800c1f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2220      	movs	r2, #32
 800c22c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e063      	b.n	800c304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0304 	and.w	r3, r3, #4
 800c246:	2b04      	cmp	r3, #4
 800c248:	d149      	bne.n	800c2de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c24a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c252:	2200      	movs	r2, #0
 800c254:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f857 	bl	800c30c <UART_WaitOnFlagUntilTimeout>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d03c      	beq.n	800c2de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	623b      	str	r3, [r7, #32]
   return(result);
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c282:	633b      	str	r3, [r7, #48]	@ 0x30
 800c284:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e6      	bne.n	800c264 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3308      	adds	r3, #8
 800c29c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f023 0301 	bic.w	r3, r3, #1
 800c2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2b6:	61fa      	str	r2, [r7, #28]
 800c2b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	69b9      	ldr	r1, [r7, #24]
 800c2bc:	69fa      	ldr	r2, [r7, #28]
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	617b      	str	r3, [r7, #20]
   return(result);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e5      	bne.n	800c296 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e012      	b.n	800c304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3758      	adds	r7, #88	@ 0x58
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c31c:	e04f      	b.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c324:	d04b      	beq.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c326:	f7f8 ff41 	bl	80051ac <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	429a      	cmp	r2, r3
 800c334:	d302      	bcc.n	800c33c <UART_WaitOnFlagUntilTimeout+0x30>
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e04e      	b.n	800c3de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d037      	beq.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b80      	cmp	r3, #128	@ 0x80
 800c352:	d034      	beq.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b40      	cmp	r3, #64	@ 0x40
 800c358:	d031      	beq.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	69db      	ldr	r3, [r3, #28]
 800c360:	f003 0308 	and.w	r3, r3, #8
 800c364:	2b08      	cmp	r3, #8
 800c366:	d110      	bne.n	800c38a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2208      	movs	r2, #8
 800c36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 f920 	bl	800c5b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2208      	movs	r2, #8
 800c37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e029      	b.n	800c3de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c398:	d111      	bne.n	800c3be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f906 	bl	800c5b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e00f      	b.n	800c3de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	69da      	ldr	r2, [r3, #28]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	bf0c      	ite	eq
 800c3ce:	2301      	moveq	r3, #1
 800c3d0:	2300      	movne	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	79fb      	ldrb	r3, [r7, #7]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d0a0      	beq.n	800c31e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b096      	sub	sp, #88	@ 0x58
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	88fa      	ldrh	r2, [r7, #6]
 800c400:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2222      	movs	r2, #34	@ 0x22
 800c410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d02d      	beq.n	800c47a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c424:	4a40      	ldr	r2, [pc, #256]	@ (800c528 <UART_Start_Receive_DMA+0x140>)
 800c426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c42e:	4a3f      	ldr	r2, [pc, #252]	@ (800c52c <UART_Start_Receive_DMA+0x144>)
 800c430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c438:	4a3d      	ldr	r2, [pc, #244]	@ (800c530 <UART_Start_Receive_DMA+0x148>)
 800c43a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c442:	2200      	movs	r2, #0
 800c444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3324      	adds	r3, #36	@ 0x24
 800c452:	4619      	mov	r1, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c458:	461a      	mov	r2, r3
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	f7fa fe8c 	bl	8007178 <HAL_DMA_Start_IT>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d009      	beq.n	800c47a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2210      	movs	r2, #16
 800c46a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e051      	b.n	800c51e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d018      	beq.n	800c4b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48a:	e853 3f00 	ldrex	r3, [r3]
 800c48e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c496:	657b      	str	r3, [r7, #84]	@ 0x54
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c4a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4a8:	e841 2300 	strex	r3, r2, [r1]
 800c4ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c4ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e6      	bne.n	800c482 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4be:	e853 3f00 	ldrex	r3, [r3]
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	f043 0301 	orr.w	r3, r3, #1
 800c4ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4dc:	e841 2300 	strex	r3, r2, [r1]
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1e5      	bne.n	800c4b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	e853 3f00 	ldrex	r3, [r3]
 800c4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3308      	adds	r3, #8
 800c506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c508:	623a      	str	r2, [r7, #32]
 800c50a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50c:	69f9      	ldr	r1, [r7, #28]
 800c50e:	6a3a      	ldr	r2, [r7, #32]
 800c510:	e841 2300 	strex	r3, r2, [r1]
 800c514:	61bb      	str	r3, [r7, #24]
   return(result);
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e5      	bne.n	800c4e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3758      	adds	r7, #88	@ 0x58
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	0800c741 	.word	0x0800c741
 800c52c:	0800c875 	.word	0x0800c875
 800c530:	0800c8bb 	.word	0x0800c8bb

0800c534 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c534:	b480      	push	{r7}
 800c536:	b08f      	sub	sp, #60	@ 0x3c
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	61fb      	str	r3, [r7, #28]
   return(result);
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c550:	637b      	str	r3, [r7, #52]	@ 0x34
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	461a      	mov	r2, r3
 800c558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c55c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e6      	bne.n	800c53c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3308      	adds	r3, #8
 800c574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c584:	633b      	str	r3, [r7, #48]	@ 0x30
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3308      	adds	r3, #8
 800c58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c58e:	61ba      	str	r2, [r7, #24]
 800c590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6979      	ldr	r1, [r7, #20]
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	613b      	str	r3, [r7, #16]
   return(result);
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e5      	bne.n	800c56e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c5aa:	bf00      	nop
 800c5ac:	373c      	adds	r7, #60	@ 0x3c
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b095      	sub	sp, #84	@ 0x54
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c5e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	e853 3f00 	ldrex	r3, [r3]
 800c5fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c606:	f023 0301 	bic.w	r3, r3, #1
 800c60a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c61a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c61c:	e841 2300 	strex	r3, r2, [r1]
 800c620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e3      	bne.n	800c5f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d118      	bne.n	800c662 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	f023 0310 	bic.w	r3, r3, #16
 800c644:	647b      	str	r3, [r7, #68]	@ 0x44
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	461a      	mov	r2, r3
 800c64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c64e:	61bb      	str	r3, [r7, #24]
 800c650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	6979      	ldr	r1, [r7, #20]
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	613b      	str	r3, [r7, #16]
   return(result);
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e6      	bne.n	800c630 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2220      	movs	r2, #32
 800c666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c676:	bf00      	nop
 800c678:	3754      	adds	r7, #84	@ 0x54
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b090      	sub	sp, #64	@ 0x40
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c68e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0320 	and.w	r3, r3, #32
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d137      	bne.n	800c70e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e5      	bne.n	800c6a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	e853 3f00 	ldrex	r3, [r3]
 800c6e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fc:	69b9      	ldr	r1, [r7, #24]
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	e841 2300 	strex	r3, r2, [r1]
 800c704:	617b      	str	r3, [r7, #20]
   return(result);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1e6      	bne.n	800c6da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c70c:	e004      	b.n	800c718 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c714:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c716:	4798      	blx	r3
}
 800c718:	bf00      	nop
 800c71a:	3740      	adds	r7, #64	@ 0x40
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b09c      	sub	sp, #112	@ 0x70
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 0320 	and.w	r3, r3, #32
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d171      	bne.n	800c840 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c75c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c75e:	2200      	movs	r2, #0
 800c760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c77a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c782:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c784:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c78a:	e841 2300 	strex	r3, r2, [r1]
 800c78e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1e6      	bne.n	800c764 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3308      	adds	r3, #8
 800c79c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	e853 3f00 	ldrex	r3, [r3]
 800c7a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a8:	f023 0301 	bic.w	r3, r3, #1
 800c7ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800c7ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c7b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c7b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e5      	bne.n	800c796 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c7ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800c7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e5      	bne.n	800c7ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c7fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c800:	2220      	movs	r2, #32
 800c802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d118      	bne.n	800c840 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c80e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	e853 3f00 	ldrex	r3, [r3]
 800c81a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f023 0310 	bic.w	r3, r3, #16
 800c822:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c82c:	61fb      	str	r3, [r7, #28]
 800c82e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c830:	69b9      	ldr	r1, [r7, #24]
 800c832:	69fa      	ldr	r2, [r7, #28]
 800c834:	e841 2300 	strex	r3, r2, [r1]
 800c838:	617b      	str	r3, [r7, #20]
   return(result);
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1e6      	bne.n	800c80e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c842:	2200      	movs	r2, #0
 800c844:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d109      	bne.n	800c862 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c84e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c850:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c854:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c856:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c85a:	4611      	mov	r1, r2
 800c85c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c85e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c860:	e004      	b.n	800c86c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c864:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c868:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c86a:	4798      	blx	r3
}
 800c86c:	bf00      	nop
 800c86e:	3770      	adds	r7, #112	@ 0x70
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c880:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d10b      	bne.n	800c8a8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c89c:	0852      	lsrs	r2, r2, #1
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8a6:	e004      	b.n	800c8b2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	4798      	blx	r3
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8e2:	2b80      	cmp	r3, #128	@ 0x80
 800c8e4:	d109      	bne.n	800c8fa <UART_DMAError+0x40>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2b21      	cmp	r3, #33	@ 0x21
 800c8ea:	d106      	bne.n	800c8fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c8f4:	6978      	ldr	r0, [r7, #20]
 800c8f6:	f7ff fe1d 	bl	800c534 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c904:	2b40      	cmp	r3, #64	@ 0x40
 800c906:	d109      	bne.n	800c91c <UART_DMAError+0x62>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b22      	cmp	r3, #34	@ 0x22
 800c90c:	d106      	bne.n	800c91c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2200      	movs	r2, #0
 800c912:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c916:	6978      	ldr	r0, [r7, #20]
 800c918:	f7ff fe4d 	bl	800c5b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c922:	f043 0210 	orr.w	r2, r3, #16
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c936:	bf00      	nop
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b088      	sub	sp, #32
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c990:	6979      	ldr	r1, [r7, #20]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	613b      	str	r3, [r7, #16]
   return(result);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e6      	bne.n	800c96e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9b8:	bf00      	nop
 800c9ba:	3720      	adds	r7, #32
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d101      	bne.n	800ca12 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca0e:	2302      	movs	r3, #2
 800ca10:	e027      	b.n	800ca62 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2224      	movs	r2, #36	@ 0x24
 800ca1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f022 0201 	bic.w	r2, r2, #1
 800ca38:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2220      	movs	r2, #32
 800ca54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b084      	sub	sp, #16
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e02d      	b.n	800cae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2224      	movs	r2, #36	@ 0x24
 800ca92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0201 	bic.w	r2, r2, #1
 800caac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	430a      	orrs	r2, r1
 800cac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f850 	bl	800cb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2220      	movs	r2, #32
 800cad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d101      	bne.n	800cb02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cafe:	2302      	movs	r3, #2
 800cb00:	e02d      	b.n	800cb5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2224      	movs	r2, #36	@ 0x24
 800cb0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f022 0201 	bic.w	r2, r2, #1
 800cb28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f812 	bl	800cb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2220      	movs	r2, #32
 800cb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d108      	bne.n	800cb8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb88:	e031      	b.n	800cbee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb8a:	2308      	movs	r3, #8
 800cb8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb8e:	2308      	movs	r3, #8
 800cb90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	0e5b      	lsrs	r3, r3, #25
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	f003 0307 	and.w	r3, r3, #7
 800cba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	0f5b      	lsrs	r3, r3, #29
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	f003 0307 	and.w	r3, r3, #7
 800cbb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	7b3a      	ldrb	r2, [r7, #12]
 800cbb6:	4911      	ldr	r1, [pc, #68]	@ (800cbfc <UARTEx_SetNbDataToProcess+0x94>)
 800cbb8:	5c8a      	ldrb	r2, [r1, r2]
 800cbba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbbe:	7b3a      	ldrb	r2, [r7, #12]
 800cbc0:	490f      	ldr	r1, [pc, #60]	@ (800cc00 <UARTEx_SetNbDataToProcess+0x98>)
 800cbc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	7b7a      	ldrb	r2, [r7, #13]
 800cbd4:	4909      	ldr	r1, [pc, #36]	@ (800cbfc <UARTEx_SetNbDataToProcess+0x94>)
 800cbd6:	5c8a      	ldrb	r2, [r1, r2]
 800cbd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbdc:	7b7a      	ldrb	r2, [r7, #13]
 800cbde:	4908      	ldr	r1, [pc, #32]	@ (800cc00 <UARTEx_SetNbDataToProcess+0x98>)
 800cbe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cbee:	bf00      	nop
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	0800f258 	.word	0x0800f258
 800cc00:	0800f260 	.word	0x0800f260

0800cc04 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	ed93 7a06 	vldr	s14, [r3, #24]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	edd3 7a07 	vldr	s15, [r3, #28]
 800cc1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	edd3 7a08 	vldr	s15, [r3, #32]
 800cc24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	edd3 7a06 	vldr	s15, [r3, #24]
 800cc34:	eeb1 7a67 	vneg.f32	s14, s15
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	edd3 7a08 	vldr	s15, [r3, #32]
 800cc3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cc42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6a1a      	ldr	r2, [r3, #32]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d006      	beq.n	800cc68 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	330c      	adds	r3, #12
 800cc5e:	220c      	movs	r2, #12
 800cc60:	2100      	movs	r1, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f804 	bl	800cc70 <memset>
  }

}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <memset>:
 800cc70:	4402      	add	r2, r0
 800cc72:	4603      	mov	r3, r0
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d100      	bne.n	800cc7a <memset+0xa>
 800cc78:	4770      	bx	lr
 800cc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc7e:	e7f9      	b.n	800cc74 <memset+0x4>

0800cc80 <__errno>:
 800cc80:	4b01      	ldr	r3, [pc, #4]	@ (800cc88 <__errno+0x8>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	2000022c 	.word	0x2000022c

0800cc8c <__libc_init_array>:
 800cc8c:	b570      	push	{r4, r5, r6, lr}
 800cc8e:	4d0d      	ldr	r5, [pc, #52]	@ (800ccc4 <__libc_init_array+0x38>)
 800cc90:	4c0d      	ldr	r4, [pc, #52]	@ (800ccc8 <__libc_init_array+0x3c>)
 800cc92:	1b64      	subs	r4, r4, r5
 800cc94:	10a4      	asrs	r4, r4, #2
 800cc96:	2600      	movs	r6, #0
 800cc98:	42a6      	cmp	r6, r4
 800cc9a:	d109      	bne.n	800ccb0 <__libc_init_array+0x24>
 800cc9c:	4d0b      	ldr	r5, [pc, #44]	@ (800cccc <__libc_init_array+0x40>)
 800cc9e:	4c0c      	ldr	r4, [pc, #48]	@ (800ccd0 <__libc_init_array+0x44>)
 800cca0:	f000 fbb6 	bl	800d410 <_init>
 800cca4:	1b64      	subs	r4, r4, r5
 800cca6:	10a4      	asrs	r4, r4, #2
 800cca8:	2600      	movs	r6, #0
 800ccaa:	42a6      	cmp	r6, r4
 800ccac:	d105      	bne.n	800ccba <__libc_init_array+0x2e>
 800ccae:	bd70      	pop	{r4, r5, r6, pc}
 800ccb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccb4:	4798      	blx	r3
 800ccb6:	3601      	adds	r6, #1
 800ccb8:	e7ee      	b.n	800cc98 <__libc_init_array+0xc>
 800ccba:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccbe:	4798      	blx	r3
 800ccc0:	3601      	adds	r6, #1
 800ccc2:	e7f2      	b.n	800ccaa <__libc_init_array+0x1e>
 800ccc4:	0800f2f0 	.word	0x0800f2f0
 800ccc8:	0800f2f0 	.word	0x0800f2f0
 800cccc:	0800f2f0 	.word	0x0800f2f0
 800ccd0:	0800f2f4 	.word	0x0800f2f4

0800ccd4 <memcpy>:
 800ccd4:	440a      	add	r2, r1
 800ccd6:	4291      	cmp	r1, r2
 800ccd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccdc:	d100      	bne.n	800cce0 <memcpy+0xc>
 800ccde:	4770      	bx	lr
 800cce0:	b510      	push	{r4, lr}
 800cce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccea:	4291      	cmp	r1, r2
 800ccec:	d1f9      	bne.n	800cce2 <memcpy+0xe>
 800ccee:	bd10      	pop	{r4, pc}

0800ccf0 <atan2>:
 800ccf0:	f000 b926 	b.w	800cf40 <__ieee754_atan2>

0800ccf4 <sqrt>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	ed2d 8b02 	vpush	{d8}
 800ccfa:	ec55 4b10 	vmov	r4, r5, d0
 800ccfe:	f000 f843 	bl	800cd88 <__ieee754_sqrt>
 800cd02:	4622      	mov	r2, r4
 800cd04:	462b      	mov	r3, r5
 800cd06:	4620      	mov	r0, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	eeb0 8a40 	vmov.f32	s16, s0
 800cd0e:	eef0 8a60 	vmov.f32	s17, s1
 800cd12:	f7f3 fed7 	bl	8000ac4 <__aeabi_dcmpun>
 800cd16:	b990      	cbnz	r0, 800cd3e <sqrt+0x4a>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	4629      	mov	r1, r5
 800cd20:	f7f3 fea8 	bl	8000a74 <__aeabi_dcmplt>
 800cd24:	b158      	cbz	r0, 800cd3e <sqrt+0x4a>
 800cd26:	f7ff ffab 	bl	800cc80 <__errno>
 800cd2a:	2321      	movs	r3, #33	@ 0x21
 800cd2c:	6003      	str	r3, [r0, #0]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	4610      	mov	r0, r2
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7f3 fd55 	bl	80007e4 <__aeabi_ddiv>
 800cd3a:	ec41 0b18 	vmov	d8, r0, r1
 800cd3e:	eeb0 0a48 	vmov.f32	s0, s16
 800cd42:	eef0 0a68 	vmov.f32	s1, s17
 800cd46:	ecbd 8b02 	vpop	{d8}
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}

0800cd4c <sqrtf>:
 800cd4c:	b508      	push	{r3, lr}
 800cd4e:	ed2d 8b02 	vpush	{d8}
 800cd52:	eeb0 8a40 	vmov.f32	s16, s0
 800cd56:	f000 f8ed 	bl	800cf34 <__ieee754_sqrtf>
 800cd5a:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd62:	d60c      	bvs.n	800cd7e <sqrtf+0x32>
 800cd64:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cd84 <sqrtf+0x38>
 800cd68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd70:	d505      	bpl.n	800cd7e <sqrtf+0x32>
 800cd72:	f7ff ff85 	bl	800cc80 <__errno>
 800cd76:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cd7a:	2321      	movs	r3, #33	@ 0x21
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	ecbd 8b02 	vpop	{d8}
 800cd82:	bd08      	pop	{r3, pc}
 800cd84:	00000000 	.word	0x00000000

0800cd88 <__ieee754_sqrt>:
 800cd88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	4a66      	ldr	r2, [pc, #408]	@ (800cf28 <__ieee754_sqrt+0x1a0>)
 800cd8e:	ec55 4b10 	vmov	r4, r5, d0
 800cd92:	43aa      	bics	r2, r5
 800cd94:	462b      	mov	r3, r5
 800cd96:	4621      	mov	r1, r4
 800cd98:	d110      	bne.n	800cdbc <__ieee754_sqrt+0x34>
 800cd9a:	4622      	mov	r2, r4
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	4629      	mov	r1, r5
 800cda0:	f7f3 fbf6 	bl	8000590 <__aeabi_dmul>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4620      	mov	r0, r4
 800cdaa:	4629      	mov	r1, r5
 800cdac:	f7f3 fa3a 	bl	8000224 <__adddf3>
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	460d      	mov	r5, r1
 800cdb4:	ec45 4b10 	vmov	d0, r4, r5
 800cdb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	2d00      	cmp	r5, #0
 800cdbe:	dc0e      	bgt.n	800cdde <__ieee754_sqrt+0x56>
 800cdc0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cdc4:	4322      	orrs	r2, r4
 800cdc6:	d0f5      	beq.n	800cdb4 <__ieee754_sqrt+0x2c>
 800cdc8:	b19d      	cbz	r5, 800cdf2 <__ieee754_sqrt+0x6a>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	4620      	mov	r0, r4
 800cdce:	4629      	mov	r1, r5
 800cdd0:	f7f3 fa26 	bl	8000220 <__aeabi_dsub>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	f7f3 fd04 	bl	80007e4 <__aeabi_ddiv>
 800cddc:	e7e8      	b.n	800cdb0 <__ieee754_sqrt+0x28>
 800cdde:	152a      	asrs	r2, r5, #20
 800cde0:	d115      	bne.n	800ce0e <__ieee754_sqrt+0x86>
 800cde2:	2000      	movs	r0, #0
 800cde4:	e009      	b.n	800cdfa <__ieee754_sqrt+0x72>
 800cde6:	0acb      	lsrs	r3, r1, #11
 800cde8:	3a15      	subs	r2, #21
 800cdea:	0549      	lsls	r1, r1, #21
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0fa      	beq.n	800cde6 <__ieee754_sqrt+0x5e>
 800cdf0:	e7f7      	b.n	800cde2 <__ieee754_sqrt+0x5a>
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	e7fa      	b.n	800cdec <__ieee754_sqrt+0x64>
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	02dc      	lsls	r4, r3, #11
 800cdfc:	d5fb      	bpl.n	800cdf6 <__ieee754_sqrt+0x6e>
 800cdfe:	1e44      	subs	r4, r0, #1
 800ce00:	1b12      	subs	r2, r2, r4
 800ce02:	f1c0 0420 	rsb	r4, r0, #32
 800ce06:	fa21 f404 	lsr.w	r4, r1, r4
 800ce0a:	4323      	orrs	r3, r4
 800ce0c:	4081      	lsls	r1, r0
 800ce0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ce16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce1a:	07d2      	lsls	r2, r2, #31
 800ce1c:	bf5c      	itt	pl
 800ce1e:	005b      	lslpl	r3, r3, #1
 800ce20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ce24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce28:	bf58      	it	pl
 800ce2a:	0049      	lslpl	r1, r1, #1
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce32:	107f      	asrs	r7, r7, #1
 800ce34:	0049      	lsls	r1, r1, #1
 800ce36:	2016      	movs	r0, #22
 800ce38:	4632      	mov	r2, r6
 800ce3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce3e:	1915      	adds	r5, r2, r4
 800ce40:	429d      	cmp	r5, r3
 800ce42:	bfde      	ittt	le
 800ce44:	192a      	addle	r2, r5, r4
 800ce46:	1b5b      	suble	r3, r3, r5
 800ce48:	1936      	addle	r6, r6, r4
 800ce4a:	0fcd      	lsrs	r5, r1, #31
 800ce4c:	3801      	subs	r0, #1
 800ce4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ce52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce5a:	d1f0      	bne.n	800ce3e <__ieee754_sqrt+0xb6>
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	2420      	movs	r4, #32
 800ce60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce64:	4293      	cmp	r3, r2
 800ce66:	eb0c 0e00 	add.w	lr, ip, r0
 800ce6a:	dc02      	bgt.n	800ce72 <__ieee754_sqrt+0xea>
 800ce6c:	d113      	bne.n	800ce96 <__ieee754_sqrt+0x10e>
 800ce6e:	458e      	cmp	lr, r1
 800ce70:	d811      	bhi.n	800ce96 <__ieee754_sqrt+0x10e>
 800ce72:	f1be 0f00 	cmp.w	lr, #0
 800ce76:	eb0e 000c 	add.w	r0, lr, ip
 800ce7a:	da3f      	bge.n	800cefc <__ieee754_sqrt+0x174>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	db3d      	blt.n	800cefc <__ieee754_sqrt+0x174>
 800ce80:	f102 0801 	add.w	r8, r2, #1
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	458e      	cmp	lr, r1
 800ce88:	bf88      	it	hi
 800ce8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ce8e:	eba1 010e 	sub.w	r1, r1, lr
 800ce92:	4465      	add	r5, ip
 800ce94:	4642      	mov	r2, r8
 800ce96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ce9a:	3c01      	subs	r4, #1
 800ce9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cea0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cea4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cea8:	d1dc      	bne.n	800ce64 <__ieee754_sqrt+0xdc>
 800ceaa:	4319      	orrs	r1, r3
 800ceac:	d01b      	beq.n	800cee6 <__ieee754_sqrt+0x15e>
 800ceae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800cf2c <__ieee754_sqrt+0x1a4>
 800ceb2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800cf30 <__ieee754_sqrt+0x1a8>
 800ceb6:	e9da 0100 	ldrd	r0, r1, [sl]
 800ceba:	e9db 2300 	ldrd	r2, r3, [fp]
 800cebe:	f7f3 f9af 	bl	8000220 <__aeabi_dsub>
 800cec2:	e9da 8900 	ldrd	r8, r9, [sl]
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	4640      	mov	r0, r8
 800cecc:	4649      	mov	r1, r9
 800cece:	f7f3 fddb 	bl	8000a88 <__aeabi_dcmple>
 800ced2:	b140      	cbz	r0, 800cee6 <__ieee754_sqrt+0x15e>
 800ced4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ced8:	e9da 0100 	ldrd	r0, r1, [sl]
 800cedc:	e9db 2300 	ldrd	r2, r3, [fp]
 800cee0:	d10e      	bne.n	800cf00 <__ieee754_sqrt+0x178>
 800cee2:	3601      	adds	r6, #1
 800cee4:	4625      	mov	r5, r4
 800cee6:	1073      	asrs	r3, r6, #1
 800cee8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ceec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800cef0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800cef4:	086b      	lsrs	r3, r5, #1
 800cef6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800cefa:	e759      	b.n	800cdb0 <__ieee754_sqrt+0x28>
 800cefc:	4690      	mov	r8, r2
 800cefe:	e7c1      	b.n	800ce84 <__ieee754_sqrt+0xfc>
 800cf00:	f7f3 f990 	bl	8000224 <__adddf3>
 800cf04:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	4649      	mov	r1, r9
 800cf10:	f7f3 fdb0 	bl	8000a74 <__aeabi_dcmplt>
 800cf14:	b120      	cbz	r0, 800cf20 <__ieee754_sqrt+0x198>
 800cf16:	1cab      	adds	r3, r5, #2
 800cf18:	bf08      	it	eq
 800cf1a:	3601      	addeq	r6, #1
 800cf1c:	3502      	adds	r5, #2
 800cf1e:	e7e2      	b.n	800cee6 <__ieee754_sqrt+0x15e>
 800cf20:	1c6b      	adds	r3, r5, #1
 800cf22:	f023 0501 	bic.w	r5, r3, #1
 800cf26:	e7de      	b.n	800cee6 <__ieee754_sqrt+0x15e>
 800cf28:	7ff00000 	.word	0x7ff00000
 800cf2c:	0800f270 	.word	0x0800f270
 800cf30:	0800f268 	.word	0x0800f268

0800cf34 <__ieee754_sqrtf>:
 800cf34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cf38:	4770      	bx	lr
 800cf3a:	0000      	movs	r0, r0
 800cf3c:	0000      	movs	r0, r0
	...

0800cf40 <__ieee754_atan2>:
 800cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf44:	ec57 6b11 	vmov	r6, r7, d1
 800cf48:	4273      	negs	r3, r6
 800cf4a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d0c8 <__ieee754_atan2+0x188>
 800cf4e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800cf52:	4333      	orrs	r3, r6
 800cf54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cf58:	4543      	cmp	r3, r8
 800cf5a:	ec51 0b10 	vmov	r0, r1, d0
 800cf5e:	4635      	mov	r5, r6
 800cf60:	d809      	bhi.n	800cf76 <__ieee754_atan2+0x36>
 800cf62:	4244      	negs	r4, r0
 800cf64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cf68:	4304      	orrs	r4, r0
 800cf6a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cf6e:	4544      	cmp	r4, r8
 800cf70:	468e      	mov	lr, r1
 800cf72:	4681      	mov	r9, r0
 800cf74:	d907      	bls.n	800cf86 <__ieee754_atan2+0x46>
 800cf76:	4632      	mov	r2, r6
 800cf78:	463b      	mov	r3, r7
 800cf7a:	f7f3 f953 	bl	8000224 <__adddf3>
 800cf7e:	ec41 0b10 	vmov	d0, r0, r1
 800cf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf86:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800cf8a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800cf8e:	4334      	orrs	r4, r6
 800cf90:	d103      	bne.n	800cf9a <__ieee754_atan2+0x5a>
 800cf92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf96:	f000 b89b 	b.w	800d0d0 <atan>
 800cf9a:	17bc      	asrs	r4, r7, #30
 800cf9c:	f004 0402 	and.w	r4, r4, #2
 800cfa0:	ea53 0909 	orrs.w	r9, r3, r9
 800cfa4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cfa8:	d107      	bne.n	800cfba <__ieee754_atan2+0x7a>
 800cfaa:	2c02      	cmp	r4, #2
 800cfac:	d05f      	beq.n	800d06e <__ieee754_atan2+0x12e>
 800cfae:	2c03      	cmp	r4, #3
 800cfb0:	d1e5      	bne.n	800cf7e <__ieee754_atan2+0x3e>
 800cfb2:	a143      	add	r1, pc, #268	@ (adr r1, 800d0c0 <__ieee754_atan2+0x180>)
 800cfb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfb8:	e7e1      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800cfba:	4315      	orrs	r5, r2
 800cfbc:	d106      	bne.n	800cfcc <__ieee754_atan2+0x8c>
 800cfbe:	f1be 0f00 	cmp.w	lr, #0
 800cfc2:	db5f      	blt.n	800d084 <__ieee754_atan2+0x144>
 800cfc4:	a136      	add	r1, pc, #216	@ (adr r1, 800d0a0 <__ieee754_atan2+0x160>)
 800cfc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfca:	e7d8      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800cfcc:	4542      	cmp	r2, r8
 800cfce:	d10f      	bne.n	800cff0 <__ieee754_atan2+0xb0>
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cfd6:	d107      	bne.n	800cfe8 <__ieee754_atan2+0xa8>
 800cfd8:	2c02      	cmp	r4, #2
 800cfda:	d84c      	bhi.n	800d076 <__ieee754_atan2+0x136>
 800cfdc:	4b36      	ldr	r3, [pc, #216]	@ (800d0b8 <__ieee754_atan2+0x178>)
 800cfde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfe6:	e7ca      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800cfe8:	2c02      	cmp	r4, #2
 800cfea:	d848      	bhi.n	800d07e <__ieee754_atan2+0x13e>
 800cfec:	4b33      	ldr	r3, [pc, #204]	@ (800d0bc <__ieee754_atan2+0x17c>)
 800cfee:	e7f6      	b.n	800cfde <__ieee754_atan2+0x9e>
 800cff0:	4543      	cmp	r3, r8
 800cff2:	d0e4      	beq.n	800cfbe <__ieee754_atan2+0x7e>
 800cff4:	1a9b      	subs	r3, r3, r2
 800cff6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800cffa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cffe:	da1e      	bge.n	800d03e <__ieee754_atan2+0xfe>
 800d000:	2f00      	cmp	r7, #0
 800d002:	da01      	bge.n	800d008 <__ieee754_atan2+0xc8>
 800d004:	323c      	adds	r2, #60	@ 0x3c
 800d006:	db1e      	blt.n	800d046 <__ieee754_atan2+0x106>
 800d008:	4632      	mov	r2, r6
 800d00a:	463b      	mov	r3, r7
 800d00c:	f7f3 fbea 	bl	80007e4 <__aeabi_ddiv>
 800d010:	ec41 0b10 	vmov	d0, r0, r1
 800d014:	f000 f9f4 	bl	800d400 <fabs>
 800d018:	f000 f85a 	bl	800d0d0 <atan>
 800d01c:	ec51 0b10 	vmov	r0, r1, d0
 800d020:	2c01      	cmp	r4, #1
 800d022:	d013      	beq.n	800d04c <__ieee754_atan2+0x10c>
 800d024:	2c02      	cmp	r4, #2
 800d026:	d015      	beq.n	800d054 <__ieee754_atan2+0x114>
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d0a8      	beq.n	800cf7e <__ieee754_atan2+0x3e>
 800d02c:	a318      	add	r3, pc, #96	@ (adr r3, 800d090 <__ieee754_atan2+0x150>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	f7f3 f8f5 	bl	8000220 <__aeabi_dsub>
 800d036:	a318      	add	r3, pc, #96	@ (adr r3, 800d098 <__ieee754_atan2+0x158>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	e014      	b.n	800d068 <__ieee754_atan2+0x128>
 800d03e:	a118      	add	r1, pc, #96	@ (adr r1, 800d0a0 <__ieee754_atan2+0x160>)
 800d040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d044:	e7ec      	b.n	800d020 <__ieee754_atan2+0xe0>
 800d046:	2000      	movs	r0, #0
 800d048:	2100      	movs	r1, #0
 800d04a:	e7e9      	b.n	800d020 <__ieee754_atan2+0xe0>
 800d04c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d050:	4619      	mov	r1, r3
 800d052:	e794      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d054:	a30e      	add	r3, pc, #56	@ (adr r3, 800d090 <__ieee754_atan2+0x150>)
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f3 f8e1 	bl	8000220 <__aeabi_dsub>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	a10d      	add	r1, pc, #52	@ (adr r1, 800d098 <__ieee754_atan2+0x158>)
 800d064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d068:	f7f3 f8da 	bl	8000220 <__aeabi_dsub>
 800d06c:	e787      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d06e:	a10a      	add	r1, pc, #40	@ (adr r1, 800d098 <__ieee754_atan2+0x158>)
 800d070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d074:	e783      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d076:	a10c      	add	r1, pc, #48	@ (adr r1, 800d0a8 <__ieee754_atan2+0x168>)
 800d078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d07c:	e77f      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d07e:	2000      	movs	r0, #0
 800d080:	2100      	movs	r1, #0
 800d082:	e77c      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d084:	a10a      	add	r1, pc, #40	@ (adr r1, 800d0b0 <__ieee754_atan2+0x170>)
 800d086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d08a:	e778      	b.n	800cf7e <__ieee754_atan2+0x3e>
 800d08c:	f3af 8000 	nop.w
 800d090:	33145c07 	.word	0x33145c07
 800d094:	3ca1a626 	.word	0x3ca1a626
 800d098:	54442d18 	.word	0x54442d18
 800d09c:	400921fb 	.word	0x400921fb
 800d0a0:	54442d18 	.word	0x54442d18
 800d0a4:	3ff921fb 	.word	0x3ff921fb
 800d0a8:	54442d18 	.word	0x54442d18
 800d0ac:	3fe921fb 	.word	0x3fe921fb
 800d0b0:	54442d18 	.word	0x54442d18
 800d0b4:	bff921fb 	.word	0xbff921fb
 800d0b8:	0800f290 	.word	0x0800f290
 800d0bc:	0800f278 	.word	0x0800f278
 800d0c0:	54442d18 	.word	0x54442d18
 800d0c4:	c00921fb 	.word	0xc00921fb
 800d0c8:	7ff00000 	.word	0x7ff00000
 800d0cc:	00000000 	.word	0x00000000

0800d0d0 <atan>:
 800d0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	ec55 4b10 	vmov	r4, r5, d0
 800d0d8:	4bbf      	ldr	r3, [pc, #764]	@ (800d3d8 <atan+0x308>)
 800d0da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d0de:	429e      	cmp	r6, r3
 800d0e0:	46ab      	mov	fp, r5
 800d0e2:	d918      	bls.n	800d116 <atan+0x46>
 800d0e4:	4bbd      	ldr	r3, [pc, #756]	@ (800d3dc <atan+0x30c>)
 800d0e6:	429e      	cmp	r6, r3
 800d0e8:	d801      	bhi.n	800d0ee <atan+0x1e>
 800d0ea:	d109      	bne.n	800d100 <atan+0x30>
 800d0ec:	b144      	cbz	r4, 800d100 <atan+0x30>
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	f7f3 f895 	bl	8000224 <__adddf3>
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	e006      	b.n	800d10e <atan+0x3e>
 800d100:	f1bb 0f00 	cmp.w	fp, #0
 800d104:	f340 812b 	ble.w	800d35e <atan+0x28e>
 800d108:	a597      	add	r5, pc, #604	@ (adr r5, 800d368 <atan+0x298>)
 800d10a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d10e:	ec45 4b10 	vmov	d0, r4, r5
 800d112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d116:	4bb2      	ldr	r3, [pc, #712]	@ (800d3e0 <atan+0x310>)
 800d118:	429e      	cmp	r6, r3
 800d11a:	d813      	bhi.n	800d144 <atan+0x74>
 800d11c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d120:	429e      	cmp	r6, r3
 800d122:	d80c      	bhi.n	800d13e <atan+0x6e>
 800d124:	a392      	add	r3, pc, #584	@ (adr r3, 800d370 <atan+0x2a0>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 f879 	bl	8000224 <__adddf3>
 800d132:	4bac      	ldr	r3, [pc, #688]	@ (800d3e4 <atan+0x314>)
 800d134:	2200      	movs	r2, #0
 800d136:	f7f3 fcbb 	bl	8000ab0 <__aeabi_dcmpgt>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1e7      	bne.n	800d10e <atan+0x3e>
 800d13e:	f04f 3aff 	mov.w	sl, #4294967295
 800d142:	e029      	b.n	800d198 <atan+0xc8>
 800d144:	f000 f95c 	bl	800d400 <fabs>
 800d148:	4ba7      	ldr	r3, [pc, #668]	@ (800d3e8 <atan+0x318>)
 800d14a:	429e      	cmp	r6, r3
 800d14c:	ec55 4b10 	vmov	r4, r5, d0
 800d150:	f200 80bc 	bhi.w	800d2cc <atan+0x1fc>
 800d154:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d158:	429e      	cmp	r6, r3
 800d15a:	f200 809e 	bhi.w	800d29a <atan+0x1ca>
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	4620      	mov	r0, r4
 800d164:	4629      	mov	r1, r5
 800d166:	f7f3 f85d 	bl	8000224 <__adddf3>
 800d16a:	4b9e      	ldr	r3, [pc, #632]	@ (800d3e4 <atan+0x314>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	f7f3 f857 	bl	8000220 <__aeabi_dsub>
 800d172:	2200      	movs	r2, #0
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d17c:	4620      	mov	r0, r4
 800d17e:	4629      	mov	r1, r5
 800d180:	f7f3 f850 	bl	8000224 <__adddf3>
 800d184:	4602      	mov	r2, r0
 800d186:	460b      	mov	r3, r1
 800d188:	4630      	mov	r0, r6
 800d18a:	4639      	mov	r1, r7
 800d18c:	f7f3 fb2a 	bl	80007e4 <__aeabi_ddiv>
 800d190:	f04f 0a00 	mov.w	sl, #0
 800d194:	4604      	mov	r4, r0
 800d196:	460d      	mov	r5, r1
 800d198:	4622      	mov	r2, r4
 800d19a:	462b      	mov	r3, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	f7f3 f9f6 	bl	8000590 <__aeabi_dmul>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	4689      	mov	r9, r1
 800d1ac:	f7f3 f9f0 	bl	8000590 <__aeabi_dmul>
 800d1b0:	a371      	add	r3, pc, #452	@ (adr r3, 800d378 <atan+0x2a8>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	f7f3 f9e9 	bl	8000590 <__aeabi_dmul>
 800d1be:	a370      	add	r3, pc, #448	@ (adr r3, 800d380 <atan+0x2b0>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7f3 f82e 	bl	8000224 <__adddf3>
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	463b      	mov	r3, r7
 800d1cc:	f7f3 f9e0 	bl	8000590 <__aeabi_dmul>
 800d1d0:	a36d      	add	r3, pc, #436	@ (adr r3, 800d388 <atan+0x2b8>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 f825 	bl	8000224 <__adddf3>
 800d1da:	4632      	mov	r2, r6
 800d1dc:	463b      	mov	r3, r7
 800d1de:	f7f3 f9d7 	bl	8000590 <__aeabi_dmul>
 800d1e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d390 <atan+0x2c0>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f3 f81c 	bl	8000224 <__adddf3>
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	f7f3 f9ce 	bl	8000590 <__aeabi_dmul>
 800d1f4:	a368      	add	r3, pc, #416	@ (adr r3, 800d398 <atan+0x2c8>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 f813 	bl	8000224 <__adddf3>
 800d1fe:	4632      	mov	r2, r6
 800d200:	463b      	mov	r3, r7
 800d202:	f7f3 f9c5 	bl	8000590 <__aeabi_dmul>
 800d206:	a366      	add	r3, pc, #408	@ (adr r3, 800d3a0 <atan+0x2d0>)
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f3 f80a 	bl	8000224 <__adddf3>
 800d210:	4642      	mov	r2, r8
 800d212:	464b      	mov	r3, r9
 800d214:	f7f3 f9bc 	bl	8000590 <__aeabi_dmul>
 800d218:	a363      	add	r3, pc, #396	@ (adr r3, 800d3a8 <atan+0x2d8>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	4680      	mov	r8, r0
 800d220:	4689      	mov	r9, r1
 800d222:	4630      	mov	r0, r6
 800d224:	4639      	mov	r1, r7
 800d226:	f7f3 f9b3 	bl	8000590 <__aeabi_dmul>
 800d22a:	a361      	add	r3, pc, #388	@ (adr r3, 800d3b0 <atan+0x2e0>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f2 fff6 	bl	8000220 <__aeabi_dsub>
 800d234:	4632      	mov	r2, r6
 800d236:	463b      	mov	r3, r7
 800d238:	f7f3 f9aa 	bl	8000590 <__aeabi_dmul>
 800d23c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d3b8 <atan+0x2e8>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f2 ffed 	bl	8000220 <__aeabi_dsub>
 800d246:	4632      	mov	r2, r6
 800d248:	463b      	mov	r3, r7
 800d24a:	f7f3 f9a1 	bl	8000590 <__aeabi_dmul>
 800d24e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d3c0 <atan+0x2f0>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	f7f2 ffe4 	bl	8000220 <__aeabi_dsub>
 800d258:	4632      	mov	r2, r6
 800d25a:	463b      	mov	r3, r7
 800d25c:	f7f3 f998 	bl	8000590 <__aeabi_dmul>
 800d260:	a359      	add	r3, pc, #356	@ (adr r3, 800d3c8 <atan+0x2f8>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f2 ffdb 	bl	8000220 <__aeabi_dsub>
 800d26a:	4632      	mov	r2, r6
 800d26c:	463b      	mov	r3, r7
 800d26e:	f7f3 f98f 	bl	8000590 <__aeabi_dmul>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	4640      	mov	r0, r8
 800d278:	4649      	mov	r1, r9
 800d27a:	f7f2 ffd3 	bl	8000224 <__adddf3>
 800d27e:	4622      	mov	r2, r4
 800d280:	462b      	mov	r3, r5
 800d282:	f7f3 f985 	bl	8000590 <__aeabi_dmul>
 800d286:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	d148      	bne.n	800d322 <atan+0x252>
 800d290:	4620      	mov	r0, r4
 800d292:	4629      	mov	r1, r5
 800d294:	f7f2 ffc4 	bl	8000220 <__aeabi_dsub>
 800d298:	e72f      	b.n	800d0fa <atan+0x2a>
 800d29a:	4b52      	ldr	r3, [pc, #328]	@ (800d3e4 <atan+0x314>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	4620      	mov	r0, r4
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	f7f2 ffbd 	bl	8000220 <__aeabi_dsub>
 800d2a6:	4b4f      	ldr	r3, [pc, #316]	@ (800d3e4 <atan+0x314>)
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	460f      	mov	r7, r1
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	f7f2 ffb7 	bl	8000224 <__adddf3>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	4639      	mov	r1, r7
 800d2be:	f7f3 fa91 	bl	80007e4 <__aeabi_ddiv>
 800d2c2:	f04f 0a01 	mov.w	sl, #1
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	e765      	b.n	800d198 <atan+0xc8>
 800d2cc:	4b47      	ldr	r3, [pc, #284]	@ (800d3ec <atan+0x31c>)
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	d21c      	bcs.n	800d30c <atan+0x23c>
 800d2d2:	4b47      	ldr	r3, [pc, #284]	@ (800d3f0 <atan+0x320>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f2 ffa1 	bl	8000220 <__aeabi_dsub>
 800d2de:	4b44      	ldr	r3, [pc, #272]	@ (800d3f0 <atan+0x320>)
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f3 f951 	bl	8000590 <__aeabi_dmul>
 800d2ee:	4b3d      	ldr	r3, [pc, #244]	@ (800d3e4 <atan+0x314>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f7f2 ff97 	bl	8000224 <__adddf3>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4639      	mov	r1, r7
 800d2fe:	f7f3 fa71 	bl	80007e4 <__aeabi_ddiv>
 800d302:	f04f 0a02 	mov.w	sl, #2
 800d306:	4604      	mov	r4, r0
 800d308:	460d      	mov	r5, r1
 800d30a:	e745      	b.n	800d198 <atan+0xc8>
 800d30c:	4622      	mov	r2, r4
 800d30e:	462b      	mov	r3, r5
 800d310:	4938      	ldr	r1, [pc, #224]	@ (800d3f4 <atan+0x324>)
 800d312:	2000      	movs	r0, #0
 800d314:	f7f3 fa66 	bl	80007e4 <__aeabi_ddiv>
 800d318:	f04f 0a03 	mov.w	sl, #3
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	e73a      	b.n	800d198 <atan+0xc8>
 800d322:	4b35      	ldr	r3, [pc, #212]	@ (800d3f8 <atan+0x328>)
 800d324:	4e35      	ldr	r6, [pc, #212]	@ (800d3fc <atan+0x32c>)
 800d326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f2 ff77 	bl	8000220 <__aeabi_dsub>
 800d332:	4622      	mov	r2, r4
 800d334:	462b      	mov	r3, r5
 800d336:	f7f2 ff73 	bl	8000220 <__aeabi_dsub>
 800d33a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d346:	f7f2 ff6b 	bl	8000220 <__aeabi_dsub>
 800d34a:	f1bb 0f00 	cmp.w	fp, #0
 800d34e:	4604      	mov	r4, r0
 800d350:	460d      	mov	r5, r1
 800d352:	f6bf aedc 	bge.w	800d10e <atan+0x3e>
 800d356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d35a:	461d      	mov	r5, r3
 800d35c:	e6d7      	b.n	800d10e <atan+0x3e>
 800d35e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d3d0 <atan+0x300>)
 800d360:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d364:	e6d3      	b.n	800d10e <atan+0x3e>
 800d366:	bf00      	nop
 800d368:	54442d18 	.word	0x54442d18
 800d36c:	3ff921fb 	.word	0x3ff921fb
 800d370:	8800759c 	.word	0x8800759c
 800d374:	7e37e43c 	.word	0x7e37e43c
 800d378:	e322da11 	.word	0xe322da11
 800d37c:	3f90ad3a 	.word	0x3f90ad3a
 800d380:	24760deb 	.word	0x24760deb
 800d384:	3fa97b4b 	.word	0x3fa97b4b
 800d388:	a0d03d51 	.word	0xa0d03d51
 800d38c:	3fb10d66 	.word	0x3fb10d66
 800d390:	c54c206e 	.word	0xc54c206e
 800d394:	3fb745cd 	.word	0x3fb745cd
 800d398:	920083ff 	.word	0x920083ff
 800d39c:	3fc24924 	.word	0x3fc24924
 800d3a0:	5555550d 	.word	0x5555550d
 800d3a4:	3fd55555 	.word	0x3fd55555
 800d3a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d3ac:	bfa2b444 	.word	0xbfa2b444
 800d3b0:	52defd9a 	.word	0x52defd9a
 800d3b4:	3fadde2d 	.word	0x3fadde2d
 800d3b8:	af749a6d 	.word	0xaf749a6d
 800d3bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d3c0:	fe231671 	.word	0xfe231671
 800d3c4:	3fbc71c6 	.word	0x3fbc71c6
 800d3c8:	9998ebc4 	.word	0x9998ebc4
 800d3cc:	3fc99999 	.word	0x3fc99999
 800d3d0:	54442d18 	.word	0x54442d18
 800d3d4:	bff921fb 	.word	0xbff921fb
 800d3d8:	440fffff 	.word	0x440fffff
 800d3dc:	7ff00000 	.word	0x7ff00000
 800d3e0:	3fdbffff 	.word	0x3fdbffff
 800d3e4:	3ff00000 	.word	0x3ff00000
 800d3e8:	3ff2ffff 	.word	0x3ff2ffff
 800d3ec:	40038000 	.word	0x40038000
 800d3f0:	3ff80000 	.word	0x3ff80000
 800d3f4:	bff00000 	.word	0xbff00000
 800d3f8:	0800f2a8 	.word	0x0800f2a8
 800d3fc:	0800f2c8 	.word	0x0800f2c8

0800d400 <fabs>:
 800d400:	ec51 0b10 	vmov	r0, r1, d0
 800d404:	4602      	mov	r2, r0
 800d406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d40a:	ec43 2b10 	vmov	d0, r2, r3
 800d40e:	4770      	bx	lr

0800d410 <_init>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	bf00      	nop
 800d414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d416:	bc08      	pop	{r3}
 800d418:	469e      	mov	lr, r3
 800d41a:	4770      	bx	lr

0800d41c <_fini>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	bf00      	nop
 800d420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d422:	bc08      	pop	{r3}
 800d424:	469e      	mov	lr, r3
 800d426:	4770      	bx	lr

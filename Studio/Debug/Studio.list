
Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abbc  0800abbc  0000c2cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abbc  0800abbc  0000bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abc4  0800abc4  0000c2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abc4  0800abc4  0000bbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abc8  0800abc8  0000bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800abcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  200002d0  0800ae98  0000c2d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001634  0800ae98  0000c634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232ea  00000000  00000000  0000c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b03  00000000  00000000  0002f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001323  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a133  00000000  00000000  00035c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002066f  00000000  00000000  0005fdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001173c8  00000000  00000000  00080425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001977ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b98  00000000  00000000  00197830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0019e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002d0 	.word	0x200002d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aae4 	.word	0x0800aae4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002d4 	.word	0x200002d4
 8000214:	0800aae4 	.word	0x0800aae4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <KalmanInit>:
#include "Kalman.h"

// Initialize Kalman filter matrices and parameters
void KalmanInit(KALMAN *kalman, float32_t Matrix_A[16], float32_t Matrix_B[4], float32_t Q_scalar, float32_t R_scalar)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0d0      	sub	sp, #320	@ 0x140
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e1e:	6018      	str	r0, [r3, #0]
 8000e20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e24:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000e28:	6019      	str	r1, [r3, #0]
 8000e2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e3c:	ed83 0a00 	vstr	s0, [r3]
 8000e40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e48:	edc3 0a00 	vstr	s1, [r3]
	// set constance

	//Matrix A
	for (int i = 0; i < 16; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000e52:	e018      	b.n	8000e86 <KalmanInit+0x76>
	{
		kalman->A_f32[i] = Matrix_A[i];
 8000e54:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000e5e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000e7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e80:	3301      	adds	r3, #1
 8000e82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000e86:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	dde2      	ble.n	8000e54 <KalmanInit+0x44>
	}
	arm_mat_init_f32(&kalman->A, 4, 4, kalman->A_f32);
 8000e8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8000e9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ea0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	f009 fc91 	bl	800a7d0 <arm_mat_init_f32>
	//Matrix A transpose
	arm_mat_init_f32(&kalman->A_t, 4, 4, kalman->A_t_f32);
 8000eae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000eb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8000ebc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3340      	adds	r3, #64	@ 0x40
 8000ec8:	2204      	movs	r2, #4
 8000eca:	2104      	movs	r1, #4
 8000ecc:	f009 fc80 	bl	800a7d0 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->A, &kalman->A_t);
 8000ed0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ed4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8000ede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3388      	adds	r3, #136	@ 0x88
 8000eea:	4619      	mov	r1, r3
 8000eec:	4610      	mov	r0, r2
 8000eee:	f009 fd6e 	bl	800a9ce <arm_mat_trans_f32>

	//Matrix B
	for(int i = 0; i<4; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000ef8:	e019      	b.n	8000f2e <KalmanInit+0x11e>
	{
		kalman->B_f32[i] = Matrix_B[i];
 8000efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000f04:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f1c:	3324      	adds	r3, #36	@ 0x24
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<4; i++)
 8000f24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000f2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	dde1      	ble.n	8000efa <KalmanInit+0xea>
	}
	arm_mat_init_f32(&kalman->B, 4, 1, kalman->B_f32);
 8000f36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000f44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3390      	adds	r3, #144	@ 0x90
 8000f50:	2201      	movs	r2, #1
 8000f52:	2104      	movs	r1, #4
 8000f54:	f009 fc3c 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix G
	float32_t G_new[4] = {0, 0, 1, 0};
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	memcpy(kalman->G_f32, G_new, sizeof(G_new));
 8000f78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	33d8      	adds	r3, #216	@ 0xd8
 8000f84:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000f88:	2210      	movs	r2, #16
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 fd9c 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->G, 4, 1, kalman->G_f32);
 8000f90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8000f9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	33d8      	adds	r3, #216	@ 0xd8
 8000faa:	2201      	movs	r2, #1
 8000fac:	2104      	movs	r1, #4
 8000fae:	f009 fc0f 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix H
	float32_t H_new[4] = {1, 0, 0, 0};
 8000fb2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	memcpy(kalman->H_f32, H_new, sizeof(H_new));
 8000fd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	33f0      	adds	r3, #240	@ 0xf0
 8000fde:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f009 fd6f 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->H, 1, 4, kalman->H_f32);
 8000fea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8000ff8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	33f0      	adds	r3, #240	@ 0xf0
 8001004:	2204      	movs	r2, #4
 8001006:	2101      	movs	r1, #1
 8001008:	f009 fbe2 	bl	800a7d0 <arm_mat_init_f32>

	//MatrixH traspose
	float32_t H_t_new[4] = {0, 0, 0, 0};
 800100c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
	memcpy(kalman->H_t_f32, H_t_new, sizeof(H_t_new));
 800101a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800101e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001028:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800102c:	2210      	movs	r2, #16
 800102e:	4618      	mov	r0, r3
 8001030:	f009 fd4a 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->H_t, 4,1,kalman->H_t_f32);
 8001034:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001038:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8001042:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001046:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	f009 fbbc 	bl	800a7d0 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->H, &kalman->H_t);
 8001058:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800105c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8001066:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800106a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f009 fca9 	bl	800a9ce <arm_mat_trans_f32>

	//Matrix I
	float32_t I_new[16] =
 800107c:	4bdb      	ldr	r3, [pc, #876]	@ (80013ec <KalmanInit+0x5dc>)
 800107e:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001082:	461d      	mov	r5, r3
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0,
	};
	memcpy(kalman->I_f32, I_new, sizeof(I_new));
 8001098:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800109c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80010a6:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 fd0b 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->I, 4, 4,kalman->I_f32);
 80010b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f503 70b0 	add.w	r0, r3, #352	@ 0x160
 80010c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80010ce:	2204      	movs	r2, #4
 80010d0:	2104      	movs	r1, #4
 80010d2:	f009 fb7d 	bl	800a7d0 <arm_mat_init_f32>

	//Measurement
	float32_t Z_new[1] = {0};
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	memcpy(kalman->Z_f32, Z_new, sizeof(Z_new));
 80010de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80010f0:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 80010f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 8001100:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001104:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800110e:	2201      	movs	r2, #1
 8001110:	2101      	movs	r1, #1
 8001112:	f009 fb5d 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix X
	float32_t X_init[4] = { 0 };
 8001116:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
	memcpy(kalman->X_f32, X_init, sizeof(X_init));
 8001124:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8001132:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001136:	2210      	movs	r2, #16
 8001138:	4618      	mov	r0, r3
 800113a:	f009 fcc5 	bl	800aac8 <memcpy>
	memcpy(kalman->X_pred_f32, X_init, sizeof(X_init));
 800113e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001142:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800114c:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001150:	2210      	movs	r2, #16
 8001152:	4618      	mov	r0, r3
 8001154:	f009 fcb8 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->X, 4, 1, kalman->X_f32);
 8001158:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800115c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 8001166:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800116a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8001174:	2201      	movs	r2, #1
 8001176:	2104      	movs	r1, #4
 8001178:	f009 fb2a 	bl	800a7d0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->X_pred, 4, 1, kalman->X_pred_f32);
 800117c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001180:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f503 70ce 	add.w	r0, r3, #412	@ 0x19c
 800118a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800118e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	f009 fb18 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix P
	float32_t P_init[16] = {
 80011a0:	4b93      	ldr	r3, [pc, #588]	@ (80013f0 <KalmanInit+0x5e0>)
 80011a2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    100.0, 0.0, 0.0, 0.0,
	    0.0, 100.0, 0.0, 0.0,
	    0.0, 0.0, 100.0, 0.0,
	    0.0, 0.0, 0.0, 100.0
	};
	memcpy(kalman->P_f32, P_init, sizeof(P_init));
 80011bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80011ca:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80011ce:	2240      	movs	r2, #64	@ 0x40
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 fc79 	bl	800aac8 <memcpy>
	memcpy(kalman->P_pred_f32, P_init, sizeof(P_init));
 80011d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80011e4:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80011e8:	2240      	movs	r2, #64	@ 0x40
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fc6c 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 80011f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 80011fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001202:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800120c:	2204      	movs	r2, #4
 800120e:	2104      	movs	r1, #4
 8001210:	f009 fade 	bl	800a7d0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->P_pred, 4, 4, kalman->P_pred_f32);
 8001214:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001218:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 8001222:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001226:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8001230:	2204      	movs	r2, #4
 8001232:	2104      	movs	r1, #4
 8001234:	f009 facc 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix K (kalman gain)
	float32_t K_new[4] = {0};
 8001238:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
	memcpy(kalman->K_f32, K_new, sizeof(K_new));
 8001246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800124a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8001254:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001258:	2210      	movs	r2, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f009 fc34 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->K, 4, 1, kalman->K_f32);
 8001260:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001264:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800126e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001272:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800127c:	2201      	movs	r2, #1
 800127e:	2104      	movs	r1, #4
 8001280:	f009 faa6 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix Q
	float32_t Q_new[16] =
 8001284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001288:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800128c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001290:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800129c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012d8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80012dc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
 8001300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001304:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001312:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24
 800131c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001320:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001324:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001328:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001330:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001334:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800133e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001342:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	631a      	str	r2, [r3, #48]	@ 0x30
 800134c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001350:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	635a      	str	r2, [r3, #52]	@ 0x34
 800135a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800135e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	639a      	str	r2, [r3, #56]	@ 0x38
 8001368:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001370:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001374:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
			Q_scalar, 0.0, 0.0, 0.0,
			0.0, Q_scalar, 0.0, 0.0,
			0.0, 0.0, Q_scalar, 0.0,
			0.0, 0.0, 0.0, Q_scalar
	};
	memcpy(kalman->Q_f32, Q_new, sizeof(Q_new));
 800137c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001380:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800138a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800138e:	2240      	movs	r2, #64	@ 0x40
 8001390:	4618      	mov	r0, r3
 8001392:	f009 fb99 	bl	800aac8 <memcpy>
	arm_mat_init_f32(&kalman->Q, 4, 4, kalman->Q_f32);
 8001396:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800139a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 80013a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80013b2:	2204      	movs	r2, #4
 80013b4:	2104      	movs	r1, #4
 80013b6:	f009 fa0b 	bl	800a7d0 <arm_mat_init_f32>

	//MatrixR
	float32_t R_new[1] = {R_scalar};
 80013ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013c6:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	601a      	str	r2, [r3, #0]
	memcpy(kalman->R_f32, R_new, sizeof(R_new));
 80013ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80013dc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013e0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e004      	b.n	80013f4 <KalmanInit+0x5e4>
 80013ea:	bf00      	nop
 80013ec:	0800aafc 	.word	0x0800aafc
 80013f0:	0800ab3c 	.word	0x0800ab3c
	arm_mat_init_f32(&kalman->R, 1, 1, kalman->R_f32);
 80013f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8001402:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001406:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001410:	2201      	movs	r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	f009 f9dc 	bl	800a7d0 <arm_mat_init_f32>

	//Matrix of contol input
	float32_t U_new[1] = {0.0};
 8001418:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800141c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
	memcpy(kalman->U_f32, U_new, sizeof(U_new));
 8001426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800142a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001434:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001438:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001440:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001444:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800144e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001452:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800145c:	2201      	movs	r2, #1
 800145e:	2101      	movs	r1, #1
 8001460:	f009 f9b6 	bl	800a7d0 <arm_mat_init_f32>

}
 8001464:	bf00      	nop
 8001466:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800146a:	46bd      	mov	sp, r7
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
 800146e:	bf00      	nop

08001470 <KalmanPrediction>:

// Prediction Step
void KalmanPrediction(KALMAN *kalman, float32_t control_input)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ac      	sub	sp, #176	@ 0xb0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	ed87 0a00 	vstr	s0, [r7]
    // Update control input U
    kalman->U_f32[0] = control_input;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
    arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001490:	2201      	movs	r2, #1
 8001492:	2101      	movs	r1, #1
 8001494:	f009 f99c 	bl	800a7d0 <arm_mat_init_f32>
    // Temporary matrices for intermediate results
    arm_matrix_instance_f32 temp1, temp2, temp3;
    float32_t temp1_data[4], temp2_data[16], temp3_data[16];

    // Step 1: X_pred = A * X + B * U
    arm_mat_init_f32(&temp1, 4, 1, temp1_data);
 8001498:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800149c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80014a0:	2201      	movs	r2, #1
 80014a2:	2104      	movs	r1, #4
 80014a4:	f009 f994 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->X, &temp1);  // temp1 = A * X
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80014b4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80014b8:	4619      	mov	r1, r3
 80014ba:	f009 f9a1 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kalman->B, &kalman->U, &kalman->X_pred);  // X_pred = B * U
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f503 7138 	add.w	r1, r3, #736	@ 0x2e0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80014d0:	461a      	mov	r2, r3
 80014d2:	f009 f995 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp1, &kalman->X_pred, &kalman->X_pred);  // X_pred = A*X + B*U
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f503 71ce 	add.w	r1, r3, #412	@ 0x19c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80014e2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80014e6:	4618      	mov	r0, r3
 80014e8:	f009 f91c 	bl	800a724 <arm_mat_add_f32>

    // Step 2: P_pred = A * P * A^T + Q
    arm_mat_init_f32(&temp2, 4, 4, temp2_data);
 80014ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80014f4:	2204      	movs	r2, #4
 80014f6:	2104      	movs	r1, #4
 80014f8:	f009 f96a 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, 4, 4, temp3_data);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8001504:	2204      	movs	r2, #4
 8001506:	2104      	movs	r1, #4
 8001508:	f009 f962 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->P, &temp2);  // temp1 = A * P
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8001518:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800151c:	4619      	mov	r1, r3
 800151e:	f009 f96f 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp2, &kalman->A_t, &temp3);    // temp2 = A * P * A^T
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8001528:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800152c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001530:	4618      	mov	r0, r3
 8001532:	f009 f965 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kalman->Q, &kalman->P_pred);  // P_pred = A*P*A^T + Q
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7123 	add.w	r1, r3, #652	@ 0x28c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 8001542:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001546:	4618      	mov	r0, r3
 8001548:	f009 f8ec 	bl	800a724 <arm_mat_add_f32>

    // after computing P_pred …
    memcpy(kalman->P_f32,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
           kalman->P_pred_f32,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
    memcpy(kalman->P_f32,
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	4619      	mov	r1, r3
 800155c:	f009 fab4 	bl	800aac8 <memcpy>
           16 * sizeof(float32_t));
    arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800156c:	2204      	movs	r2, #4
 800156e:	2104      	movs	r1, #4
 8001570:	f009 f92e 	bl	800a7d0 <arm_mat_init_f32>
}
 8001574:	bf00      	nop
 8001576:	37b0      	adds	r7, #176	@ 0xb0
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <KalmanUpdate>:

// Update Step
void KalmanUpdate(KALMAN *kalman, double measurement)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0d8      	sub	sp, #352	@ 0x160
 8001580:	af00      	add	r7, sp, #0
 8001582:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001586:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800158a:	6018      	str	r0, [r3, #0]
 800158c:	463b      	mov	r3, r7
 800158e:	ed83 0b00 	vstr	d0, [r3]
    // Update measurement Z
    kalman->Z_f32[0] = measurement;
 8001592:	463b      	mov	r3, r7
 8001594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001598:	f7ff fa54 	bl	8000a44 <__aeabi_d2f>
 800159c:	4602      	mov	r2, r0
 800159e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 80015ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 80015ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015c8:	2201      	movs	r2, #1
 80015ca:	2101      	movs	r1, #1
 80015cc:	f009 f900 	bl	800a7d0 <arm_mat_init_f32>
    float32_t temp1_data[4], temp2_data[16], temp3_data[4], temp4_data[1], temp5_data[1], temp6_data[4], temp7_data[16], temp8_data[16];

    // Step 1: Compute Kalman Gain K = P_pred * H^T * (H * P_pred * H^T + R)^-1T

    // Compute S = H * P_pred * H^T + R
    arm_mat_init_f32(&temp1, 1, 4, temp1_data);
 80015d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015d4:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80015d8:	2204      	movs	r2, #4
 80015da:	2101      	movs	r1, #1
 80015dc:	f009 f8f8 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, 1, 1, temp2_data);
 80015e0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80015e4:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80015e8:	2201      	movs	r2, #1
 80015ea:	2101      	movs	r1, #1
 80015ec:	f009 f8f0 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->H, &kalman->P_pred, &temp1);  // temp1 = H * P_pred
 80015f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015f4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80015fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001602:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800160c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8001610:	4619      	mov	r1, r3
 8001612:	f009 f8f5 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp1, &kalman->H_t, &temp2);                // temp2 = H * P_pred * H^T
 8001616:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800161a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 718c 	add.w	r1, r3, #280	@ 0x118
 8001624:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001628:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800162c:	4618      	mov	r0, r3
 800162e:	f009 f8e7 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp2, &kalman->R, &temp2);           // temp2 = S = H*P_pred*H^T + R
 8001632:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001636:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 7135 	add.w	r1, r3, #724	@ 0x2d4
 8001640:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001644:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001648:	4618      	mov	r0, r3
 800164a:	f009 f86b 	bl	800a724 <arm_mat_add_f32>

    // Compute K = P_pred * H^T * inv(S)
    float s = temp2_data[0];
 800164e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001652:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    float s_inv = 1.0f / s;
 8001656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800165a:	ed97 7a57 	vldr	s14, [r7, #348]	@ 0x15c
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158
    float32_t S_inv_data[1] = {s_inv};
 8001666:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800166a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800166e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001672:	601a      	str	r2, [r3, #0]
    arm_matrix_instance_f32 S_inv;
    arm_mat_init_f32(&S_inv, 1, 1, S_inv_data);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	f107 0014 	add.w	r0, r7, #20
 800167c:	2201      	movs	r2, #1
 800167e:	2101      	movs	r1, #1
 8001680:	f009 f8a6 	bl	800a7d0 <arm_mat_init_f32>


    arm_mat_init_f32(&temp3, 4, 1, temp3_data);
 8001684:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001688:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800168c:	2201      	movs	r2, #1
 800168e:	2104      	movs	r1, #4
 8001690:	f009 f89e 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->P_pred, &kalman->H_t, &temp3);  // temp3 = P_pred * H^T
 8001694:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001698:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 80016a2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80016b0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80016b4:	4619      	mov	r1, r3
 80016b6:	f009 f8a3 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp3, &S_inv, &kalman->K);     // K = P_pred * H^T * inv(S)
 80016ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 7211 	add.w	r2, r3, #580	@ 0x244
 80016c8:	f107 0114 	add.w	r1, r7, #20
 80016cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016d0:	4618      	mov	r0, r3
 80016d2:	f009 f895 	bl	800a800 <arm_mat_mult_f32>

    // Step 2: Update state X = X_pred + K * (Z - H * X_pred)
    arm_mat_init_f32(&temp4, 1, 1, temp4_data);
 80016d6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80016da:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80016de:	2201      	movs	r2, #1
 80016e0:	2101      	movs	r1, #1
 80016e2:	f009 f875 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, 1, 1, temp5_data);
 80016e6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80016ea:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	f009 f86d 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, 4, 1, temp6_data);
 80016f6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80016fa:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80016fe:	2201      	movs	r2, #1
 8001700:	2104      	movs	r1, #4
 8001702:	f009 f865 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->H, &kalman->X_pred, &temp4);  // temp4 = H * X_pred
 8001706:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800170a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8001714:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001718:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8001722:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001726:	4619      	mov	r1, r3
 8001728:	f009 f86a 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kalman->Z, &temp4, &temp5);           // temp5 = Z - H * X_pred
 800172c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001730:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800173a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800173e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001742:	4618      	mov	r0, r3
 8001744:	f009 f8ed 	bl	800a922 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kalman->K, &temp5, &temp6);          // temp6 = K * (Z - H * X_pred)
 8001748:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800174c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8001756:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800175a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800175e:	4618      	mov	r0, r3
 8001760:	f009 f84e 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_add_f32(&kalman->X_pred, &temp6, &kalman->X);   // X = X_pred + K*(Z - H*X_pred)
 8001764:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001768:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 70ce 	add.w	r0, r3, #412	@ 0x19c
 8001772:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001776:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 72ca 	add.w	r2, r3, #404	@ 0x194
 8001780:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001784:	4619      	mov	r1, r3
 8001786:	f008 ffcd 	bl	800a724 <arm_mat_add_f32>

    // Step 3: Update covariance P = (I - K * H) * P_pred
    arm_mat_init_f32(&temp7, 4, 4, temp7_data);
 800178a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800178e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001792:	2204      	movs	r2, #4
 8001794:	2104      	movs	r1, #4
 8001796:	f009 f81b 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, 4, 4, temp8_data);
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80017a2:	2204      	movs	r2, #4
 80017a4:	2104      	movs	r1, #4
 80017a6:	f009 f813 	bl	800a7d0 <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->K, &kalman->H, &temp7);  // temp7 = K * H
 80017aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80017b8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80017c6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017ca:	4619      	mov	r1, r3
 80017cc:	f009 f818 	bl	800a800 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kalman->I, &temp7, &temp8);       // temp8 = I - K * H
 80017d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017d4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80017de:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80017e2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80017e6:	4618      	mov	r0, r3
 80017e8:	f009 f89b 	bl	800a922 <arm_mat_sub_f32>
    arm_mat_mult_f32(&temp8, &kalman->P_pred, &kalman->P);  // P = (I - K*H) * P_pred
 80017ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 710b 	add.w	r1, r3, #556	@ 0x22c
 80017fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017fe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 7209 	add.w	r2, r3, #548	@ 0x224
 8001808:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800180c:	4618      	mov	r0, r3
 800180e:	f008 fff7 	bl	800a800 <arm_mat_mult_f32>
}
 8001812:	bf00      	nop
 8001814:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <modbus_1t5_Timeout+0x3c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <modbus_1t5_Timeout+0x3c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <modbus_1t5_Timeout+0x3c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <modbus_1t5_Timeout+0x3c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200002ec 	.word	0x200002ec

0800185c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <modbus_3t5_Timeout+0x1c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	755a      	strb	r2, [r3, #21]

}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	200002ec 	.word	0x200002ec

0800187c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f007 fdf3 	bl	8009470 <HAL_UART_GetError>
 800188a:	4603      	mov	r3, r0
 800188c:	2b20      	cmp	r3, #32
 800188e:	d101      	bne.n	8001894 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001890:	f7ff ffc4 	bl	800181c <modbus_1t5_Timeout>

	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80018a6:	4a25      	ldr	r2, [pc, #148]	@ (800193c <Modbus_init+0xa0>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80018ac:	4b23      	ldr	r3, [pc, #140]	@ (800193c <Modbus_init+0xa0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <Modbus_init+0xa4>)
 80018ba:	210e      	movs	r1, #14
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 fffb 	bl	80078b8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2110      	movs	r1, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f007 fd7b 	bl	80093c4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f007 fd92 	bl	80093fc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <Modbus_init+0xa8>)
 80018de:	2104      	movs	r1, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 f839 	bl	8008958 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <Modbus_init+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <Modbus_init+0xa0>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <Modbus_init+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80018f8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80018fc:	4413      	add	r3, r2
 80018fe:	3302      	adds	r3, #2
 8001900:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001904:	4619      	mov	r1, r3
 8001906:	f007 f961 	bl	8008bcc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <Modbus_init+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10c      	bne.n	8001934 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <Modbus_init+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 ff9b 	bl	800685c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <Modbus_init+0xa0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f005 f9f4 	bl	8006d1c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200002ec 	.word	0x200002ec
 8001940:	0800185d 	.word	0x0800185d
 8001944:	0800187d 	.word	0x0800187d

08001948 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001954:	23ff      	movs	r3, #255	@ 0xff
 8001956:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001958:	23ff      	movs	r3, #255	@ 0xff
 800195a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800195c:	e013      	b.n	8001986 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	4053      	eors	r3, r2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <CRC16+0x68>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4053      	eors	r3, r2
 800197a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <CRC16+0x6c>)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	803a      	strh	r2, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e6      	bne.n	800195e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	b21b      	sxth	r3, r3
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21b      	sxth	r3, r3
 80019a0:	b29b      	uxth	r3, r3
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000100 	.word	0x20000100
 80019b4:	20000000 	.word	0x20000000

080019b8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80019be:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	7ddb      	ldrb	r3, [r3, #23]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d80a      	bhi.n	80019e0 <Modbus_Protocal_Worker+0x28>
 80019ca:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <Modbus_Protocal_Worker+0x18>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019eb 	.word	0x080019eb
 80019d4:	08001b7f 	.word	0x08001b7f
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001abb 	.word	0x08001abb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80019e0:	4b75      	ldr	r3, [pc, #468]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	75da      	strb	r2, [r3, #23]
		break;
 80019e8:	e0e1      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80019ea:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80019f6:	4b70      	ldr	r3, [pc, #448]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2202      	movs	r2, #2
 80019fc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80019fe:	f000 f9cd 	bl	8001d9c <Modbus_Emission>
 8001a02:	e018      	b.n	8001a36 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001a04:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d00b      	beq.n	8001a36 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a1e:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a26:	4b64      	ldr	r3, [pc, #400]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001a2e:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2203      	movs	r2, #3
 8001a34:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001a36:	4b60      	ldr	r3, [pc, #384]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	f040 80ad 	bne.w	8001ba0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001a46:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001a56:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b57      	ldr	r3, [pc, #348]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a62:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f007 f8ac 	bl	8008bcc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001a74:	e094      	b.n	8001ba0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a76:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	7d1b      	ldrb	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8091 	beq.w	8001ba4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a82:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	22fe      	movs	r2, #254	@ 0xfe
 8001a88:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001a94:	4b48      	ldr	r3, [pc, #288]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001aa4:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001aa8:	1a8a      	subs	r2, r1, r2
 8001aaa:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001aac:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001ab0:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001ab8:	e074      	b.n	8001ba4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ac2:	f113 0f02 	cmn.w	r3, #2
 8001ac6:	d150      	bne.n	8001b6a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001ad0:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001ad8:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001ae0:	3b02      	subs	r3, #2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f7ff ff2f 	bl	8001948 <CRC16>
 8001aea:	4603      	mov	r3, r0
 8001aec:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001aee:	793a      	ldrb	r2, [r7, #4]
 8001af0:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001afc:	3b02      	subs	r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10c      	bne.n	8001b22 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001b08:	797a      	ldrb	r2, [r7, #5]
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b16:	3b01      	subs	r3, #1
 8001b18:	440b      	add	r3, r1
 8001b1a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d004      	beq.n	8001b2c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b22:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ff      	movs	r2, #255	@ 0xff
 8001b28:	759a      	strb	r2, [r3, #22]
				break;
 8001b2a:	e040      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b2c:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001b34:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d113      	bne.n	8001b66 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001b4e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b58:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f008 ffb4 	bl	800aac8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b60:	f000 f904 	bl	8001d6c <Modbus_frame_response>
 8001b64:	e001      	b.n	8001b6a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b66:	bf00      	nop
					}
		break;


	}
}
 8001b68:	e021      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	7d5b      	ldrb	r3, [r3, #21]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d019      	beq.n	8001ba8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	75da      	strb	r2, [r3, #23]
		break;
 8001b7c:	e014      	b.n	8001ba8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d10f      	bne.n	8001bac <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <Modbus_Protocal_Worker+0x200>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	75da      	strb	r2, [r3, #23]
		break;
 8001b9e:	e005      	b.n	8001bac <Modbus_Protocal_Worker+0x1f4>
		break;
 8001ba0:	bf00      	nop
 8001ba2:	e004      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
		break;
 8001ba4:	bf00      	nop
 8001ba6:	e002      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
		break;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bac:	bf00      	nop
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002ec 	.word	0x200002ec

08001bbc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	7e5b      	ldrb	r3, [r3, #25]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	7e92      	ldrb	r2, [r2, #26]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d903      	bls.n	8001bea <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f000 f8a0 	bl	8001d28 <ModbusErrorReply>
			 return;
 8001be8:	e023      	b.n	8001c32 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	440b      	add	r3, r1
 8001bfa:	7ed2      	ldrb	r2, [r2, #27]
 8001bfc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	7f12      	ldrb	r2, [r2, #28]
 8001c10:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001c20:	2208      	movs	r2, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	f008 ff50 	bl	800aac8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <modbusWrite1Register+0x7c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2205      	movs	r2, #5
 8001c2e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002ec 	.word	0x200002ec

08001c3c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	7edb      	ldrb	r3, [r3, #27]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4a35      	ldr	r2, [pc, #212]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	7f12      	ldrb	r2, [r2, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c56:	4b33      	ldr	r3, [pc, #204]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	7e5b      	ldrb	r3, [r3, #25]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	7e92      	ldrb	r2, [r2, #26]
 8001c66:	4413      	add	r3, r2
 8001c68:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <modbusRead1Register+0x3a>
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c74:	d903      	bls.n	8001c7e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c76:	2003      	movs	r0, #3
 8001c78:	f000 f856 	bl	8001d28 <ModbusErrorReply>
		 return;
 8001c7c:	e04e      	b.n	8001d1c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c7e:	88ba      	ldrh	r2, [r7, #4]
 8001c80:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d808      	bhi.n	8001c9c <modbusRead1Register+0x60>
 8001c8a:	88ba      	ldrh	r2, [r7, #4]
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4413      	add	r3, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d903      	bls.n	8001ca4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f000 f843 	bl	8001d28 <ModbusErrorReply>
		 return;
 8001ca2:	e03b      	b.n	8001d1c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0052      	lsls	r2, r2, #1
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	e020      	b.n	8001d04 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	88bb      	ldrh	r3, [r7, #4]
 8001cca:	4423      	add	r3, r4
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	18d1      	adds	r1, r2, r3
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	1c63      	adds	r3, r4, #1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	7849      	ldrb	r1, [r1, #1]
 8001cda:	4413      	add	r3, r2
 8001cdc:	460a      	mov	r2, r1
 8001cde:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	4423      	add	r3, r4
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	18d1      	adds	r1, r2, r3
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	0063      	lsls	r3, r4, #1
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	7809      	ldrb	r1, [r1, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001d02:	3401      	adds	r4, #1
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	429c      	cmp	r4, r3
 8001d08:	dbdb      	blt.n	8001cc2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <modbusRead1Register+0xe8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0052      	lsls	r2, r2, #1
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200002ec 	.word	0x200002ec

08001d28 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <ModbusErrorReply+0x40>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	7e1a      	ldrb	r2, [r3, #24]
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <ModbusErrorReply+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <ModbusErrorReply+0x40>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <ModbusErrorReply+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200002ec 	.word	0x200002ec

08001d6c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <Modbus_frame_response+0x2c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	7e1b      	ldrb	r3, [r3, #24]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d004      	beq.n	8001d84 <Modbus_frame_response+0x18>
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d105      	bne.n	8001d8a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d7e:	f7ff ff1d 	bl	8001bbc <modbusWrite1Register>
		break;
 8001d82:	e006      	b.n	8001d92 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d84:	f7ff ff5a 	bl	8001c3c <modbusRead1Register>
		break;
 8001d88:	e003      	b.n	8001d92 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff ffcc 	bl	8001d28 <ModbusErrorReply>
		break;
 8001d90:	bf00      	nop

	}
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002ec 	.word	0x200002ec

08001d9c <Modbus_Emission>:

void Modbus_Emission()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001da2:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d15d      	bne.n	8001e6c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001db0:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b33      	ldr	r3, [pc, #204]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001dc6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f008 fe75 	bl	800aac8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001dde:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3203      	adds	r2, #3
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001e04:	3b02      	subs	r3, #2
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f7ff fd9d 	bl	8001948 <CRC16>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e1e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001e20:	7939      	ldrb	r1, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	460a      	mov	r2, r1
 8001e26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e36:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001e38:	7979      	ldrb	r1, [r7, #5]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d10d      	bne.n	8001e6c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e66:	461a      	mov	r2, r3
 8001e68:	f006 fe30 	bl	8008acc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <Modbus_Emission+0xe8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	755a      	strb	r2, [r3, #21]

}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200002ec 	.word	0x200002ec

08001e88 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e94:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6178      	str	r0, [r7, #20]
 8001eb8:	6139      	str	r1, [r7, #16]
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ec0:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 8001f04:	213c      	movs	r1, #60	@ 0x3c
 8001f06:	6938      	ldr	r0, [r7, #16]
 8001f08:	f005 f84a 	bl	8006fa0 <HAL_TIM_Encoder_Start>

}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	0000      	movs	r0, r0
	...

08001f18 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0fd9      	lsrs	r1, r3, #31
 8001f46:	440b      	add	r3, r1
 8001f48:	105b      	asrs	r3, r3, #1
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dd07      	ble.n	8001f5e <QEIPosVelUpdate+0x46>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	e010      	b.n	8001f80 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0fd9      	lsrs	r1, r3, #31
 8001f68:	440b      	add	r3, r1
 8001f6a:	105b      	asrs	r3, r3, #1
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	da06      	bge.n	8001f80 <QEIPosVelUpdate+0x68>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	441a      	add	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	441a      	add	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fba:	ee17 0a90 	vmov	r0, s15
 8001fbe:	f7fe fa8f 	bl	80004e0 <__aeabi_f2d>
 8001fc2:	a323      	add	r3, pc, #140	@ (adr r3, 8002050 <QEIPosVelUpdate+0x138>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fae2 	bl	8000590 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fd36 	bl	8000a44 <__aeabi_d2f>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
 8001ffc:	f7fe fa70 	bl	80004e0 <__aeabi_f2d>
 8002000:	a313      	add	r3, pc, #76	@ (adr r3, 8002050 <QEIPosVelUpdate+0x138>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fac3 	bl	8000590 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa50 	bl	80004bc <__aeabi_i2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe fbde 	bl	80007e4 <__aeabi_ddiv>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fd08 	bl	8000a44 <__aeabi_d2f>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w
 8002050:	54442d18 	.word	0x54442d18
 8002054:	400921fb 	.word	0x400921fb

08002058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205e:	f001 fb7a 	bl	8003756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002062:	f000 f8d3 	bl	800220c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002066:	f000 fc55 	bl	8002914 <MX_GPIO_Init>
  MX_DMA_Init();
 800206a:	f000 fc21 	bl	80028b0 <MX_DMA_Init>
  MX_TIM1_Init();
 800206e:	f000 f991 	bl	8002394 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002072:	f000 fa57 	bl	8002524 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002076:	f000 faf9 	bl	800266c <MX_TIM4_Init>
  MX_TIM5_Init();
 800207a:	f000 fb4d 	bl	8002718 <MX_TIM5_Init>
  MX_TIM3_Init();
 800207e:	f000 fa9f 	bl	80025c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002082:	f000 f90f 	bl	80022a4 <MX_ADC1_Init>
  MX_TIM16_Init();
 8002086:	f000 fb95 	bl	80027b4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800208a:	f000 fbc3 	bl	8002814 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 800208e:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <main+0x128>)
 8002090:	4a3c      	ldr	r2, [pc, #240]	@ (8002184 <main+0x12c>)
 8002092:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8002094:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <main+0x128>)
 8002096:	4a3c      	ldr	r2, [pc, #240]	@ (8002188 <main+0x130>)
 8002098:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800209a:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <main+0x128>)
 800209c:	2215      	movs	r2, #21
 800209e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 80020a0:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <main+0x128>)
 80020a2:	2246      	movs	r2, #70	@ 0x46
 80020a4:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80020a6:	4939      	ldr	r1, [pc, #228]	@ (800218c <main+0x134>)
 80020a8:	4835      	ldr	r0, [pc, #212]	@ (8002180 <main+0x128>)
 80020aa:	f7ff fbf7 	bl	800189c <Modbus_init>

	PID_POS.Kp = Kp_pos;
 80020ae:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <main+0x138>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a38      	ldr	r2, [pc, #224]	@ (8002194 <main+0x13c>)
 80020b4:	6193      	str	r3, [r2, #24]
	PID_POS.Ki = Ki_pos;
 80020b6:	4b38      	ldr	r3, [pc, #224]	@ (8002198 <main+0x140>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a36      	ldr	r2, [pc, #216]	@ (8002194 <main+0x13c>)
 80020bc:	61d3      	str	r3, [r2, #28]
	PID_POS.Kd = Kd_pos;
 80020be:	4b37      	ldr	r3, [pc, #220]	@ (800219c <main+0x144>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <main+0x13c>)
 80020c4:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS, 0);
 80020c6:	2100      	movs	r1, #0
 80020c8:	4832      	ldr	r0, [pc, #200]	@ (8002194 <main+0x13c>)
 80020ca:	f008 faf5 	bl	800a6b8 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	4b33      	ldr	r3, [pc, #204]	@ (80021a0 <main+0x148>)
 80020d4:	2208      	movs	r2, #8
 80020d6:	4933      	ldr	r1, [pc, #204]	@ (80021a4 <main+0x14c>)
 80020d8:	4833      	ldr	r0, [pc, #204]	@ (80021a8 <main+0x150>)
 80020da:	f000 feb7 	bl	8002e4c <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 80020de:	2340      	movs	r3, #64	@ 0x40
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <main+0x148>)
 80020e4:	2204      	movs	r2, #4
 80020e6:	492f      	ldr	r1, [pc, #188]	@ (80021a4 <main+0x14c>)
 80020e8:	4830      	ldr	r0, [pc, #192]	@ (80021ac <main+0x154>)
 80020ea:	f000 feaf 	bl	8002e4c <MotorInit>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 80020ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f2:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80021b0 <main+0x158>
 80020f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020fa:	492e      	ldr	r1, [pc, #184]	@ (80021b4 <main+0x15c>)
 80020fc:	482e      	ldr	r0, [pc, #184]	@ (80021b8 <main+0x160>)
 80020fe:	f7ff fed7 	bl	8001eb0 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8002102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002106:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80021b0 <main+0x158>
 800210a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210e:	492b      	ldr	r1, [pc, #172]	@ (80021bc <main+0x164>)
 8002110:	482b      	ldr	r0, [pc, #172]	@ (80021c0 <main+0x168>)
 8002112:	f7ff fecd 	bl	8001eb0 <QEIInit>

	PIDInit(&prismatic_pos_control, 340, -340);
 8002116:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80021c4 <main+0x16c>
 800211a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80021c8 <main+0x170>
 800211e:	482b      	ldr	r0, [pc, #172]	@ (80021cc <main+0x174>)
 8002120:	f7ff feb2 	bl	8001e88 <PIDInit>
	PIDInit(&prismatic_vel_control, 65535, -65535);
 8002124:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80021d0 <main+0x178>
 8002128:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80021d4 <main+0x17c>
 800212c:	482a      	ldr	r0, [pc, #168]	@ (80021d8 <main+0x180>)
 800212e:	f7ff feab 	bl	8001e88 <PIDInit>

	KalmanInit(&prismatic_kalman, A_f32_prismatic, B_f32_prismatic, Q_prismatic,
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <main+0x184>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <main+0x188>)
 800213a:	ed93 7a00 	vldr	s14, [r3]
 800213e:	eef0 0a47 	vmov.f32	s1, s14
 8002142:	eeb0 0a67 	vmov.f32	s0, s15
 8002146:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <main+0x18c>)
 8002148:	4927      	ldr	r1, [pc, #156]	@ (80021e8 <main+0x190>)
 800214a:	4828      	ldr	r0, [pc, #160]	@ (80021ec <main+0x194>)
 800214c:	f7fe fe60 	bl	8000e10 <KalmanInit>
			R_prismatic);
	KalmanInit(&revolute_kalman, A_f32_revolute, B_f32_revolute, Q_revolute,
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <main+0x198>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <main+0x19c>)
 8002158:	ed93 7a00 	vldr	s14, [r3]
 800215c:	eef0 0a47 	vmov.f32	s1, s14
 8002160:	eeb0 0a67 	vmov.f32	s0, s15
 8002164:	4a24      	ldr	r2, [pc, #144]	@ (80021f8 <main+0x1a0>)
 8002166:	4925      	ldr	r1, [pc, #148]	@ (80021fc <main+0x1a4>)
 8002168:	4825      	ldr	r0, [pc, #148]	@ (8002200 <main+0x1a8>)
 800216a:	f7fe fe51 	bl	8000e10 <KalmanInit>
			R_revolute);

	HAL_TIM_Base_Start_IT(&htim5);
 800216e:	4825      	ldr	r0, [pc, #148]	@ (8002204 <main+0x1ac>)
 8002170:	f004 fb74 	bl	800685c <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8002174:	4824      	ldr	r0, [pc, #144]	@ (8002208 <main+0x1b0>)
 8002176:	f004 fb71 	bl	800685c <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		Modbus_Protocal_Worker();
 800217a:	f7ff fc1d 	bl	80019b8 <Modbus_Protocal_Worker>
 800217e:	e7fc      	b.n	800217a <main+0x122>
 8002180:	200009b0 	.word	0x200009b0
 8002184:	20000824 	.word	0x20000824
 8002188:	20000758 	.word	0x20000758
 800218c:	20000e88 	.word	0x20000e88
 8002190:	20000200 	.word	0x20000200
 8002194:	20000f4c 	.word	0x20000f4c
 8002198:	20000204 	.word	0x20000204
 800219c:	20000208 	.word	0x20000208
 80021a0:	48000800 	.word	0x48000800
 80021a4:	2000035c 	.word	0x2000035c
 80021a8:	20000f14 	.word	0x20000f14
 80021ac:	20000f30 	.word	0x20000f30
 80021b0:	447a0000 	.word	0x447a0000
 80021b4:	200005c0 	.word	0x200005c0
 80021b8:	20000f78 	.word	0x20000f78
 80021bc:	200004f4 	.word	0x200004f4
 80021c0:	20001308 	.word	0x20001308
 80021c4:	c3aa0000 	.word	0xc3aa0000
 80021c8:	43aa0000 	.word	0x43aa0000
 80021cc:	20000fa8 	.word	0x20000fa8
 80021d0:	c77fff00 	.word	0xc77fff00
 80021d4:	477fff00 	.word	0x477fff00
 80021d8:	20000fc8 	.word	0x20000fc8
 80021dc:	2000025c 	.word	0x2000025c
 80021e0:	20000260 	.word	0x20000260
 80021e4:	2000024c 	.word	0x2000024c
 80021e8:	2000020c 	.word	0x2000020c
 80021ec:	20000fe8 	.word	0x20000fe8
 80021f0:	200002b8 	.word	0x200002b8
 80021f4:	200002bc 	.word	0x200002bc
 80021f8:	200002a8 	.word	0x200002a8
 80021fc:	20000268 	.word	0x20000268
 8002200:	20001338 	.word	0x20001338
 8002204:	2000068c 	.word	0x2000068c
 8002208:	20000428 	.word	0x20000428

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	@ 0x50
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2238      	movs	r2, #56	@ 0x38
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f008 fc27 	bl	800aa6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800222e:	2000      	movs	r0, #0
 8002230:	f003 fa10 	bl	8005654 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800223e:	2340      	movs	r3, #64	@ 0x40
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002242:	2302      	movs	r3, #2
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002246:	2302      	movs	r3, #2
 8002248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800224a:	2304      	movs	r3, #4
 800224c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800224e:	2355      	movs	r3, #85	@ 0x55
 8002250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002252:	2302      	movs	r3, #2
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002256:	2302      	movs	r3, #2
 8002258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800225a:	2302      	movs	r3, #2
 800225c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225e:	f107 0318 	add.w	r3, r7, #24
 8002262:	4618      	mov	r0, r3
 8002264:	f003 faaa 	bl	80057bc <HAL_RCC_OscConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800226e:	f000 fde7 	bl	8002e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002272:	230f      	movs	r3, #15
 8002274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002276:	2303      	movs	r3, #3
 8002278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2104      	movs	r1, #4
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fda8 	bl	8005de0 <HAL_RCC_ClockConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002296:	f000 fdd3 	bl	8002e40 <Error_Handler>
  }
}
 800229a:	bf00      	nop
 800229c:	3750      	adds	r7, #80	@ 0x50
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2220      	movs	r2, #32
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f008 fbd6 	bl	800aa6e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022c2:	4b32      	ldr	r3, [pc, #200]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ca:	4b30      	ldr	r3, [pc, #192]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022d2:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022de:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022ec:	2204      	movs	r2, #4
 80022ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022f0:	4b26      	ldr	r3, [pc, #152]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <MX_ADC1_Init+0xe8>)
 80022fe:	2201      	movs	r2, #1
 8002300:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <MX_ADC1_Init+0xe8>)
 800230c:	2200      	movs	r2, #0
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002310:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002320:	2200      	movs	r2, #0
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800232c:	4817      	ldr	r0, [pc, #92]	@ (800238c <MX_ADC1_Init+0xe8>)
 800232e:	f001 fc59 	bl	8003be4 <HAL_ADC_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002338:	f000 fd82 	bl	8002e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002344:	4619      	mov	r1, r3
 8002346:	4811      	ldr	r0, [pc, #68]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002348:	f002 fa6e 	bl	8004828 <HAL_ADCEx_MultiModeConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002352:	f000 fd75 	bl	8002e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <MX_ADC1_Init+0xec>)
 8002358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800235a:	2306      	movs	r3, #6
 800235c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002362:	237f      	movs	r3, #127	@ 0x7f
 8002364:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002366:	2304      	movs	r3, #4
 8002368:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4806      	ldr	r0, [pc, #24]	@ (800238c <MX_ADC1_Init+0xe8>)
 8002374:	f001 fdf2 	bl	8003f5c <HAL_ADC_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800237e:	f000 fd5f 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	3730      	adds	r7, #48	@ 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002f0 	.word	0x200002f0
 8002390:	1d500080 	.word	0x1d500080

08002394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09c      	sub	sp, #112	@ 0x70
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]
 80023c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2234      	movs	r2, #52	@ 0x34
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f008 fb4d 	bl	800aa6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023d4:	4b51      	ldr	r3, [pc, #324]	@ (800251c <MX_TIM1_Init+0x188>)
 80023d6:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <MX_TIM1_Init+0x18c>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80023da:	4b50      	ldr	r3, [pc, #320]	@ (800251c <MX_TIM1_Init+0x188>)
 80023dc:	22a9      	movs	r2, #169	@ 0xa9
 80023de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b4e      	ldr	r3, [pc, #312]	@ (800251c <MX_TIM1_Init+0x188>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80023e6:	4b4d      	ldr	r3, [pc, #308]	@ (800251c <MX_TIM1_Init+0x188>)
 80023e8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80023ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b4b      	ldr	r3, [pc, #300]	@ (800251c <MX_TIM1_Init+0x188>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023f4:	4b49      	ldr	r3, [pc, #292]	@ (800251c <MX_TIM1_Init+0x188>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fa:	4b48      	ldr	r3, [pc, #288]	@ (800251c <MX_TIM1_Init+0x188>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002400:	4846      	ldr	r0, [pc, #280]	@ (800251c <MX_TIM1_Init+0x188>)
 8002402:	f004 f957 	bl	80066b4 <HAL_TIM_Base_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800240c:	f000 fd18 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002414:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800241a:	4619      	mov	r1, r3
 800241c:	483f      	ldr	r0, [pc, #252]	@ (800251c <MX_TIM1_Init+0x188>)
 800241e:	f005 f8db 	bl	80075d8 <HAL_TIM_ConfigClockSource>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002428:	f000 fd0a 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800242c:	483b      	ldr	r0, [pc, #236]	@ (800251c <MX_TIM1_Init+0x188>)
 800242e:	f004 fa8d 	bl	800694c <HAL_TIM_PWM_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002438:	f000 fd02 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002448:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800244c:	4619      	mov	r1, r3
 800244e:	4833      	ldr	r0, [pc, #204]	@ (800251c <MX_TIM1_Init+0x188>)
 8002450:	f006 f8a8 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800245a:	f000 fcf1 	bl	8002e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245e:	2360      	movs	r3, #96	@ 0x60
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002466:	2300      	movs	r3, #0
 8002468:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800246a:	2300      	movs	r3, #0
 800246c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	4826      	ldr	r0, [pc, #152]	@ (800251c <MX_TIM1_Init+0x188>)
 8002484:	f004 ff94 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800248e:	f000 fcd7 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002492:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002496:	2204      	movs	r2, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4820      	ldr	r0, [pc, #128]	@ (800251c <MX_TIM1_Init+0x188>)
 800249c:	f004 ff88 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80024a6:	f000 fccb 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024ae:	2208      	movs	r2, #8
 80024b0:	4619      	mov	r1, r3
 80024b2:	481a      	ldr	r0, [pc, #104]	@ (800251c <MX_TIM1_Init+0x188>)
 80024b4:	f004 ff7c 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80024be:	f000 fcbf 	bl	8002e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4807      	ldr	r0, [pc, #28]	@ (800251c <MX_TIM1_Init+0x188>)
 8002500:	f006 f8e6 	bl	80086d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800250a:	f000 fc99 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <MX_TIM1_Init+0x188>)
 8002510:	f000 ff5a 	bl	80033c8 <HAL_TIM_MspPostInit>

}
 8002514:	bf00      	nop
 8002516:	3770      	adds	r7, #112	@ 0x70
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000035c 	.word	0x2000035c
 8002520:	40012c00 	.word	0x40012c00

08002524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002548:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <MX_TIM2_Init+0x98>)
 800254c:	22a9      	movs	r2, #169	@ 0xa9
 800254e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002558:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800255c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800256a:	4814      	ldr	r0, [pc, #80]	@ (80025bc <MX_TIM2_Init+0x98>)
 800256c:	f004 f8a2 	bl	80066b4 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002576:	f000 fc63 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	480d      	ldr	r0, [pc, #52]	@ (80025bc <MX_TIM2_Init+0x98>)
 8002588:	f005 f826 	bl	80075d8 <HAL_TIM_ConfigClockSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002592:	f000 fc55 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4806      	ldr	r0, [pc, #24]	@ (80025bc <MX_TIM2_Init+0x98>)
 80025a4:	f005 fffe 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025ae:	f000 fc47 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000428 	.word	0x20000428

080025c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	@ 0x30
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2224      	movs	r2, #36	@ 0x24
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f008 fa4d 	bl	800aa6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <MX_TIM3_Init+0xa4>)
 80025e0:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <MX_TIM3_Init+0xa8>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <MX_TIM3_Init+0xa4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <MX_TIM3_Init+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <MX_TIM3_Init+0xa4>)
 80025f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <MX_TIM3_Init+0xa4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <MX_TIM3_Init+0xa4>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002604:	2303      	movs	r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800260c:	2301      	movs	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800261c:	2301      	movs	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	480d      	ldr	r0, [pc, #52]	@ (8002664 <MX_TIM3_Init+0xa4>)
 8002630:	f004 fc02 	bl	8006e38 <HAL_TIM_Encoder_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800263a:	f000 fc01 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002646:	463b      	mov	r3, r7
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	@ (8002664 <MX_TIM3_Init+0xa4>)
 800264c:	f005 ffaa 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002656:	f000 fbf3 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	3730      	adds	r7, #48	@ 0x30
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200004f4 	.word	0x200004f4
 8002668:	40000400 	.word	0x40000400

0800266c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	@ 0x30
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f008 f9f7 	bl	800aa6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <MX_TIM4_Init+0xa4>)
 800268c:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <MX_TIM4_Init+0xa8>)
 800268e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002690:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <MX_TIM4_Init+0xa4>)
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <MX_TIM4_Init+0xa4>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800269c:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_TIM4_Init+0xa4>)
 800269e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <MX_TIM4_Init+0xa4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_TIM4_Init+0xa4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026b0:	2303      	movs	r3, #3
 80026b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026b8:	2301      	movs	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	@ (8002710 <MX_TIM4_Init+0xa4>)
 80026dc:	f004 fbac 	bl	8006e38 <HAL_TIM_Encoder_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80026e6:	f000 fbab 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	@ (8002710 <MX_TIM4_Init+0xa4>)
 80026f8:	f005 ff54 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002702:	f000 fb9d 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3730      	adds	r7, #48	@ 0x30
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200005c0 	.word	0x200005c0
 8002714:	40000800 	.word	0x40000800

08002718 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <MX_TIM5_Init+0x94>)
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <MX_TIM5_Init+0x98>)
 800273a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <MX_TIM5_Init+0x94>)
 800273e:	22a9      	movs	r2, #169	@ 0xa9
 8002740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <MX_TIM5_Init+0x94>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <MX_TIM5_Init+0x94>)
 800274a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800274e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_TIM5_Init+0x94>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <MX_TIM5_Init+0x94>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <MX_TIM5_Init+0x94>)
 800275e:	f003 ffa9 	bl	80066b4 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002768:	f000 fb6a 	bl	8002e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <MX_TIM5_Init+0x94>)
 800277a:	f004 ff2d 	bl	80075d8 <HAL_TIM_ConfigClockSource>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002784:	f000 fb5c 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_TIM5_Init+0x94>)
 8002796:	f005 ff05 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027a0:	f000 fb4e 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000068c 	.word	0x2000068c
 80027b0:	40000c00 	.word	0x40000c00

080027b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <MX_TIM16_Init+0x58>)
 80027ba:	4a15      	ldr	r2, [pc, #84]	@ (8002810 <MX_TIM16_Init+0x5c>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <MX_TIM16_Init+0x58>)
 80027c0:	22a9      	movs	r2, #169	@ 0xa9
 80027c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <MX_TIM16_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <MX_TIM16_Init+0x58>)
 80027cc:	f240 4279 	movw	r2, #1145	@ 0x479
 80027d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <MX_TIM16_Init+0x58>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <MX_TIM16_Init+0x58>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <MX_TIM16_Init+0x58>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80027e4:	4809      	ldr	r0, [pc, #36]	@ (800280c <MX_TIM16_Init+0x58>)
 80027e6:	f003 ff65 	bl	80066b4 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80027f0:	f000 fb26 	bl	8002e40 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80027f4:	2108      	movs	r1, #8
 80027f6:	4805      	ldr	r0, [pc, #20]	@ (800280c <MX_TIM16_Init+0x58>)
 80027f8:	f004 fa28 	bl	8006c4c <HAL_TIM_OnePulse_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002802:	f000 fb1d 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000758 	.word	0x20000758
 8002810:	40014400 	.word	0x40014400

08002814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002818:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 800281a:	4a24      	ldr	r2, [pc, #144]	@ (80028ac <MX_USART2_UART_Init+0x98>)
 800281c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002820:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002828:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800282c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002834:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002860:	4811      	ldr	r0, [pc, #68]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002862:	f006 f819 	bl	8008898 <HAL_UART_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800286c:	f000 fae8 	bl	8002e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	480d      	ldr	r0, [pc, #52]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002874:	f007 fe55 	bl	800a522 <HAL_UARTEx_SetTxFifoThreshold>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800287e:	f000 fadf 	bl	8002e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002882:	2100      	movs	r1, #0
 8002884:	4808      	ldr	r0, [pc, #32]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002886:	f007 fe8a 	bl	800a59e <HAL_UARTEx_SetRxFifoThreshold>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002890:	f000 fad6 	bl	8002e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <MX_USART2_UART_Init+0x94>)
 8002896:	f007 fe0b 	bl	800a4b0 <HAL_UARTEx_DisableFifoMode>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80028a0:	f000 face 	bl	8002e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000824 	.word	0x20000824
 80028ac:	40004400 	.word	0x40004400

080028b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028b6:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <MX_DMA_Init+0x60>)
 80028b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ba:	4a15      	ldr	r2, [pc, #84]	@ (8002910 <MX_DMA_Init+0x60>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <MX_DMA_Init+0x60>)
 80028c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <MX_DMA_Init+0x60>)
 80028d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002910 <MX_DMA_Init+0x60>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80028da:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <MX_DMA_Init+0x60>)
 80028dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	200b      	movs	r0, #11
 80028ec:	f002 f97f 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028f0:	200b      	movs	r0, #11
 80028f2:	f002 f996 	bl	8004c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	200c      	movs	r0, #12
 80028fc:	f002 f977 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002900:	200c      	movs	r0, #12
 8002902:	f002 f98e 	bl	8004c22 <HAL_NVIC_EnableIRQ>

}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	@ 0x28
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <MX_GPIO_Init+0x184>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002936:	4b58      	ldr	r3, [pc, #352]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002942:	4b55      	ldr	r3, [pc, #340]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	4a54      	ldr	r2, [pc, #336]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294e:	4b52      	ldr	r3, [pc, #328]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a98 <MX_GPIO_Init+0x184>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	4a4e      	ldr	r2, [pc, #312]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002966:	4b4c      	ldr	r3, [pc, #304]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	4a48      	ldr	r2, [pc, #288]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297e:	4b46      	ldr	r3, [pc, #280]	@ (8002a98 <MX_GPIO_Init+0x184>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2120      	movs	r1, #32
 800298e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002992:	f002 fe15 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	21c0      	movs	r1, #192	@ 0xc0
 800299a:	4840      	ldr	r0, [pc, #256]	@ (8002a9c <MX_GPIO_Init+0x188>)
 800299c:	f002 fe10 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC3 PC4 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80029a0:	f242 0318 	movw	r3, #8216	@ 0x2018
 80029a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4839      	ldr	r0, [pc, #228]	@ (8002a9c <MX_GPIO_Init+0x188>)
 80029b8:	f002 fc80 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029bc:	2301      	movs	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4833      	ldr	r0, [pc, #204]	@ (8002a9c <MX_GPIO_Init+0x188>)
 80029d0:	f002 fc74 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RUN_Pin PA1 */
  GPIO_InitStruct.Pin = RUN_Pin|GPIO_PIN_1;
 80029d4:	2303      	movs	r3, #3
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029dc:	2301      	movs	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ea:	f002 fc67 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80029ee:	2310      	movs	r3, #16
 80029f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a04:	f002 fc5a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a22:	f002 fc4b 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4818      	ldr	r0, [pc, #96]	@ (8002aa0 <MX_GPIO_Init+0x18c>)
 8002a3e:	f002 fc3d 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a42:	23c0      	movs	r3, #192	@ 0xc0
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4810      	ldr	r0, [pc, #64]	@ (8002a9c <MX_GPIO_Init+0x188>)
 8002a5a:	f002 fc2f 	bl	80052bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2009      	movs	r0, #9
 8002a64:	f002 f8c3 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a68:	2009      	movs	r0, #9
 8002a6a:	f002 f8da 	bl	8004c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	200a      	movs	r0, #10
 8002a74:	f002 f8bb 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f002 f8d2 	bl	8004c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2028      	movs	r0, #40	@ 0x28
 8002a84:	f002 f8b3 	bl	8004bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a88:	2028      	movs	r0, #40	@ 0x28
 8002a8a:	f002 f8ca 	bl	8004c22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	@ 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	48000400 	.word	0x48000400
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <ball_screw_converter>:
////	kalman_radps = prismatic_kalman.X_pred.pData[1];
//
//	// Motor control
//	MotorSet(&prismatic_motor, 1000, output_velo);
//}
void ball_screw_converter() {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	ball_screw_pos = (prismatic_kalman_rads * (16.00 / (2.0 * M_PI)));
 8002aac:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <ball_screw_converter+0x78>)
 8002aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab2:	a317      	add	r3, pc, #92	@ (adr r3, 8002b10 <ball_screw_converter+0x68>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fd6a 	bl	8000590 <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4918      	ldr	r1, [pc, #96]	@ (8002b24 <ball_screw_converter+0x7c>)
 8002ac2:	e9c1 2300 	strd	r2, r3, [r1]
	ball_screw_vel = (prismatic_kalman_radps / 2.0 * M_PI) * 16.00;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <ball_screw_converter+0x80>)
 8002ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ad4:	f7fd fe86 	bl	80007e4 <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	a30d      	add	r3, pc, #52	@ (adr r3, 8002b18 <ball_screw_converter+0x70>)
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f7fd fd53 	bl	8000590 <__aeabi_dmul>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <ball_screw_converter+0x84>)
 8002af8:	f7fd fd4a 	bl	8000590 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	490b      	ldr	r1, [pc, #44]	@ (8002b30 <ball_screw_converter+0x88>)
 8002b02:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w
 8002b10:	6dc9c883 	.word	0x6dc9c883
 8002b14:	40045f30 	.word	0x40045f30
 8002b18:	54442d18 	.word	0x54442d18
 8002b1c:	400921fb 	.word	0x400921fb
 8002b20:	200012e8 	.word	0x200012e8
 8002b24:	200012f8 	.word	0x200012f8
 8002b28:	200012f0 	.word	0x200012f0
 8002b2c:	40300000 	.word	0x40300000
 8002b30:	20001300 	.word	0x20001300

08002b34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b44:	d109      	bne.n	8002b5a <HAL_GPIO_EXTI_Callback+0x26>
		burst_mode = (burst_mode == 0) ? 1 : 0;
 8002b46:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b58:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_12) {
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b60:	d102      	bne.n	8002b68 <HAL_GPIO_EXTI_Callback+0x34>
		burst_mode = 0;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
//		limit_r = (limit_r == 0) ? 1 : 0;
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6e:	d102      	bne.n	8002b76 <HAL_GPIO_EXTI_Callback+0x42>
		burst_mode = 1;
 8002b70:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
//		revlolute_flag = (revlolute_flag == 0) ? 1 : 0;
	}
	if (GPIO_Pin == GPIO_PIN_4) {
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d102      	bne.n	8002b82 <HAL_GPIO_EXTI_Callback+0x4e>
		revolute_flag = 0;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
	}
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000162c 	.word	0x2000162c
 8002b94:	20000264 	.word	0x20000264

08002b98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

	// sensor timer 1000 hz
	if (htim == &htim2) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f040 8108 	bne.w	8002dba <HAL_TIM_PeriodElapsedCallback+0x222>
//		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
//		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002baa:	2120      	movs	r1, #32
 8002bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb0:	f002 fd1e 	bl	80055f0 <HAL_GPIO_TogglePin>
//		MotorSet(&prismatic_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002bb4:	4887      	ldr	r0, [pc, #540]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002bb6:	f7ff f9af 	bl	8001f18 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002bba:	4887      	ldr	r0, [pc, #540]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002bbc:	f7ff f9ac 	bl	8001f18 <QEIPosVelUpdate>
//		Prismatic_CasCadeControl();

//		error_rads = prismatic_encoder.rads - prismatic_kalman.X_pred.pData[0];

		// Prismatic_sensor
		KalmanUpdate(&prismatic_kalman, (prismatic_encoder.rads));
 8002bc0:	4b84      	ldr	r3, [pc, #528]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc8b 	bl	80004e0 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ec43 2b10 	vmov	d0, r2, r3
 8002bd2:	4882      	ldr	r0, [pc, #520]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002bd4:	f7fe fcd2 	bl	800157c <KalmanUpdate>
		KalmanPrediction(&prismatic_kalman,
				(output_prismatic * (12.0 / 65535.0)));
 8002bd8:	4b81      	ldr	r3, [pc, #516]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fc7f 	bl	80004e0 <__aeabi_f2d>
 8002be2:	a379      	add	r3, pc, #484	@ (adr r3, 8002dc8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fcd2 	bl	8000590 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
		KalmanPrediction(&prismatic_kalman,
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ff26 	bl	8000a44 <__aeabi_d2f>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	ee00 3a10 	vmov	s0, r3
 8002bfe:	4877      	ldr	r0, [pc, #476]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002c00:	f7fe fc36 	bl	8001470 <KalmanPrediction>

		prismatic_kalman_rads = prismatic_kalman.X_pred.pData[0];
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002c06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc67 	bl	80004e0 <__aeabi_f2d>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4973      	ldr	r1, [pc, #460]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002c18:	e9c1 2300 	strd	r2, r3, [r1]
		prismatic_kalman_radps = prismatic_kalman.X_pred.pData[1];
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002c1e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002c22:	3304      	adds	r3, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc5a 	bl	80004e0 <__aeabi_f2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	496d      	ldr	r1, [pc, #436]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002c32:	e9c1 2300 	strd	r2, r3, [r1]

		prismatic_lowpass = prismatic_lowpass_prev + alpha * (prismatic_encoder.radps -  prismatic_lowpass_prev);
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002c38:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c46:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002df0 <HAL_TIM_PeriodElapsedCallback+0x258>
 8002c4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c4e:	4b67      	ldr	r3, [pc, #412]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	4b66      	ldr	r3, [pc, #408]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
		prismatic_acceleration = ((prismatic_lowpass - prismatic_lowpass_prev) / dt);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	4b61      	ldr	r3, [pc, #388]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c6e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002df8 <HAL_TIM_PeriodElapsedCallback+0x260>
 8002c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c76:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c78:	edc3 7a00 	vstr	s15, [r3]
		prismatic_lowpass_prev = prismatic_lowpass;
 8002c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5a      	ldr	r2, [pc, #360]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002c82:	6013      	str	r3, [r2, #0]

		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev + alpha * (prismatic_acceleration -  prismatic_acceleration_lowpass_prev);
 8002c84:	4b5d      	ldr	r3, [pc, #372]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c94:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002df0 <HAL_TIM_PeriodElapsedCallback+0x258>
 8002c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c9c:	4b58      	ldr	r3, [pc, #352]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
//		KalmanUpdate(&revolute_kalman, (revolute_encoder.rads));
//		KalmanPrediction(&revolute_kalman, (output_velo * (12.0 / 65535.0)));
//
//		revolute_kalman_rads = revolute_kalman.X_pred.pData[0];
//		revolute_kalman_radps = revolute_kalman.X_pred.pData[1];
		ball_screw_converter();
 8002cac:	f7ff fefc 	bl	8002aa8 <ball_screw_converter>
//
		if (burst_mode == 0) {
 8002cb0:	4b55      	ldr	r3, [pc, #340]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x128>
			output_prismatic = 65535;
 8002cb8:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002cba:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e002      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x12e>
		} else {
			output_prismatic = -65535;
 8002cc0:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002cc2:	4a53      	ldr	r2, [pc, #332]	@ (8002e10 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002cc4:	601a      	str	r2, [r3, #0]
		}

		if (revolute_flag == 1) {
 8002cc6:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d103      	bne.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x13e>
			output_revolute = 65535;
 8002cce:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e003      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x146>
		} else {
			output_revolute = 0;
 8002cd6:	4b50      	ldr	r3, [pc, #320]	@ (8002e18 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
		}

		tim2_counter++;
 8002cde:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002ce6:	6013      	str	r3, [r2, #0]
//
		MotorSet(&prismatic_motor, 1000, output_prismatic);
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	eef0 0a67 	vmov.f32	s1, s15
 8002cf2:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8002e20 <HAL_TIM_PeriodElapsedCallback+0x288>
 8002cf6:	484b      	ldr	r0, [pc, #300]	@ (8002e24 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002cf8:	f000 f8d2 	bl	8002ea0 <MotorSet>
		MotorSet(&revolute_motor, 1000, output_revolute);
 8002cfc:	4b46      	ldr	r3, [pc, #280]	@ (8002e18 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	eef0 0a67 	vmov.f32	s1, s15
 8002d06:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002e20 <HAL_TIM_PeriodElapsedCallback+0x288>
 8002d0a:	4847      	ldr	r0, [pc, #284]	@ (8002e28 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002d0c:	f000 f8c8 	bl	8002ea0 <MotorSet>

		// Protocal

		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 8002d10:	4b46      	ldr	r3, [pc, #280]	@ (8002e2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8002d1a:	428a      	cmp	r2, r1
 8002d1c:	f173 0300 	sbcs.w	r3, r3, #0
 8002d20:	d310      	bcc.n	8002d44 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			heartbeat_counter = 0;
 8002d22:	4942      	ldr	r1, [pc, #264]	@ (8002e2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = (registerFrame[0].U16 == 0) ? 22881 : 0;
 8002d30:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8002d38:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002d3c:	e000      	b.n	8002d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d42:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	1c54      	adds	r4, r2, #1
 8002d4c:	f143 0500 	adc.w	r5, r3, #0
 8002d50:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d52:	e9c3 4500 	strd	r4, r5, [r3]

		// Pen state

		// ROBOT position and speed

		 registerFrame[11].U16 = (int) (ball_screw_pos * 10);
 8002d56:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4b35      	ldr	r3, [pc, #212]	@ (8002e38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d62:	f7fd fc15 	bl	8000590 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fd fe21 	bl	80009b4 <__aeabi_d2iz>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b2e      	ldr	r3, [pc, #184]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d78:	82da      	strh	r2, [r3, #22]
//		 registerFrame[12].U16 = (int) (revolute_kalman_rads * (180/M_PI) * 10);
		 registerFrame[13].U16 = (int) (ball_screw_vel * 10);
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002d86:	f7fd fc03 	bl	8000590 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd fe0f 	bl	80009b4 <__aeabi_d2iz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d9c:	835a      	strh	r2, [r3, #26]
//		 registerFrame[14].U16 = (int) (revolute_kalman_radps * (180/M_PI) * 10);
		 registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
 8002d9e:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db0:	ee17 3a90 	vmov	r3, s15
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002db8:	83da      	strh	r2, [r3, #30]
////		case 1:
////
////			if ()
////		}
//	}
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	00180018 	.word	0x00180018
 8002dcc:	3f280018 	.word	0x3f280018
 8002dd0:	20000428 	.word	0x20000428
 8002dd4:	20000f78 	.word	0x20000f78
 8002dd8:	20001308 	.word	0x20001308
 8002ddc:	20000fe8 	.word	0x20000fe8
 8002de0:	20000f70 	.word	0x20000f70
 8002de4:	200012e8 	.word	0x200012e8
 8002de8:	200012f0 	.word	0x200012f0
 8002dec:	200012d0 	.word	0x200012d0
 8002df0:	3cf98536 	.word	0x3cf98536
 8002df4:	200012d4 	.word	0x200012d4
 8002df8:	3a83126f 	.word	0x3a83126f
 8002dfc:	200012d8 	.word	0x200012d8
 8002e00:	200012e0 	.word	0x200012e0
 8002e04:	200012dc 	.word	0x200012dc
 8002e08:	2000162c 	.word	0x2000162c
 8002e0c:	477fff00 	.word	0x477fff00
 8002e10:	c77fff00 	.word	0xc77fff00
 8002e14:	20000264 	.word	0x20000264
 8002e18:	20000f74 	.word	0x20000f74
 8002e1c:	20001628 	.word	0x20001628
 8002e20:	447a0000 	.word	0x447a0000
 8002e24:	20000f14 	.word	0x20000f14
 8002e28:	20000f30 	.word	0x20000f30
 8002e2c:	20001620 	.word	0x20001620
 8002e30:	20000e88 	.word	0x20000e88
 8002e34:	200012f8 	.word	0x200012f8
 8002e38:	40240000 	.word	0x40240000
 8002e3c:	20001300 	.word	0x20001300

08002e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e44:	b672      	cpsid	i
}
 8002e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <Error_Handler+0x8>

08002e4c <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a0c      	ldr	r2, [pc, #48]	@ (8002e98 <MotorInit+0x4c>)
 8002e66:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8b3a      	ldrh	r2, [r7, #24]
 8002e7e:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8002e80:	68b8      	ldr	r0, [r7, #8]
 8002e82:	f003 fc7b 	bl	800677c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f003 fdcc 	bl	8006a28 <HAL_TIM_PWM_Start>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	0a21fe80 	.word	0x0a21fe80
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002eac:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8002eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	d137      	bne.n	8002f2e <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	895b      	ldrh	r3, [r3, #10]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <MotorSet+0x32>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8002ed0:	e104      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	895b      	ldrh	r3, [r3, #10]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d105      	bne.n	8002ee6 <MotorSet+0x46>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ee4:	e0fa      	b.n	80030dc <MotorSet+0x23c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	895b      	ldrh	r3, [r3, #10]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d105      	bne.n	8002efa <MotorSet+0x5a>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002ef8:	e0f0      	b.n	80030dc <MotorSet+0x23c>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	895b      	ldrh	r3, [r3, #10]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d105      	bne.n	8002f0e <MotorSet+0x6e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0c:	e0e6      	b.n	80030dc <MotorSet+0x23c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	895b      	ldrh	r3, [r3, #10]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d105      	bne.n	8002f22 <MotorSet+0x82>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f20:	e0dc      	b.n	80030dc <MotorSet+0x23c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002f2c:	e0d6      	b.n	80030dc <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f46:	ee17 2a90 	vmov	r2, s15
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002f56:	33fe      	adds	r3, #254	@ 0xfe
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fa9f 	bl	800049c <__aeabi_ui2d>
 8002f5e:	a362      	add	r3, pc, #392	@ (adr r3, 80030e8 <MotorSet+0x248>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd fc3e 	bl	80007e4 <__aeabi_ddiv>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fd48 	bl	8000a04 <__aeabi_d2uiz>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8a1b      	ldrh	r3, [r3, #16]
 8002f90:	3301      	adds	r3, #1
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb2:	ee17 3a90 	vmov	r3, s15
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8a5b      	ldrh	r3, [r3, #18]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fa7b 	bl	80004bc <__aeabi_i2d>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
 8002fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fce:	eef0 7ae7 	vabs.f32	s15, s15
 8002fd2:	ee17 0a90 	vmov	r0, s15
 8002fd6:	f7fd fa83 	bl	80004e0 <__aeabi_f2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd fad5 	bl	8000590 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	a33e      	add	r3, pc, #248	@ (adr r3, 80030e8 <MotorSet+0x248>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fbf6 	bl	80007e4 <__aeabi_ddiv>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fd00 	bl	8000a04 <__aeabi_d2uiz>
 8003004:	4603      	mov	r3, r0
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 800300e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	db08      	blt.n	800302e <MotorSet+0x18e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6858      	ldr	r0, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	891b      	ldrh	r3, [r3, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	4619      	mov	r1, r3
 8003028:	f002 faca 	bl	80055c0 <HAL_GPIO_WritePin>
 800302c:	e007      	b.n	800303e <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6858      	ldr	r0, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	891b      	ldrh	r3, [r3, #8]
 8003036:	2201      	movs	r2, #1
 8003038:	4619      	mov	r1, r3
 800303a:	f002 fac1 	bl	80055c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8a1a      	ldrh	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8a5a      	ldrh	r2, [r3, #18]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8a5a      	ldrh	r2, [r3, #18]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	895b      	ldrh	r3, [r3, #10]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <MotorSet+0x1d6>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6992      	ldr	r2, [r2, #24]
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003074:	e032      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	895b      	ldrh	r3, [r3, #10]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d106      	bne.n	800308c <MotorSet+0x1ec>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800308a:	e027      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	895b      	ldrh	r3, [r3, #10]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d106      	bne.n	80030a2 <MotorSet+0x202>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80030a0:	e01c      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	895b      	ldrh	r3, [r3, #10]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d106      	bne.n	80030b8 <MotorSet+0x218>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80030b6:	e011      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	895b      	ldrh	r3, [r3, #10]
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d106      	bne.n	80030ce <MotorSet+0x22e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80030cc:	e006      	b.n	80030dc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80030da:	e7ff      	b.n	80030dc <MotorSet+0x23c>
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bdb0      	pop	{r4, r5, r7, pc}
 80030e4:	f3af 8000 	nop.w
 80030e8:	00000000 	.word	0x00000000
 80030ec:	40efffe0 	.word	0x40efffe0

080030f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_MspInit+0x44>)
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003134 <HAL_MspInit+0x44>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6613      	str	r3, [r2, #96]	@ 0x60
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_MspInit+0x44>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_MspInit+0x44>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4a08      	ldr	r2, [pc, #32]	@ (8003134 <HAL_MspInit+0x44>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003118:	6593      	str	r3, [r2, #88]	@ 0x58
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_MspInit+0x44>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003126:	f002 fb39 	bl	800579c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b09e      	sub	sp, #120	@ 0x78
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	2254      	movs	r2, #84	@ 0x54
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f007 fc88 	bl	800aa6e <memset>
  if(hadc->Instance==ADC1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003166:	d133      	bne.n	80031d0 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800316e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003172:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f84d 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003184:	f7ff fe5c 	bl	8002e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318c:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 800318e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003194:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a0:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 80031a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a4:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_ADC_MspInit+0xa0>)
 80031ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80031b8:	2306      	movs	r3, #6
 80031ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031bc:	2303      	movs	r3, #3
 80031be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80031c8:	4619      	mov	r1, r3
 80031ca:	4804      	ldr	r0, [pc, #16]	@ (80031dc <HAL_ADC_MspInit+0xa4>)
 80031cc:	f002 f876 	bl	80052bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031d0:	bf00      	nop
 80031d2:	3778      	adds	r7, #120	@ 0x78
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	48000800 	.word	0x48000800

080031e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a30      	ldr	r2, [pc, #192]	@ (80032b0 <HAL_TIM_Base_MspInit+0xd0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d114      	bne.n	800321c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031f2:	4b30      	ldr	r3, [pc, #192]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 80031f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2019      	movs	r0, #25
 8003210:	f001 fced 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003214:	2019      	movs	r0, #25
 8003216:	f001 fd04 	bl	8004c22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800321a:	e044      	b.n	80032a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003224:	d114      	bne.n	8003250 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003226:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6593      	str	r3, [r2, #88]	@ 0x58
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	201c      	movs	r0, #28
 8003244:	f001 fcd3 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003248:	201c      	movs	r0, #28
 800324a:	f001 fcea 	bl	8004c22 <HAL_NVIC_EnableIRQ>
}
 800324e:	e02a      	b.n	80032a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <HAL_TIM_Base_MspInit+0xd8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10c      	bne.n	8003274 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	6593      	str	r3, [r2, #88]	@ 0x58
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	e018      	b.n	80032a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <HAL_TIM_Base_MspInit+0xdc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d113      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	4a0c      	ldr	r2, [pc, #48]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	6613      	str	r3, [r2, #96]	@ 0x60
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_TIM_Base_MspInit+0xd4>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2100      	movs	r1, #0
 800329a:	2019      	movs	r0, #25
 800329c:	f001 fca7 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80032a0:	2019      	movs	r0, #25
 80032a2:	f001 fcbe 	bl	8004c22 <HAL_NVIC_EnableIRQ>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40014400 	.word	0x40014400

080032c0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	@ 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a36      	ldr	r2, [pc, #216]	@ (80033b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d131      	bne.n	8003346 <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e2:	4b36      	ldr	r3, [pc, #216]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	4a35      	ldr	r2, [pc, #212]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	4a2f      	ldr	r2, [pc, #188]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003306:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003312:	23c0      	movs	r3, #192	@ 0xc0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003322:	2302      	movs	r3, #2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f001 ffc4 	bl	80052bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003334:	2200      	movs	r2, #0
 8003336:	2100      	movs	r1, #0
 8003338:	201d      	movs	r0, #29
 800333a:	f001 fc58 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800333e:	201d      	movs	r0, #29
 8003340:	f001 fc6f 	bl	8004c22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003344:	e034      	b.n	80033b0 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_TIM_Encoder_MspInit+0x100>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d12f      	bne.n	80033b0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003350:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6593      	str	r3, [r2, #88]	@ 0x58
 800335c:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003368:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800336a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336c:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003374:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003380:	23c0      	movs	r3, #192	@ 0xc0
 8003382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003390:	2302      	movs	r3, #2
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	4619      	mov	r1, r3
 800339a:	480a      	ldr	r0, [pc, #40]	@ (80033c4 <HAL_TIM_Encoder_MspInit+0x104>)
 800339c:	f001 ff8e 	bl	80052bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2100      	movs	r1, #0
 80033a4:	201e      	movs	r0, #30
 80033a6:	f001 fc22 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033aa:	201e      	movs	r0, #30
 80033ac:	f001 fc39 	bl	8004c22 <HAL_NVIC_EnableIRQ>
}
 80033b0:	bf00      	nop
 80033b2:	3730      	adds	r7, #48	@ 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40000800 	.word	0x40000800
 80033c4:	48000400 	.word	0x48000400

080033c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a12      	ldr	r2, [pc, #72]	@ (8003430 <HAL_TIM_MspPostInit+0x68>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11d      	bne.n	8003426 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <HAL_TIM_MspPostInit+0x6c>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	4a11      	ldr	r2, [pc, #68]	@ (8003434 <HAL_TIM_MspPostInit+0x6c>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_TIM_MspPostInit+0x6c>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003402:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003406:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003414:	2306      	movs	r3, #6
 8003416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003422:	f001 ff4b 	bl	80052bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b09e      	sub	sp, #120	@ 0x78
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	2254      	movs	r2, #84	@ 0x54
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f007 fb08 	bl	800aa6e <memset>
  if(huart->Instance==USART2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4d      	ldr	r2, [pc, #308]	@ (8003598 <HAL_UART_MspInit+0x160>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f040 8092 	bne.w	800358e <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800346a:	2302      	movs	r3, #2
 800346c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	4618      	mov	r0, r3
 8003478:	f002 fece 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003482:	f7ff fcdd 	bl	8002e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003486:	4b45      	ldr	r3, [pc, #276]	@ (800359c <HAL_UART_MspInit+0x164>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	4a44      	ldr	r2, [pc, #272]	@ (800359c <HAL_UART_MspInit+0x164>)
 800348c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003490:	6593      	str	r3, [r2, #88]	@ 0x58
 8003492:	4b42      	ldr	r3, [pc, #264]	@ (800359c <HAL_UART_MspInit+0x164>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <HAL_UART_MspInit+0x164>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	4a3e      	ldr	r2, [pc, #248]	@ (800359c <HAL_UART_MspInit+0x164>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034aa:	4b3c      	ldr	r3, [pc, #240]	@ (800359c <HAL_UART_MspInit+0x164>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034b6:	230c      	movs	r3, #12
 80034b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c2:	2300      	movs	r3, #0
 80034c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034c6:	2307      	movs	r3, #7
 80034c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034ce:	4619      	mov	r1, r3
 80034d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d4:	f001 fef2 	bl	80052bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034da:	4a32      	ldr	r2, [pc, #200]	@ (80035a4 <HAL_UART_MspInit+0x16c>)
 80034dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80034de:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034e0:	221a      	movs	r2, #26
 80034e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ea:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f6:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fc:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003502:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800350e:	4824      	ldr	r0, [pc, #144]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 8003510:	f001 fba2 	bl	8004c58 <HAL_DMA_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800351a:	f7ff fc91 	bl	8002e40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 8003522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003526:	4a1e      	ldr	r2, [pc, #120]	@ (80035a0 <HAL_UART_MspInit+0x168>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <HAL_UART_MspInit+0x174>)
 8003530:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003532:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003534:	221b      	movs	r2, #27
 8003536:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 800353a:	2210      	movs	r2, #16
 800353c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800353e:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003540:	2200      	movs	r2, #0
 8003542:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800354a:	4b17      	ldr	r3, [pc, #92]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003556:	4b14      	ldr	r3, [pc, #80]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003558:	2200      	movs	r2, #0
 800355a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 800355e:	2200      	movs	r2, #0
 8003560:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003562:	4811      	ldr	r0, [pc, #68]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003564:	f001 fb78 	bl	8004c58 <HAL_DMA_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800356e:	f7ff fc67 	bl	8002e40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 8003576:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003578:	4a0b      	ldr	r2, [pc, #44]	@ (80035a8 <HAL_UART_MspInit+0x170>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	2026      	movs	r0, #38	@ 0x26
 8003584:	f001 fb33 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003588:	2026      	movs	r0, #38	@ 0x26
 800358a:	f001 fb4a 	bl	8004c22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800358e:	bf00      	nop
 8003590:	3778      	adds	r7, #120	@ 0x78
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40004400 	.word	0x40004400
 800359c:	40021000 	.word	0x40021000
 80035a0:	200008f0 	.word	0x200008f0
 80035a4:	40020008 	.word	0x40020008
 80035a8:	20000950 	.word	0x20000950
 80035ac:	4002001c 	.word	0x4002001c

080035b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <NMI_Handler+0x4>

080035b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <HardFault_Handler+0x4>

080035c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <MemManage_Handler+0x4>

080035c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <BusFault_Handler+0x4>

080035d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <UsageFault_Handler+0x4>

080035d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003606:	f000 f8f9 	bl	80037fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}

0800360e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003612:	2008      	movs	r0, #8
 8003614:	f002 f806 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}

0800361c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003620:	2010      	movs	r0, #16
 8003622:	f001 ffff 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003630:	4802      	ldr	r0, [pc, #8]	@ (800363c <DMA1_Channel1_IRQHandler+0x10>)
 8003632:	f001 fcf4 	bl	800501e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200008f0 	.word	0x200008f0

08003640 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003644:	4802      	ldr	r0, [pc, #8]	@ (8003650 <DMA1_Channel2_IRQHandler+0x10>)
 8003646:	f001 fcea 	bl	800501e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000950 	.word	0x20000950

08003654 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003658:	4803      	ldr	r0, [pc, #12]	@ (8003668 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800365a:	f003 fd2f 	bl	80070bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800365e:	4803      	ldr	r0, [pc, #12]	@ (800366c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003660:	f003 fd2c 	bl	80070bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	2000035c 	.word	0x2000035c
 800366c:	20000758 	.word	0x20000758

08003670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003674:	4802      	ldr	r0, [pc, #8]	@ (8003680 <TIM2_IRQHandler+0x10>)
 8003676:	f003 fd21 	bl	80070bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000428 	.word	0x20000428

08003684 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <TIM3_IRQHandler+0x10>)
 800368a:	f003 fd17 	bl	80070bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200004f4 	.word	0x200004f4

08003698 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <TIM4_IRQHandler+0x10>)
 800369e:	f003 fd0d 	bl	80070bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200005c0 	.word	0x200005c0

080036ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <USART2_IRQHandler+0x10>)
 80036b2:	f005 fad7 	bl	8008c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000824 	.word	0x20000824

080036c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80036c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036c8:	f001 ffac 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80036cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80036d0:	f001 ffa8 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80036d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80036d8:	f001 ffa4 	bl	8005624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <SystemInit+0x20>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <SystemInit+0x20>)
 80036ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003704:	480d      	ldr	r0, [pc, #52]	@ (800373c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003706:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003708:	f7ff ffea 	bl	80036e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800370c:	480c      	ldr	r0, [pc, #48]	@ (8003740 <LoopForever+0x6>)
  ldr r1, =_edata
 800370e:	490d      	ldr	r1, [pc, #52]	@ (8003744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <LoopForever+0xe>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003724:	4c0a      	ldr	r4, [pc, #40]	@ (8003750 <LoopForever+0x16>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003732:	f007 f9a5 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003736:	f7fe fc8f 	bl	8002058 <main>

0800373a <LoopForever>:

LoopForever:
    b LoopForever
 800373a:	e7fe      	b.n	800373a <LoopForever>
  ldr   r0, =_estack
 800373c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8003748:	0800abcc 	.word	0x0800abcc
  ldr r2, =_sbss
 800374c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003750:	20001634 	.word	0x20001634

08003754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC1_2_IRQHandler>

08003756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003760:	2003      	movs	r0, #3
 8003762:	f001 fa39 	bl	8004bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003766:	2000      	movs	r0, #0
 8003768:	f000 f80e 	bl	8003788 <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	71fb      	strb	r3, [r7, #7]
 8003776:	e001      	b.n	800377c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003778:	f7ff fcba 	bl	80030f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800377c:	79fb      	ldrb	r3, [r7, #7]

}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_InitTick+0x68>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d022      	beq.n	80037e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <HAL_InitTick+0x6c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <HAL_InitTick+0x68>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fa44 	bl	8004c3e <HAL_SYSTICK_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d809      	bhi.n	80037d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c2:	2200      	movs	r2, #0
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ca:	f001 fa10 	bl	8004bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ce:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <HAL_InitTick+0x70>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e007      	b.n	80037e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e004      	b.n	80037e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e001      	b.n	80037e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	200002c8 	.word	0x200002c8
 80037f4:	200002c0 	.word	0x200002c0
 80037f8:	200002c4 	.word	0x200002c4

080037fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_IncTick+0x1c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_IncTick+0x20>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4413      	add	r3, r2
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <HAL_IncTick+0x1c>)
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20001630 	.word	0x20001630
 800381c:	200002c8 	.word	0x200002c8

08003820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <HAL_GetTick+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20001630 	.word	0x20001630

08003838 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3360      	adds	r3, #96	@ 0x60
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <LL_ADC_SetOffset+0x44>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	03fff000 	.word	0x03fff000

080038e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3360      	adds	r3, #96	@ 0x60
 80038f6:	461a      	mov	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3360      	adds	r3, #96	@ 0x60
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3360      	adds	r3, #96	@ 0x60
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	431a      	orrs	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3360      	adds	r3, #96	@ 0x60
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	615a      	str	r2, [r3, #20]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3330      	adds	r3, #48	@ 0x30
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	4413      	add	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	211f      	movs	r1, #31
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	f003 011f 	and.w	r1, r3, #31
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3314      	adds	r3, #20
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0e5b      	lsrs	r3, r3, #25
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0d1b      	lsrs	r3, r3, #20
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2107      	movs	r1, #7
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	401a      	ands	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	0d1b      	lsrs	r3, r3, #20
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0318 	and.w	r3, r3, #24
 8003aae:	4908      	ldr	r1, [pc, #32]	@ (8003ad0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ab0:	40d9      	lsrs	r1, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	0007ffff 	.word	0x0007ffff

08003ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6093      	str	r3, [r2, #8]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <LL_ADC_IsEnabled+0x18>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <LL_ADC_IsEnabled+0x1a>
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d101      	bne.n	8003bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d101      	bne.n	8003bd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	@ 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1a9      	b.n	8003f52 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fa93 	bl	8003138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff67 	bl	8003af8 <LL_ADC_IsDeepPowerDownEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff4d 	bl	8003ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff82 	bl	8003b48 <LL_ADC_IsInternalRegulatorEnabled>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ff66 	bl	8003b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c54:	4b9c      	ldr	r3, [pc, #624]	@ (8003ec8 <HAL_ADC_Init+0x2e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	4a9c      	ldr	r2, [pc, #624]	@ (8003ecc <HAL_ADC_Init+0x2e8>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c68:	e002      	b.n	8003c70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f9      	bne.n	8003c6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff64 	bl	8003b48 <LL_ADC_IsInternalRegulatorEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff75 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003cac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8142 	bne.w	8003f40 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 813e 	bne.w	8003f40 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff49 	bl	8003b70 <LL_ADC_IsEnabled>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d141      	bne.n	8003d68 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADC_Init+0x114>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a77      	ldr	r2, [pc, #476]	@ (8003ed0 <HAL_ADC_Init+0x2ec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10f      	bne.n	8003d18 <HAL_ADC_Init+0x134>
 8003cf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003cfc:	f7ff ff38 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d00:	4604      	mov	r4, r0
 8003d02:	4873      	ldr	r0, [pc, #460]	@ (8003ed0 <HAL_ADC_Init+0x2ec>)
 8003d04:	f7ff ff34 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4323      	orrs	r3, r4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e012      	b.n	8003d3e <HAL_ADC_Init+0x15a>
 8003d18:	486e      	ldr	r0, [pc, #440]	@ (8003ed4 <HAL_ADC_Init+0x2f0>)
 8003d1a:	f7ff ff29 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d1e:	4604      	mov	r4, r0
 8003d20:	486d      	ldr	r0, [pc, #436]	@ (8003ed8 <HAL_ADC_Init+0x2f4>)
 8003d22:	f7ff ff25 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d26:	4603      	mov	r3, r0
 8003d28:	431c      	orrs	r4, r3
 8003d2a:	486c      	ldr	r0, [pc, #432]	@ (8003edc <HAL_ADC_Init+0x2f8>)
 8003d2c:	f7ff ff20 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4323      	orrs	r3, r4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADC_Init+0x172>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed0 <HAL_ADC_Init+0x2ec>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Init+0x176>
 8003d56:	4a62      	ldr	r2, [pc, #392]	@ (8003ee0 <HAL_ADC_Init+0x2fc>)
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_Init+0x178>
 8003d5a:	4a62      	ldr	r2, [pc, #392]	@ (8003ee4 <HAL_ADC_Init+0x300>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7ff fd68 	bl	8003838 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7f5b      	ldrb	r3, [r3, #29]
 8003d6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d106      	bne.n	8003da4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	045b      	lsls	r3, r3, #17
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	4b48      	ldr	r3, [pc, #288]	@ (8003ee8 <HAL_ADC_Init+0x304>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fee4 	bl	8003bbc <LL_ADC_INJ_IsConversionOngoing>
 8003df4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d17f      	bne.n	8003efc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d17c      	bne.n	8003efc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e1e:	f023 0302 	bic.w	r3, r3, #2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6911      	ldr	r1, [r2, #16]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003e62:	e013      	b.n	8003e8c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d12a      	bne.n	8003eec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eac:	4311      	orrs	r1, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e019      	b.n	8003efc <HAL_ADC_Init+0x318>
 8003ec8:	200002c0 	.word	0x200002c0
 8003ecc:	053e2d63 	.word	0x053e2d63
 8003ed0:	50000100 	.word	0x50000100
 8003ed4:	50000400 	.word	0x50000400
 8003ed8:	50000500 	.word	0x50000500
 8003edc:	50000600 	.word	0x50000600
 8003ee0:	50000300 	.word	0x50000300
 8003ee4:	50000700 	.word	0x50000700
 8003ee8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f023 010f 	bic.w	r1, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f1c:	e007      	b.n	8003f2e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020f 	bic.w	r2, r2, #15
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f3e:	e007      	b.n	8003f50 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	@ 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}
 8003f5a:	bf00      	nop

08003f5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b0b6      	sub	sp, #216	@ 0xd8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x24>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	f000 bc13 	b.w	80047a6 <HAL_ADC_ConfigChannel+0x84a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fe02 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 83f3 	bne.w	8004780 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7ff fd18 	bl	80039dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fdf0 	bl	8003b96 <LL_ADC_REG_IsConversionOngoing>
 8003fb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fdfc 	bl	8003bbc <LL_ADC_INJ_IsConversionOngoing>
 8003fc4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 81d9 	bne.w	8004384 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 81d4 	bne.w	8004384 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fe4:	d10f      	bne.n	8004006 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7ff fd1f 	bl	8003a34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fcd9 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004004:	e00e      	b.n	8004024 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	461a      	mov	r2, r3
 8004014:	f7ff fd0e 	bl	8003a34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fcc9 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	08db      	lsrs	r3, r3, #3
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d022      	beq.n	800408c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6919      	ldr	r1, [r3, #16]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004056:	f7ff fc23 	bl	80038a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6919      	ldr	r1, [r3, #16]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	461a      	mov	r2, r3
 8004068:	f7ff fc6f 	bl	800394a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x126>
 800407c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004080:	e000      	b.n	8004084 <HAL_ADC_ConfigChannel+0x128>
 8004082:	2300      	movs	r3, #0
 8004084:	461a      	mov	r2, r3
 8004086:	f7ff fc7b 	bl	8003980 <LL_ADC_SetOffsetSaturation>
 800408a:	e17b      	b.n	8004384 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fc28 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x15c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fc1d 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	e01e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x19a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fc12 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80040ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_ConfigChannel+0x1b2>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	e018      	b.n	8004140 <HAL_ADC_ConfigChannel+0x1e4>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004126:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800412a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e004      	b.n	8004140 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fbe1 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2101      	movs	r1, #1
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fbc5 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x222>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fbba 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	e01e      	b.n	80041bc <HAL_ADC_ConfigChannel+0x260>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fbaf 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800419c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e004      	b.n	80041ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80041b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x278>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	e018      	b.n	8004206 <HAL_ADC_ConfigChannel+0x2aa>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80041e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80041f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e004      	b.n	8004206 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80041fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004206:	429a      	cmp	r2, r3
 8004208:	d106      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fb7e 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fb62 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x2e8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb57 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	e01e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x326>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fb4c 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004262:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800426a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e004      	b.n	8004280 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004276:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_ADC_ConfigChannel+0x33e>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	e016      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x36c>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80042b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e004      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80042be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d106      	bne.n	80042da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fb1d 	bl	8003914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2103      	movs	r1, #3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fb01 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x3aa>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2103      	movs	r1, #3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff faf6 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	0e9b      	lsrs	r3, r3, #26
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	e017      	b.n	8004336 <HAL_ADC_ConfigChannel+0x3da>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2103      	movs	r1, #3
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff faeb 	bl	80038e8 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800431e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004320:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e003      	b.n	8004334 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800432c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433e:	2b00      	cmp	r3, #0
 8004340:	d105      	bne.n	800434e <HAL_ADC_ConfigChannel+0x3f2>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	0e9b      	lsrs	r3, r3, #26
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	e011      	b.n	8004372 <HAL_ADC_ConfigChannel+0x416>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800435c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800435e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004366:	2320      	movs	r3, #32
 8004368:	e003      	b.n	8004372 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800436a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	2103      	movs	r1, #3
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fac8 	bl	8003914 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fbf1 	bl	8003b70 <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 813d 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7ff fb72 	bl	8003a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4aa2      	ldr	r2, [pc, #648]	@ (8004638 <HAL_ADC_ConfigChannel+0x6dc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f040 812e 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x480>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2b09      	cmp	r3, #9
 80043d2:	bf94      	ite	ls
 80043d4:	2301      	movls	r3, #1
 80043d6:	2300      	movhi	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e019      	b.n	8004410 <HAL_ADC_ConfigChannel+0x4b4>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80043ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80043ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80043f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2b09      	cmp	r3, #9
 8004408:	bf94      	ite	ls
 800440a:	2301      	movls	r3, #1
 800440c:	2300      	movhi	r3, #0
 800440e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004410:	2b00      	cmp	r3, #0
 8004412:	d079      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x4d4>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0e9b      	lsrs	r3, r3, #26
 8004426:	3301      	adds	r3, #1
 8004428:	069b      	lsls	r3, r3, #26
 800442a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800442e:	e015      	b.n	800445c <HAL_ADC_ConfigChannel+0x500>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800443e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004440:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004448:	2320      	movs	r3, #32
 800444a:	e003      	b.n	8004454 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	3301      	adds	r3, #1
 8004456:	069b      	lsls	r3, r3, #26
 8004458:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_ADC_ConfigChannel+0x520>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	3301      	adds	r3, #1
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	e017      	b.n	80044ac <HAL_ADC_ConfigChannel+0x550>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800448a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800448c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800448e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e003      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	2101      	movs	r1, #1
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	ea42 0103 	orr.w	r1, r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x576>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	0e9b      	lsrs	r3, r3, #26
 80044c2:	3301      	adds	r3, #1
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	051b      	lsls	r3, r3, #20
 80044d0:	e018      	b.n	8004504 <HAL_ADC_ConfigChannel+0x5a8>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80044e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80044ea:	2320      	movs	r3, #32
 80044ec:	e003      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004504:	430b      	orrs	r3, r1
 8004506:	e07e      	b.n	8004606 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x5c8>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0e9b      	lsrs	r3, r3, #26
 800451a:	3301      	adds	r3, #1
 800451c:	069b      	lsls	r3, r3, #26
 800451e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004522:	e015      	b.n	8004550 <HAL_ADC_ConfigChannel+0x5f4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	e003      	b.n	8004548 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3301      	adds	r3, #1
 800454a:	069b      	lsls	r3, r3, #26
 800454c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x614>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0e9b      	lsrs	r3, r3, #26
 8004562:	3301      	adds	r3, #1
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	e017      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x644>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	61fb      	str	r3, [r7, #28]
  return result;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e003      	b.n	8004594 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	ea42 0103 	orr.w	r1, r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x670>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0e9b      	lsrs	r3, r3, #26
 80045b6:	3301      	adds	r3, #1
 80045b8:	f003 021f 	and.w	r2, r3, #31
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	3b1e      	subs	r3, #30
 80045c4:	051b      	lsls	r3, r3, #20
 80045c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	e01b      	b.n	8004604 <HAL_ADC_ConfigChannel+0x6a8>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	613b      	str	r3, [r7, #16]
  return result;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f003 021f 	and.w	r2, r3, #31
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	3b1e      	subs	r3, #30
 80045fe:	051b      	lsls	r3, r3, #20
 8004600:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004604:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800460a:	4619      	mov	r1, r3
 800460c:	f7ff fa12 	bl	8003a34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <HAL_ADC_ConfigChannel+0x6e0>)
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80be 	beq.w	800479a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004626:	d004      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x6d6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a04      	ldr	r2, [pc, #16]	@ (8004640 <HAL_ADC_ConfigChannel+0x6e4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10a      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x6ec>
 8004632:	4b04      	ldr	r3, [pc, #16]	@ (8004644 <HAL_ADC_ConfigChannel+0x6e8>)
 8004634:	e009      	b.n	800464a <HAL_ADC_ConfigChannel+0x6ee>
 8004636:	bf00      	nop
 8004638:	407f0000 	.word	0x407f0000
 800463c:	80080000 	.word	0x80080000
 8004640:	50000100 	.word	0x50000100
 8004644:	50000300 	.word	0x50000300
 8004648:	4b59      	ldr	r3, [pc, #356]	@ (80047b0 <HAL_ADC_ConfigChannel+0x854>)
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff f91a 	bl	8003884 <LL_ADC_GetCommonPathInternalCh>
 8004650:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a56      	ldr	r2, [pc, #344]	@ (80047b4 <HAL_ADC_ConfigChannel+0x858>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_ADC_ConfigChannel+0x70c>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a55      	ldr	r2, [pc, #340]	@ (80047b8 <HAL_ADC_ConfigChannel+0x85c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d13a      	bne.n	80046de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800466c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d134      	bne.n	80046de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800467c:	d005      	beq.n	800468a <HAL_ADC_ConfigChannel+0x72e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4e      	ldr	r2, [pc, #312]	@ (80047bc <HAL_ADC_ConfigChannel+0x860>)
 8004684:	4293      	cmp	r3, r2
 8004686:	f040 8085 	bne.w	8004794 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004692:	d004      	beq.n	800469e <HAL_ADC_ConfigChannel+0x742>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a49      	ldr	r2, [pc, #292]	@ (80047c0 <HAL_ADC_ConfigChannel+0x864>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x746>
 800469e:	4a49      	ldr	r2, [pc, #292]	@ (80047c4 <HAL_ADC_ConfigChannel+0x868>)
 80046a0:	e000      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x748>
 80046a2:	4a43      	ldr	r2, [pc, #268]	@ (80047b0 <HAL_ADC_ConfigChannel+0x854>)
 80046a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7ff f8d5 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046b4:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <HAL_ADC_ConfigChannel+0x86c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	4a44      	ldr	r2, [pc, #272]	@ (80047cc <HAL_ADC_ConfigChannel+0x870>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	4613      	mov	r3, r2
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046ce:	e002      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f9      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046dc:	e05a      	b.n	8004794 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3b      	ldr	r2, [pc, #236]	@ (80047d0 <HAL_ADC_ConfigChannel+0x874>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d125      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11f      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a31      	ldr	r2, [pc, #196]	@ (80047c0 <HAL_ADC_ConfigChannel+0x864>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d104      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x7ac>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a34      	ldr	r2, [pc, #208]	@ (80047d4 <HAL_ADC_ConfigChannel+0x878>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d047      	beq.n	8004798 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004710:	d004      	beq.n	800471c <HAL_ADC_ConfigChannel+0x7c0>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2a      	ldr	r2, [pc, #168]	@ (80047c0 <HAL_ADC_ConfigChannel+0x864>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x7c4>
 800471c:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <HAL_ADC_ConfigChannel+0x868>)
 800471e:	e000      	b.n	8004722 <HAL_ADC_ConfigChannel+0x7c6>
 8004720:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_ADC_ConfigChannel+0x854>)
 8004722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7ff f896 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004732:	e031      	b.n	8004798 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <HAL_ADC_ConfigChannel+0x87c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d12d      	bne.n	800479a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800473e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d127      	bne.n	800479a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1c      	ldr	r2, [pc, #112]	@ (80047c0 <HAL_ADC_ConfigChannel+0x864>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475c:	d004      	beq.n	8004768 <HAL_ADC_ConfigChannel+0x80c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <HAL_ADC_ConfigChannel+0x864>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x810>
 8004768:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <HAL_ADC_ConfigChannel+0x868>)
 800476a:	e000      	b.n	800476e <HAL_ADC_ConfigChannel+0x812>
 800476c:	4a10      	ldr	r2, [pc, #64]	@ (80047b0 <HAL_ADC_ConfigChannel+0x854>)
 800476e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004772:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7ff f870 	bl	800385e <LL_ADC_SetCommonPathInternalCh>
 800477e:	e00c      	b.n	800479a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004792:	e002      	b.n	800479a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004798:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	37d8      	adds	r7, #216	@ 0xd8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	50000700 	.word	0x50000700
 80047b4:	c3210000 	.word	0xc3210000
 80047b8:	90c00010 	.word	0x90c00010
 80047bc:	50000600 	.word	0x50000600
 80047c0:	50000100 	.word	0x50000100
 80047c4:	50000300 	.word	0x50000300
 80047c8:	200002c0 	.word	0x200002c0
 80047cc:	053e2d63 	.word	0x053e2d63
 80047d0:	c7520000 	.word	0xc7520000
 80047d4:	50000500 	.word	0x50000500
 80047d8:	cb840000 	.word	0xcb840000

080047dc <LL_ADC_IsEnabled>:
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <LL_ADC_IsEnabled+0x18>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LL_ADC_IsEnabled+0x1a>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_ADC_REG_IsConversionOngoing>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d101      	bne.n	800481a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b0a1      	sub	sp, #132	@ 0x84
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004842:	2302      	movs	r3, #2
 8004844:	e0e7      	b.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800484e:	2300      	movs	r3, #0
 8004850:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004852:	2300      	movs	r3, #0
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800485e:	d102      	bne.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004860:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	e009      	b.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d102      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004870:	4b6d      	ldr	r3, [pc, #436]	@ (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	e001      	b.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0be      	b.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ffb1 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 80048a0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ffab 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 80a0 	bne.w	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 809c 	bne.w	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c4:	d004      	beq.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a55      	ldr	r2, [pc, #340]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80048d0:	4b56      	ldr	r3, [pc, #344]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80048d2:	e000      	b.n	80048d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80048d4:	4b56      	ldr	r3, [pc, #344]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80048d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d04b      	beq.n	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048f2:	035b      	lsls	r3, r3, #13
 80048f4:	430b      	orrs	r3, r1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004904:	d004      	beq.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a45      	ldr	r2, [pc, #276]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10f      	bne.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004910:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004914:	f7ff ff62 	bl	80047dc <LL_ADC_IsEnabled>
 8004918:	4604      	mov	r4, r0
 800491a:	4841      	ldr	r0, [pc, #260]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800491c:	f7ff ff5e 	bl	80047dc <LL_ADC_IsEnabled>
 8004920:	4603      	mov	r3, r0
 8004922:	4323      	orrs	r3, r4
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e012      	b.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004930:	483c      	ldr	r0, [pc, #240]	@ (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004932:	f7ff ff53 	bl	80047dc <LL_ADC_IsEnabled>
 8004936:	4604      	mov	r4, r0
 8004938:	483b      	ldr	r0, [pc, #236]	@ (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800493a:	f7ff ff4f 	bl	80047dc <LL_ADC_IsEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	431c      	orrs	r4, r3
 8004942:	483c      	ldr	r0, [pc, #240]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004944:	f7ff ff4a 	bl	80047dc <LL_ADC_IsEnabled>
 8004948:	4603      	mov	r3, r0
 800494a:	4323      	orrs	r3, r4
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d056      	beq.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800495a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	6892      	ldr	r2, [r2, #8]
 800496e:	430a      	orrs	r2, r1
 8004970:	431a      	orrs	r2, r3
 8004972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004974:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004976:	e047      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004982:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800498c:	d004      	beq.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10f      	bne.n	80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004998:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800499c:	f7ff ff1e 	bl	80047dc <LL_ADC_IsEnabled>
 80049a0:	4604      	mov	r4, r0
 80049a2:	481f      	ldr	r0, [pc, #124]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049a4:	f7ff ff1a 	bl	80047dc <LL_ADC_IsEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4323      	orrs	r3, r4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e012      	b.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049b8:	481a      	ldr	r0, [pc, #104]	@ (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049ba:	f7ff ff0f 	bl	80047dc <LL_ADC_IsEnabled>
 80049be:	4604      	mov	r4, r0
 80049c0:	4819      	ldr	r0, [pc, #100]	@ (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049c2:	f7ff ff0b 	bl	80047dc <LL_ADC_IsEnabled>
 80049c6:	4603      	mov	r3, r0
 80049c8:	431c      	orrs	r4, r3
 80049ca:	481a      	ldr	r0, [pc, #104]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80049cc:	f7ff ff06 	bl	80047dc <LL_ADC_IsEnabled>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4323      	orrs	r3, r4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d012      	beq.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049ea:	f023 030f 	bic.w	r3, r3, #15
 80049ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80049f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049f2:	e009      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a06:	e000      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3784      	adds	r7, #132	@ 0x84
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	50000100 	.word	0x50000100
 8004a24:	50000400 	.word	0x50000400
 8004a28:	50000500 	.word	0x50000500
 8004a2c:	50000300 	.word	0x50000300
 8004a30:	50000700 	.word	0x50000700
 8004a34:	50000600 	.word	0x50000600

08004a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a48:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6a:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60d3      	str	r3, [r2, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <__NVIC_GetPriorityGrouping+0x18>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0307 	and.w	r3, r3, #7
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db0b      	blt.n	8004ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	4907      	ldr	r1, [pc, #28]	@ (8004ad4 <__NVIC_EnableIRQ+0x38>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2001      	movs	r0, #1
 8004abe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba4:	d301      	bcc.n	8004baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00f      	b.n	8004bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004baa:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f7ff ff8e 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000e010 	.word	0xe000e010

08004bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff29 	bl	8004a38 <__NVIC_SetPriorityGrouping>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bfc:	f7ff ff40 	bl	8004a80 <__NVIC_GetPriorityGrouping>
 8004c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f7ff ff90 	bl	8004b2c <NVIC_EncodePriority>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff5f 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff33 	bl	8004a9c <__NVIC_EnableIRQ>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ffa4 	bl	8004b94 <SysTick_Config>
 8004c4c:	4603      	mov	r3, r0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e08d      	b.n	8004d86 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_DMA_Init+0x138>)
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d80f      	bhi.n	8004c96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b45      	ldr	r3, [pc, #276]	@ (8004d94 <HAL_DMA_Init+0x13c>)
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a45      	ldr	r2, [pc, #276]	@ (8004d98 <HAL_DMA_Init+0x140>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	009a      	lsls	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <HAL_DMA_Init+0x144>)
 8004c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c94:	e00e      	b.n	8004cb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b40      	ldr	r3, [pc, #256]	@ (8004da0 <HAL_DMA_Init+0x148>)
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	@ (8004d98 <HAL_DMA_Init+0x140>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	009a      	lsls	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8004da4 <HAL_DMA_Init+0x14c>)
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa76 	bl	80051f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d14:	d102      	bne.n	8004d1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d30:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_DMA_Init+0x104>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d80c      	bhi.n	8004d5c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa96 	bl	8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	e008      	b.n	8004d6e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40020407 	.word	0x40020407
 8004d94:	bffdfff8 	.word	0xbffdfff8
 8004d98:	cccccccd 	.word	0xcccccccd
 8004d9c:	40020000 	.word	0x40020000
 8004da0:	bffdfbf8 	.word	0xbffdfbf8
 8004da4:	40020400 	.word	0x40020400

08004da8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_DMA_Start_IT+0x20>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e066      	b.n	8004e96 <HAL_DMA_Start_IT+0xee>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d155      	bne.n	8004e88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f9bb 	bl	800517c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 020e 	orr.w	r2, r2, #14
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e00f      	b.n	8004e40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 020a 	orr.w	r2, r2, #10
 8004e3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e005      	b.n	8004e94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
 8004e92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d005      	beq.n	8004ec2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e037      	b.n	8004f32 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 020e 	bic.w	r2, r2, #14
 8004ed0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	f003 021f 	and.w	r2, r3, #31
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2101      	movs	r1, #1
 8004f00:	fa01 f202 	lsl.w	r2, r1, r2
 8004f04:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f0e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f26:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f30:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d00d      	beq.n	8004f84 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e047      	b.n	8005014 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 020e 	bic.w	r2, r2, #14
 8004f92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fd0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ff2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
    }
  }
  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2204      	movs	r2, #4
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d026      	beq.n	8005098 <HAL_DMA_IRQHandler+0x7a>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d021      	beq.n	8005098 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0204 	bic.w	r2, r2, #4
 8005070:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f003 021f 	and.w	r2, r3, #31
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	2104      	movs	r1, #4
 8005080:	fa01 f202 	lsl.w	r2, r1, r2
 8005084:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d071      	beq.n	8005172 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005096:	e06c      	b.n	8005172 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2202      	movs	r2, #2
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02e      	beq.n	800510a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d029      	beq.n	800510a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020a 	bic.w	r2, r2, #10
 80050d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	f003 021f 	and.w	r2, r3, #31
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	2102      	movs	r1, #2
 80050ea:	fa01 f202 	lsl.w	r2, r1, r2
 80050ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d038      	beq.n	8005172 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005108:	e033      	b.n	8005172 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2208      	movs	r2, #8
 8005114:	409a      	lsls	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02a      	beq.n	8005174 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d025      	beq.n	8005174 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 020e 	bic.w	r2, r2, #14
 8005136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513c:	f003 021f 	and.w	r2, r3, #31
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005172:	bf00      	nop
 8005174:	bf00      	nop
}
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005192:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	f003 021f 	and.w	r2, r3, #31
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d108      	bne.n	80051dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051da:	e007      	b.n	80051ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	4b16      	ldr	r3, [pc, #88]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d802      	bhi.n	8005212 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800520c:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e001      	b.n	8005216 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005214:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3b08      	subs	r3, #8
 8005222:	4a12      	ldr	r2, [pc, #72]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	461a      	mov	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a0b      	ldr	r2, [pc, #44]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005242:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2201      	movs	r2, #1
 800524c:	409a      	lsls	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40020407 	.word	0x40020407
 8005264:	40020800 	.word	0x40020800
 8005268:	40020820 	.word	0x40020820
 800526c:	cccccccd 	.word	0xcccccccd
 8005270:	40020880 	.word	0x40020880

08005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a08      	ldr	r2, [pc, #32]	@ (80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005296:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3b01      	subs	r3, #1
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	1000823f 	.word	0x1000823f
 80052b8:	40020940 	.word	0x40020940

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052ca:	e15a      	b.n	8005582 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 814c 	beq.w	800557c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d005      	beq.n	80052fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d130      	bne.n	800535e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005332:	2201      	movs	r2, #1
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0201 	and.w	r2, r3, #1
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d017      	beq.n	800539a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	2203      	movs	r2, #3
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d123      	bne.n	80053ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	08da      	lsrs	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3208      	adds	r2, #8
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	220f      	movs	r2, #15
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43db      	mvns	r3, r3
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4013      	ands	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	08da      	lsrs	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3208      	adds	r2, #8
 80053e8:	6939      	ldr	r1, [r7, #16]
 80053ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	2203      	movs	r2, #3
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0203 	and.w	r2, r3, #3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80a6 	beq.w	800557c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005430:	4b5b      	ldr	r3, [pc, #364]	@ (80055a0 <HAL_GPIO_Init+0x2e4>)
 8005432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005434:	4a5a      	ldr	r2, [pc, #360]	@ (80055a0 <HAL_GPIO_Init+0x2e4>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6613      	str	r3, [r2, #96]	@ 0x60
 800543c:	4b58      	ldr	r3, [pc, #352]	@ (80055a0 <HAL_GPIO_Init+0x2e4>)
 800543e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005448:	4a56      	ldr	r2, [pc, #344]	@ (80055a4 <HAL_GPIO_Init+0x2e8>)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	3302      	adds	r3, #2
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	220f      	movs	r2, #15
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005472:	d01f      	beq.n	80054b4 <HAL_GPIO_Init+0x1f8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a4c      	ldr	r2, [pc, #304]	@ (80055a8 <HAL_GPIO_Init+0x2ec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d019      	beq.n	80054b0 <HAL_GPIO_Init+0x1f4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a4b      	ldr	r2, [pc, #300]	@ (80055ac <HAL_GPIO_Init+0x2f0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_GPIO_Init+0x1f0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a4a      	ldr	r2, [pc, #296]	@ (80055b0 <HAL_GPIO_Init+0x2f4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00d      	beq.n	80054a8 <HAL_GPIO_Init+0x1ec>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a49      	ldr	r2, [pc, #292]	@ (80055b4 <HAL_GPIO_Init+0x2f8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <HAL_GPIO_Init+0x1e8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a48      	ldr	r2, [pc, #288]	@ (80055b8 <HAL_GPIO_Init+0x2fc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d101      	bne.n	80054a0 <HAL_GPIO_Init+0x1e4>
 800549c:	2305      	movs	r3, #5
 800549e:	e00a      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054a0:	2306      	movs	r3, #6
 80054a2:	e008      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054a4:	2304      	movs	r3, #4
 80054a6:	e006      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054a8:	2303      	movs	r3, #3
 80054aa:	e004      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e002      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_GPIO_Init+0x1fa>
 80054b4:	2300      	movs	r3, #0
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	f002 0203 	and.w	r2, r2, #3
 80054bc:	0092      	lsls	r2, r2, #2
 80054be:	4093      	lsls	r3, r2
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054c6:	4937      	ldr	r1, [pc, #220]	@ (80055a4 <HAL_GPIO_Init+0x2e8>)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	3302      	adds	r3, #2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054d4:	4b39      	ldr	r3, [pc, #228]	@ (80055bc <HAL_GPIO_Init+0x300>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43db      	mvns	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054f8:	4a30      	ldr	r2, [pc, #192]	@ (80055bc <HAL_GPIO_Init+0x300>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054fe:	4b2f      	ldr	r3, [pc, #188]	@ (80055bc <HAL_GPIO_Init+0x300>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005522:	4a26      	ldr	r2, [pc, #152]	@ (80055bc <HAL_GPIO_Init+0x300>)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005528:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <HAL_GPIO_Init+0x300>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	43db      	mvns	r3, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_GPIO_Init+0x300>)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005552:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <HAL_GPIO_Init+0x300>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005576:	4a11      	ldr	r2, [pc, #68]	@ (80055bc <HAL_GPIO_Init+0x300>)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3301      	adds	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	f47f ae9d 	bne.w	80052cc <HAL_GPIO_Init+0x10>
  }
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40010000 	.word	0x40010000
 80055a8:	48000400 	.word	0x48000400
 80055ac:	48000800 	.word	0x48000800
 80055b0:	48000c00 	.word	0x48000c00
 80055b4:	48001000 	.word	0x48001000
 80055b8:	48001400 	.word	0x48001400
 80055bc:	40010400 	.word	0x40010400

080055c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	807b      	strh	r3, [r7, #2]
 80055cc:	4613      	mov	r3, r2
 80055ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055d0:	787b      	ldrb	r3, [r7, #1]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055dc:	e002      	b.n	80055e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055de:	887a      	ldrh	r2, [r7, #2]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4013      	ands	r3, r2
 8005608:	041a      	lsls	r2, r3, #16
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	43d9      	mvns	r1, r3
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	400b      	ands	r3, r1
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800562e:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800563a:	4a05      	ldr	r2, [pc, #20]	@ (8005650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd fa76 	bl	8002b34 <HAL_GPIO_EXTI_Callback>
  }
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40010400 	.word	0x40010400

08005654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d141      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005662:	4b4b      	ldr	r3, [pc, #300]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566e:	d131      	bne.n	80056d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005670:	4b47      	ldr	r3, [pc, #284]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005676:	4a46      	ldr	r2, [pc, #280]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800567c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005680:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005688:	4a41      	ldr	r2, [pc, #260]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800568e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005690:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2232      	movs	r2, #50	@ 0x32
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	4a3f      	ldr	r2, [pc, #252]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	0c9b      	lsrs	r3, r3, #18
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a6:	e002      	b.n	80056ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ae:	4b38      	ldr	r3, [pc, #224]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ba:	d102      	bne.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f2      	bne.n	80056a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056c2:	4b33      	ldr	r3, [pc, #204]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ce:	d158      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e057      	b.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056da:	4a2d      	ldr	r2, [pc, #180]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056e4:	e04d      	b.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ec:	d141      	bne.n	8005772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056ee:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d131      	bne.n	8005760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056fc:	4b24      	ldr	r3, [pc, #144]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005702:	4a23      	ldr	r2, [pc, #140]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800570c:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005714:	4a1e      	ldr	r2, [pc, #120]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800571a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2232      	movs	r2, #50	@ 0x32
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	4a1c      	ldr	r2, [pc, #112]	@ (8005798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	0c9b      	lsrs	r3, r3, #18
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005732:	e002      	b.n	800573a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573a:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005746:	d102      	bne.n	800574e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f2      	bne.n	8005734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800574e:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575a:	d112      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e011      	b.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005766:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005770:	e007      	b.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005772:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800577a:	4a05      	ldr	r2, [pc, #20]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	40007000 	.word	0x40007000
 8005794:	200002c0 	.word	0x200002c0
 8005798:	431bde83 	.word	0x431bde83

0800579c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a04      	ldr	r2, [pc, #16]	@ (80057b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057aa:	6093      	str	r3, [r2, #8]
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40007000 	.word	0x40007000

080057bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e2fe      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d075      	beq.n	80058c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057da:	4b97      	ldr	r3, [pc, #604]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e4:	4b94      	ldr	r3, [pc, #592]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b0c      	cmp	r3, #12
 80057f2:	d102      	bne.n	80057fa <HAL_RCC_OscConfig+0x3e>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_OscConfig+0x44>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d10b      	bne.n	8005818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	4b8d      	ldr	r3, [pc, #564]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05b      	beq.n	80058c4 <HAL_RCC_OscConfig+0x108>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d157      	bne.n	80058c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e2d9      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x74>
 8005822:	4b85      	ldr	r3, [pc, #532]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a84      	ldr	r2, [pc, #528]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e01d      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x98>
 800583a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b7c      	ldr	r3, [pc, #496]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005854:	4b78      	ldr	r3, [pc, #480]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a77      	ldr	r2, [pc, #476]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 800585a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b75      	ldr	r3, [pc, #468]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a74      	ldr	r2, [pc, #464]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800586a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fd ffd4 	bl	8003820 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587c:	f7fd ffd0 	bl	8003820 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	@ 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e29e      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0xc0>
 800589a:	e014      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fd ffc0 	bl	8003820 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fd ffbc 	bl	8003820 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	@ 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e28a      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b6:	4b60      	ldr	r3, [pc, #384]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0xe8>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d075      	beq.n	80059be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d2:	4b59      	ldr	r3, [pc, #356]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058dc:	4b56      	ldr	r3, [pc, #344]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_OscConfig+0x136>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d002      	beq.n	80058f8 <HAL_RCC_OscConfig+0x13c>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d11f      	bne.n	8005938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_OscConfig+0x154>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e25d      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005910:	4b49      	ldr	r3, [pc, #292]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	4946      	ldr	r1, [pc, #280]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005924:	4b45      	ldr	r3, [pc, #276]	@ (8005a3c <HAL_RCC_OscConfig+0x280>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fd ff2d 	bl	8003788 <HAL_InitTick>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d043      	beq.n	80059bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e249      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d023      	beq.n	8005988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005940:	4b3d      	ldr	r3, [pc, #244]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3c      	ldr	r2, [pc, #240]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800594a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd ff68 	bl	8003820 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005954:	f7fd ff64 	bl	8003820 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e232      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005966:	4b34      	ldr	r3, [pc, #208]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005972:	4b31      	ldr	r3, [pc, #196]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	492d      	ldr	r1, [pc, #180]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005982:	4313      	orrs	r3, r2
 8005984:	604b      	str	r3, [r1, #4]
 8005986:	e01a      	b.n	80059be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005988:	4b2b      	ldr	r3, [pc, #172]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 800598e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fd ff44 	bl	8003820 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800599c:	f7fd ff40 	bl	8003820 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e20e      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ae:	4b22      	ldr	r3, [pc, #136]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x1e0>
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d041      	beq.n	8005a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01c      	beq.n	8005a0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d2:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d8:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7fd ff1d 	bl	8003820 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ea:	f7fd ff19 	bl	8003820 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1e7      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ef      	beq.n	80059ea <HAL_RCC_OscConfig+0x22e>
 8005a0a:	e020      	b.n	8005a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a12:	4a09      	ldr	r2, [pc, #36]	@ (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fd ff00 	bl	8003820 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a22:	e00d      	b.n	8005a40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a24:	f7fd fefc 	bl	8003820 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d906      	bls.n	8005a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e1ca      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	200002c4 	.word	0x200002c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a40:	4b8c      	ldr	r3, [pc, #560]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ea      	bne.n	8005a24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 80a6 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a60:	4b84      	ldr	r3, [pc, #528]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_OscConfig+0x2b4>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x2b6>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00d      	beq.n	8005a92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	4b7f      	ldr	r3, [pc, #508]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a82:	4b7c      	ldr	r3, [pc, #496]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a92:	4b79      	ldr	r3, [pc, #484]	@ (8005c78 <HAL_RCC_OscConfig+0x4bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d118      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a9e:	4b76      	ldr	r3, [pc, #472]	@ (8005c78 <HAL_RCC_OscConfig+0x4bc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a75      	ldr	r2, [pc, #468]	@ (8005c78 <HAL_RCC_OscConfig+0x4bc>)
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aaa:	f7fd feb9 	bl	8003820 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab2:	f7fd feb5 	bl	8003820 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e183      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c78 <HAL_RCC_OscConfig+0x4bc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d108      	bne.n	8005aea <HAL_RCC_OscConfig+0x32e>
 8005ad8:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ade:	4a65      	ldr	r2, [pc, #404]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ae8:	e024      	b.n	8005b34 <HAL_RCC_OscConfig+0x378>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d110      	bne.n	8005b14 <HAL_RCC_OscConfig+0x358>
 8005af2:	4b60      	ldr	r3, [pc, #384]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af8:	4a5e      	ldr	r2, [pc, #376]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005afa:	f043 0304 	orr.w	r3, r3, #4
 8005afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b02:	4b5c      	ldr	r3, [pc, #368]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b08:	4a5a      	ldr	r2, [pc, #360]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b12:	e00f      	b.n	8005b34 <HAL_RCC_OscConfig+0x378>
 8005b14:	4b57      	ldr	r3, [pc, #348]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1a:	4a56      	ldr	r2, [pc, #344]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b24:	4b53      	ldr	r3, [pc, #332]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	4a52      	ldr	r2, [pc, #328]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d016      	beq.n	8005b6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fd fe70 	bl	8003820 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fd fe6c 	bl	8003820 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e138      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5a:	4b46      	ldr	r3, [pc, #280]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ed      	beq.n	8005b44 <HAL_RCC_OscConfig+0x388>
 8005b68:	e015      	b.n	8005b96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fd fe59 	bl	8003820 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fd fe55 	bl	8003820 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e121      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b88:	4b3a      	ldr	r3, [pc, #232]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1ed      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9c:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba0:	4a34      	ldr	r2, [pc, #208]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01c      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fd fe28 	bl	8003820 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bd4:	f7fd fe24 	bl	8003820 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0f2      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005be6:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x418>
 8005bf4:	e01b      	b.n	8005c2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fd fe0b 	bl	8003820 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0e:	f7fd fe07 	bl	8003820 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0d5      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c20:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ef      	bne.n	8005c0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80c9 	beq.w	8005dca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c38:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	f000 8083 	beq.w	8005d4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d15e      	bne.n	8005d0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b09      	ldr	r3, [pc, #36]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fd fde1 	bl	8003820 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c60:	e00c      	b.n	8005c7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fd fddd 	bl	8003820 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d905      	bls.n	8005c7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0ab      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c7c:	4b55      	ldr	r3, [pc, #340]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1ec      	bne.n	8005c62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c88:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	4b52      	ldr	r3, [pc, #328]	@ (8005dd8 <HAL_RCC_OscConfig+0x61c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6a11      	ldr	r1, [r2, #32]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	0112      	lsls	r2, r2, #4
 8005c9c:	4311      	orrs	r1, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ca2:	0212      	lsls	r2, r2, #8
 8005ca4:	4311      	orrs	r1, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005caa:	0852      	lsrs	r2, r2, #1
 8005cac:	3a01      	subs	r2, #1
 8005cae:	0552      	lsls	r2, r2, #21
 8005cb0:	4311      	orrs	r1, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cb6:	0852      	lsrs	r2, r2, #1
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	0652      	lsls	r2, r2, #25
 8005cbc:	4311      	orrs	r1, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cc2:	06d2      	lsls	r2, r2, #27
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	4943      	ldr	r1, [pc, #268]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ccc:	4b41      	ldr	r3, [pc, #260]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a40      	ldr	r2, [pc, #256]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fd fd9c 	bl	8003820 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cec:	f7fd fd98 	bl	8003820 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e066      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfe:	4b35      	ldr	r3, [pc, #212]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0x530>
 8005d0a:	e05e      	b.n	8005dca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0c:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a30      	ldr	r2, [pc, #192]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fd fd82 	bl	8003820 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d20:	f7fd fd7e 	bl	8003820 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e04c      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d32:	4b28      	ldr	r3, [pc, #160]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d3e:	4b25      	ldr	r3, [pc, #148]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	4924      	ldr	r1, [pc, #144]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d44:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <HAL_RCC_OscConfig+0x620>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	60cb      	str	r3, [r1, #12]
 8005d4a:	e03e      	b.n	8005dca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e039      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d58:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd4 <HAL_RCC_OscConfig+0x618>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f003 0203 	and.w	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d12c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	3b01      	subs	r3, #1
 8005d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d123      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d113      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	3b01      	subs	r3, #1
 8005dac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d109      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	019f800c 	.word	0x019f800c
 8005ddc:	feeefffc 	.word	0xfeeefffc

08005de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e11e      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df8:	4b91      	ldr	r3, [pc, #580]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d910      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b8e      	ldr	r3, [pc, #568]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 020f 	bic.w	r2, r3, #15
 8005e0e:	498c      	ldr	r1, [pc, #560]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b8a      	ldr	r3, [pc, #552]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e106      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d073      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d129      	bne.n	8005e90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3c:	4b81      	ldr	r3, [pc, #516]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0f4      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e4c:	f000 f99e 	bl	800618c <RCC_GetSysClockFreqFromPLLSource>
 8005e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4a7c      	ldr	r2, [pc, #496]	@ (8006048 <HAL_RCC_ClockConfig+0x268>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d93f      	bls.n	8005eda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d033      	beq.n	8005eda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d12f      	bne.n	8005eda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e7a:	4b72      	ldr	r3, [pc, #456]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e82:	4a70      	ldr	r2, [pc, #448]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e8a:	2380      	movs	r3, #128	@ 0x80
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e024      	b.n	8005eda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e98:	4b6a      	ldr	r3, [pc, #424]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0c6      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea8:	4b66      	ldr	r3, [pc, #408]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0be      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005eb8:	f000 f8ce 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4a61      	ldr	r2, [pc, #388]	@ (8006048 <HAL_RCC_ClockConfig+0x268>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d909      	bls.n	8005eda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ece:	4a5d      	ldr	r2, [pc, #372]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eda:	4b5a      	ldr	r3, [pc, #360]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4957      	ldr	r1, [pc, #348]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eec:	f7fd fc98 	bl	8003820 <HAL_GetTick>
 8005ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	e00a      	b.n	8005f0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef4:	f7fd fc94 	bl	8003820 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e095      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 020c 	and.w	r2, r3, #12
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d1eb      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d023      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f34:	4b43      	ldr	r3, [pc, #268]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4a42      	ldr	r2, [pc, #264]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f54:	4a3b      	ldr	r2, [pc, #236]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5c:	4b39      	ldr	r3, [pc, #228]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4936      	ldr	r1, [pc, #216]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b80      	cmp	r3, #128	@ 0x80
 8005f74:	d105      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f76:	4b33      	ldr	r3, [pc, #204]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f82:	4b2f      	ldr	r3, [pc, #188]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d21d      	bcs.n	8005fcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f90:	4b2b      	ldr	r3, [pc, #172]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f023 020f 	bic.w	r2, r3, #15
 8005f98:	4929      	ldr	r1, [pc, #164]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fa0:	f7fd fc3e 	bl	8003820 <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa6:	e00a      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa8:	f7fd fc3a 	bl	8003820 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e03b      	b.n	8006036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <HAL_RCC_ClockConfig+0x260>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d1ed      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4917      	ldr	r1, [pc, #92]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ff6:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	490f      	ldr	r1, [pc, #60]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800600a:	f000 f825 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 800600e:	4602      	mov	r2, r0
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <HAL_RCC_ClockConfig+0x264>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	490c      	ldr	r1, [pc, #48]	@ (800604c <HAL_RCC_ClockConfig+0x26c>)
 800601c:	5ccb      	ldrb	r3, [r1, r3]
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <HAL_RCC_ClockConfig+0x270>)
 8006028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_RCC_ClockConfig+0x274>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fbaa 	bl	8003788 <HAL_InitTick>
 8006034:	4603      	mov	r3, r0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40022000 	.word	0x40022000
 8006044:	40021000 	.word	0x40021000
 8006048:	04c4b400 	.word	0x04c4b400
 800604c:	0800ab7c 	.word	0x0800ab7c
 8006050:	200002c0 	.word	0x200002c0
 8006054:	200002c4 	.word	0x200002c4

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800605e:	4b2c      	ldr	r3, [pc, #176]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b04      	cmp	r3, #4
 8006068:	d102      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800606a:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xbc>)
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e047      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006070:	4b27      	ldr	r3, [pc, #156]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b08      	cmp	r3, #8
 800607a:	d102      	bne.n	8006082 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800607c:	4b26      	ldr	r3, [pc, #152]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xc0>)
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	e03e      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006082:	4b23      	ldr	r3, [pc, #140]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d136      	bne.n	80060fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800608e:	4b20      	ldr	r3, [pc, #128]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006098:	4b1d      	ldr	r3, [pc, #116]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	3301      	adds	r3, #1
 80060a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d10c      	bne.n	80060c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	4a16      	ldr	r2, [pc, #88]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b6:	68d2      	ldr	r2, [r2, #12]
 80060b8:	0a12      	lsrs	r2, r2, #8
 80060ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	617b      	str	r3, [r7, #20]
      break;
 80060c4:	e00c      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060c6:	4a13      	ldr	r2, [pc, #76]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ce:	4a10      	ldr	r2, [pc, #64]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d0:	68d2      	ldr	r2, [r2, #12]
 80060d2:	0a12      	lsrs	r2, r2, #8
 80060d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060d8:	fb02 f303 	mul.w	r3, r2, r3
 80060dc:	617b      	str	r3, [r7, #20]
      break;
 80060de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	0e5b      	lsrs	r3, r3, #25
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	3301      	adds	r3, #1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	e001      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006100:	693b      	ldr	r3, [r7, #16]
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	00f42400 	.word	0x00f42400
 8006118:	016e3600 	.word	0x016e3600

0800611c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006120:	4b03      	ldr	r3, [pc, #12]	@ (8006130 <HAL_RCC_GetHCLKFreq+0x14>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	200002c0 	.word	0x200002c0

08006134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006138:	f7ff fff0 	bl	800611c <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4904      	ldr	r1, [pc, #16]	@ (800615c <HAL_RCC_GetPCLK1Freq+0x28>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40021000 	.word	0x40021000
 800615c:	0800ab8c 	.word	0x0800ab8c

08006160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006164:	f7ff ffda 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0adb      	lsrs	r3, r3, #11
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	@ (8006188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	0800ab8c 	.word	0x0800ab8c

0800618c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006192:	4b1e      	ldr	r3, [pc, #120]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800619c:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d10c      	bne.n	80061ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061b0:	4a17      	ldr	r2, [pc, #92]	@ (8006210 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	4a14      	ldr	r2, [pc, #80]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ba:	68d2      	ldr	r2, [r2, #12]
 80061bc:	0a12      	lsrs	r2, r2, #8
 80061be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	617b      	str	r3, [r7, #20]
    break;
 80061c8:	e00c      	b.n	80061e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ca:	4a12      	ldr	r2, [pc, #72]	@ (8006214 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	4a0e      	ldr	r2, [pc, #56]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d4:	68d2      	ldr	r2, [r2, #12]
 80061d6:	0a12      	lsrs	r2, r2, #8
 80061d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]
    break;
 80061e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0e5b      	lsrs	r3, r3, #25
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061fe:	687b      	ldr	r3, [r7, #4]
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40021000 	.word	0x40021000
 8006210:	016e3600 	.word	0x016e3600
 8006214:	00f42400 	.word	0x00f42400

08006218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006220:	2300      	movs	r3, #0
 8006222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006224:	2300      	movs	r3, #0
 8006226:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8098 	beq.w	8006366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006236:	2300      	movs	r3, #0
 8006238:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623a:	4b43      	ldr	r3, [pc, #268]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800623c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10d      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006246:	4b40      	ldr	r3, [pc, #256]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	4a3f      	ldr	r2, [pc, #252]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006250:	6593      	str	r3, [r2, #88]	@ 0x58
 8006252:	4b3d      	ldr	r3, [pc, #244]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625e:	2301      	movs	r3, #1
 8006260:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006262:	4b3a      	ldr	r3, [pc, #232]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a39      	ldr	r2, [pc, #228]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800626e:	f7fd fad7 	bl	8003820 <HAL_GetTick>
 8006272:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006274:	e009      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006276:	f7fd fad3 	bl	8003820 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d902      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	74fb      	strb	r3, [r7, #19]
        break;
 8006288:	e005      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628a:	4b30      	ldr	r3, [pc, #192]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d159      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800629c:	4b2a      	ldr	r3, [pc, #168]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01e      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d019      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b8:	4b23      	ldr	r3, [pc, #140]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c4:	4b20      	ldr	r3, [pc, #128]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	4a1b      	ldr	r2, [pc, #108]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e4:	4a18      	ldr	r2, [pc, #96]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d016      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fd fa93 	bl	8003820 <HAL_GetTick>
 80062fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fc:	e00b      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fe:	f7fd fa8f 	bl	8003820 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630c:	4293      	cmp	r3, r2
 800630e:	d902      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	74fb      	strb	r3, [r7, #19]
            break;
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006316:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ec      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632a:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006338:	4903      	ldr	r1, [pc, #12]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006340:	e008      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006342:	7cfb      	ldrb	r3, [r7, #19]
 8006344:	74bb      	strb	r3, [r7, #18]
 8006346:	e005      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006348:	40021000 	.word	0x40021000
 800634c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006354:	7c7b      	ldrb	r3, [r7, #17]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d105      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635a:	4ba7      	ldr	r3, [pc, #668]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	4aa6      	ldr	r2, [pc, #664]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006364:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006372:	4ba1      	ldr	r3, [pc, #644]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f023 0203 	bic.w	r2, r3, #3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	499d      	ldr	r1, [pc, #628]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006394:	4b98      	ldr	r3, [pc, #608]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f023 020c 	bic.w	r2, r3, #12
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4995      	ldr	r1, [pc, #596]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b6:	4b90      	ldr	r3, [pc, #576]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	498c      	ldr	r1, [pc, #560]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d8:	4b87      	ldr	r3, [pc, #540]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	4984      	ldr	r1, [pc, #528]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063fa:	4b7f      	ldr	r3, [pc, #508]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	497b      	ldr	r1, [pc, #492]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800641c:	4b76      	ldr	r3, [pc, #472]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	4973      	ldr	r1, [pc, #460]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643e:	4b6e      	ldr	r3, [pc, #440]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006444:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	496a      	ldr	r1, [pc, #424]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006460:	4b65      	ldr	r3, [pc, #404]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006466:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	4962      	ldr	r1, [pc, #392]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006482:	4b5d      	ldr	r3, [pc, #372]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	4959      	ldr	r1, [pc, #356]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064a4:	4b54      	ldr	r3, [pc, #336]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064aa:	f023 0203 	bic.w	r2, r3, #3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	4951      	ldr	r1, [pc, #324]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c6:	4b4c      	ldr	r3, [pc, #304]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	4948      	ldr	r1, [pc, #288]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e8:	4b43      	ldr	r3, [pc, #268]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f6:	4940      	ldr	r1, [pc, #256]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006506:	d105      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006508:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4a3a      	ldr	r2, [pc, #232]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006512:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800651c:	2b00      	cmp	r3, #0
 800651e:	d015      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006520:	4b35      	ldr	r3, [pc, #212]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006526:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652e:	4932      	ldr	r1, [pc, #200]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653e:	d105      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006540:	4b2d      	ldr	r3, [pc, #180]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4a2c      	ldr	r2, [pc, #176]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800654a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006558:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	4924      	ldr	r1, [pc, #144]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006576:	d105      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006578:	4b1f      	ldr	r3, [pc, #124]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a1e      	ldr	r2, [pc, #120]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006582:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006590:	4b19      	ldr	r3, [pc, #100]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659e:	4916      	ldr	r1, [pc, #88]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ae:	d105      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b0:	4b11      	ldr	r3, [pc, #68]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a10      	ldr	r2, [pc, #64]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d019      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	4908      	ldr	r1, [pc, #32]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e6:	d109      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b03      	ldr	r3, [pc, #12]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a02      	ldr	r2, [pc, #8]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
 80065f4:	e002      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006608:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	4926      	ldr	r1, [pc, #152]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006626:	d105      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006628:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4a20      	ldr	r2, [pc, #128]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006632:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d015      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006640:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	4918      	ldr	r1, [pc, #96]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665e:	d105      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006660:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a12      	ldr	r2, [pc, #72]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006678:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800667e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006686:	490a      	ldr	r1, [pc, #40]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006696:	d105      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a04      	ldr	r2, [pc, #16]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000

080066b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e054      	b.n	8006770 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d111      	bne.n	80066f6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 feec 	bl	80084b8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a23      	ldr	r2, [pc, #140]	@ (8006778 <HAL_TIM_Base_Init+0xc4>)
 80066ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f001 fa35 	bl	8007b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	080031e1 	.word	0x080031e1

0800677c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d001      	beq.n	8006794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e04c      	b.n	800682e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a26      	ldr	r2, [pc, #152]	@ (800683c <HAL_TIM_Base_Start+0xc0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ae:	d01d      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a22      	ldr	r2, [pc, #136]	@ (8006840 <HAL_TIM_Base_Start+0xc4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <HAL_TIM_Base_Start+0xc8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006848 <HAL_TIM_Base_Start+0xcc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1e      	ldr	r2, [pc, #120]	@ (800684c <HAL_TIM_Base_Start+0xd0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006850 <HAL_TIM_Base_Start+0xd4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_TIM_Base_Start+0x70>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <HAL_TIM_Base_Start+0xd8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d115      	bne.n	8006818 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	4b19      	ldr	r3, [pc, #100]	@ (8006858 <HAL_TIM_Base_Start+0xdc>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d015      	beq.n	800682a <HAL_TIM_Base_Start+0xae>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006804:	d011      	beq.n	800682a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006816:	e008      	b.n	800682a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e000      	b.n	800682c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40015000 	.word	0x40015000
 8006858:	00010007 	.word	0x00010007

0800685c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e054      	b.n	800691e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a26      	ldr	r2, [pc, #152]	@ (800692c <HAL_TIM_Base_Start_IT+0xd0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d022      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689e:	d01d      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a22      	ldr	r2, [pc, #136]	@ (8006930 <HAL_TIM_Base_Start_IT+0xd4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d018      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a21      	ldr	r2, [pc, #132]	@ (8006934 <HAL_TIM_Base_Start_IT+0xd8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <HAL_TIM_Base_Start_IT+0xdc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00e      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <HAL_TIM_Base_Start_IT+0xe0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d009      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006940 <HAL_TIM_Base_Start_IT+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x80>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <HAL_TIM_Base_Start_IT+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d115      	bne.n	8006908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <HAL_TIM_Base_Start_IT+0xec>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b06      	cmp	r3, #6
 80068ec:	d015      	beq.n	800691a <HAL_TIM_Base_Start_IT+0xbe>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f4:	d011      	beq.n	800691a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006906:	e008      	b.n	800691a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e000      	b.n	800691c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40014000 	.word	0x40014000
 8006944:	40015000 	.word	0x40015000
 8006948:	00010007 	.word	0x00010007

0800694c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e054      	b.n	8006a08 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d111      	bne.n	800698e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fda0 	bl	80084b8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a23      	ldr	r2, [pc, #140]	@ (8006a10 <HAL_TIM_PWM_Init+0xc4>)
 8006984:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f001 f8e9 	bl	8007b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	08006a15 	.word	0x08006a15

08006a14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_TIM_PWM_Start+0x24>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	e03c      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d109      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x3e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	e02f      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d109      	bne.n	8006a80 <HAL_TIM_PWM_Start+0x58>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e022      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b0c      	cmp	r3, #12
 8006a84:	d109      	bne.n	8006a9a <HAL_TIM_PWM_Start+0x72>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e015      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d109      	bne.n	8006ab4 <HAL_TIM_PWM_Start+0x8c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e008      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e0a6      	b.n	8006c1c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0xb6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006adc:	e023      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Start+0xc6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aec:	e01b      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_PWM_Start+0xd6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006afc:	e013      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_PWM_Start+0xe6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b0c:	e00b      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_PWM_Start+0xf6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b1c:	e003      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fc9c 	bl	800846c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3a      	ldr	r2, [pc, #232]	@ (8006c24 <HAL_TIM_PWM_Start+0x1fc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x148>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a39      	ldr	r2, [pc, #228]	@ (8006c28 <HAL_TIM_PWM_Start+0x200>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x148>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a37      	ldr	r2, [pc, #220]	@ (8006c2c <HAL_TIM_PWM_Start+0x204>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x148>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a36      	ldr	r2, [pc, #216]	@ (8006c30 <HAL_TIM_PWM_Start+0x208>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x148>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a34      	ldr	r2, [pc, #208]	@ (8006c34 <HAL_TIM_PWM_Start+0x20c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x148>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a33      	ldr	r2, [pc, #204]	@ (8006c38 <HAL_TIM_PWM_Start+0x210>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d101      	bne.n	8006b74 <HAL_TIM_PWM_Start+0x14c>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <HAL_TIM_PWM_Start+0x14e>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a25      	ldr	r2, [pc, #148]	@ (8006c24 <HAL_TIM_PWM_Start+0x1fc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d022      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9c:	d01d      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a26      	ldr	r2, [pc, #152]	@ (8006c3c <HAL_TIM_PWM_Start+0x214>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d018      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a24      	ldr	r2, [pc, #144]	@ (8006c40 <HAL_TIM_PWM_Start+0x218>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	@ (8006c44 <HAL_TIM_PWM_Start+0x21c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00e      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <HAL_TIM_PWM_Start+0x200>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a18      	ldr	r2, [pc, #96]	@ (8006c2c <HAL_TIM_PWM_Start+0x204>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d004      	beq.n	8006bda <HAL_TIM_PWM_Start+0x1b2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	@ (8006c38 <HAL_TIM_PWM_Start+0x210>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d115      	bne.n	8006c06 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <HAL_TIM_PWM_Start+0x220>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d015      	beq.n	8006c18 <HAL_TIM_PWM_Start+0x1f0>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf2:	d011      	beq.n	8006c18 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c04:	e008      	b.n	8006c18 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e000      	b.n	8006c1a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800
 8006c38:	40015000 	.word	0x40015000
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	00010007 	.word	0x00010007

08006c4c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e04c      	b.n	8006cfa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d111      	bne.n	8006c90 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fc1f 	bl	80084b8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1f      	ldr	r2, [pc, #124]	@ (8006d04 <HAL_TIM_OnePulse_Init+0xb8>)
 8006c86:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f000 ff68 	bl	8007b78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0208 	bic.w	r2, r2, #8
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	08006d09 	.word	0x08006d09

08006d08 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d44:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d108      	bne.n	8006d5e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d105      	bne.n	8006d5e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d52:	7b7b      	ldrb	r3, [r7, #13]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d102      	bne.n	8006d5e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d58:	7b3b      	ldrb	r3, [r7, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e059      	b.n	8006e16 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0202 	orr.w	r2, r2, #2
 8006d90:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0204 	orr.w	r2, r2, #4
 8006da0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2201      	movs	r2, #1
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fb5e 	bl	800846c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	2104      	movs	r1, #4
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fb57 	bl	800846c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	@ (8006e20 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <HAL_TIM_OnePulse_Start_IT+0xde>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_TIM_OnePulse_Start_IT+0xde>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a12      	ldr	r2, [pc, #72]	@ (8006e2c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_TIM_OnePulse_Start_IT+0xde>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIM_OnePulse_Start_IT+0xde>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a0f      	ldr	r2, [pc, #60]	@ (8006e34 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40013400 	.word	0x40013400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40014400 	.word	0x40014400
 8006e30:	40014800 	.word	0x40014800
 8006e34:	40015000 	.word	0x40015000

08006e38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0a2      	b.n	8006f92 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d111      	bne.n	8006e7c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 fb29 	bl	80084b8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a4a      	ldr	r2, [pc, #296]	@ (8006f9c <HAL_TIM_Encoder_Init+0x164>)
 8006e72:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 fe68 	bl	8007b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed0:	f023 0303 	bic.w	r3, r3, #3
 8006ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006eee:	f023 030c 	bic.w	r3, r3, #12
 8006ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	011a      	lsls	r2, r3, #4
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	031b      	lsls	r3, r3, #12
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006f2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006f34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4313      	orrs	r3, r2
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	080032c1 	.word	0x080032c1

08006fa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d110      	bne.n	8006ff2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d102      	bne.n	8006fdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd6:	7b7b      	ldrb	r3, [r7, #13]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d001      	beq.n	8006fe0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e069      	b.n	80070b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff0:	e031      	b.n	8007056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d110      	bne.n	800701a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d102      	bne.n	8007004 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ffe:	7b3b      	ldrb	r3, [r7, #12]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e055      	b.n	80070b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007018:	e01d      	b.n	8007056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d108      	bne.n	8007032 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d105      	bne.n	8007032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007026:	7b7b      	ldrb	r3, [r7, #13]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d102      	bne.n	8007032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800702c:	7b3b      	ldrb	r3, [r7, #12]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d001      	beq.n	8007036 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e03e      	b.n	80070b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_TIM_Encoder_Start+0xc4>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d008      	beq.n	8007074 <HAL_TIM_Encoder_Start+0xd4>
 8007062:	e00f      	b.n	8007084 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f9fd 	bl	800846c <TIM_CCxChannelCmd>
      break;
 8007072:	e016      	b.n	80070a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2201      	movs	r2, #1
 800707a:	2104      	movs	r1, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f001 f9f5 	bl	800846c <TIM_CCxChannelCmd>
      break;
 8007082:	e00e      	b.n	80070a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f001 f9ed 	bl	800846c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2201      	movs	r2, #1
 8007098:	2104      	movs	r1, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f001 f9e6 	bl	800846c <TIM_CCxChannelCmd>
      break;
 80070a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d026      	beq.n	800712c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d021      	beq.n	800712c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0202 	mvn.w	r2, #2
 80070f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
 8007110:	e009      	b.n	8007126 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d026      	beq.n	8007184 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d021      	beq.n	8007184 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0204 	mvn.w	r2, #4
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
 8007168:	e009      	b.n	800717e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	2b00      	cmp	r3, #0
 800718c:	d026      	beq.n	80071dc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d021      	beq.n	80071dc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0208 	mvn.w	r2, #8
 80071a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
 80071c0:	e009      	b.n	80071d6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d026      	beq.n	8007234 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d021      	beq.n	8007234 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
 8007218:	e009      	b.n	800722e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0201 	mvn.w	r2, #1
 8007250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00e      	beq.n	80072de <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00e      	beq.n	8007306 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0220 	mvn.w	r2, #32
 80072fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00e      	beq.n	800732e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800734a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800739a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e0ff      	b.n	80075ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b14      	cmp	r3, #20
 80073da:	f200 80f0 	bhi.w	80075be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007439 	.word	0x08007439
 80073e8:	080075bf 	.word	0x080075bf
 80073ec:	080075bf 	.word	0x080075bf
 80073f0:	080075bf 	.word	0x080075bf
 80073f4:	08007479 	.word	0x08007479
 80073f8:	080075bf 	.word	0x080075bf
 80073fc:	080075bf 	.word	0x080075bf
 8007400:	080075bf 	.word	0x080075bf
 8007404:	080074bb 	.word	0x080074bb
 8007408:	080075bf 	.word	0x080075bf
 800740c:	080075bf 	.word	0x080075bf
 8007410:	080075bf 	.word	0x080075bf
 8007414:	080074fb 	.word	0x080074fb
 8007418:	080075bf 	.word	0x080075bf
 800741c:	080075bf 	.word	0x080075bf
 8007420:	080075bf 	.word	0x080075bf
 8007424:	0800753d 	.word	0x0800753d
 8007428:	080075bf 	.word	0x080075bf
 800742c:	080075bf 	.word	0x080075bf
 8007430:	080075bf 	.word	0x080075bf
 8007434:	0800757d 	.word	0x0800757d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fc4e 	bl	8007ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0204 	bic.w	r2, r2, #4
 8007462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6999      	ldr	r1, [r3, #24]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	619a      	str	r2, [r3, #24]
      break;
 8007476:	e0a5      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fcc8 	bl	8007e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6999      	ldr	r1, [r3, #24]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	021a      	lsls	r2, r3, #8
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	619a      	str	r2, [r3, #24]
      break;
 80074b8:	e084      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fd3b 	bl	8007f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0208 	orr.w	r2, r2, #8
 80074d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0204 	bic.w	r2, r2, #4
 80074e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69d9      	ldr	r1, [r3, #28]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	61da      	str	r2, [r3, #28]
      break;
 80074f8:	e064      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fdad 	bl	8008060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69d9      	ldr	r1, [r3, #28]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	021a      	lsls	r2, r3, #8
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	61da      	str	r2, [r3, #28]
      break;
 800753a:	e043      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fe20 	bl	8008188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0208 	orr.w	r2, r2, #8
 8007556:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0204 	bic.w	r2, r2, #4
 8007566:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800757a:	e023      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fe6a 	bl	800825c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007596:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	021a      	lsls	r2, r3, #8
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075bc:	e002      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
      break;
 80075c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0f6      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x20a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800761e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a6f      	ldr	r2, [pc, #444]	@ (80077ec <HAL_TIM_ConfigClockSource+0x214>)
 800762e:	4293      	cmp	r3, r2
 8007630:	f000 80c1 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007634:	4a6d      	ldr	r2, [pc, #436]	@ (80077ec <HAL_TIM_ConfigClockSource+0x214>)
 8007636:	4293      	cmp	r3, r2
 8007638:	f200 80c6 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800763c:	4a6c      	ldr	r2, [pc, #432]	@ (80077f0 <HAL_TIM_ConfigClockSource+0x218>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f000 80b9 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007644:	4a6a      	ldr	r2, [pc, #424]	@ (80077f0 <HAL_TIM_ConfigClockSource+0x218>)
 8007646:	4293      	cmp	r3, r2
 8007648:	f200 80be 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800764c:	4a69      	ldr	r2, [pc, #420]	@ (80077f4 <HAL_TIM_ConfigClockSource+0x21c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	f000 80b1 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007654:	4a67      	ldr	r2, [pc, #412]	@ (80077f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	f200 80b6 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800765c:	4a66      	ldr	r2, [pc, #408]	@ (80077f8 <HAL_TIM_ConfigClockSource+0x220>)
 800765e:	4293      	cmp	r3, r2
 8007660:	f000 80a9 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007664:	4a64      	ldr	r2, [pc, #400]	@ (80077f8 <HAL_TIM_ConfigClockSource+0x220>)
 8007666:	4293      	cmp	r3, r2
 8007668:	f200 80ae 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	4a63      	ldr	r2, [pc, #396]	@ (80077fc <HAL_TIM_ConfigClockSource+0x224>)
 800766e:	4293      	cmp	r3, r2
 8007670:	f000 80a1 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007674:	4a61      	ldr	r2, [pc, #388]	@ (80077fc <HAL_TIM_ConfigClockSource+0x224>)
 8007676:	4293      	cmp	r3, r2
 8007678:	f200 80a6 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	4a60      	ldr	r2, [pc, #384]	@ (8007800 <HAL_TIM_ConfigClockSource+0x228>)
 800767e:	4293      	cmp	r3, r2
 8007680:	f000 8099 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007684:	4a5e      	ldr	r2, [pc, #376]	@ (8007800 <HAL_TIM_ConfigClockSource+0x228>)
 8007686:	4293      	cmp	r3, r2
 8007688:	f200 809e 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800768c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007690:	f000 8091 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007694:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007698:	f200 8096 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800769c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076a0:	f000 8089 	beq.w	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 80076a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076a8:	f200 808e 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b0:	d03e      	beq.n	8007730 <HAL_TIM_ConfigClockSource+0x158>
 80076b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b6:	f200 8087 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076be:	f000 8086 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x1f6>
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c6:	d87f      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076c8:	2b70      	cmp	r3, #112	@ 0x70
 80076ca:	d01a      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x12a>
 80076cc:	2b70      	cmp	r3, #112	@ 0x70
 80076ce:	d87b      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076d0:	2b60      	cmp	r3, #96	@ 0x60
 80076d2:	d050      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x19e>
 80076d4:	2b60      	cmp	r3, #96	@ 0x60
 80076d6:	d877      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076d8:	2b50      	cmp	r3, #80	@ 0x50
 80076da:	d03c      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x17e>
 80076dc:	2b50      	cmp	r3, #80	@ 0x50
 80076de:	d873      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076e0:	2b40      	cmp	r3, #64	@ 0x40
 80076e2:	d058      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x1be>
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	d86f      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076e8:	2b30      	cmp	r3, #48	@ 0x30
 80076ea:	d064      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 80076ec:	2b30      	cmp	r3, #48	@ 0x30
 80076ee:	d86b      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d060      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d867      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d05c      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d05a      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x1de>
 8007700:	e062      	b.n	80077c8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007712:	f000 fe8b 	bl	800842c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	609a      	str	r2, [r3, #8]
      break;
 800772e:	e04f      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007740:	f000 fe74 	bl	800842c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007752:	609a      	str	r2, [r3, #8]
      break;
 8007754:	e03c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007762:	461a      	mov	r2, r3
 8007764:	f000 fde6 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2150      	movs	r1, #80	@ 0x50
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fe3f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007774:	e02c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007782:	461a      	mov	r2, r3
 8007784:	f000 fe05 	bl	8008392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2160      	movs	r1, #96	@ 0x60
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fe2f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 8007794:	e01c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a2:	461a      	mov	r2, r3
 80077a4:	f000 fdc6 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2140      	movs	r1, #64	@ 0x40
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe1f 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80077b4:	e00c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f000 fe16 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80077c6:	e003      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
      break;
 80077cc:	e000      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80077ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	00100070 	.word	0x00100070
 80077f0:	00100060 	.word	0x00100060
 80077f4:	00100050 	.word	0x00100050
 80077f8:	00100040 	.word	0x00100040
 80077fc:	00100030 	.word	0x00100030
 8007800:	00100020 	.word	0x00100020

08007804 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	460b      	mov	r3, r1
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e14a      	b.n	8007b6a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	f040 80dd 	bne.w	8007a9c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	2b1f      	cmp	r3, #31
 80078e6:	f200 80d6 	bhi.w	8007a96 <HAL_TIM_RegisterCallback+0x1de>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <HAL_TIM_RegisterCallback+0x38>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007971 	.word	0x08007971
 80078f4:	08007979 	.word	0x08007979
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007989 	.word	0x08007989
 8007900:	08007991 	.word	0x08007991
 8007904:	08007999 	.word	0x08007999
 8007908:	080079a1 	.word	0x080079a1
 800790c:	080079a9 	.word	0x080079a9
 8007910:	080079b1 	.word	0x080079b1
 8007914:	080079b9 	.word	0x080079b9
 8007918:	080079c1 	.word	0x080079c1
 800791c:	080079c9 	.word	0x080079c9
 8007920:	080079d1 	.word	0x080079d1
 8007924:	080079d9 	.word	0x080079d9
 8007928:	080079e3 	.word	0x080079e3
 800792c:	080079ed 	.word	0x080079ed
 8007930:	080079f7 	.word	0x080079f7
 8007934:	08007a01 	.word	0x08007a01
 8007938:	08007a0b 	.word	0x08007a0b
 800793c:	08007a15 	.word	0x08007a15
 8007940:	08007a1f 	.word	0x08007a1f
 8007944:	08007a29 	.word	0x08007a29
 8007948:	08007a33 	.word	0x08007a33
 800794c:	08007a3d 	.word	0x08007a3d
 8007950:	08007a47 	.word	0x08007a47
 8007954:	08007a51 	.word	0x08007a51
 8007958:	08007a5b 	.word	0x08007a5b
 800795c:	08007a65 	.word	0x08007a65
 8007960:	08007a6f 	.word	0x08007a6f
 8007964:	08007a79 	.word	0x08007a79
 8007968:	08007a83 	.word	0x08007a83
 800796c:	08007a8d 	.word	0x08007a8d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007976:	e0f7      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800797e:	e0f3      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007986:	e0ef      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800798e:	e0eb      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007996:	e0e7      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800799e:	e0e3      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80079a6:	e0df      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80079ae:	e0db      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80079b6:	e0d7      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80079be:	e0d3      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80079c6:	e0cf      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80079ce:	e0cb      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80079d6:	e0c7      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80079e0:	e0c2      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80079ea:	e0bd      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80079f4:	e0b8      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80079fe:	e0b3      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007a08:	e0ae      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007a12:	e0a9      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007a1c:	e0a4      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007a26:	e09f      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007a30:	e09a      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007a3a:	e095      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007a44:	e090      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007a4e:	e08b      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007a58:	e086      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007a62:	e081      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007a6c:	e07c      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007a76:	e077      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007a80:	e072      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007a8a:	e06d      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007a94:	e068      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
        break;
 8007a9a:	e065      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d15d      	bne.n	8007b64 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b0d      	cmp	r3, #13
 8007aac:	d857      	bhi.n	8007b5e <HAL_TIM_RegisterCallback+0x2a6>
 8007aae:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <HAL_TIM_RegisterCallback+0x1fc>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007aed 	.word	0x08007aed
 8007ab8:	08007af5 	.word	0x08007af5
 8007abc:	08007afd 	.word	0x08007afd
 8007ac0:	08007b05 	.word	0x08007b05
 8007ac4:	08007b0d 	.word	0x08007b0d
 8007ac8:	08007b15 	.word	0x08007b15
 8007acc:	08007b1d 	.word	0x08007b1d
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b35 	.word	0x08007b35
 8007adc:	08007b3d 	.word	0x08007b3d
 8007ae0:	08007b45 	.word	0x08007b45
 8007ae4:	08007b4d 	.word	0x08007b4d
 8007ae8:	08007b55 	.word	0x08007b55
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007af2:	e039      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007afa:	e035      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007b02:	e031      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007b0a:	e02d      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007b12:	e029      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007b1a:	e025      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007b22:	e021      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007b2a:	e01d      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007b32:	e019      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007b3a:	e015      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007b42:	e011      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007b4a:	e00d      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007b52:	e009      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007b5c:	e004      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
        break;
 8007b62:	e001      	b.n	8007b68 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop

08007b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8007cbc <TIM_Base_SetConfig+0x144>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d017      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b96:	d013      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a49      	ldr	r2, [pc, #292]	@ (8007cc0 <TIM_Base_SetConfig+0x148>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00f      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a48      	ldr	r2, [pc, #288]	@ (8007cc4 <TIM_Base_SetConfig+0x14c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00b      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a47      	ldr	r2, [pc, #284]	@ (8007cc8 <TIM_Base_SetConfig+0x150>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d007      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a46      	ldr	r2, [pc, #280]	@ (8007ccc <TIM_Base_SetConfig+0x154>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d003      	beq.n	8007bc0 <TIM_Base_SetConfig+0x48>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a45      	ldr	r2, [pc, #276]	@ (8007cd0 <TIM_Base_SetConfig+0x158>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d108      	bne.n	8007bd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a39      	ldr	r2, [pc, #228]	@ (8007cbc <TIM_Base_SetConfig+0x144>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d023      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be0:	d01f      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a36      	ldr	r2, [pc, #216]	@ (8007cc0 <TIM_Base_SetConfig+0x148>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d01b      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a35      	ldr	r2, [pc, #212]	@ (8007cc4 <TIM_Base_SetConfig+0x14c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d017      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a34      	ldr	r2, [pc, #208]	@ (8007cc8 <TIM_Base_SetConfig+0x150>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a33      	ldr	r2, [pc, #204]	@ (8007ccc <TIM_Base_SetConfig+0x154>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00f      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a33      	ldr	r2, [pc, #204]	@ (8007cd4 <TIM_Base_SetConfig+0x15c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a32      	ldr	r2, [pc, #200]	@ (8007cd8 <TIM_Base_SetConfig+0x160>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a31      	ldr	r2, [pc, #196]	@ (8007cdc <TIM_Base_SetConfig+0x164>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_Base_SetConfig+0xaa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd0 <TIM_Base_SetConfig+0x158>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d108      	bne.n	8007c34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <TIM_Base_SetConfig+0x144>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d013      	beq.n	8007c88 <TIM_Base_SetConfig+0x110>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a1a      	ldr	r2, [pc, #104]	@ (8007ccc <TIM_Base_SetConfig+0x154>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00f      	beq.n	8007c88 <TIM_Base_SetConfig+0x110>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd4 <TIM_Base_SetConfig+0x15c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00b      	beq.n	8007c88 <TIM_Base_SetConfig+0x110>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <TIM_Base_SetConfig+0x160>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d007      	beq.n	8007c88 <TIM_Base_SetConfig+0x110>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a18      	ldr	r2, [pc, #96]	@ (8007cdc <TIM_Base_SetConfig+0x164>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_Base_SetConfig+0x110>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a13      	ldr	r2, [pc, #76]	@ (8007cd0 <TIM_Base_SetConfig+0x158>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d103      	bne.n	8007c90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d105      	bne.n	8007cae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f023 0201 	bic.w	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	611a      	str	r2, [r3, #16]
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800
 8007cc8:	40000c00 	.word	0x40000c00
 8007ccc:	40013400 	.word	0x40013400
 8007cd0:	40015000 	.word	0x40015000
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800

08007ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f023 0201 	bic.w	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0303 	bic.w	r3, r3, #3
 8007d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 0302 	bic.w	r3, r3, #2
 8007d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a30      	ldr	r2, [pc, #192]	@ (8007dfc <TIM_OC1_SetConfig+0x11c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d013      	beq.n	8007d68 <TIM_OC1_SetConfig+0x88>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a2f      	ldr	r2, [pc, #188]	@ (8007e00 <TIM_OC1_SetConfig+0x120>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00f      	beq.n	8007d68 <TIM_OC1_SetConfig+0x88>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e04 <TIM_OC1_SetConfig+0x124>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <TIM_OC1_SetConfig+0x88>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a2d      	ldr	r2, [pc, #180]	@ (8007e08 <TIM_OC1_SetConfig+0x128>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d007      	beq.n	8007d68 <TIM_OC1_SetConfig+0x88>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e0c <TIM_OC1_SetConfig+0x12c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC1_SetConfig+0x88>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a2b      	ldr	r2, [pc, #172]	@ (8007e10 <TIM_OC1_SetConfig+0x130>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10c      	bne.n	8007d82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f023 0308 	bic.w	r3, r3, #8
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a1d      	ldr	r2, [pc, #116]	@ (8007dfc <TIM_OC1_SetConfig+0x11c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <TIM_OC1_SetConfig+0xd2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e00 <TIM_OC1_SetConfig+0x120>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00f      	beq.n	8007db2 <TIM_OC1_SetConfig+0xd2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <TIM_OC1_SetConfig+0x124>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_OC1_SetConfig+0xd2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007e08 <TIM_OC1_SetConfig+0x128>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_OC1_SetConfig+0xd2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a19      	ldr	r2, [pc, #100]	@ (8007e0c <TIM_OC1_SetConfig+0x12c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_OC1_SetConfig+0xd2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a18      	ldr	r2, [pc, #96]	@ (8007e10 <TIM_OC1_SetConfig+0x130>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d111      	bne.n	8007dd6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	40012c00 	.word	0x40012c00
 8007e00:	40013400 	.word	0x40013400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800
 8007e10:	40015000 	.word	0x40015000

08007e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f023 0210 	bic.w	r2, r3, #16
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0320 	bic.w	r3, r3, #32
 8007e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a2c      	ldr	r2, [pc, #176]	@ (8007f24 <TIM_OC2_SetConfig+0x110>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_OC2_SetConfig+0x74>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8007f28 <TIM_OC2_SetConfig+0x114>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC2_SetConfig+0x74>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a2a      	ldr	r2, [pc, #168]	@ (8007f2c <TIM_OC2_SetConfig+0x118>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10d      	bne.n	8007ea4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f24 <TIM_OC2_SetConfig+0x110>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d013      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xc0>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a1e      	ldr	r2, [pc, #120]	@ (8007f28 <TIM_OC2_SetConfig+0x114>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00f      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xc0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f30 <TIM_OC2_SetConfig+0x11c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00b      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xc0>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <TIM_OC2_SetConfig+0x120>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xc0>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f38 <TIM_OC2_SetConfig+0x124>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_OC2_SetConfig+0xc0>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <TIM_OC2_SetConfig+0x118>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d113      	bne.n	8007efc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40015000 	.word	0x40015000
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800

08007f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2b      	ldr	r2, [pc, #172]	@ (8008048 <TIM_OC3_SetConfig+0x10c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_OC3_SetConfig+0x72>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800804c <TIM_OC3_SetConfig+0x110>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_OC3_SetConfig+0x72>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a29      	ldr	r2, [pc, #164]	@ (8008050 <TIM_OC3_SetConfig+0x114>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10d      	bne.n	8007fca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8008048 <TIM_OC3_SetConfig+0x10c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <TIM_OC3_SetConfig+0xbe>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800804c <TIM_OC3_SetConfig+0x110>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00f      	beq.n	8007ffa <TIM_OC3_SetConfig+0xbe>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8008054 <TIM_OC3_SetConfig+0x118>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00b      	beq.n	8007ffa <TIM_OC3_SetConfig+0xbe>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8008058 <TIM_OC3_SetConfig+0x11c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d007      	beq.n	8007ffa <TIM_OC3_SetConfig+0xbe>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a1b      	ldr	r2, [pc, #108]	@ (800805c <TIM_OC3_SetConfig+0x120>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d003      	beq.n	8007ffa <TIM_OC3_SetConfig+0xbe>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	@ (8008050 <TIM_OC3_SetConfig+0x114>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d113      	bne.n	8008022 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40013400 	.word	0x40013400
 8008050:	40015000 	.word	0x40015000
 8008054:	40014000 	.word	0x40014000
 8008058:	40014400 	.word	0x40014400
 800805c:	40014800 	.word	0x40014800

08008060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800809a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	031b      	lsls	r3, r3, #12
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a2c      	ldr	r2, [pc, #176]	@ (8008170 <TIM_OC4_SetConfig+0x110>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d007      	beq.n	80080d4 <TIM_OC4_SetConfig+0x74>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008174 <TIM_OC4_SetConfig+0x114>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_OC4_SetConfig+0x74>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008178 <TIM_OC4_SetConfig+0x118>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d10d      	bne.n	80080f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	031b      	lsls	r3, r3, #12
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <TIM_OC4_SetConfig+0x110>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <TIM_OC4_SetConfig+0xc0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008174 <TIM_OC4_SetConfig+0x114>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00f      	beq.n	8008120 <TIM_OC4_SetConfig+0xc0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1e      	ldr	r2, [pc, #120]	@ (800817c <TIM_OC4_SetConfig+0x11c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00b      	beq.n	8008120 <TIM_OC4_SetConfig+0xc0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a1d      	ldr	r2, [pc, #116]	@ (8008180 <TIM_OC4_SetConfig+0x120>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <TIM_OC4_SetConfig+0xc0>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a1c      	ldr	r2, [pc, #112]	@ (8008184 <TIM_OC4_SetConfig+0x124>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_OC4_SetConfig+0xc0>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a17      	ldr	r2, [pc, #92]	@ (8008178 <TIM_OC4_SetConfig+0x118>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d113      	bne.n	8008148 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008126:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800812e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	019b      	lsls	r3, r3, #6
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4313      	orrs	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40015000 	.word	0x40015000
 800817c:	40014000 	.word	0x40014000
 8008180:	40014400 	.word	0x40014400
 8008184:	40014800 	.word	0x40014800

08008188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80081cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a19      	ldr	r2, [pc, #100]	@ (8008244 <TIM_OC5_SetConfig+0xbc>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <TIM_OC5_SetConfig+0x82>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a18      	ldr	r2, [pc, #96]	@ (8008248 <TIM_OC5_SetConfig+0xc0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00f      	beq.n	800820a <TIM_OC5_SetConfig+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a17      	ldr	r2, [pc, #92]	@ (800824c <TIM_OC5_SetConfig+0xc4>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00b      	beq.n	800820a <TIM_OC5_SetConfig+0x82>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a16      	ldr	r2, [pc, #88]	@ (8008250 <TIM_OC5_SetConfig+0xc8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d007      	beq.n	800820a <TIM_OC5_SetConfig+0x82>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a15      	ldr	r2, [pc, #84]	@ (8008254 <TIM_OC5_SetConfig+0xcc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d003      	beq.n	800820a <TIM_OC5_SetConfig+0x82>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a14      	ldr	r2, [pc, #80]	@ (8008258 <TIM_OC5_SetConfig+0xd0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d109      	bne.n	800821e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40013400 	.word	0x40013400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800
 8008258:	40015000 	.word	0x40015000

0800825c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800828a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800828e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	051b      	lsls	r3, r3, #20
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a1a      	ldr	r2, [pc, #104]	@ (800831c <TIM_OC6_SetConfig+0xc0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d013      	beq.n	80082e0 <TIM_OC6_SetConfig+0x84>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a19      	ldr	r2, [pc, #100]	@ (8008320 <TIM_OC6_SetConfig+0xc4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00f      	beq.n	80082e0 <TIM_OC6_SetConfig+0x84>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a18      	ldr	r2, [pc, #96]	@ (8008324 <TIM_OC6_SetConfig+0xc8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00b      	beq.n	80082e0 <TIM_OC6_SetConfig+0x84>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a17      	ldr	r2, [pc, #92]	@ (8008328 <TIM_OC6_SetConfig+0xcc>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d007      	beq.n	80082e0 <TIM_OC6_SetConfig+0x84>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a16      	ldr	r2, [pc, #88]	@ (800832c <TIM_OC6_SetConfig+0xd0>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC6_SetConfig+0x84>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a15      	ldr	r2, [pc, #84]	@ (8008330 <TIM_OC6_SetConfig+0xd4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d109      	bne.n	80082f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40012c00 	.word	0x40012c00
 8008320:	40013400 	.word	0x40013400
 8008324:	40014000 	.word	0x40014000
 8008328:	40014400 	.word	0x40014400
 800832c:	40014800 	.word	0x40014800
 8008330:	40015000 	.word	0x40015000

08008334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 030a 	bic.w	r3, r3, #10
 8008370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008392:	b480      	push	{r7}
 8008394:	b087      	sub	sp, #28
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 0210 	bic.w	r2, r3, #16
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	031b      	lsls	r3, r3, #12
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800840c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	f043 0307 	orr.w	r3, r3, #7
 8008418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	609a      	str	r2, [r3, #8]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	021a      	lsls	r2, r3, #8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	431a      	orrs	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4313      	orrs	r3, r2
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 031f 	and.w	r3, r3, #31
 800847e:	2201      	movs	r2, #1
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	43db      	mvns	r3, r3
 800848e:	401a      	ands	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f003 031f 	and.w	r3, r3, #31
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a26      	ldr	r2, [pc, #152]	@ (800855c <TIM_ResetCallback+0xa4>)
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <TIM_ResetCallback+0xa8>)
 80084cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a24      	ldr	r2, [pc, #144]	@ (8008564 <TIM_ResetCallback+0xac>)
 80084d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a23      	ldr	r2, [pc, #140]	@ (8008568 <TIM_ResetCallback+0xb0>)
 80084dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a22      	ldr	r2, [pc, #136]	@ (800856c <TIM_ResetCallback+0xb4>)
 80084e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <TIM_ResetCallback+0xb8>)
 80084ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a20      	ldr	r2, [pc, #128]	@ (8008574 <TIM_ResetCallback+0xbc>)
 80084f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008578 <TIM_ResetCallback+0xc0>)
 80084fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <TIM_ResetCallback+0xc4>)
 8008504:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <TIM_ResetCallback+0xc8>)
 800850c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a1c      	ldr	r2, [pc, #112]	@ (8008584 <TIM_ResetCallback+0xcc>)
 8008514:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a1b      	ldr	r2, [pc, #108]	@ (8008588 <TIM_ResetCallback+0xd0>)
 800851c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a1a      	ldr	r2, [pc, #104]	@ (800858c <TIM_ResetCallback+0xd4>)
 8008524:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a19      	ldr	r2, [pc, #100]	@ (8008590 <TIM_ResetCallback+0xd8>)
 800852c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a18      	ldr	r2, [pc, #96]	@ (8008594 <TIM_ResetCallback+0xdc>)
 8008534:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a17      	ldr	r2, [pc, #92]	@ (8008598 <TIM_ResetCallback+0xe0>)
 800853c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a16      	ldr	r2, [pc, #88]	@ (800859c <TIM_ResetCallback+0xe4>)
 8008544:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a15      	ldr	r2, [pc, #84]	@ (80085a0 <TIM_ResetCallback+0xe8>)
 800854c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	08002b99 	.word	0x08002b99
 8008560:	08007805 	.word	0x08007805
 8008564:	0800787d 	.word	0x0800787d
 8008568:	08007891 	.word	0x08007891
 800856c:	0800782d 	.word	0x0800782d
 8008570:	08007841 	.word	0x08007841
 8008574:	08007819 	.word	0x08007819
 8008578:	08007855 	.word	0x08007855
 800857c:	08007869 	.word	0x08007869
 8008580:	080078a5 	.word	0x080078a5
 8008584:	080087f9 	.word	0x080087f9
 8008588:	0800880d 	.word	0x0800880d
 800858c:	08008821 	.word	0x08008821
 8008590:	08008835 	.word	0x08008835
 8008594:	08008849 	.word	0x08008849
 8008598:	0800885d 	.word	0x0800885d
 800859c:	08008871 	.word	0x08008871
 80085a0:	08008885 	.word	0x08008885

080085a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e074      	b.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a34      	ldr	r2, [pc, #208]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d009      	beq.n	80085fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a33      	ldr	r2, [pc, #204]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d004      	beq.n	80085fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a31      	ldr	r2, [pc, #196]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d108      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a21      	ldr	r2, [pc, #132]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d022      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863c:	d01d      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1f      	ldr	r2, [pc, #124]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d018      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1d      	ldr	r2, [pc, #116]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1c      	ldr	r2, [pc, #112]	@ (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a11      	ldr	r2, [pc, #68]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d10c      	bne.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	4313      	orrs	r3, r2
 800868a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40013400 	.word	0x40013400
 80086bc:	40015000 	.word	0x40015000
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40014000 	.word	0x40014000

080086d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e078      	b.n	80087de <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1c      	ldr	r2, [pc, #112]	@ (80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1b      	ldr	r2, [pc, #108]	@ (80087f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a19      	ldr	r2, [pc, #100]	@ (80087f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d11c      	bne.n	80087cc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	051b      	lsls	r3, r3, #20
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40015000 	.word	0x40015000

080087f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e050      	b.n	800894c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d114      	bne.n	80088de <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fde5 	bl	800948c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a21      	ldr	r2, [pc, #132]	@ (8008954 <HAL_UART_Init+0xbc>)
 80088d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2224      	movs	r2, #36	@ 0x24
 80088e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0201 	bic.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 f912 	bl	8009b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fe13 	bl	8009530 <UART_SetConfig>
 800890a:	4603      	mov	r3, r0
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e01b      	b.n	800894c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 f991 	bl	8009c6c <UART_CheckIdleState>
 800894a:	4603      	mov	r3, r0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	08003439 	.word	0x08003439

08008958 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e09c      	b.n	8008abe <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898a:	2b20      	cmp	r3, #32
 800898c:	d16c      	bne.n	8008a68 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d85e      	bhi.n	8008a52 <HAL_UART_RegisterCallback+0xfa>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <HAL_UART_RegisterCallback+0x44>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089db 	.word	0x080089db
 80089a4:	080089e5 	.word	0x080089e5
 80089a8:	080089ef 	.word	0x080089ef
 80089ac:	080089f9 	.word	0x080089f9
 80089b0:	08008a03 	.word	0x08008a03
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	08008a17 	.word	0x08008a17
 80089bc:	08008a21 	.word	0x08008a21
 80089c0:	08008a2b 	.word	0x08008a2b
 80089c4:	08008a35 	.word	0x08008a35
 80089c8:	08008a3f 	.word	0x08008a3f
 80089cc:	08008a49 	.word	0x08008a49
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80089d8:	e070      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80089e2:	e06b      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80089ec:	e066      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80089f6:	e061      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a00:	e05c      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a0a:	e057      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a14:	e052      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a1e:	e04d      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a28:	e048      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a32:	e043      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a3c:	e03e      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a46:	e039      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a50:	e034      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
        break;
 8008a66:	e029      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d11a      	bne.n	8008aa8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	2b0b      	cmp	r3, #11
 8008a76:	d002      	beq.n	8008a7e <HAL_UART_RegisterCallback+0x126>
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	d005      	beq.n	8008a88 <HAL_UART_RegisterCallback+0x130>
 8008a7c:	e009      	b.n	8008a92 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a86:	e019      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a90:	e014      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
        break;
 8008aa6:	e009      	b.n	8008abc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop

08008acc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	@ 0x28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d167      	bne.n	8008bb4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_UART_Transmit_DMA+0x24>
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e060      	b.n	8008bb6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2221      	movs	r2, #33	@ 0x21
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d028      	beq.n	8008b74 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b26:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <HAL_UART_Transmit_DMA+0xf4>)
 8008b28:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b2e:	4a25      	ldr	r2, [pc, #148]	@ (8008bc4 <HAL_UART_Transmit_DMA+0xf8>)
 8008b30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b36:	4a24      	ldr	r2, [pc, #144]	@ (8008bc8 <HAL_UART_Transmit_DMA+0xfc>)
 8008b38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b3e:	2200      	movs	r2, #0
 8008b40:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3328      	adds	r3, #40	@ 0x28
 8008b52:	461a      	mov	r2, r3
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	f7fc f927 	bl	8004da8 <HAL_DMA_Start_IT>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2210      	movs	r2, #16
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e020      	b.n	8008bb6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2240      	movs	r2, #64	@ 0x40
 8008b7a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9c:	623a      	str	r2, [r7, #32]
 8008b9e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	69f9      	ldr	r1, [r7, #28]
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e5      	bne.n	8008b7c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e000      	b.n	8008bb6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008bb4:	2302      	movs	r3, #2
  }
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3728      	adds	r7, #40	@ 0x28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0800a137 	.word	0x0800a137
 8008bc4:	0800a1d5 	.word	0x0800a1d5
 8008bc8:	0800a36f 	.word	0x0800a36f

08008bcc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d137      	bne.n	8008c54 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_UART_Receive_DMA+0x24>
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e030      	b.n	8008c56 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a18      	ldr	r2, [pc, #96]	@ (8008c60 <HAL_UART_Receive_DMA+0x94>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d01f      	beq.n	8008c44 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d018      	beq.n	8008c44 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	623b      	str	r3, [r7, #32]
 8008c32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	69f9      	ldr	r1, [r7, #28]
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	461a      	mov	r2, r3
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f001 f926 	bl	8009e9c <UART_Start_Receive_DMA>
 8008c50:	4603      	mov	r3, r0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3728      	adds	r7, #40	@ 0x28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40008000 	.word	0x40008000

08008c64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b0ba      	sub	sp, #232	@ 0xe8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c92:	4013      	ands	r3, r2
 8008c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d11b      	bne.n	8008cd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d015      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8312 	beq.w	80092f2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
      }
      return;
 8008cd6:	e30c      	b.n	80092f2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8129 	beq.w	8008f34 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ce2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ce6:	4b90      	ldr	r3, [pc, #576]	@ (8008f28 <HAL_UART_IRQHandler+0x2c4>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8008f2c <HAL_UART_IRQHandler+0x2c8>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 811c 	beq.w	8008f34 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d011      	beq.n	8008d2c <HAL_UART_IRQHandler+0xc8>
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d22:	f043 0201 	orr.w	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d011      	beq.n	8008d5c <HAL_UART_IRQHandler+0xf8>
 8008d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d52:	f043 0204 	orr.w	r2, r3, #4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d011      	beq.n	8008d8c <HAL_UART_IRQHandler+0x128>
 8008d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2204      	movs	r2, #4
 8008d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d82:	f043 0202 	orr.w	r2, r3, #2
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d017      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d105      	bne.n	8008db0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008da4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008da8:	4b5f      	ldr	r3, [pc, #380]	@ (8008f28 <HAL_UART_IRQHandler+0x2c4>)
 8008daa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2208      	movs	r2, #8
 8008db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dbe:	f043 0208 	orr.w	r2, r3, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <HAL_UART_IRQHandler+0x196>
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df0:	f043 0220 	orr.w	r2, r3, #32
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8278 	beq.w	80092f6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d013      	beq.n	8008e3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4e:	2b40      	cmp	r3, #64	@ 0x40
 8008e50:	d005      	beq.n	8008e5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d058      	beq.n	8008f10 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 f903 	bl	800a06a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e6e:	2b40      	cmp	r3, #64	@ 0x40
 8008e70:	d148      	bne.n	8008f04 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3308      	adds	r3, #8
 8008e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1d9      	bne.n	8008e72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d017      	beq.n	8008ef8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ece:	4a18      	ldr	r2, [pc, #96]	@ (8008f30 <HAL_UART_IRQHandler+0x2cc>)
 8008ed0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fc f839 	bl	8004f50 <HAL_DMA_Abort_IT>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01f      	beq.n	8008f24 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef6:	e015      	b.n	8008f24 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	e00f      	b.n	8008f24 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0e:	e009      	b.n	8008f24 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f22:	e1e8      	b.n	80092f6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	bf00      	nop
    return;
 8008f26:	e1e6      	b.n	80092f6 <HAL_UART_IRQHandler+0x692>
 8008f28:	10000001 	.word	0x10000001
 8008f2c:	04000120 	.word	0x04000120
 8008f30:	0800a3f3 	.word	0x0800a3f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	f040 8176 	bne.w	800922a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 816f 	beq.w	800922a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8168 	beq.w	800922a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2210      	movs	r2, #16
 8008f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	f040 80dc 	bne.w	800912a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80b1 	beq.w	80090ec <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f94:	429a      	cmp	r2, r3
 8008f96:	f080 80a9 	bcs.w	80090ec <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 8087 	bne.w	80090c6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fe6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1da      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009026:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800902a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800902e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e1      	bne.n	8009002 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800904e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e3      	bne.n	800903e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009094:	f023 0310 	bic.w	r3, r3, #16
 8009098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fb feec 	bl	8004e9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2202      	movs	r2, #2
 80090ca:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80090de:	b292      	uxth	r2, r2
 80090e0:	1a8a      	subs	r2, r1, r2
 80090e2:	b292      	uxth	r2, r2
 80090e4:	4611      	mov	r1, r2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80090ea:	e106      	b.n	80092fa <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090f6:	429a      	cmp	r2, r3
 80090f8:	f040 80ff 	bne.w	80092fa <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b20      	cmp	r3, #32
 800910c:	f040 80f5 	bne.w	80092fa <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009122:	4611      	mov	r1, r2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
      return;
 8009128:	e0e7      	b.n	80092fa <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009136:	b29b      	uxth	r3, r3
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 80d9 	beq.w	80092fe <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800914c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80d4 	beq.w	80092fe <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800916a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009178:	647b      	str	r3, [r7, #68]	@ 0x44
 800917a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e4      	bne.n	8009156 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	623b      	str	r3, [r7, #32]
   return(result);
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80091b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e1      	bne.n	800918c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f023 0310 	bic.w	r3, r3, #16
 80091f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	69b9      	ldr	r1, [r7, #24]
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	617b      	str	r3, [r7, #20]
   return(result);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e4      	bne.n	80091dc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800921e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009222:	4611      	mov	r1, r2
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009228:	e069      	b.n	80092fe <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d010      	beq.n	8009258 <HAL_UART_IRQHandler+0x5f4>
 8009236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800923a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800924a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009256:	e055      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009260:	2b00      	cmp	r3, #0
 8009262:	d014      	beq.n	800928e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009280:	2b00      	cmp	r3, #0
 8009282:	d03e      	beq.n	8009302 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
    }
    return;
 800928c:	e039      	b.n	8009302 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <HAL_UART_IRQHandler+0x64a>
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f8b7 	bl	800a41a <UART_EndTransmit_IT>
    return;
 80092ac:	e02a      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00b      	beq.n	80092d2 <HAL_UART_IRQHandler+0x66e>
 80092ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092d0:	e018      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d012      	beq.n	8009304 <HAL_UART_IRQHandler+0x6a0>
 80092de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	da0e      	bge.n	8009304 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092f0:	e008      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
      return;
 80092f2:	bf00      	nop
 80092f4:	e006      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
    return;
 80092f6:	bf00      	nop
 80092f8:	e004      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
      return;
 80092fa:	bf00      	nop
 80092fc:	e002      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
      return;
 80092fe:	bf00      	nop
 8009300:	e000      	b.n	8009304 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009302:	bf00      	nop
  }
}
 8009304:	37e8      	adds	r7, #232	@ 0xe8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a09      	ldr	r2, [pc, #36]	@ (80093f8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d009      	beq.n	80093ec <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	615a      	str	r2, [r3, #20]
  }
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40008000 	.word	0x40008000

080093fc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a18      	ldr	r2, [pc, #96]	@ (800946c <HAL_UART_EnableReceiverTimeout+0x70>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d027      	beq.n	800945e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009414:	2b20      	cmp	r3, #32
 8009416:	d120      	bne.n	800945a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009422:	2302      	movs	r3, #2
 8009424:	e01c      	b.n	8009460 <HAL_UART_EnableReceiverTimeout+0x64>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2224      	movs	r2, #36	@ 0x24
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009444:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	e002      	b.n	8009460 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800945a:	2302      	movs	r3, #2
 800945c:	e000      	b.n	8009460 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
  }
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	40008000 	.word	0x40008000

08009470 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1a      	ldr	r2, [pc, #104]	@ (8009500 <UART_InitCallbacksToDefault+0x74>)
 8009498:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a19      	ldr	r2, [pc, #100]	@ (8009504 <UART_InitCallbacksToDefault+0x78>)
 80094a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a18      	ldr	r2, [pc, #96]	@ (8009508 <UART_InitCallbacksToDefault+0x7c>)
 80094a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a17      	ldr	r2, [pc, #92]	@ (800950c <UART_InitCallbacksToDefault+0x80>)
 80094b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a16      	ldr	r2, [pc, #88]	@ (8009510 <UART_InitCallbacksToDefault+0x84>)
 80094b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a15      	ldr	r2, [pc, #84]	@ (8009514 <UART_InitCallbacksToDefault+0x88>)
 80094c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a14      	ldr	r2, [pc, #80]	@ (8009518 <UART_InitCallbacksToDefault+0x8c>)
 80094c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a13      	ldr	r2, [pc, #76]	@ (800951c <UART_InitCallbacksToDefault+0x90>)
 80094d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a12      	ldr	r2, [pc, #72]	@ (8009520 <UART_InitCallbacksToDefault+0x94>)
 80094d8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a11      	ldr	r2, [pc, #68]	@ (8009524 <UART_InitCallbacksToDefault+0x98>)
 80094e0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a10      	ldr	r2, [pc, #64]	@ (8009528 <UART_InitCallbacksToDefault+0x9c>)
 80094e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a0f      	ldr	r2, [pc, #60]	@ (800952c <UART_InitCallbacksToDefault+0xa0>)
 80094f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	08009321 	.word	0x08009321
 8009504:	0800930d 	.word	0x0800930d
 8009508:	08009349 	.word	0x08009349
 800950c:	08009335 	.word	0x08009335
 8009510:	0800935d 	.word	0x0800935d
 8009514:	08009371 	.word	0x08009371
 8009518:	08009385 	.word	0x08009385
 800951c:	08009399 	.word	0x08009399
 8009520:	0800a475 	.word	0x0800a475
 8009524:	0800a489 	.word	0x0800a489
 8009528:	0800a49d 	.word	0x0800a49d
 800952c:	080093ad 	.word	0x080093ad

08009530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009534:	b08c      	sub	sp, #48	@ 0x30
 8009536:	af00      	add	r7, sp, #0
 8009538:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	431a      	orrs	r2, r3
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	431a      	orrs	r2, r3
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	4313      	orrs	r3, r2
 8009556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4baa      	ldr	r3, [pc, #680]	@ (8009808 <UART_SetConfig+0x2d8>)
 8009560:	4013      	ands	r3, r2
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009568:	430b      	orrs	r3, r1
 800956a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a9f      	ldr	r2, [pc, #636]	@ (800980c <UART_SetConfig+0x2dc>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009598:	4313      	orrs	r3, r2
 800959a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80095a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	6812      	ldr	r2, [r2, #0]
 80095ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b0:	430b      	orrs	r3, r1
 80095b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	f023 010f 	bic.w	r1, r3, #15
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a90      	ldr	r2, [pc, #576]	@ (8009810 <UART_SetConfig+0x2e0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d125      	bne.n	8009620 <UART_SetConfig+0xf0>
 80095d4:	4b8f      	ldr	r3, [pc, #572]	@ (8009814 <UART_SetConfig+0x2e4>)
 80095d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d81a      	bhi.n	8009618 <UART_SetConfig+0xe8>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0xb8>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	080095f9 	.word	0x080095f9
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009611 	.word	0x08009611
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095fe:	e116      	b.n	800982e <UART_SetConfig+0x2fe>
 8009600:	2302      	movs	r3, #2
 8009602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009606:	e112      	b.n	800982e <UART_SetConfig+0x2fe>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800960e:	e10e      	b.n	800982e <UART_SetConfig+0x2fe>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009616:	e10a      	b.n	800982e <UART_SetConfig+0x2fe>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961e:	e106      	b.n	800982e <UART_SetConfig+0x2fe>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a7c      	ldr	r2, [pc, #496]	@ (8009818 <UART_SetConfig+0x2e8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d138      	bne.n	800969c <UART_SetConfig+0x16c>
 800962a:	4b7a      	ldr	r3, [pc, #488]	@ (8009814 <UART_SetConfig+0x2e4>)
 800962c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009630:	f003 030c 	and.w	r3, r3, #12
 8009634:	2b0c      	cmp	r3, #12
 8009636:	d82d      	bhi.n	8009694 <UART_SetConfig+0x164>
 8009638:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <UART_SetConfig+0x110>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009675 	.word	0x08009675
 8009644:	08009695 	.word	0x08009695
 8009648:	08009695 	.word	0x08009695
 800964c:	08009695 	.word	0x08009695
 8009650:	08009685 	.word	0x08009685
 8009654:	08009695 	.word	0x08009695
 8009658:	08009695 	.word	0x08009695
 800965c:	08009695 	.word	0x08009695
 8009660:	0800967d 	.word	0x0800967d
 8009664:	08009695 	.word	0x08009695
 8009668:	08009695 	.word	0x08009695
 800966c:	08009695 	.word	0x08009695
 8009670:	0800968d 	.word	0x0800968d
 8009674:	2300      	movs	r3, #0
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967a:	e0d8      	b.n	800982e <UART_SetConfig+0x2fe>
 800967c:	2302      	movs	r3, #2
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e0d4      	b.n	800982e <UART_SetConfig+0x2fe>
 8009684:	2304      	movs	r3, #4
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e0d0      	b.n	800982e <UART_SetConfig+0x2fe>
 800968c:	2308      	movs	r3, #8
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009692:	e0cc      	b.n	800982e <UART_SetConfig+0x2fe>
 8009694:	2310      	movs	r3, #16
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800969a:	e0c8      	b.n	800982e <UART_SetConfig+0x2fe>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a5e      	ldr	r2, [pc, #376]	@ (800981c <UART_SetConfig+0x2ec>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d125      	bne.n	80096f2 <UART_SetConfig+0x1c2>
 80096a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009814 <UART_SetConfig+0x2e4>)
 80096a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80096b0:	2b30      	cmp	r3, #48	@ 0x30
 80096b2:	d016      	beq.n	80096e2 <UART_SetConfig+0x1b2>
 80096b4:	2b30      	cmp	r3, #48	@ 0x30
 80096b6:	d818      	bhi.n	80096ea <UART_SetConfig+0x1ba>
 80096b8:	2b20      	cmp	r3, #32
 80096ba:	d00a      	beq.n	80096d2 <UART_SetConfig+0x1a2>
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d814      	bhi.n	80096ea <UART_SetConfig+0x1ba>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <UART_SetConfig+0x19a>
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d008      	beq.n	80096da <UART_SetConfig+0x1aa>
 80096c8:	e00f      	b.n	80096ea <UART_SetConfig+0x1ba>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d0:	e0ad      	b.n	800982e <UART_SetConfig+0x2fe>
 80096d2:	2302      	movs	r3, #2
 80096d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d8:	e0a9      	b.n	800982e <UART_SetConfig+0x2fe>
 80096da:	2304      	movs	r3, #4
 80096dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e0:	e0a5      	b.n	800982e <UART_SetConfig+0x2fe>
 80096e2:	2308      	movs	r3, #8
 80096e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e8:	e0a1      	b.n	800982e <UART_SetConfig+0x2fe>
 80096ea:	2310      	movs	r3, #16
 80096ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f0:	e09d      	b.n	800982e <UART_SetConfig+0x2fe>
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009820 <UART_SetConfig+0x2f0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d125      	bne.n	8009748 <UART_SetConfig+0x218>
 80096fc:	4b45      	ldr	r3, [pc, #276]	@ (8009814 <UART_SetConfig+0x2e4>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009702:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009706:	2bc0      	cmp	r3, #192	@ 0xc0
 8009708:	d016      	beq.n	8009738 <UART_SetConfig+0x208>
 800970a:	2bc0      	cmp	r3, #192	@ 0xc0
 800970c:	d818      	bhi.n	8009740 <UART_SetConfig+0x210>
 800970e:	2b80      	cmp	r3, #128	@ 0x80
 8009710:	d00a      	beq.n	8009728 <UART_SetConfig+0x1f8>
 8009712:	2b80      	cmp	r3, #128	@ 0x80
 8009714:	d814      	bhi.n	8009740 <UART_SetConfig+0x210>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <UART_SetConfig+0x1f0>
 800971a:	2b40      	cmp	r3, #64	@ 0x40
 800971c:	d008      	beq.n	8009730 <UART_SetConfig+0x200>
 800971e:	e00f      	b.n	8009740 <UART_SetConfig+0x210>
 8009720:	2300      	movs	r3, #0
 8009722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009726:	e082      	b.n	800982e <UART_SetConfig+0x2fe>
 8009728:	2302      	movs	r3, #2
 800972a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800972e:	e07e      	b.n	800982e <UART_SetConfig+0x2fe>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009736:	e07a      	b.n	800982e <UART_SetConfig+0x2fe>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800973e:	e076      	b.n	800982e <UART_SetConfig+0x2fe>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009746:	e072      	b.n	800982e <UART_SetConfig+0x2fe>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a35      	ldr	r2, [pc, #212]	@ (8009824 <UART_SetConfig+0x2f4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d12a      	bne.n	80097a8 <UART_SetConfig+0x278>
 8009752:	4b30      	ldr	r3, [pc, #192]	@ (8009814 <UART_SetConfig+0x2e4>)
 8009754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800975c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009760:	d01a      	beq.n	8009798 <UART_SetConfig+0x268>
 8009762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009766:	d81b      	bhi.n	80097a0 <UART_SetConfig+0x270>
 8009768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800976c:	d00c      	beq.n	8009788 <UART_SetConfig+0x258>
 800976e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009772:	d815      	bhi.n	80097a0 <UART_SetConfig+0x270>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d003      	beq.n	8009780 <UART_SetConfig+0x250>
 8009778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977c:	d008      	beq.n	8009790 <UART_SetConfig+0x260>
 800977e:	e00f      	b.n	80097a0 <UART_SetConfig+0x270>
 8009780:	2300      	movs	r3, #0
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009786:	e052      	b.n	800982e <UART_SetConfig+0x2fe>
 8009788:	2302      	movs	r3, #2
 800978a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800978e:	e04e      	b.n	800982e <UART_SetConfig+0x2fe>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009796:	e04a      	b.n	800982e <UART_SetConfig+0x2fe>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800979e:	e046      	b.n	800982e <UART_SetConfig+0x2fe>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a6:	e042      	b.n	800982e <UART_SetConfig+0x2fe>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a17      	ldr	r2, [pc, #92]	@ (800980c <UART_SetConfig+0x2dc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d13a      	bne.n	8009828 <UART_SetConfig+0x2f8>
 80097b2:	4b18      	ldr	r3, [pc, #96]	@ (8009814 <UART_SetConfig+0x2e4>)
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097c0:	d01a      	beq.n	80097f8 <UART_SetConfig+0x2c8>
 80097c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097c6:	d81b      	bhi.n	8009800 <UART_SetConfig+0x2d0>
 80097c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097cc:	d00c      	beq.n	80097e8 <UART_SetConfig+0x2b8>
 80097ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097d2:	d815      	bhi.n	8009800 <UART_SetConfig+0x2d0>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <UART_SetConfig+0x2b0>
 80097d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097dc:	d008      	beq.n	80097f0 <UART_SetConfig+0x2c0>
 80097de:	e00f      	b.n	8009800 <UART_SetConfig+0x2d0>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e6:	e022      	b.n	800982e <UART_SetConfig+0x2fe>
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ee:	e01e      	b.n	800982e <UART_SetConfig+0x2fe>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f6:	e01a      	b.n	800982e <UART_SetConfig+0x2fe>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	e016      	b.n	800982e <UART_SetConfig+0x2fe>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009806:	e012      	b.n	800982e <UART_SetConfig+0x2fe>
 8009808:	cfff69f3 	.word	0xcfff69f3
 800980c:	40008000 	.word	0x40008000
 8009810:	40013800 	.word	0x40013800
 8009814:	40021000 	.word	0x40021000
 8009818:	40004400 	.word	0x40004400
 800981c:	40004800 	.word	0x40004800
 8009820:	40004c00 	.word	0x40004c00
 8009824:	40005000 	.word	0x40005000
 8009828:	2310      	movs	r3, #16
 800982a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4aae      	ldr	r2, [pc, #696]	@ (8009aec <UART_SetConfig+0x5bc>)
 8009834:	4293      	cmp	r3, r2
 8009836:	f040 8097 	bne.w	8009968 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800983a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800983e:	2b08      	cmp	r3, #8
 8009840:	d823      	bhi.n	800988a <UART_SetConfig+0x35a>
 8009842:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <UART_SetConfig+0x318>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	0800986d 	.word	0x0800986d
 800984c:	0800988b 	.word	0x0800988b
 8009850:	08009875 	.word	0x08009875
 8009854:	0800988b 	.word	0x0800988b
 8009858:	0800987b 	.word	0x0800987b
 800985c:	0800988b 	.word	0x0800988b
 8009860:	0800988b 	.word	0x0800988b
 8009864:	0800988b 	.word	0x0800988b
 8009868:	08009883 	.word	0x08009883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800986c:	f7fc fc62 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 8009870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009872:	e010      	b.n	8009896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009874:	4b9e      	ldr	r3, [pc, #632]	@ (8009af0 <UART_SetConfig+0x5c0>)
 8009876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009878:	e00d      	b.n	8009896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800987a:	f7fc fbed 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 800987e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009880:	e009      	b.n	8009896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009888:	e005      	b.n	8009896 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8130 	beq.w	8009afe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a2:	4a94      	ldr	r2, [pc, #592]	@ (8009af4 <UART_SetConfig+0x5c4>)
 80098a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098a8:	461a      	mov	r2, r3
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80098b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	4413      	add	r3, r2
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d305      	bcc.n	80098ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d903      	bls.n	80098d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80098d4:	e113      	b.n	8009afe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	2200      	movs	r2, #0
 80098da:	60bb      	str	r3, [r7, #8]
 80098dc:	60fa      	str	r2, [r7, #12]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e2:	4a84      	ldr	r2, [pc, #528]	@ (8009af4 <UART_SetConfig+0x5c4>)
 80098e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	2200      	movs	r2, #0
 80098ec:	603b      	str	r3, [r7, #0]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098f8:	f7f7 f8f4 	bl	8000ae4 <__aeabi_uldivmod>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4610      	mov	r0, r2
 8009902:	4619      	mov	r1, r3
 8009904:	f04f 0200 	mov.w	r2, #0
 8009908:	f04f 0300 	mov.w	r3, #0
 800990c:	020b      	lsls	r3, r1, #8
 800990e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009912:	0202      	lsls	r2, r0, #8
 8009914:	6979      	ldr	r1, [r7, #20]
 8009916:	6849      	ldr	r1, [r1, #4]
 8009918:	0849      	lsrs	r1, r1, #1
 800991a:	2000      	movs	r0, #0
 800991c:	460c      	mov	r4, r1
 800991e:	4605      	mov	r5, r0
 8009920:	eb12 0804 	adds.w	r8, r2, r4
 8009924:	eb43 0905 	adc.w	r9, r3, r5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	469a      	mov	sl, r3
 8009930:	4693      	mov	fp, r2
 8009932:	4652      	mov	r2, sl
 8009934:	465b      	mov	r3, fp
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	f7f7 f8d3 	bl	8000ae4 <__aeabi_uldivmod>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4613      	mov	r3, r2
 8009944:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800994c:	d308      	bcc.n	8009960 <UART_SetConfig+0x430>
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009954:	d204      	bcs.n	8009960 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6a3a      	ldr	r2, [r7, #32]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	e0ce      	b.n	8009afe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009966:	e0ca      	b.n	8009afe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009970:	d166      	bne.n	8009a40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009972:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009976:	2b08      	cmp	r3, #8
 8009978:	d827      	bhi.n	80099ca <UART_SetConfig+0x49a>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <UART_SetConfig+0x450>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099ad 	.word	0x080099ad
 8009988:	080099b5 	.word	0x080099b5
 800998c:	080099cb 	.word	0x080099cb
 8009990:	080099bb 	.word	0x080099bb
 8009994:	080099cb 	.word	0x080099cb
 8009998:	080099cb 	.word	0x080099cb
 800999c:	080099cb 	.word	0x080099cb
 80099a0:	080099c3 	.word	0x080099c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a4:	f7fc fbc6 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 80099a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099aa:	e014      	b.n	80099d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099ac:	f7fc fbd8 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 80099b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099b2:	e010      	b.n	80099d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b4:	4b4e      	ldr	r3, [pc, #312]	@ (8009af0 <UART_SetConfig+0x5c0>)
 80099b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099b8:	e00d      	b.n	80099d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ba:	f7fc fb4d 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 80099be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099c0:	e009      	b.n	80099d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099c8:	e005      	b.n	80099d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 8090 	beq.w	8009afe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e2:	4a44      	ldr	r2, [pc, #272]	@ (8009af4 <UART_SetConfig+0x5c4>)
 80099e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f0:	005a      	lsls	r2, r3, #1
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	085b      	lsrs	r3, r3, #1
 80099f8:	441a      	add	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d916      	bls.n	8009a38 <UART_SetConfig+0x508>
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a10:	d212      	bcs.n	8009a38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f023 030f 	bic.w	r3, r3, #15
 8009a1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	8bfb      	ldrh	r3, [r7, #30]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	8bfa      	ldrh	r2, [r7, #30]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	e062      	b.n	8009afe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a3e:	e05e      	b.n	8009afe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d828      	bhi.n	8009a9a <UART_SetConfig+0x56a>
 8009a48:	a201      	add	r2, pc, #4	@ (adr r2, 8009a50 <UART_SetConfig+0x520>)
 8009a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4e:	bf00      	nop
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	08009a9b 	.word	0x08009a9b
 8009a60:	08009a8b 	.word	0x08009a8b
 8009a64:	08009a9b 	.word	0x08009a9b
 8009a68:	08009a9b 	.word	0x08009a9b
 8009a6c:	08009a9b 	.word	0x08009a9b
 8009a70:	08009a93 	.word	0x08009a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a74:	f7fc fb5e 	bl	8006134 <HAL_RCC_GetPCLK1Freq>
 8009a78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a7a:	e014      	b.n	8009aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a7c:	f7fc fb70 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8009a80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a82:	e010      	b.n	8009aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a84:	4b1a      	ldr	r3, [pc, #104]	@ (8009af0 <UART_SetConfig+0x5c0>)
 8009a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a88:	e00d      	b.n	8009aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a8a:	f7fc fae5 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8009a8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a90:	e009      	b.n	8009aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a98:	e005      	b.n	8009aa6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d028      	beq.n	8009afe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	4a10      	ldr	r2, [pc, #64]	@ (8009af4 <UART_SetConfig+0x5c4>)
 8009ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	441a      	add	r2, r3
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ace:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	2b0f      	cmp	r3, #15
 8009ad4:	d910      	bls.n	8009af8 <UART_SetConfig+0x5c8>
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009adc:	d20c      	bcs.n	8009af8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	e009      	b.n	8009afe <UART_SetConfig+0x5ce>
 8009aea:	bf00      	nop
 8009aec:	40008000 	.word	0x40008000
 8009af0:	00f42400 	.word	0x00f42400
 8009af4:	0800ab94 	.word	0x0800ab94
      }
      else
      {
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2200      	movs	r2, #0
 8009b12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2200      	movs	r2, #0
 8009b18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3730      	adds	r7, #48	@ 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01a      	beq.n	8009c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c26:	d10a      	bne.n	8009c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	605a      	str	r2, [r3, #4]
  }
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b098      	sub	sp, #96	@ 0x60
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c7c:	f7f9 fdd0 	bl	8003820 <HAL_GetTick>
 8009c80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d12f      	bne.n	8009cf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f88e 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d022      	beq.n	8009cf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	e853 3f00 	ldrex	r3, [r3]
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cd0:	e841 2300 	strex	r3, r2, [r1]
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1e6      	bne.n	8009caa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e063      	b.n	8009db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d149      	bne.n	8009d92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d06:	2200      	movs	r2, #0
 8009d08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f857 	bl	8009dc0 <UART_WaitOnFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d03c      	beq.n	8009d92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	623b      	str	r3, [r7, #32]
   return(result);
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e6      	bne.n	8009d18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d6a:	61fa      	str	r2, [r7, #28]
 8009d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	69b9      	ldr	r1, [r7, #24]
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	617b      	str	r3, [r7, #20]
   return(result);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e5      	bne.n	8009d4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e012      	b.n	8009db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3758      	adds	r7, #88	@ 0x58
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dd0:	e04f      	b.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d04b      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dda:	f7f9 fd21 	bl	8003820 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	69ba      	ldr	r2, [r7, #24]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e04e      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d037      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b80      	cmp	r3, #128	@ 0x80
 8009e06:	d034      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b40      	cmp	r3, #64	@ 0x40
 8009e0c:	d031      	beq.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d110      	bne.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2208      	movs	r2, #8
 8009e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f920 	bl	800a06a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e029      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e4c:	d111      	bne.n	8009e72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f906 	bl	800a06a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e00f      	b.n	8009e92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	bf0c      	ite	eq
 8009e82:	2301      	moveq	r3, #1
 8009e84:	2300      	movne	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d0a0      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b096      	sub	sp, #88	@ 0x58
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	88fa      	ldrh	r2, [r7, #6]
 8009eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2222      	movs	r2, #34	@ 0x22
 8009ec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02d      	beq.n	8009f2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	4a40      	ldr	r2, [pc, #256]	@ (8009fdc <UART_Start_Receive_DMA+0x140>)
 8009eda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8009fe0 <UART_Start_Receive_DMA+0x144>)
 8009ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eec:	4a3d      	ldr	r2, [pc, #244]	@ (8009fe4 <UART_Start_Receive_DMA+0x148>)
 8009eee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3324      	adds	r3, #36	@ 0x24
 8009f06:	4619      	mov	r1, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	88fb      	ldrh	r3, [r7, #6]
 8009f10:	f7fa ff4a 	bl	8004da8 <HAL_DMA_Start_IT>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2210      	movs	r2, #16
 8009f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e051      	b.n	8009fd2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d018      	beq.n	8009f68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	461a      	mov	r2, r3
 8009f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e6      	bne.n	8009f36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	f043 0301 	orr.w	r3, r3, #1
 8009f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f88:	637a      	str	r2, [r7, #52]	@ 0x34
 8009f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	613b      	str	r3, [r7, #16]
   return(result);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fbc:	623a      	str	r2, [r7, #32]
 8009fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	69f9      	ldr	r1, [r7, #28]
 8009fc2:	6a3a      	ldr	r2, [r7, #32]
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e5      	bne.n	8009f9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3758      	adds	r7, #88	@ 0x58
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800a1f5 	.word	0x0800a1f5
 8009fe0:	0800a329 	.word	0x0800a329
 8009fe4:	0800a36f 	.word	0x0800a36f

08009fe8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b08f      	sub	sp, #60	@ 0x3c
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a004:	637b      	str	r3, [r7, #52]	@ 0x34
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a010:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60bb      	str	r3, [r7, #8]
   return(result);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a038:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a042:	61ba      	str	r2, [r7, #24]
 800a044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	613b      	str	r3, [r7, #16]
   return(result);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a05e:	bf00      	nop
 800a060:	373c      	adds	r7, #60	@ 0x3c
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b095      	sub	sp, #84	@ 0x54
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a090:	643b      	str	r3, [r7, #64]	@ 0x40
 800a092:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0ba:	f023 0301 	bic.w	r3, r3, #1
 800a0be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e3      	bne.n	800a0a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d118      	bne.n	800a116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a102:	61bb      	str	r3, [r7, #24]
 800a104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6979      	ldr	r1, [r7, #20]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	613b      	str	r3, [r7, #16]
   return(result);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e6      	bne.n	800a0e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a12a:	bf00      	nop
 800a12c:	3754      	adds	r7, #84	@ 0x54
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b090      	sub	sp, #64	@ 0x40
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d137      	bne.n	800a1c2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a154:	2200      	movs	r2, #0
 800a156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	623b      	str	r3, [r7, #32]
   return(result);
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a170:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a17a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ac:	61fb      	str	r3, [r7, #28]
 800a1ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69b9      	ldr	r1, [r7, #24]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e6      	bne.n	800a18e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1c0:	e004      	b.n	800a1cc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1ca:	4798      	blx	r3
}
 800a1cc:	bf00      	nop
 800a1ce:	3740      	adds	r7, #64	@ 0x40
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b09c      	sub	sp, #112	@ 0x70
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a200:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d171      	bne.n	800a2f4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a212:	2200      	movs	r2, #0
 800a214:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a22c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a236:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a238:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a23c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e6      	bne.n	800a218 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25c:	f023 0301 	bic.w	r3, r3, #1
 800a260:	667b      	str	r3, [r7, #100]	@ 0x64
 800a262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a26a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a26c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e5      	bne.n	800a24a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a27e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	623b      	str	r3, [r7, #32]
   return(result);
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a294:	663b      	str	r3, [r7, #96]	@ 0x60
 800a296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3308      	adds	r3, #8
 800a29c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a29e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e5      	bne.n	800a27e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d118      	bne.n	800a2f4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	e853 3f00 	ldrex	r3, [r3]
 800a2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0310 	bic.w	r3, r3, #16
 800a2d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	69b9      	ldr	r1, [r7, #24]
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e6      	bne.n	800a2c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d109      	bne.n	800a316 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a308:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a30a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a30e:	4611      	mov	r1, r2
 800a310:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a312:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a314:	e004      	b.n	800a320 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a31c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a31e:	4798      	blx	r3
}
 800a320:	bf00      	nop
 800a322:	3770      	adds	r7, #112	@ 0x70
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a334:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d10b      	bne.n	800a35c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a350:	0852      	lsrs	r2, r2, #1
 800a352:	b292      	uxth	r2, r2
 800a354:	4611      	mov	r1, r2
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a35a:	e004      	b.n	800a366 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	4798      	blx	r3
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a382:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a396:	2b80      	cmp	r3, #128	@ 0x80
 800a398:	d109      	bne.n	800a3ae <UART_DMAError+0x40>
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b21      	cmp	r3, #33	@ 0x21
 800a39e:	d106      	bne.n	800a3ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a3a8:	6978      	ldr	r0, [r7, #20]
 800a3aa:	f7ff fe1d 	bl	8009fe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b8:	2b40      	cmp	r3, #64	@ 0x40
 800a3ba:	d109      	bne.n	800a3d0 <UART_DMAError+0x62>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b22      	cmp	r3, #34	@ 0x22
 800a3c0:	d106      	bne.n	800a3d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	f7ff fe4d 	bl	800a06a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d6:	f043 0210 	orr.w	r2, r3, #16
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3e6:	6978      	ldr	r0, [r7, #20]
 800a3e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ea:	bf00      	nop
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a412:	bf00      	nop
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b088      	sub	sp, #32
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a436:	61fb      	str	r3, [r7, #28]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6979      	ldr	r1, [r7, #20]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	613b      	str	r3, [r7, #16]
   return(result);
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e6      	bne.n	800a422 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a46c:	bf00      	nop
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e027      	b.n	800a516 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2224      	movs	r2, #36	@ 0x24
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 0201 	bic.w	r2, r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2220      	movs	r2, #32
 800a508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a536:	2302      	movs	r3, #2
 800a538:	e02d      	b.n	800a596 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2224      	movs	r2, #36	@ 0x24
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0201 	bic.w	r2, r2, #1
 800a560:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f850 	bl	800a61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2220      	movs	r2, #32
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d101      	bne.n	800a5b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	e02d      	b.n	800a612 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2224      	movs	r2, #36	@ 0x24
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f812 	bl	800a61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2220      	movs	r2, #32
 800a604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d108      	bne.n	800a63e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a63c:	e031      	b.n	800a6a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a63e:	2308      	movs	r3, #8
 800a640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a642:	2308      	movs	r3, #8
 800a644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	0e5b      	lsrs	r3, r3, #25
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	0f5b      	lsrs	r3, r3, #29
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	7b3a      	ldrb	r2, [r7, #12]
 800a66a:	4911      	ldr	r1, [pc, #68]	@ (800a6b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a66c:	5c8a      	ldrb	r2, [r1, r2]
 800a66e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a672:	7b3a      	ldrb	r2, [r7, #12]
 800a674:	490f      	ldr	r1, [pc, #60]	@ (800a6b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a678:	fb93 f3f2 	sdiv	r3, r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	7b7a      	ldrb	r2, [r7, #13]
 800a688:	4909      	ldr	r1, [pc, #36]	@ (800a6b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a68a:	5c8a      	ldrb	r2, [r1, r2]
 800a68c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a690:	7b7a      	ldrb	r2, [r7, #13]
 800a692:	4908      	ldr	r1, [pc, #32]	@ (800a6b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a696:	fb93 f3f2 	sdiv	r3, r3, r2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	0800abac 	.word	0x0800abac
 800a6b4:	0800abb4 	.word	0x0800abb4

0800a6b8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	edd3 7a07 	vldr	s15, [r3, #28]
 800a6ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	edd3 7a08 	vldr	s15, [r3, #32]
 800a6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	edd3 7a06 	vldr	s15, [r3, #24]
 800a6e8:	eeb1 7a67 	vneg.f32	s14, s15
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800a6f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a1a      	ldr	r2, [r3, #32]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	330c      	adds	r3, #12
 800a712:	220c      	movs	r2, #12
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f000 f9a9 	bl	800aa6e <memset>
  }

}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a724:	b480      	push	{r7}
 800a726:	b08b      	sub	sp, #44	@ 0x2c
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	61fb      	str	r3, [r7, #28]
  arm_status status;                             /* status of matrix addition */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	881a      	ldrh	r2, [r3, #0]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d111      	bne.n	800a772 <arm_mat_add_f32+0x4e>
      (pSrcA->numCols != pSrcB->numCols) ||
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	885a      	ldrh	r2, [r3, #2]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	885b      	ldrh	r3, [r3, #2]
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a756:	429a      	cmp	r2, r3
 800a758:	d10b      	bne.n	800a772 <arm_mat_add_f32+0x4e>
      (pSrcA->numRows != pDst->numRows)  ||
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	881a      	ldrh	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	881b      	ldrh	r3, [r3, #0]
      (pSrcA->numCols != pSrcB->numCols) ||
 800a762:	429a      	cmp	r2, r3
 800a764:	d105      	bne.n	800a772 <arm_mat_add_f32+0x4e>
      (pSrcA->numCols != pDst->numCols)    )
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	885a      	ldrh	r2, [r3, #2]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a76e:	429a      	cmp	r2, r3
 800a770:	d002      	beq.n	800a778 <arm_mat_add_f32+0x54>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a772:	23fd      	movs	r3, #253	@ 0xfd
 800a774:	75fb      	strb	r3, [r7, #23]
 800a776:	e023      	b.n	800a7c0 <arm_mat_add_f32+0x9c>

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	885b      	ldrh	r3, [r3, #2]
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	613b      	str	r3, [r7, #16]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a78c:	e013      	b.n	800a7b6 <arm_mat_add_f32+0x92>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	1d1a      	adds	r2, r3, #4
 800a792:	627a      	str	r2, [r7, #36]	@ 0x24
 800a794:	ed93 7a00 	vldr	s14, [r3]
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	623a      	str	r2, [r7, #32]
 800a79e:	edd3 7a00 	vldr	s15, [r3]
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	61fa      	str	r2, [r7, #28]
 800a7a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ac:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e8      	bne.n	800a78e <arm_mat_add_f32+0x6a>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a7c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	372c      	adds	r7, #44	@ 0x2c
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	817b      	strh	r3, [r7, #10]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	897a      	ldrh	r2, [r7, #10]
 800a7e6:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	893a      	ldrh	r2, [r7, #8]
 800a7ec:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	605a      	str	r2, [r3, #4]
}
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a800:	b480      	push	{r7}
 800a802:	b093      	sub	sp, #76	@ 0x4c
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	61fb      	str	r3, [r7, #28]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	61bb      	str	r3, [r7, #24]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	82fb      	strh	r3, [r7, #22]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	82bb      	strh	r3, [r7, #20]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	827b      	strh	r3, [r7, #18]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800a83c:	2300      	movs	r3, #0
 800a83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a840:	8afb      	ldrh	r3, [r7, #22]
 800a842:	62bb      	str	r3, [r7, #40]	@ 0x28
  arm_status status;                             /* Status of matrix multiplication */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numCols != pSrcB->numRows) ||
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	885a      	ldrh	r2, [r3, #2]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d10b      	bne.n	800a868 <arm_mat_mult_f32+0x68>
      (pSrcA->numRows != pDst->numRows)  ||
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	881a      	ldrh	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	881b      	ldrh	r3, [r3, #0]
  if ((pSrcA->numCols != pSrcB->numRows) ||
 800a858:	429a      	cmp	r2, r3
 800a85a:	d105      	bne.n	800a868 <arm_mat_mult_f32+0x68>
      (pSrcB->numCols != pDst->numCols)    )
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	885a      	ldrh	r2, [r3, #2]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a864:	429a      	cmp	r2, r3
 800a866:	d003      	beq.n	800a870 <arm_mat_mult_f32+0x70>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a868:	23fd      	movs	r3, #253	@ 0xfd
 800a86a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a86e:	e050      	b.n	800a912 <arm_mat_mult_f32+0x112>
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	4413      	add	r3, r2
 800a878:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800a87a:	8abb      	ldrh	r3, [r7, #20]
 800a87c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800a88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800a88e:	8a7b      	ldrh	r3, [r7, #18]
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800a892:	e017      	b.n	800a8c4 <arm_mat_mult_f32+0xc4>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800a894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	647a      	str	r2, [r7, #68]	@ 0x44
 800a89a:	ed93 7a00 	vldr	s14, [r3]
 800a89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8a0:	edd3 7a00 	vldr	s15, [r3]
 800a8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800a8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800a8b4:	8abb      	ldrh	r3, [r7, #20]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ba:	4413      	add	r3, r2
 800a8bc:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e4      	bne.n	800a894 <arm_mat_mult_f32+0x94>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8cc:	1d1a      	adds	r2, r3, #4
 800a8ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a8d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8d2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800a8da:	8aba      	ldrh	r2, [r7, #20]
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1ca      	bne.n	800a884 <arm_mat_mult_f32+0x84>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800a8ee:	8abb      	ldrh	r3, [r7, #20]
 800a8f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8f2:	4413      	add	r3, r2
 800a8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800a8f6:	8a7b      	ldrh	r3, [r7, #18]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8fc:	4413      	add	r3, r2
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	3b01      	subs	r3, #1
 800a904:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800a906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1b1      	bne.n	800a870 <arm_mat_mult_f32+0x70>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Return to application */
  return (status);
 800a912:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
}
 800a916:	4618      	mov	r0, r3
 800a918:	374c      	adds	r7, #76	@ 0x4c
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a922:	b480      	push	{r7}
 800a924:	b08b      	sub	sp, #44	@ 0x2c
 800a926:	af00      	add	r7, sp, #0
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	60b9      	str	r1, [r7, #8]
 800a92c:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	61fb      	str	r3, [r7, #28]
  arm_status status;                             /* status of matrix subtraction */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	881a      	ldrh	r2, [r3, #0]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d111      	bne.n	800a970 <arm_mat_sub_f32+0x4e>
      (pSrcA->numCols != pSrcB->numCols) ||
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	885a      	ldrh	r2, [r3, #2]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	885b      	ldrh	r3, [r3, #2]
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a954:	429a      	cmp	r2, r3
 800a956:	d10b      	bne.n	800a970 <arm_mat_sub_f32+0x4e>
      (pSrcA->numRows != pDst->numRows)  ||
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	881a      	ldrh	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	881b      	ldrh	r3, [r3, #0]
      (pSrcA->numCols != pSrcB->numCols) ||
 800a960:	429a      	cmp	r2, r3
 800a962:	d105      	bne.n	800a970 <arm_mat_sub_f32+0x4e>
      (pSrcA->numCols != pDst->numCols)    )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	885a      	ldrh	r2, [r3, #2]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d002      	beq.n	800a976 <arm_mat_sub_f32+0x54>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a970:	23fd      	movs	r3, #253	@ 0xfd
 800a972:	75fb      	strb	r3, [r7, #23]
 800a974:	e023      	b.n	800a9be <arm_mat_sub_f32+0x9c>

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	fb02 f303 	mul.w	r3, r2, r3
 800a984:	613b      	str	r3, [r7, #16]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a98a:	e013      	b.n	800a9b4 <arm_mat_sub_f32+0x92>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	1d1a      	adds	r2, r3, #4
 800a990:	627a      	str	r2, [r7, #36]	@ 0x24
 800a992:	ed93 7a00 	vldr	s14, [r3]
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	623a      	str	r2, [r7, #32]
 800a99c:	edd3 7a00 	vldr	s15, [r3]
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	1d1a      	adds	r2, r3, #4
 800a9a4:	61fa      	str	r2, [r7, #28]
 800a9a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9aa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e8      	bne.n	800a98c <arm_mat_sub_f32+0x6a>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a9be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	372c      	adds	r7, #44	@ 0x2c
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b08b      	sub	sp, #44	@ 0x2c
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	817b      	strh	r3, [r7, #10]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	885b      	ldrh	r3, [r3, #2]
 800a9ee:	813b      	strh	r3, [r7, #8]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800a9f0:	897b      	ldrh	r3, [r7, #10]
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]
  arm_status status;                             /* status of matrix transpose */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrc->numRows != pDst->numCols) ||
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	881a      	ldrh	r2, [r3, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	885b      	ldrh	r3, [r3, #2]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d105      	bne.n	800aa10 <arm_mat_trans_f32+0x42>
      (pSrc->numCols != pDst->numRows)   )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	885a      	ldrh	r2, [r3, #2]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
  if ((pSrc->numRows != pDst->numCols) ||
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d002      	beq.n	800aa16 <arm_mat_trans_f32+0x48>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800aa10:	23fd      	movs	r3, #253	@ 0xfd
 800aa12:	74fb      	strb	r3, [r7, #19]
 800aa14:	e023      	b.n	800aa5e <arm_mat_trans_f32+0x90>
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800aa20:	893b      	ldrh	r3, [r7, #8]
 800aa22:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800aa24:	e00d      	b.n	800aa42 <arm_mat_trans_f32+0x74>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	1d1a      	adds	r2, r3, #4
 800aa2a:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800aa32:	897b      	ldrh	r3, [r7, #10]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	6a3a      	ldr	r2, [r7, #32]
 800aa38:	4413      	add	r3, r2
 800aa3a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1ee      	bne.n	800aa26 <arm_mat_trans_f32+0x58>
      }

      i++;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1dd      	bne.n	800aa16 <arm_mat_trans_f32+0x48>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800aa5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	372c      	adds	r7, #44	@ 0x2c
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <memset>:
 800aa6e:	4402      	add	r2, r0
 800aa70:	4603      	mov	r3, r0
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d100      	bne.n	800aa78 <memset+0xa>
 800aa76:	4770      	bx	lr
 800aa78:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7c:	e7f9      	b.n	800aa72 <memset+0x4>
	...

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4d0d      	ldr	r5, [pc, #52]	@ (800aab8 <__libc_init_array+0x38>)
 800aa84:	4c0d      	ldr	r4, [pc, #52]	@ (800aabc <__libc_init_array+0x3c>)
 800aa86:	1b64      	subs	r4, r4, r5
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	4d0b      	ldr	r5, [pc, #44]	@ (800aac0 <__libc_init_array+0x40>)
 800aa92:	4c0c      	ldr	r4, [pc, #48]	@ (800aac4 <__libc_init_array+0x44>)
 800aa94:	f000 f826 	bl	800aae4 <_init>
 800aa98:	1b64      	subs	r4, r4, r5
 800aa9a:	10a4      	asrs	r4, r4, #2
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	42a6      	cmp	r6, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa8:	4798      	blx	r3
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab2:	4798      	blx	r3
 800aab4:	3601      	adds	r6, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800abc4 	.word	0x0800abc4
 800aabc:	0800abc4 	.word	0x0800abc4
 800aac0:	0800abc4 	.word	0x0800abc4
 800aac4:	0800abc8 	.word	0x0800abc8

0800aac8 <memcpy>:
 800aac8:	440a      	add	r2, r1
 800aaca:	4291      	cmp	r1, r2
 800aacc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad0:	d100      	bne.n	800aad4 <memcpy+0xc>
 800aad2:	4770      	bx	lr
 800aad4:	b510      	push	{r4, lr}
 800aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aada:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aade:	4291      	cmp	r1, r2
 800aae0:	d1f9      	bne.n	800aad6 <memcpy+0xe>
 800aae2:	bd10      	pop	{r4, pc}

0800aae4 <_init>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	bf00      	nop
 800aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaea:	bc08      	pop	{r3}
 800aaec:	469e      	mov	lr, r3
 800aaee:	4770      	bx	lr

0800aaf0 <_fini>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr

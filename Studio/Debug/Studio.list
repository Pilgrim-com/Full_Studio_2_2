
Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a730  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a908  0800a908  0000b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c8  0800a9c8  0000c2c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9d0  0800a9d0  0000c2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d0  0800a9d0  0000b9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9d4  0800a9d4  0000b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800a9d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  200002c8  0800aca0  0000c2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001604  0800aca0  0000c604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231ce  00000000  00000000  0000c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b01  00000000  00000000  0002f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00032fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131d  00000000  00000000  00034830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a10f  00000000  00000000  00035b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020612  00000000  00000000  0005fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117295  00000000  00000000  0008026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b44  00000000  00000000  00197548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0019e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c8 	.word	0x200002c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a8f0 	.word	0x0800a8f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002cc 	.word	0x200002cc
 8000214:	0800a8f0 	.word	0x0800a8f0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <KalmanInit>:
#include "Kalman.h"

// Initialize Kalman filter matrices and parameters
void KalmanInit(KALMAN *kalman, float32_t Matrix_A[16], float32_t Matrix_B[4], float32_t Q_scalar, float32_t R_scalar)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b0d0      	sub	sp, #320	@ 0x140
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dce:	6018      	str	r0, [r3, #0]
 8000dd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dd4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000dd8:	6019      	str	r1, [r3, #0]
 8000dda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000dde:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000de8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000dec:	ed83 0a00 	vstr	s0, [r3]
 8000df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000df4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000df8:	edc3 0a00 	vstr	s1, [r3]
	// set constance

	//Matrix A
	for (int i = 0; i < 16; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000e02:	e018      	b.n	8000e36 <KalmanInit+0x76>
	{
		kalman->A_f32[i] = Matrix_A[i];
 8000e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000e0e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000e2c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000e36:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	dde2      	ble.n	8000e04 <KalmanInit+0x44>
	}
	arm_mat_init_f32(&kalman->A, 4, 4, kalman->A_f32);
 8000e3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8000e4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2204      	movs	r2, #4
 8000e58:	2104      	movs	r1, #4
 8000e5a:	f009 fbbf 	bl	800a5dc <arm_mat_init_f32>
	//Matrix A transpose
	arm_mat_init_f32(&kalman->A_t, 4, 4, kalman->A_t_f32);
 8000e5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8000e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3340      	adds	r3, #64	@ 0x40
 8000e78:	2204      	movs	r2, #4
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	f009 fbae 	bl	800a5dc <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->A, &kalman->A_t);
 8000e80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8000e8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3388      	adds	r3, #136	@ 0x88
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	f009 fc9c 	bl	800a7da <arm_mat_trans_f32>

	//Matrix B
	for(int i = 0; i<4; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000ea8:	e019      	b.n	8000ede <KalmanInit+0x11e>
	{
		kalman->B_f32[i] = Matrix_B[i];
 8000eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000eb4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ec2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ec6:	6819      	ldr	r1, [r3, #0]
 8000ec8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000ecc:	3324      	adds	r3, #36	@ 0x24
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<4; i++)
 8000ed4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000ede:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	dde1      	ble.n	8000eaa <KalmanInit+0xea>
	}
	arm_mat_init_f32(&kalman->B, 4, 1, kalman->B_f32);
 8000ee6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8000ef4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ef8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3390      	adds	r3, #144	@ 0x90
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	f009 fb6a 	bl	800a5dc <arm_mat_init_f32>

	//Matrix G
	float32_t G_new[4] = {0, 0, 1, 0};
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f18:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	memcpy(kalman->G_f32, G_new, sizeof(G_new));
 8000f28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	33d8      	adds	r3, #216	@ 0xd8
 8000f34:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000f38:	2210      	movs	r2, #16
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f009 fcca 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->G, 4, 1, kalman->G_f32);
 8000f40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8000f4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	33d8      	adds	r3, #216	@ 0xd8
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	f009 fb3d 	bl	800a5dc <arm_mat_init_f32>

	//Matrix H
	float32_t H_new[4] = {1, 0, 0, 0};
 8000f62:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	memcpy(kalman->H_f32, H_new, sizeof(H_new));
 8000f82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	33f0      	adds	r3, #240	@ 0xf0
 8000f8e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000f92:	2210      	movs	r2, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f009 fc9d 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->H, 1, 4, kalman->H_f32);
 8000f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8000fa8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	33f0      	adds	r3, #240	@ 0xf0
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	f009 fb10 	bl	800a5dc <arm_mat_init_f32>

	//MatrixH traspose
	float32_t H_t_new[4] = {0, 0, 0, 0};
 8000fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
	memcpy(kalman->H_t_f32, H_t_new, sizeof(H_t_new));
 8000fca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000fd8:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000fdc:	2210      	movs	r2, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 fc78 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->H_t, 4,1,kalman->H_t_f32);
 8000fe4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8000ff2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001000:	2201      	movs	r2, #1
 8001002:	2104      	movs	r1, #4
 8001004:	f009 faea 	bl	800a5dc <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman->H, &kalman->H_t);
 8001008:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800100c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8001016:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800101a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f009 fbd7 	bl	800a7da <arm_mat_trans_f32>

	//Matrix I
	float32_t I_new[16] =
 800102c:	4bdb      	ldr	r3, [pc, #876]	@ (800139c <KalmanInit+0x5dc>)
 800102e:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001040:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0,
	};
	memcpy(kalman->I_f32, I_new, sizeof(I_new));
 8001048:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800104c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001056:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	4618      	mov	r0, r3
 800105e:	f009 fc39 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->I, 4, 4,kalman->I_f32);
 8001062:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f503 70b0 	add.w	r0, r3, #352	@ 0x160
 8001070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001074:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800107e:	2204      	movs	r2, #4
 8001080:	2104      	movs	r1, #4
 8001082:	f009 faab 	bl	800a5dc <arm_mat_init_f32>

	//Measurement
	float32_t Z_new[1] = {0};
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	memcpy(kalman->Z_f32, Z_new, sizeof(Z_new));
 800108e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001092:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800109c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80010a0:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 80010a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 80010b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010be:	2201      	movs	r2, #1
 80010c0:	2101      	movs	r1, #1
 80010c2:	f009 fa8b 	bl	800a5dc <arm_mat_init_f32>

	//Matrix X
	float32_t X_init[4] = { 0 };
 80010c6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
	memcpy(kalman->X_f32, X_init, sizeof(X_init));
 80010d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80010e2:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 80010e6:	2210      	movs	r2, #16
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fbf3 	bl	800a8d4 <memcpy>
	memcpy(kalman->X_pred_f32, X_init, sizeof(X_init));
 80010ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80010fc:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001100:	2210      	movs	r2, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f009 fbe6 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->X, 4, 1, kalman->X_f32);
 8001108:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800110c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 8001116:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800111a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	f009 fa58 	bl	800a5dc <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->X_pred, 4, 1, kalman->X_pred_f32);
 800112c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f503 70ce 	add.w	r0, r3, #412	@ 0x19c
 800113a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800113e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	f009 fa46 	bl	800a5dc <arm_mat_init_f32>

	//Matrix P
	float32_t P_init[16] = {
 8001150:	4b93      	ldr	r3, [pc, #588]	@ (80013a0 <KalmanInit+0x5e0>)
 8001152:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001156:	461d      	mov	r5, r3
 8001158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    100.0, 0.0, 0.0, 0.0,
	    0.0, 100.0, 0.0, 0.0,
	    0.0, 0.0, 100.0, 0.0,
	    0.0, 0.0, 0.0, 100.0
	};
	memcpy(kalman->P_f32, P_init, sizeof(P_init));
 800116c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001170:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800117a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	4618      	mov	r0, r3
 8001182:	f009 fba7 	bl	800a8d4 <memcpy>
	memcpy(kalman->P_pred_f32, P_init, sizeof(P_init));
 8001186:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800118a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8001194:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001198:	2240      	movs	r2, #64	@ 0x40
 800119a:	4618      	mov	r0, r3
 800119c:	f009 fb9a 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 80011a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 80011ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80011bc:	2204      	movs	r2, #4
 80011be:	2104      	movs	r1, #4
 80011c0:	f009 fa0c 	bl	800a5dc <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->P_pred, 4, 4, kalman->P_pred_f32);
 80011c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 80011d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80011e0:	2204      	movs	r2, #4
 80011e2:	2104      	movs	r1, #4
 80011e4:	f009 f9fa 	bl	800a5dc <arm_mat_init_f32>

	//Matrix K (kalman gain)
	float32_t K_new[4] = {0};
 80011e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
	memcpy(kalman->K_f32, K_new, sizeof(K_new));
 80011f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8001204:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001208:	2210      	movs	r2, #16
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fb62 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->K, 4, 1, kalman->K_f32);
 8001210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001214:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800121e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001222:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800122c:	2201      	movs	r2, #1
 800122e:	2104      	movs	r1, #4
 8001230:	f009 f9d4 	bl	800a5dc <arm_mat_init_f32>

	//Matrix Q
	float32_t Q_new[16] =
 8001234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001238:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800123c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001240:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800124c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800125a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001268:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001276:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001284:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001288:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800128c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001298:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
 80012a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
 80012b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
 80012be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80012cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012d4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80012d8:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
 80012e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80012fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001300:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
 800130a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800130e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	639a      	str	r2, [r3, #56]	@ 0x38
 8001318:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800131c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001320:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001324:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
			Q_scalar, 0.0, 0.0, 0.0,
			0.0, Q_scalar, 0.0, 0.0,
			0.0, 0.0, Q_scalar, 0.0,
			0.0, 0.0, 0.0, Q_scalar
	};
	memcpy(kalman->Q_f32, Q_new, sizeof(Q_new));
 800132c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800133a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800133e:	2240      	movs	r2, #64	@ 0x40
 8001340:	4618      	mov	r0, r3
 8001342:	f009 fac7 	bl	800a8d4 <memcpy>
	arm_mat_init_f32(&kalman->Q, 4, 4, kalman->Q_f32);
 8001346:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 8001354:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001358:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001362:	2204      	movs	r2, #4
 8001364:	2104      	movs	r1, #4
 8001366:	f009 f939 	bl	800a5dc <arm_mat_init_f32>

	//MatrixR
	float32_t R_new[1] = {R_scalar};
 800136a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001372:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001376:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	601a      	str	r2, [r3, #0]
	memcpy(kalman->R_f32, R_new, sizeof(R_new));
 800137e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800138c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001390:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e004      	b.n	80013a4 <KalmanInit+0x5e4>
 800139a:	bf00      	nop
 800139c:	0800a908 	.word	0x0800a908
 80013a0:	0800a948 	.word	0x0800a948
	arm_mat_init_f32(&kalman->R, 1, 1, kalman->R_f32);
 80013a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80013b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80013c0:	2201      	movs	r2, #1
 80013c2:	2101      	movs	r1, #1
 80013c4:	f009 f90a 	bl	800a5dc <arm_mat_init_f32>

	//Matrix of contol input
	float32_t U_new[1] = {0.0};
 80013c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	memcpy(kalman->U_f32, U_new, sizeof(U_new));
 80013d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80013e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013e8:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 80013f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80013fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800140c:	2201      	movs	r2, #1
 800140e:	2101      	movs	r1, #1
 8001410:	f009 f8e4 	bl	800a5dc <arm_mat_init_f32>

}
 8001414:	bf00      	nop
 8001416:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop

08001420 <KalmanPrediction>:

// Prediction Step
void KalmanPrediction(KALMAN *kalman, float32_t control_input)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ac      	sub	sp, #176	@ 0xb0
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	ed87 0a00 	vstr	s0, [r7]
    // Update control input U
    kalman->U_f32[0] = control_input;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
    arm_mat_init_f32(&kalman->U, 1, 1, kalman->U_f32);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001440:	2201      	movs	r2, #1
 8001442:	2101      	movs	r1, #1
 8001444:	f009 f8ca 	bl	800a5dc <arm_mat_init_f32>
    // Temporary matrices for intermediate results
    arm_matrix_instance_f32 temp1, temp2, temp3;
    float32_t temp1_data[4], temp2_data[16], temp3_data[16];

    // Step 1: X_pred = A * X + B * U
    arm_mat_init_f32(&temp1, 4, 1, temp1_data);
 8001448:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800144c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001450:	2201      	movs	r2, #1
 8001452:	2104      	movs	r1, #4
 8001454:	f009 f8c2 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->X, &temp1);  // temp1 = A * X
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001464:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001468:	4619      	mov	r1, r3
 800146a:	f009 f8cf 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kalman->B, &kalman->U, &kalman->X_pred);  // X_pred = B * U
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 7138 	add.w	r1, r3, #736	@ 0x2e0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8001480:	461a      	mov	r2, r3
 8001482:	f009 f8c3 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp1, &kalman->X_pred, &kalman->X_pred);  // X_pred = A*X + B*U
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f503 71ce 	add.w	r1, r3, #412	@ 0x19c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8001492:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001496:	4618      	mov	r0, r3
 8001498:	f009 f84a 	bl	800a530 <arm_mat_add_f32>

    // Step 2: P_pred = A * P * A^T + Q
    arm_mat_init_f32(&temp2, 4, 4, temp2_data);
 800149c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014a0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80014a4:	2204      	movs	r2, #4
 80014a6:	2104      	movs	r1, #4
 80014a8:	f009 f898 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, 4, 4, temp3_data);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80014b4:	2204      	movs	r2, #4
 80014b6:	2104      	movs	r1, #4
 80014b8:	f009 f890 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->A, &kalman->P, &temp2);  // temp1 = A * P
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80014c8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80014cc:	4619      	mov	r1, r3
 80014ce:	f009 f89d 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp2, &kalman->A_t, &temp3);    // temp2 = A * P * A^T
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 80014d8:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80014dc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f009 f893 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kalman->Q, &kalman->P_pred);  // P_pred = A*P*A^T + Q
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f503 7123 	add.w	r1, r3, #652	@ 0x28c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 80014f2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 f81a 	bl	800a530 <arm_mat_add_f32>

    // after computing P_pred …
    memcpy(kalman->P_f32,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
           kalman->P_pred_f32,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
    memcpy(kalman->P_f32,
 8001508:	2240      	movs	r2, #64	@ 0x40
 800150a:	4619      	mov	r1, r3
 800150c:	f009 f9e2 	bl	800a8d4 <memcpy>
           16 * sizeof(float32_t));
    arm_mat_init_f32(&kalman->P, 4, 4, kalman->P_f32);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800151c:	2204      	movs	r2, #4
 800151e:	2104      	movs	r1, #4
 8001520:	f009 f85c 	bl	800a5dc <arm_mat_init_f32>
}
 8001524:	bf00      	nop
 8001526:	37b0      	adds	r7, #176	@ 0xb0
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <KalmanUpdate>:

// Update Step
void KalmanUpdate(KALMAN *kalman, double measurement)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0d8      	sub	sp, #352	@ 0x160
 8001530:	af00      	add	r7, sp, #0
 8001532:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001536:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	463b      	mov	r3, r7
 800153e:	ed83 0b00 	vstr	d0, [r3]
    // Update measurement Z
    kalman->Z_f32[0] = measurement;
 8001542:	463b      	mov	r3, r7
 8001544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001548:	f7ff fa54 	bl	80009f4 <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
 800154e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001552:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    arm_mat_init_f32(&kalman->Z, 1, 1, kalman->Z_f32);
 800155c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001560:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 800156a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800156e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001578:	2201      	movs	r2, #1
 800157a:	2101      	movs	r1, #1
 800157c:	f009 f82e 	bl	800a5dc <arm_mat_init_f32>
    float32_t temp1_data[4], temp2_data[16], temp3_data[4], temp4_data[1], temp5_data[1], temp6_data[4], temp7_data[16], temp8_data[16];

    // Step 1: Compute Kalman Gain K = P_pred * H^T * (H * P_pred * H^T + R)^-1T

    // Compute S = H * P_pred * H^T + R
    arm_mat_init_f32(&temp1, 1, 4, temp1_data);
 8001580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001584:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8001588:	2204      	movs	r2, #4
 800158a:	2101      	movs	r1, #1
 800158c:	f009 f826 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, 1, 1, temp2_data);
 8001590:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001594:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001598:	2201      	movs	r2, #1
 800159a:	2101      	movs	r1, #1
 800159c:	f009 f81e 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->H, &kalman->P_pred, &temp1);  // temp1 = H * P_pred
 80015a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015a4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80015bc:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80015c0:	4619      	mov	r1, r3
 80015c2:	f009 f823 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp1, &kalman->H_t, &temp2);                // temp2 = H * P_pred * H^T
 80015c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 718c 	add.w	r1, r3, #280	@ 0x118
 80015d4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80015d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80015dc:	4618      	mov	r0, r3
 80015de:	f009 f815 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp2, &kalman->R, &temp2);           // temp2 = S = H*P_pred*H^T + R
 80015e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 7135 	add.w	r1, r3, #724	@ 0x2d4
 80015f0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80015f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015f8:	4618      	mov	r0, r3
 80015fa:	f008 ff99 	bl	800a530 <arm_mat_add_f32>

    // Compute K = P_pred * H^T * inv(S)
    float s = temp2_data[0];
 80015fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001602:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    float s_inv = 1.0f / s;
 8001606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800160a:	ed97 7a57 	vldr	s14, [r7, #348]	@ 0x15c
 800160e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001612:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158
    float32_t S_inv_data[1] = {s_inv};
 8001616:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800161a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800161e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001622:	601a      	str	r2, [r3, #0]
    arm_matrix_instance_f32 S_inv;
    arm_mat_init_f32(&S_inv, 1, 1, S_inv_data);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	f107 0014 	add.w	r0, r7, #20
 800162c:	2201      	movs	r2, #1
 800162e:	2101      	movs	r1, #1
 8001630:	f008 ffd4 	bl	800a5dc <arm_mat_init_f32>


    arm_mat_init_f32(&temp3, 4, 1, temp3_data);
 8001634:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001638:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800163c:	2201      	movs	r2, #1
 800163e:	2104      	movs	r1, #4
 8001640:	f008 ffcc 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->P_pred, &kalman->H_t, &temp3);  // temp3 = P_pred * H^T
 8001644:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001648:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 700b 	add.w	r0, r3, #556	@ 0x22c
 8001652:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001656:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001660:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001664:	4619      	mov	r1, r3
 8001666:	f008 ffd1 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp3, &S_inv, &kalman->K);     // K = P_pred * H^T * inv(S)
 800166a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800166e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 7211 	add.w	r2, r3, #580	@ 0x244
 8001678:	f107 0114 	add.w	r1, r7, #20
 800167c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001680:	4618      	mov	r0, r3
 8001682:	f008 ffc3 	bl	800a60c <arm_mat_mult_f32>

    // Step 2: Update state X = X_pred + K * (Z - H * X_pred)
    arm_mat_init_f32(&temp4, 1, 1, temp4_data);
 8001686:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800168a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800168e:	2201      	movs	r2, #1
 8001690:	2101      	movs	r1, #1
 8001692:	f008 ffa3 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, 1, 1, temp5_data);
 8001696:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800169a:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800169e:	2201      	movs	r2, #1
 80016a0:	2101      	movs	r1, #1
 80016a2:	f008 ff9b 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, 4, 1, temp6_data);
 80016a6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80016aa:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80016ae:	2201      	movs	r2, #1
 80016b0:	2104      	movs	r1, #4
 80016b2:	f008 ff93 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->H, &kalman->X_pred, &temp4);  // temp4 = H * X_pred
 80016b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80016c4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016c8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80016d2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80016d6:	4619      	mov	r1, r3
 80016d8:	f008 ff98 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kalman->Z, &temp4, &temp5);           // temp5 = Z - H * X_pred
 80016dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016e0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80016ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80016ee:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80016f2:	4618      	mov	r0, r3
 80016f4:	f009 f81b 	bl	800a72e <arm_mat_sub_f32>
    arm_mat_mult_f32(&kalman->K, &temp5, &temp6);          // temp6 = K * (Z - H * X_pred)
 80016f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80016fc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8001706:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800170a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800170e:	4618      	mov	r0, r3
 8001710:	f008 ff7c 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_add_f32(&kalman->X_pred, &temp6, &kalman->X);   // X = X_pred + K*(Z - H*X_pred)
 8001714:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001718:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 70ce 	add.w	r0, r3, #412	@ 0x19c
 8001722:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001726:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 72ca 	add.w	r2, r3, #404	@ 0x194
 8001730:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001734:	4619      	mov	r1, r3
 8001736:	f008 fefb 	bl	800a530 <arm_mat_add_f32>

    // Step 3: Update covariance P = (I - K * H) * P_pred
    arm_mat_init_f32(&temp7, 4, 4, temp7_data);
 800173a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800173e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001742:	2204      	movs	r2, #4
 8001744:	2104      	movs	r1, #4
 8001746:	f008 ff49 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, 4, 4, temp8_data);
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001752:	2204      	movs	r2, #4
 8001754:	2104      	movs	r1, #4
 8001756:	f008 ff41 	bl	800a5dc <arm_mat_init_f32>
    arm_mat_mult_f32(&kalman->K, &kalman->H, &temp7);  // temp7 = K * H
 800175a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800175e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001768:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800176c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001776:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800177a:	4619      	mov	r1, r3
 800177c:	f008 ff46 	bl	800a60c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kalman->I, &temp7, &temp8);       // temp8 = I - K * H
 8001780:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001784:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800178e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001792:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001796:	4618      	mov	r0, r3
 8001798:	f008 ffc9 	bl	800a72e <arm_mat_sub_f32>
    arm_mat_mult_f32(&temp8, &kalman->P_pred, &kalman->P);  // P = (I - K*H) * P_pred
 800179c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 710b 	add.w	r1, r3, #556	@ 0x22c
 80017aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 7209 	add.w	r2, r3, #548	@ 0x224
 80017b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 ff25 	bl	800a60c <arm_mat_mult_f32>
}
 80017c2:	bf00      	nop
 80017c4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <modbus_1t5_Timeout+0x3c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <modbus_1t5_Timeout+0x3c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <modbus_1t5_Timeout+0x3c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <modbus_1t5_Timeout+0x3c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200002e4 	.word	0x200002e4

0800180c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <modbus_3t5_Timeout+0x1c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	755a      	strb	r2, [r3, #21]

}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	200002e4 	.word	0x200002e4

0800182c <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f007 fd21 	bl	800927c <HAL_UART_GetError>
 800183a:	4603      	mov	r3, r0
 800183c:	2b20      	cmp	r3, #32
 800183e:	d101      	bne.n	8001844 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001840:	f7ff ffc4 	bl	80017cc <modbus_1t5_Timeout>

	}
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001856:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <Modbus_init+0xa0>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <Modbus_init+0xa0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <Modbus_init+0xa4>)
 800186a:	210e      	movs	r1, #14
 800186c:	4618      	mov	r0, r3
 800186e:	f005 ff29 	bl	80076c4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2110      	movs	r1, #16
 8001878:	4618      	mov	r0, r3
 800187a:	f007 fca9 	bl	80091d0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4618      	mov	r0, r3
 8001884:	f007 fcc0 	bl	8009208 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <Modbus_init+0xa8>)
 800188e:	2104      	movs	r1, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f006 ff67 	bl	8008764 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <Modbus_init+0xa0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <Modbus_init+0xa0>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <Modbus_init+0xa0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80018a8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80018ac:	4413      	add	r3, r2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018b4:	4619      	mov	r1, r3
 80018b6:	f007 f88f 	bl	80089d8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <Modbus_init+0xa0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10c      	bne.n	80018e4 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <Modbus_init+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fec9 	bl	8006668 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <Modbus_init+0xa0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 f922 	bl	8006b28 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002e4 	.word	0x200002e4
 80018f0:	0800180d 	.word	0x0800180d
 80018f4:	0800182d 	.word	0x0800182d

080018f8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001904:	23ff      	movs	r3, #255	@ 0xff
 8001906:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001908:	23ff      	movs	r3, #255	@ 0xff
 800190a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800190c:	e013      	b.n	8001936 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	4053      	eors	r3, r2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800191e:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <CRC16+0x68>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	4053      	eors	r3, r2
 800192a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <CRC16+0x6c>)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	803a      	strh	r2, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e6      	bne.n	800190e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	b21b      	sxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21b      	sxth	r3, r3
 8001950:	b29b      	uxth	r3, r3
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000100 	.word	0x20000100
 8001964:	20000000 	.word	0x20000000

08001968 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800196e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	7ddb      	ldrb	r3, [r3, #23]
 8001974:	3b01      	subs	r3, #1
 8001976:	2b03      	cmp	r3, #3
 8001978:	d80a      	bhi.n	8001990 <Modbus_Protocal_Worker+0x28>
 800197a:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <Modbus_Protocal_Worker+0x18>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	0800199b 	.word	0x0800199b
 8001984:	08001b2f 	.word	0x08001b2f
 8001988:	08001a27 	.word	0x08001a27
 800198c:	08001a6b 	.word	0x08001a6b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001990:	4b75      	ldr	r3, [pc, #468]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	75da      	strb	r2, [r3, #23]
		break;
 8001998:	e0e1      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800199a:	4b73      	ldr	r3, [pc, #460]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80019a6:	4b70      	ldr	r3, [pc, #448]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80019ae:	f000 f9cd 	bl	8001d4c <Modbus_Emission>
 80019b2:	e018      	b.n	80019e6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80019b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80019be:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d00b      	beq.n	80019e6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80019ce:	4b66      	ldr	r3, [pc, #408]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80019d6:	4b64      	ldr	r3, [pc, #400]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80019de:	4b62      	ldr	r3, [pc, #392]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2203      	movs	r2, #3
 80019e4:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80019e6:	4b60      	ldr	r3, [pc, #384]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 80ad 	bne.w	8001b50 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80019f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a00:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001a06:	4b58      	ldr	r3, [pc, #352]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a12:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001a16:	4413      	add	r3, r2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f006 ffda 	bl	80089d8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001a24:	e094      	b.n	8001b50 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a26:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	7d1b      	ldrb	r3, [r3, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8091 	beq.w	8001b54 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a32:	4b4d      	ldr	r3, [pc, #308]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	22fe      	movs	r2, #254	@ 0xfe
 8001a38:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001a44:	4b48      	ldr	r3, [pc, #288]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001a54:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a56:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a58:	1a8a      	subs	r2, r1, r2
 8001a5a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001a5c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001a60:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2204      	movs	r2, #4
 8001a66:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001a68:	e074      	b.n	8001b54 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001a72:	f113 0f02 	cmn.w	r3, #2
 8001a76:	d150      	bne.n	8001b1a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001a78:	4b3b      	ldr	r3, [pc, #236]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001a88:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001a90:	3b02      	subs	r3, #2
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7ff ff2f 	bl	80018f8 <CRC16>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001a9e:	793a      	ldrb	r2, [r7, #4]
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001aac:	3b02      	subs	r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d10c      	bne.n	8001ad2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001ab8:	797a      	ldrb	r2, [r7, #5]
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d004      	beq.n	8001adc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	22ff      	movs	r2, #255	@ 0xff
 8001ad8:	759a      	strb	r2, [r3, #22]
				break;
 8001ada:	e040      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d113      	bne.n	8001b16 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001afe:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b08:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f008 fee2 	bl	800a8d4 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b10:	f000 f904 	bl	8001d1c <Modbus_frame_response>
 8001b14:	e001      	b.n	8001b1a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b16:	bf00      	nop
					}
		break;


	}
}
 8001b18:	e021      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	7d5b      	ldrb	r3, [r3, #21]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d019      	beq.n	8001b58 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	75da      	strb	r2, [r3, #23]
		break;
 8001b2c:	e014      	b.n	8001b58 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d10f      	bne.n	8001b5c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <Modbus_Protocal_Worker+0x200>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	75da      	strb	r2, [r3, #23]
		break;
 8001b4e:	e005      	b.n	8001b5c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001b50:	bf00      	nop
 8001b52:	e004      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b54:	bf00      	nop
 8001b56:	e002      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b5c:	bf00      	nop
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002e4 	.word	0x200002e4

08001b6c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	7e5b      	ldrb	r3, [r3, #25]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	7e92      	ldrb	r2, [r2, #26]
 8001b82:	4413      	add	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d903      	bls.n	8001b9a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001b92:	2002      	movs	r0, #2
 8001b94:	f000 f8a0 	bl	8001cd8 <ModbusErrorReply>
			 return;
 8001b98:	e023      	b.n	8001be2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	7ed2      	ldrb	r2, [r2, #27]
 8001bac:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	440b      	add	r3, r1
 8001bbe:	7f12      	ldrb	r2, [r2, #28]
 8001bc0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f008 fe7e 	bl	800a8d4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <modbusWrite1Register+0x7c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2205      	movs	r2, #5
 8001bde:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002e4 	.word	0x200002e4

08001bec <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	7edb      	ldrb	r3, [r3, #27]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4a35      	ldr	r2, [pc, #212]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	7f12      	ldrb	r2, [r2, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	7e5b      	ldrb	r3, [r3, #25]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4a30      	ldr	r2, [pc, #192]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	7e92      	ldrb	r2, [r2, #26]
 8001c16:	4413      	add	r3, r2
 8001c18:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <modbusRead1Register+0x3a>
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c24:	d903      	bls.n	8001c2e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f856 	bl	8001cd8 <ModbusErrorReply>
		 return;
 8001c2c:	e04e      	b.n	8001ccc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c2e:	88ba      	ldrh	r2, [r7, #4]
 8001c30:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d808      	bhi.n	8001c4c <modbusRead1Register+0x60>
 8001c3a:	88ba      	ldrh	r2, [r7, #4]
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	4413      	add	r3, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d903      	bls.n	8001c54 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f000 f843 	bl	8001cd8 <ModbusErrorReply>
		 return;
 8001c52:	e03b      	b.n	8001ccc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	0052      	lsls	r2, r2, #1
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001c6e:	2400      	movs	r4, #0
 8001c70:	e020      	b.n	8001cb4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	4423      	add	r3, r4
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	18d1      	adds	r1, r2, r3
 8001c80:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	1c63      	adds	r3, r4, #1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	7849      	ldrb	r1, [r1, #1]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	4423      	add	r3, r4
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	18d1      	adds	r1, r2, r3
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	0063      	lsls	r3, r4, #1
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	7809      	ldrb	r1, [r1, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	460a      	mov	r2, r1
 8001cae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001cb2:	3401      	adds	r4, #1
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	dbdb      	blt.n	8001c72 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <modbusRead1Register+0xe8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200002e4 	.word	0x200002e4

08001cd8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <ModbusErrorReply+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	7e1a      	ldrb	r2, [r3, #24]
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <ModbusErrorReply+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <ModbusErrorReply+0x40>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <ModbusErrorReply+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	200002e4 	.word	0x200002e4

08001d1c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <Modbus_frame_response+0x2c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	7e1b      	ldrb	r3, [r3, #24]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d004      	beq.n	8001d34 <Modbus_frame_response+0x18>
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d105      	bne.n	8001d3a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d2e:	f7ff ff1d 	bl	8001b6c <modbusWrite1Register>
		break;
 8001d32:	e006      	b.n	8001d42 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d34:	f7ff ff5a 	bl	8001bec <modbusRead1Register>
		break;
 8001d38:	e003      	b.n	8001d42 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff ffcc 	bl	8001cd8 <ModbusErrorReply>
		break;
 8001d40:	bf00      	nop

	}
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002e4 	.word	0x200002e4

08001d4c <Modbus_Emission>:

void Modbus_Emission()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d15d      	bne.n	8001e1c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001d76:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001d80:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f008 fda3 	bl	800a8d4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3203      	adds	r2, #3
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001da4:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001db4:	3b02      	subs	r3, #2
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7ff fd9d 	bl	80018f8 <CRC16>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001dce:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001dd0:	7939      	ldrb	r1, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001dda:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001de6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001de8:	7979      	ldrb	r1, [r7, #5]
 8001dea:	4413      	add	r3, r2
 8001dec:	460a      	mov	r2, r1
 8001dee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d10d      	bne.n	8001e1c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e12:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e16:	461a      	mov	r2, r3
 8001e18:	f006 fd5e 	bl	80088d8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <Modbus_Emission+0xe8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	755a      	strb	r2, [r3, #21]

}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200002e4 	.word	0x200002e4

08001e38 <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e44:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	615a      	str	r2, [r3, #20]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6178      	str	r0, [r7, #20]
 8001e68:	6139      	str	r1, [r7, #16]
 8001e6a:	60fa      	str	r2, [r7, #12]
 8001e6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e70:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 8001eb4:	213c      	movs	r1, #60	@ 0x3c
 8001eb6:	6938      	ldr	r0, [r7, #16]
 8001eb8:	f004 ff78 	bl	8006dac <HAL_TIM_Encoder_Start>

}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	0000      	movs	r0, r0
	...

08001ec8 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0fd9      	lsrs	r1, r3, #31
 8001ef6:	440b      	add	r3, r1
 8001ef8:	105b      	asrs	r3, r3, #1
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dd07      	ble.n	8001f0e <QEIPosVelUpdate+0x46>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1a      	ldr	r2, [r3, #32]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	621a      	str	r2, [r3, #32]
 8001f0c:	e010      	b.n	8001f30 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	0fd9      	lsrs	r1, r3, #31
 8001f18:	440b      	add	r3, r1
 8001f1a:	105b      	asrs	r3, r3, #1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	da06      	bge.n	8001f30 <QEIPosVelUpdate+0x68>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7fe fab7 	bl	80004e0 <__aeabi_f2d>
 8001f72:	a323      	add	r3, pc, #140	@ (adr r3, 8002000 <QEIPosVelUpdate+0x138>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fb0a 	bl	8000590 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fd36 	bl	80009f4 <__aeabi_d2f>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fa8:	ee17 0a90 	vmov	r0, s15
 8001fac:	f7fe fa98 	bl	80004e0 <__aeabi_f2d>
 8001fb0:	a313      	add	r3, pc, #76	@ (adr r3, 8002000 <QEIPosVelUpdate+0x138>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe faeb 	bl	8000590 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4614      	mov	r4, r2
 8001fc0:	461d      	mov	r5, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fa78 	bl	80004bc <__aeabi_i2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fc06 	bl	80007e4 <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fd08 	bl	80009f4 <__aeabi_d2f>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb

08002008 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800200e:	f001 faa8 	bl	8003562 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002012:	f000 f8d3 	bl	80021bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002016:	f000 fc55 	bl	80028c4 <MX_GPIO_Init>
	MX_DMA_Init();
 800201a:	f000 fc21 	bl	8002860 <MX_DMA_Init>
	MX_TIM1_Init();
 800201e:	f000 f991 	bl	8002344 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002022:	f000 fa57 	bl	80024d4 <MX_TIM2_Init>
	MX_TIM4_Init();
 8002026:	f000 faf9 	bl	800261c <MX_TIM4_Init>
	MX_TIM5_Init();
 800202a:	f000 fb4d 	bl	80026c8 <MX_TIM5_Init>
	MX_TIM3_Init();
 800202e:	f000 fa9f 	bl	8002570 <MX_TIM3_Init>
	MX_ADC1_Init();
 8002032:	f000 f90f 	bl	8002254 <MX_ADC1_Init>
	MX_TIM16_Init();
 8002036:	f000 fb95 	bl	8002764 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 800203a:	f000 fbc3 	bl	80027c4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <main+0x128>)
 8002040:	4a3c      	ldr	r2, [pc, #240]	@ (8002134 <main+0x12c>)
 8002042:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8002044:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <main+0x128>)
 8002046:	4a3c      	ldr	r2, [pc, #240]	@ (8002138 <main+0x130>)
 8002048:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <main+0x128>)
 800204c:	2215      	movs	r2, #21
 800204e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8002050:	4b37      	ldr	r3, [pc, #220]	@ (8002130 <main+0x128>)
 8002052:	2246      	movs	r2, #70	@ 0x46
 8002054:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8002056:	4939      	ldr	r1, [pc, #228]	@ (800213c <main+0x134>)
 8002058:	4835      	ldr	r0, [pc, #212]	@ (8002130 <main+0x128>)
 800205a:	f7ff fbf7 	bl	800184c <Modbus_init>

	PID_POS.Kp = Kp_pos;
 800205e:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <main+0x138>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <main+0x13c>)
 8002064:	6193      	str	r3, [r2, #24]
	PID_POS.Ki = Ki_pos;
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <main+0x140>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <main+0x13c>)
 800206c:	61d3      	str	r3, [r2, #28]
	PID_POS.Kd = Kd_pos;
 800206e:	4b37      	ldr	r3, [pc, #220]	@ (800214c <main+0x144>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a34      	ldr	r2, [pc, #208]	@ (8002144 <main+0x13c>)
 8002074:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS, 0);
 8002076:	2100      	movs	r1, #0
 8002078:	4832      	ldr	r0, [pc, #200]	@ (8002144 <main+0x13c>)
 800207a:	f008 fa23 	bl	800a4c4 <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <main+0x148>)
 8002084:	2208      	movs	r2, #8
 8002086:	4933      	ldr	r1, [pc, #204]	@ (8002154 <main+0x14c>)
 8002088:	4833      	ldr	r0, [pc, #204]	@ (8002158 <main+0x150>)
 800208a:	f000 fddf 	bl	8002c4c <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 800208e:	2340      	movs	r3, #64	@ 0x40
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <main+0x148>)
 8002094:	2204      	movs	r2, #4
 8002096:	492f      	ldr	r1, [pc, #188]	@ (8002154 <main+0x14c>)
 8002098:	4830      	ldr	r0, [pc, #192]	@ (800215c <main+0x154>)
 800209a:	f000 fdd7 	bl	8002c4c <MotorInit>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 800209e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a2:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002160 <main+0x158>
 80020a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020aa:	492e      	ldr	r1, [pc, #184]	@ (8002164 <main+0x15c>)
 80020ac:	482e      	ldr	r0, [pc, #184]	@ (8002168 <main+0x160>)
 80020ae:	f7ff fed7 	bl	8001e60 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80020b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002160 <main+0x158>
 80020ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020be:	492b      	ldr	r1, [pc, #172]	@ (800216c <main+0x164>)
 80020c0:	482b      	ldr	r0, [pc, #172]	@ (8002170 <main+0x168>)
 80020c2:	f7ff fecd 	bl	8001e60 <QEIInit>

	PIDInit(&prismatic_pos_control, 340, -340);
 80020c6:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8002174 <main+0x16c>
 80020ca:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8002178 <main+0x170>
 80020ce:	482b      	ldr	r0, [pc, #172]	@ (800217c <main+0x174>)
 80020d0:	f7ff feb2 	bl	8001e38 <PIDInit>
	PIDInit(&prismatic_vel_control, 65535, -65535);
 80020d4:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8002180 <main+0x178>
 80020d8:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002184 <main+0x17c>
 80020dc:	482a      	ldr	r0, [pc, #168]	@ (8002188 <main+0x180>)
 80020de:	f7ff feab 	bl	8001e38 <PIDInit>

	KalmanInit(&prismatic_kalman, A_f32_prismatic, B_f32_prismatic, Q_prismatic,
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <main+0x184>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	4b29      	ldr	r3, [pc, #164]	@ (8002190 <main+0x188>)
 80020ea:	ed93 7a00 	vldr	s14, [r3]
 80020ee:	eef0 0a47 	vmov.f32	s1, s14
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <main+0x18c>)
 80020f8:	4927      	ldr	r1, [pc, #156]	@ (8002198 <main+0x190>)
 80020fa:	4828      	ldr	r0, [pc, #160]	@ (800219c <main+0x194>)
 80020fc:	f7fe fe60 	bl	8000dc0 <KalmanInit>
			R_prismatic);
	KalmanInit(&revolute_kalman, A_f32_revolute, B_f32_revolute, Q_revolute,
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <main+0x198>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <main+0x19c>)
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	eef0 0a47 	vmov.f32	s1, s14
 8002110:	eeb0 0a67 	vmov.f32	s0, s15
 8002114:	4a24      	ldr	r2, [pc, #144]	@ (80021a8 <main+0x1a0>)
 8002116:	4925      	ldr	r1, [pc, #148]	@ (80021ac <main+0x1a4>)
 8002118:	4825      	ldr	r0, [pc, #148]	@ (80021b0 <main+0x1a8>)
 800211a:	f7fe fe51 	bl	8000dc0 <KalmanInit>
			R_revolute);
	HAL_TIM_Base_Start_IT(&htim5);
 800211e:	4825      	ldr	r0, [pc, #148]	@ (80021b4 <main+0x1ac>)
 8002120:	f004 faa2 	bl	8006668 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8002124:	4824      	ldr	r0, [pc, #144]	@ (80021b8 <main+0x1b0>)
 8002126:	f004 fa9f 	bl	8006668 <HAL_TIM_Base_Start_IT>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Modbus_Protocal_Worker();
 800212a:	f7ff fc1d 	bl	8001968 <Modbus_Protocal_Worker>
 800212e:	e7fc      	b.n	800212a <main+0x122>
 8002130:	200009a8 	.word	0x200009a8
 8002134:	2000081c 	.word	0x2000081c
 8002138:	20000750 	.word	0x20000750
 800213c:	20000e80 	.word	0x20000e80
 8002140:	20000200 	.word	0x20000200
 8002144:	20000f44 	.word	0x20000f44
 8002148:	20000204 	.word	0x20000204
 800214c:	20000208 	.word	0x20000208
 8002150:	48000800 	.word	0x48000800
 8002154:	20000354 	.word	0x20000354
 8002158:	20000f0c 	.word	0x20000f0c
 800215c:	20000f28 	.word	0x20000f28
 8002160:	447a0000 	.word	0x447a0000
 8002164:	200005b8 	.word	0x200005b8
 8002168:	20000f70 	.word	0x20000f70
 800216c:	200004ec 	.word	0x200004ec
 8002170:	200012d8 	.word	0x200012d8
 8002174:	c3aa0000 	.word	0xc3aa0000
 8002178:	43aa0000 	.word	0x43aa0000
 800217c:	20000fa0 	.word	0x20000fa0
 8002180:	c77fff00 	.word	0xc77fff00
 8002184:	477fff00 	.word	0x477fff00
 8002188:	20000fc0 	.word	0x20000fc0
 800218c:	2000025c 	.word	0x2000025c
 8002190:	20000260 	.word	0x20000260
 8002194:	2000024c 	.word	0x2000024c
 8002198:	2000020c 	.word	0x2000020c
 800219c:	20000fe0 	.word	0x20000fe0
 80021a0:	200002b4 	.word	0x200002b4
 80021a4:	200002b8 	.word	0x200002b8
 80021a8:	200002a4 	.word	0x200002a4
 80021ac:	20000264 	.word	0x20000264
 80021b0:	20001308 	.word	0x20001308
 80021b4:	20000684 	.word	0x20000684
 80021b8:	20000420 	.word	0x20000420

080021bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	@ 0x50
 80021c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	2238      	movs	r2, #56	@ 0x38
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f008 fb55 	bl	800a87a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021de:	2000      	movs	r0, #0
 80021e0:	f003 f93e 	bl	8005460 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ee:	2340      	movs	r3, #64	@ 0x40
 80021f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f2:	2302      	movs	r3, #2
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f6:	2302      	movs	r3, #2
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80021fa:	2304      	movs	r3, #4
 80021fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80021fe:	2355      	movs	r3, #85	@ 0x55
 8002200:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002202:	2302      	movs	r3, #2
 8002204:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002206:	2302      	movs	r3, #2
 8002208:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800220a:	2302      	movs	r3, #2
 800220c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800220e:	f107 0318 	add.w	r3, r7, #24
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f9d8 	bl	80055c8 <HAL_RCC_OscConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x66>
		Error_Handler();
 800221e:	f000 fd0f 	bl	8002c40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002222:	230f      	movs	r3, #15
 8002224:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002226:	2303      	movs	r3, #3
 8002228:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2104      	movs	r1, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fcd6 	bl	8005bec <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x8e>
		Error_Handler();
 8002246:	f000 fcfb 	bl	8002c40 <Error_Handler>
	}
}
 800224a:	bf00      	nop
 800224c:	3750      	adds	r7, #80	@ 0x50
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800225a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2220      	movs	r2, #32
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f008 fb04 	bl	800a87a <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002272:	4b32      	ldr	r3, [pc, #200]	@ (800233c <MX_ADC1_Init+0xe8>)
 8002274:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002278:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800227a:	4b30      	ldr	r3, [pc, #192]	@ (800233c <MX_ADC1_Init+0xe8>)
 800227c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002280:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002282:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <MX_ADC1_Init+0xe8>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002288:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <MX_ADC1_Init+0xe8>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800228e:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <MX_ADC1_Init+0xe8>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002294:	4b29      	ldr	r3, [pc, #164]	@ (800233c <MX_ADC1_Init+0xe8>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <MX_ADC1_Init+0xe8>)
 800229c:	2204      	movs	r2, #4
 800229e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80022a0:	4b26      	ldr	r3, [pc, #152]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c0:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022ce:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80022dc:	4817      	ldr	r0, [pc, #92]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022de:	f001 fb87 	bl	80039f0 <HAL_ADC_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0x98>
		Error_Handler();
 80022e8:	f000 fcaa 	bl	8002c40 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80022f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <MX_ADC1_Init+0xe8>)
 80022f8:	f002 f99c 	bl	8004634 <HAL_ADCEx_MultiModeConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8002302:	f000 fc9d 	bl	8002c40 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_ADC1_Init+0xec>)
 8002308:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800230a:	2306      	movs	r3, #6
 800230c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002312:	237f      	movs	r3, #127	@ 0x7f
 8002314:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002316:	2304      	movs	r3, #4
 8002318:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	@ (800233c <MX_ADC1_Init+0xe8>)
 8002324:	f001 fd20 	bl	8003d68 <HAL_ADC_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_ADC1_Init+0xde>
		Error_Handler();
 800232e:	f000 fc87 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3730      	adds	r7, #48	@ 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200002e8 	.word	0x200002e8
 8002340:	1d500080 	.word	0x1d500080

08002344 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b09c      	sub	sp, #112	@ 0x70
 8002348:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800234a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002358:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002364:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2234      	movs	r2, #52	@ 0x34
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f008 fa7b 	bl	800a87a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002384:	4b51      	ldr	r3, [pc, #324]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002386:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <MX_TIM1_Init+0x18c>)
 8002388:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 800238a:	4b50      	ldr	r3, [pc, #320]	@ (80024cc <MX_TIM1_Init+0x188>)
 800238c:	22a9      	movs	r2, #169	@ 0xa9
 800238e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b4e      	ldr	r3, [pc, #312]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8002396:	4b4d      	ldr	r3, [pc, #308]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002398:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800239c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80023a4:	4b49      	ldr	r3, [pc, #292]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023aa:	4b48      	ldr	r3, [pc, #288]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80023b0:	4846      	ldr	r0, [pc, #280]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023b2:	f004 f885 	bl	80064c0 <HAL_TIM_Base_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80023bc:	f000 fc40 	bl	8002c40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80023c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023ca:	4619      	mov	r1, r3
 80023cc:	483f      	ldr	r0, [pc, #252]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023ce:	f005 f809 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x98>
		Error_Handler();
 80023d8:	f000 fc32 	bl	8002c40 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80023dc:	483b      	ldr	r0, [pc, #236]	@ (80024cc <MX_TIM1_Init+0x188>)
 80023de:	f004 f9bb 	bl	8006758 <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0xa8>
		Error_Handler();
 80023e8:	f000 fc2a 	bl	8002c40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80023f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023fc:	4619      	mov	r1, r3
 80023fe:	4833      	ldr	r0, [pc, #204]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002400:	f005 ffd6 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800240a:	f000 fc19 	bl	8002c40 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240e:	2360      	movs	r3, #96	@ 0x60
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800242a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	4826      	ldr	r0, [pc, #152]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002434:	f004 fec2 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 800243e:	f000 fbff 	bl	8002c40 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002442:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002446:	2204      	movs	r2, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4820      	ldr	r0, [pc, #128]	@ (80024cc <MX_TIM1_Init+0x188>)
 800244c:	f004 feb6 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8002456:	f000 fbf3 	bl	8002c40 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800245a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800245e:	2208      	movs	r2, #8
 8002460:	4619      	mov	r1, r3
 8002462:	481a      	ldr	r0, [pc, #104]	@ (80024cc <MX_TIM1_Init+0x188>)
 8002464:	f004 feaa 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM1_Init+0x12e>
			!= HAL_OK) {
		Error_Handler();
 800246e:	f000 fbe7 	bl	8002c40 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800248a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002498:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4807      	ldr	r0, [pc, #28]	@ (80024cc <MX_TIM1_Init+0x188>)
 80024b0:	f006 f814 	bl	80084dc <HAL_TIMEx_ConfigBreakDeadTime>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 80024ba:	f000 fbc1 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80024be:	4803      	ldr	r0, [pc, #12]	@ (80024cc <MX_TIM1_Init+0x188>)
 80024c0:	f000 fe82 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 80024c4:	bf00      	nop
 80024c6:	3770      	adds	r7, #112	@ 0x70
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000354 	.word	0x20000354
 80024d0:	40012c00 	.word	0x40012c00

080024d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <MX_TIM2_Init+0x98>)
 80024f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024f8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <MX_TIM2_Init+0x98>)
 80024fc:	22a9      	movs	r2, #169	@ 0xa9
 80024fe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <MX_TIM2_Init+0x98>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002506:	4b19      	ldr	r3, [pc, #100]	@ (800256c <MX_TIM2_Init+0x98>)
 8002508:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800250c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b17      	ldr	r3, [pc, #92]	@ (800256c <MX_TIM2_Init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <MX_TIM2_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800251a:	4814      	ldr	r0, [pc, #80]	@ (800256c <MX_TIM2_Init+0x98>)
 800251c:	f003 ffd0 	bl	80064c0 <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM2_Init+0x56>
		Error_Handler();
 8002526:	f000 fb8b 	bl	8002c40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	4619      	mov	r1, r3
 8002536:	480d      	ldr	r0, [pc, #52]	@ (800256c <MX_TIM2_Init+0x98>)
 8002538:	f004 ff54 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM2_Init+0x72>
		Error_Handler();
 8002542:	f000 fb7d 	bl	8002c40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4806      	ldr	r0, [pc, #24]	@ (800256c <MX_TIM2_Init+0x98>)
 8002554:	f005 ff2c 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800255e:	f000 fb6f 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000420 	.word	0x20000420

08002570 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	@ 0x30
 8002574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	2224      	movs	r2, #36	@ 0x24
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f008 f97b 	bl	800a87a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800258e:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <MX_TIM3_Init+0xa4>)
 8002590:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <MX_TIM3_Init+0xa8>)
 8002592:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <MX_TIM3_Init+0xa4>)
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <MX_TIM3_Init+0xa4>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <MX_TIM3_Init+0xa4>)
 80025a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025a6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <MX_TIM3_Init+0xa4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <MX_TIM3_Init+0xa4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025b4:	2303      	movs	r3, #3
 80025b6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025bc:	2301      	movs	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_TIM3_Init+0xa4>)
 80025e0:	f004 fb30 	bl	8006c44 <HAL_TIM_Encoder_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0x7e>
		Error_Handler();
 80025ea:	f000 fb29 	bl	8002c40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80025f6:	463b      	mov	r3, r7
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <MX_TIM3_Init+0xa4>)
 80025fc:	f005 fed8 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002606:	f000 fb1b 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3730      	adds	r7, #48	@ 0x30
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200004ec 	.word	0x200004ec
 8002618:	40000400 	.word	0x40000400

0800261c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f008 f925 	bl	800a87a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800263a:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 800263c:	4a21      	ldr	r2, [pc, #132]	@ (80026c4 <MX_TIM4_Init+0xa8>)
 800263e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800264c:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 800264e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002652:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002660:	2303      	movs	r3, #3
 8002662:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 800268c:	f004 fada 	bl	8006c44 <HAL_TIM_Encoder_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM4_Init+0x7e>
		Error_Handler();
 8002696:	f000 fad3 	bl	8002c40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80026a2:	463b      	mov	r3, r7
 80026a4:	4619      	mov	r1, r3
 80026a6:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <MX_TIM4_Init+0xa4>)
 80026a8:	f005 fe82 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80026b2:	f000 fac5 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	@ 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200005b8 	.word	0x200005b8
 80026c4:	40000800 	.word	0x40000800

080026c8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <MX_TIM5_Init+0x94>)
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <MX_TIM5_Init+0x98>)
 80026ea:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <MX_TIM5_Init+0x94>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <MX_TIM5_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <MX_TIM5_Init+0x94>)
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295
 80026fe:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <MX_TIM5_Init+0x94>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <MX_TIM5_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800270c:	4813      	ldr	r0, [pc, #76]	@ (800275c <MX_TIM5_Init+0x94>)
 800270e:	f003 fed7 	bl	80064c0 <HAL_TIM_Base_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM5_Init+0x54>
		Error_Handler();
 8002718:	f000 fa92 	bl	8002c40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002720:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	480c      	ldr	r0, [pc, #48]	@ (800275c <MX_TIM5_Init+0x94>)
 800272a:	f004 fe5b 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM5_Init+0x70>
		Error_Handler();
 8002734:	f000 fa84 	bl	8002c40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_TIM5_Init+0x94>)
 8002746:	f005 fe33 	bl	80083b0 <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002750:	f000 fa76 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000684 	.word	0x20000684
 8002760:	40000c00 	.word	0x40000c00

08002764 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <MX_TIM16_Init+0x58>)
 800276a:	4a15      	ldr	r2, [pc, #84]	@ (80027c0 <MX_TIM16_Init+0x5c>)
 800276c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002770:	22a9      	movs	r2, #169	@ 0xa9
 8002772:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_TIM16_Init+0x58>)
 800277c:	f240 4279 	movw	r2, #1145	@ 0x479
 8002780:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_TIM16_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8002794:	4809      	ldr	r0, [pc, #36]	@ (80027bc <MX_TIM16_Init+0x58>)
 8002796:	f003 fe93 	bl	80064c0 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM16_Init+0x40>
		Error_Handler();
 80027a0:	f000 fa4e 	bl	8002c40 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 80027a4:	2108      	movs	r1, #8
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_TIM16_Init+0x58>)
 80027a8:	f004 f956 	bl	8006a58 <HAL_TIM_OnePulse_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM16_Init+0x52>
		Error_Handler();
 80027b2:	f000 fa45 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000750 	.word	0x20000750
 80027c0:	40014400 	.word	0x40014400

080027c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027c8:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027ca:	4a24      	ldr	r2, [pc, #144]	@ (800285c <MX_USART2_UART_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027d0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80027d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027dc:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80027e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002810:	4811      	ldr	r0, [pc, #68]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002812:	f005 ff47 	bl	80086a4 <HAL_UART_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 800281c:	f000 fa10 	bl	8002c40 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8002820:	2100      	movs	r1, #0
 8002822:	480d      	ldr	r0, [pc, #52]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002824:	f007 fd83 	bl	800a32e <HAL_UARTEx_SetTxFifoThreshold>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 800282e:	f000 fa07 	bl	8002c40 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002832:	2100      	movs	r1, #0
 8002834:	4808      	ldr	r0, [pc, #32]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002836:	f007 fdb8 	bl	800a3aa <HAL_UARTEx_SetRxFifoThreshold>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8002840:	f000 f9fe 	bl	8002c40 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002844:	4804      	ldr	r0, [pc, #16]	@ (8002858 <MX_USART2_UART_Init+0x94>)
 8002846:	f007 fd39 	bl	800a2bc <HAL_UARTEx_DisableFifoMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8002850:	f000 f9f6 	bl	8002c40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	2000081c 	.word	0x2000081c
 800285c:	40004400 	.word	0x40004400

08002860 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	4a15      	ldr	r2, [pc, #84]	@ (80028c0 <MX_DMA_Init+0x60>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6493      	str	r3, [r2, #72]	@ 0x48
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6493      	str	r3, [r2, #72]	@ 0x48
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <MX_DMA_Init+0x60>)
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	200b      	movs	r0, #11
 800289c:	f002 f8ad 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028a0:	200b      	movs	r0, #11
 80028a2:	f002 f8c4 	bl	8004a2e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	200c      	movs	r0, #12
 80028ac:	f002 f8a5 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028b0:	200c      	movs	r0, #12
 80028b2:	f002 f8bc 	bl	8004a2e <HAL_NVIC_EnableIRQ>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	4b59      	ldr	r3, [pc, #356]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	4a58      	ldr	r2, [pc, #352]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e6:	4b56      	ldr	r3, [pc, #344]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80028f2:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	4a52      	ldr	r2, [pc, #328]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fe:	4b50      	ldr	r3, [pc, #320]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	4a46      	ldr	r2, [pc, #280]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800292e:	4b44      	ldr	r3, [pc, #272]	@ (8002a40 <MX_GPIO_Init+0x17c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2120      	movs	r1, #32
 800293e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002942:	f002 fd43 	bl	80053cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8002946:	2200      	movs	r2, #0
 8002948:	21c0      	movs	r1, #192	@ 0xc0
 800294a:	483e      	ldr	r0, [pc, #248]	@ (8002a44 <MX_GPIO_Init+0x180>)
 800294c:	f002 fd3e 	bl	80053cc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin PC0 PC3 */
	GPIO_InitStruct.Pin = B1_Pin | GPIO_PIN_0 | GPIO_PIN_3;
 8002950:	f242 0309 	movw	r3, #8201	@ 0x2009
 8002954:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002956:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800295a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4837      	ldr	r0, [pc, #220]	@ (8002a44 <MX_GPIO_Init+0x180>)
 8002968:	f002 fbae 	bl	80050c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800296c:	2303      	movs	r3, #3
 800296e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002974:	2301      	movs	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002982:	f002 fba1 	bl	80050c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002986:	2320      	movs	r3, #32
 8002988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a0:	f002 fb92 	bl	80050c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029a4:	2310      	movs	r3, #16
 80029a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4822      	ldr	r0, [pc, #136]	@ (8002a44 <MX_GPIO_Init+0x180>)
 80029ba:	f002 fb85 	bl	80050c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80029be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	481c      	ldr	r0, [pc, #112]	@ (8002a48 <MX_GPIO_Init+0x184>)
 80029d6:	f002 fb77 	bl	80050c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80029da:	23c0      	movs	r3, #192	@ 0xc0
 80029dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4814      	ldr	r0, [pc, #80]	@ (8002a44 <MX_GPIO_Init+0x180>)
 80029f2:	f002 fb69 	bl	80050c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2006      	movs	r0, #6
 80029fc:	f001 fffd 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a00:	2006      	movs	r0, #6
 8002a02:	f002 f814 	bl	8004a2e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2009      	movs	r0, #9
 8002a0c:	f001 fff5 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a10:	2009      	movs	r0, #9
 8002a12:	f002 f80c 	bl	8004a2e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	200a      	movs	r0, #10
 8002a1c:	f001 ffed 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f002 f804 	bl	8004a2e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2028      	movs	r0, #40	@ 0x28
 8002a2c:	f001 ffe5 	bl	80049fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a30:	2028      	movs	r0, #40	@ 0x28
 8002a32:	f001 fffc 	bl	8004a2e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	@ 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000400 	.word	0x48000400

08002a4c <HAL_GPIO_EXTI_Callback>:
void ball_screw_converter() {
	ball_screw_pos = (prismatic_kalman_rads * (16.00 / (2.0 * M_PI)));
	ball_screw_vel = (prismatic_kalman_radps / 2.0 * M_PI) * 16.00;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d10f      	bne.n	8002a7e <HAL_GPIO_EXTI_Callback+0x32>
		tim2_counter = 0;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
		burst_mode = 1;
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <HAL_GPIO_EXTI_Callback+0x50>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
		flag = (flag == 0) ? 1 : 0;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8002a7c:	701a      	strb	r2, [r3, #0]
//		prismatic_encoder.revs = 0;
//		prismatic_encoder.rads = 0;
//		prismatic_encoder.radps = 0;
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	}
	if (GPIO_Pin == 4) {
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d104      	bne.n	8002a8e <HAL_GPIO_EXTI_Callback+0x42>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a84:	2120      	movs	r1, #32
 8002a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a8a:	f002 fcb7 	bl	80053fc <HAL_GPIO_TogglePin>
//		revlolute_flag = (revlolute_flag == 0) ? 1 : 0;
	}
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200015f8 	.word	0x200015f8
 8002a9c:	200015fc 	.word	0x200015fc
 8002aa0:	200015fd 	.word	0x200015fd
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a51      	ldr	r2, [pc, #324]	@ (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	f040 8097 	bne.w	8002be8 <HAL_TIM_PeriodElapsedCallback+0x140>

//		MotorSet(&prismatic_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002aba:	4850      	ldr	r0, [pc, #320]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002abc:	f7ff fa04 	bl	8001ec8 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002ac0:	484f      	ldr	r0, [pc, #316]	@ (8002c00 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002ac2:	f7ff fa01 	bl	8001ec8 <QEIPosVelUpdate>
//		Prismatic_CasCadeControl();

//		error_rads = prismatic_encoder.rads - prismatic_kalman.X_pred.pData[0];
		KalmanUpdate(&prismatic_kalman, (prismatic_encoder.rads));
 8002ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd08 	bl	80004e0 <__aeabi_f2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	ec43 2b10 	vmov	d0, r2, r3
 8002ad8:	484a      	ldr	r0, [pc, #296]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002ada:	f7fe fd27 	bl	800152c <KalmanUpdate>
		KalmanPrediction(&prismatic_kalman, (output_prismatic * (12.0 / 65535.0)));
 8002ade:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fcfc 	bl	80004e0 <__aeabi_f2d>
 8002ae8:	a341      	add	r3, pc, #260	@ (adr r3, 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd4f 	bl	8000590 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fd ff7b 	bl	80009f4 <__aeabi_d2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	ee00 3a10 	vmov	s0, r3
 8002b04:	483f      	ldr	r0, [pc, #252]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002b06:	f7fe fc8b 	bl	8001420 <KalmanPrediction>

		prismatic_kalman_rads = prismatic_kalman.X_pred.pData[0];
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002b0c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fce4 	bl	80004e0 <__aeabi_f2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	493b      	ldr	r1, [pc, #236]	@ (8002c0c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002b1e:	e9c1 2300 	strd	r2, r3, [r1]
		prismatic_kalman_radps = prismatic_kalman.X_pred.pData[1];
 8002b22:	4b38      	ldr	r3, [pc, #224]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002b24:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcd7 	bl	80004e0 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4936      	ldr	r1, [pc, #216]	@ (8002c10 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002b38:	e9c1 2300 	strd	r2, r3, [r1]
//		revolute_kalman_rads = revolute_kalman.X_pred.pData[0];
//		revolute_kalman_radps = revolute_kalman.X_pred.pData[1];
//		ball_screw_converter();
//

		if (burst_mode == 1)
 8002b3c:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d115      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0xc8>
		{
			if (tim2_counter < 2000)
 8002b44:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b4c:	d209      	bcs.n	8002b62 <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				output_prismatic = (flag == 1) ? 65535 : -65535;
 8002b4e:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PeriodElapsedCallback+0xb2>
 8002b56:	4b32      	ldr	r3, [pc, #200]	@ (8002c20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_PeriodElapsedCallback+0xb4>
 8002b5a:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e006      	b.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0xc8>
			}
			else
			{
				output_prismatic = 0;
 8002b62:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
				burst_mode = 0;
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
			}
		}
		tim2_counter++;
 8002b70:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002b78:	6013      	str	r3, [r2, #0]

		MotorSet(&prismatic_motor, 1000, output_prismatic);
 8002b7a:	4b23      	ldr	r3, [pc, #140]	@ (8002c08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eef0 0a67 	vmov.f32	s1, s15
 8002b84:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002c28 <HAL_TIM_PeriodElapsedCallback+0x180>
 8002b88:	4828      	ldr	r0, [pc, #160]	@ (8002c2c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b8a:	f000 f889 	bl	8002ca0 <MotorSet>
		MotorSet(&revolute_motor, 1000, output_revolute);
 8002b8e:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	eef0 0a67 	vmov.f32	s1, s15
 8002b98:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002c28 <HAL_TIM_PeriodElapsedCallback+0x180>
 8002b9c:	4825      	ldr	r0, [pc, #148]	@ (8002c34 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b9e:	f000 f87f 	bl	8002ca0 <MotorSet>

		// Protocal

		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8002bac:	428a      	cmp	r2, r1
 8002bae:	f173 0300 	sbcs.w	r3, r3, #0
 8002bb2:	d310      	bcc.n	8002bd6 <HAL_TIM_PeriodElapsedCallback+0x12e>
			heartbeat_counter = 0;
 8002bb4:	4920      	ldr	r1, [pc, #128]	@ (8002c38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = (registerFrame[0].U16 == 0) ? 22881 : 0;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0x128>
 8002bca:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002bce:	e000      	b.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x12a>
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002bd4:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	1c54      	adds	r4, r2, #1
 8002bde:	f143 0500 	adc.w	r5, r3, #0
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002be4:	e9c3 4500 	strd	r4, r5, [r3]

		// Base system status

	}
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	00180018 	.word	0x00180018
 8002bf4:	3f280018 	.word	0x3f280018
 8002bf8:	20000420 	.word	0x20000420
 8002bfc:	20000f70 	.word	0x20000f70
 8002c00:	200012d8 	.word	0x200012d8
 8002c04:	20000fe0 	.word	0x20000fe0
 8002c08:	20000f68 	.word	0x20000f68
 8002c0c:	200012c8 	.word	0x200012c8
 8002c10:	200012d0 	.word	0x200012d0
 8002c14:	200015fc 	.word	0x200015fc
 8002c18:	200015f8 	.word	0x200015f8
 8002c1c:	200015fd 	.word	0x200015fd
 8002c20:	477fff00 	.word	0x477fff00
 8002c24:	c77fff00 	.word	0xc77fff00
 8002c28:	447a0000 	.word	0x447a0000
 8002c2c:	20000f0c 	.word	0x20000f0c
 8002c30:	20000f6c 	.word	0x20000f6c
 8002c34:	20000f28 	.word	0x20000f28
 8002c38:	200015f0 	.word	0x200015f0
 8002c3c:	20000e80 	.word	0x20000e80

08002c40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <Error_Handler+0x8>

08002c4c <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	@ (8002c98 <MotorInit+0x4c>)
 8002c66:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8b3a      	ldrh	r2, [r7, #24]
 8002c7e:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8002c80:	68b8      	ldr	r0, [r7, #8]
 8002c82:	f003 fc81 	bl	8006588 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	68b8      	ldr	r0, [r7, #8]
 8002c8c:	f003 fdd2 	bl	8006834 <HAL_TIM_PWM_Start>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0a21fe80 	.word	0x0a21fe80
 8002c9c:	00000000 	.word	0x00000000

08002ca0 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cac:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8002cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	d137      	bne.n	8002d2e <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	895b      	ldrh	r3, [r3, #10]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <MotorSet+0x32>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8002cd0:	e104      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	895b      	ldrh	r3, [r3, #10]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d105      	bne.n	8002ce6 <MotorSet+0x46>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ce4:	e0fa      	b.n	8002edc <MotorSet+0x23c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	895b      	ldrh	r3, [r3, #10]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d105      	bne.n	8002cfa <MotorSet+0x5a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002cf8:	e0f0      	b.n	8002edc <MotorSet+0x23c>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	895b      	ldrh	r3, [r3, #10]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d105      	bne.n	8002d0e <MotorSet+0x6e>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0c:	e0e6      	b.n	8002edc <MotorSet+0x23c>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	895b      	ldrh	r3, [r3, #10]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d105      	bne.n	8002d22 <MotorSet+0x82>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d20:	e0dc      	b.n	8002edc <MotorSet+0x23c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002d2c:	e0d6      	b.n	8002edc <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d46:	ee17 2a90 	vmov	r2, s15
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002d56:	33fe      	adds	r3, #254	@ 0xfe
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fb9f 	bl	800049c <__aeabi_ui2d>
 8002d5e:	a362      	add	r3, pc, #392	@ (adr r3, 8002ee8 <MotorSet+0x248>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fd3e 	bl	80007e4 <__aeabi_ddiv>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd fe20 	bl	80009b4 <__aeabi_d2uiz>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8a1b      	ldrh	r3, [r3, #16]
 8002d90:	3301      	adds	r3, #1
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db2:	ee17 3a90 	vmov	r3, s15
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8a5b      	ldrh	r3, [r3, #18]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fb7b 	bl	80004bc <__aeabi_i2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dce:	eef0 7ae7 	vabs.f32	s15, s15
 8002dd2:	ee17 0a90 	vmov	r0, s15
 8002dd6:	f7fd fb83 	bl	80004e0 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fbd5 	bl	8000590 <__aeabi_dmul>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	a33e      	add	r3, pc, #248	@ (adr r3, 8002ee8 <MotorSet+0x248>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fcf6 	bl	80007e4 <__aeabi_ddiv>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fdd8 	bl	80009b4 <__aeabi_d2uiz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 8002e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1a:	db08      	blt.n	8002e2e <MotorSet+0x18e>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6858      	ldr	r0, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	891b      	ldrh	r3, [r3, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	f002 fad0 	bl	80053cc <HAL_GPIO_WritePin>
 8002e2c:	e007      	b.n	8002e3e <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6858      	ldr	r0, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	891b      	ldrh	r3, [r3, #8]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f002 fac7 	bl	80053cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8a1a      	ldrh	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8a5a      	ldrh	r2, [r3, #18]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8a5a      	ldrh	r2, [r3, #18]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	895b      	ldrh	r3, [r3, #10]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <MotorSet+0x1d6>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6992      	ldr	r2, [r2, #24]
 8002e72:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e74:	e032      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	895b      	ldrh	r3, [r3, #10]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d106      	bne.n	8002e8c <MotorSet+0x1ec>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e8a:	e027      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	895b      	ldrh	r3, [r3, #10]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d106      	bne.n	8002ea2 <MotorSet+0x202>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ea0:	e01c      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	895b      	ldrh	r3, [r3, #10]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d106      	bne.n	8002eb8 <MotorSet+0x218>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002eb6:	e011      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	895b      	ldrh	r3, [r3, #10]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d106      	bne.n	8002ece <MotorSet+0x22e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002ecc:	e006      	b.n	8002edc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002eda:	e7ff      	b.n	8002edc <MotorSet+0x23c>
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40efffe0 	.word	0x40efffe0

08002ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <HAL_MspInit+0x44>)
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	4a0e      	ldr	r2, [pc, #56]	@ (8002f34 <HAL_MspInit+0x44>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_MspInit+0x44>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f26:	f002 fb3f 	bl	80055a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b09e      	sub	sp, #120	@ 0x78
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	2254      	movs	r2, #84	@ 0x54
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f007 fc8e 	bl	800a87a <memset>
  if(hadc->Instance==ADC1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f66:	d133      	bne.n	8002fd0 <HAL_ADC_MspInit+0x98>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f6e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f72:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 f853 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002f84:	f7ff fe5c 	bl	8002c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f88:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002f8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f94:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002fb8:	2306      	movs	r3, #6
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4804      	ldr	r0, [pc, #16]	@ (8002fdc <HAL_ADC_MspInit+0xa4>)
 8002fcc:	f002 f87c 	bl	80050c8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002fd0:	bf00      	nop
 8002fd2:	3778      	adds	r7, #120	@ 0x78
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	48000800 	.word	0x48000800

08002fe0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a30      	ldr	r2, [pc, #192]	@ (80030b0 <HAL_TIM_Base_MspInit+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d114      	bne.n	800301c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff2:	4b30      	ldr	r3, [pc, #192]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8002ff8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2100      	movs	r1, #0
 800300e:	2019      	movs	r0, #25
 8003010:	f001 fcf3 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003014:	2019      	movs	r0, #25
 8003016:	f001 fd0a 	bl	8004a2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 800301a:	e044      	b.n	80030a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003024:	d114      	bne.n	8003050 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	201c      	movs	r0, #28
 8003044:	f001 fcd9 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003048:	201c      	movs	r0, #28
 800304a:	f001 fcf0 	bl	8004a2e <HAL_NVIC_EnableIRQ>
}
 800304e:	e02a      	b.n	80030a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a18      	ldr	r2, [pc, #96]	@ (80030b8 <HAL_TIM_Base_MspInit+0xd8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10c      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800305a:	4b16      	ldr	r3, [pc, #88]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	4a15      	ldr	r2, [pc, #84]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	6593      	str	r3, [r2, #88]	@ 0x58
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
}
 8003072:	e018      	b.n	80030a6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a10      	ldr	r2, [pc, #64]	@ (80030bc <HAL_TIM_Base_MspInit+0xdc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	4a0c      	ldr	r2, [pc, #48]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 8003084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003088:	6613      	str	r3, [r2, #96]	@ 0x60
 800308a:	4b0a      	ldr	r3, [pc, #40]	@ (80030b4 <HAL_TIM_Base_MspInit+0xd4>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2019      	movs	r0, #25
 800309c:	f001 fcad 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030a0:	2019      	movs	r0, #25
 80030a2:	f001 fcc4 	bl	8004a2e <HAL_NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014400 	.word	0x40014400

080030c0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	@ 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a36      	ldr	r2, [pc, #216]	@ (80031b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d131      	bne.n	8003146 <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e2:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	4a35      	ldr	r2, [pc, #212]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ee:	4b33      	ldr	r3, [pc, #204]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	4a2f      	ldr	r2, [pc, #188]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003106:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003112:	23c0      	movs	r3, #192	@ 0xc0
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003122:	2302      	movs	r3, #2
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003130:	f001 ffca 	bl	80050c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	201d      	movs	r0, #29
 800313a:	f001 fc5e 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800313e:	201d      	movs	r0, #29
 8003140:	f001 fc75 	bl	8004a2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003144:	e034      	b.n	80031b0 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <HAL_TIM_Encoder_MspInit+0x100>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d12f      	bne.n	80031b0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6593      	str	r3, [r2, #88]	@ 0x58
 800315c:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	4a13      	ldr	r2, [pc, #76]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003180:	23c0      	movs	r3, #192	@ 0xc0
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003190:	2302      	movs	r3, #2
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003194:	f107 031c 	add.w	r3, r7, #28
 8003198:	4619      	mov	r1, r3
 800319a:	480a      	ldr	r0, [pc, #40]	@ (80031c4 <HAL_TIM_Encoder_MspInit+0x104>)
 800319c:	f001 ff94 	bl	80050c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	201e      	movs	r0, #30
 80031a6:	f001 fc28 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031aa:	201e      	movs	r0, #30
 80031ac:	f001 fc3f 	bl	8004a2e <HAL_NVIC_EnableIRQ>
}
 80031b0:	bf00      	nop
 80031b2:	3730      	adds	r7, #48	@ 0x30
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40000800 	.word	0x40000800
 80031c4:	48000400 	.word	0x48000400

080031c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <HAL_TIM_MspPostInit+0x68>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d11d      	bne.n	8003226 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_TIM_MspPostInit+0x6c>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	4a11      	ldr	r2, [pc, #68]	@ (8003234 <HAL_TIM_MspPostInit+0x6c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_TIM_MspPostInit+0x6c>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003202:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003214:	2306      	movs	r3, #6
 8003216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003222:	f001 ff51 	bl	80050c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003226:	bf00      	nop
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40021000 	.word	0x40021000

08003238 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	@ 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	2254      	movs	r2, #84	@ 0x54
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f007 fb0e 	bl	800a87a <memset>
  if(huart->Instance==USART2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a4d      	ldr	r2, [pc, #308]	@ (8003398 <HAL_UART_MspInit+0x160>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f040 8092 	bne.w	800338e <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800326a:	2302      	movs	r3, #2
 800326c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003272:	f107 0310 	add.w	r3, r7, #16
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fed4 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003282:	f7ff fcdd 	bl	8002c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003286:	4b45      	ldr	r3, [pc, #276]	@ (800339c <HAL_UART_MspInit+0x164>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	4a44      	ldr	r2, [pc, #272]	@ (800339c <HAL_UART_MspInit+0x164>)
 800328c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
 8003292:	4b42      	ldr	r3, [pc, #264]	@ (800339c <HAL_UART_MspInit+0x164>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b3f      	ldr	r3, [pc, #252]	@ (800339c <HAL_UART_MspInit+0x164>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	4a3e      	ldr	r2, [pc, #248]	@ (800339c <HAL_UART_MspInit+0x164>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032aa:	4b3c      	ldr	r3, [pc, #240]	@ (800339c <HAL_UART_MspInit+0x164>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032b6:	230c      	movs	r3, #12
 80032b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032c6:	2307      	movs	r3, #7
 80032c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d4:	f001 fef8 	bl	80050c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80032d8:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032da:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <HAL_UART_MspInit+0x16c>)
 80032dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80032de:	4b30      	ldr	r3, [pc, #192]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032e0:	221a      	movs	r2, #26
 80032e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e4:	4b2e      	ldr	r3, [pc, #184]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ea:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f0:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032f2:	2280      	movs	r2, #128	@ 0x80
 80032f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f6:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003302:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 800330a:	2200      	movs	r2, #0
 800330c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800330e:	4824      	ldr	r0, [pc, #144]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 8003310:	f001 fba8 	bl	8004a64 <HAL_DMA_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800331a:	f7ff fc91 	bl	8002c40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1f      	ldr	r2, [pc, #124]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 8003322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003326:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <HAL_UART_MspInit+0x168>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800332c:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <HAL_UART_MspInit+0x174>)
 8003330:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003332:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003334:	221b      	movs	r2, #27
 8003336:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003338:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 800333a:	2210      	movs	r2, #16
 800333c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333e:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003344:	4b18      	ldr	r3, [pc, #96]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003346:	2280      	movs	r2, #128	@ 0x80
 8003348:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003350:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003362:	4811      	ldr	r0, [pc, #68]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003364:	f001 fb7e 	bl	8004a64 <HAL_DMA_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800336e:	f7ff fc67 	bl	8002c40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 8003376:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <HAL_UART_MspInit+0x170>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	2026      	movs	r0, #38	@ 0x26
 8003384:	f001 fb39 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003388:	2026      	movs	r0, #38	@ 0x26
 800338a:	f001 fb50 	bl	8004a2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800338e:	bf00      	nop
 8003390:	3778      	adds	r7, #120	@ 0x78
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40004400 	.word	0x40004400
 800339c:	40021000 	.word	0x40021000
 80033a0:	200008e8 	.word	0x200008e8
 80033a4:	40020008 	.word	0x40020008
 80033a8:	20000948 	.word	0x20000948
 80033ac:	4002001c 	.word	0x4002001c

080033b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <NMI_Handler+0x4>

080033b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <MemManage_Handler+0x4>

080033c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <BusFault_Handler+0x4>

080033d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <UsageFault_Handler+0x4>

080033d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003406:	f000 f8ff 	bl	8003608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}

0800340e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003412:	2001      	movs	r0, #1
 8003414:	f002 f80c 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003420:	2008      	movs	r0, #8
 8003422:	f002 f805 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}

0800342a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800342e:	2010      	movs	r0, #16
 8003430:	f001 fffe 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800343c:	4802      	ldr	r0, [pc, #8]	@ (8003448 <DMA1_Channel1_IRQHandler+0x10>)
 800343e:	f001 fcf4 	bl	8004e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200008e8 	.word	0x200008e8

0800344c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003450:	4802      	ldr	r0, [pc, #8]	@ (800345c <DMA1_Channel2_IRQHandler+0x10>)
 8003452:	f001 fcea 	bl	8004e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000948 	.word	0x20000948

08003460 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003464:	4803      	ldr	r0, [pc, #12]	@ (8003474 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003466:	f003 fd2f 	bl	8006ec8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800346a:	4803      	ldr	r0, [pc, #12]	@ (8003478 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800346c:	f003 fd2c 	bl	8006ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000354 	.word	0x20000354
 8003478:	20000750 	.word	0x20000750

0800347c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <TIM2_IRQHandler+0x10>)
 8003482:	f003 fd21 	bl	8006ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000420 	.word	0x20000420

08003490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003494:	4802      	ldr	r0, [pc, #8]	@ (80034a0 <TIM3_IRQHandler+0x10>)
 8003496:	f003 fd17 	bl	8006ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200004ec 	.word	0x200004ec

080034a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <TIM4_IRQHandler+0x10>)
 80034aa:	f003 fd0d 	bl	8006ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200005b8 	.word	0x200005b8

080034b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034bc:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <USART2_IRQHandler+0x10>)
 80034be:	f005 fad7 	bl	8008a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000081c 	.word	0x2000081c

080034cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80034d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80034d4:	f001 ffac 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80034d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80034dc:	f001 ffa8 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80034e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034e4:	f001 ffa4 	bl	8005430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}

080034ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <SystemInit+0x20>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f6:	4a05      	ldr	r2, [pc, #20]	@ (800350c <SystemInit+0x20>)
 80034f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003510:	480d      	ldr	r0, [pc, #52]	@ (8003548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003512:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003514:	f7ff ffea 	bl	80034ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003518:	480c      	ldr	r0, [pc, #48]	@ (800354c <LoopForever+0x6>)
  ldr r1, =_edata
 800351a:	490d      	ldr	r1, [pc, #52]	@ (8003550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <LoopForever+0xe>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003520:	e002      	b.n	8003528 <LoopCopyDataInit>

08003522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003526:	3304      	adds	r3, #4

08003528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800352c:	d3f9      	bcc.n	8003522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003530:	4c0a      	ldr	r4, [pc, #40]	@ (800355c <LoopForever+0x16>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003534:	e001      	b.n	800353a <LoopFillZerobss>

08003536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003538:	3204      	adds	r2, #4

0800353a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800353c:	d3fb      	bcc.n	8003536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800353e:	f007 f9a5 	bl	800a88c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003542:	f7fe fd61 	bl	8002008 <main>

08003546 <LoopForever>:

LoopForever:
    b LoopForever
 8003546:	e7fe      	b.n	8003546 <LoopForever>
  ldr   r0, =_estack
 8003548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800354c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003550:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8003554:	0800a9d8 	.word	0x0800a9d8
  ldr r2, =_sbss
 8003558:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 800355c:	20001604 	.word	0x20001604

08003560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003560:	e7fe      	b.n	8003560 <ADC1_2_IRQHandler>

08003562 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356c:	2003      	movs	r0, #3
 800356e:	f001 fa39 	bl	80049e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003572:	2000      	movs	r0, #0
 8003574:	f000 f80e 	bl	8003594 <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	71fb      	strb	r3, [r7, #7]
 8003582:	e001      	b.n	8003588 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003584:	f7ff fcb4 	bl	8002ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003588:	79fb      	ldrb	r3, [r7, #7]

}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80035a0:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <HAL_InitTick+0x68>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d022      	beq.n	80035ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035a8:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <HAL_InitTick+0x6c>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <HAL_InitTick+0x68>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fa44 	bl	8004a4a <HAL_SYSTICK_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	d809      	bhi.n	80035e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ce:	2200      	movs	r2, #0
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	f04f 30ff 	mov.w	r0, #4294967295
 80035d6:	f001 fa10 	bl	80049fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <HAL_InitTick+0x70>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e007      	b.n	80035f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e004      	b.n	80035f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	e001      	b.n	80035f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200002c4 	.word	0x200002c4
 8003600:	200002bc 	.word	0x200002bc
 8003604:	200002c0 	.word	0x200002c0

08003608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_IncTick+0x1c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_IncTick+0x20>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4413      	add	r3, r2
 8003616:	4a03      	ldr	r2, [pc, #12]	@ (8003624 <HAL_IncTick+0x1c>)
 8003618:	6013      	str	r3, [r2, #0]
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20001600 	.word	0x20001600
 8003628:	200002c4 	.word	0x200002c4

0800362c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return uwTick;
 8003630:	4b03      	ldr	r3, [pc, #12]	@ (8003640 <HAL_GetTick+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20001600 	.word	0x20001600

08003644 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3360      	adds	r3, #96	@ 0x60
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <LL_ADC_SetOffset+0x44>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	4313      	orrs	r3, r2
 80036dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	03fff000 	.word	0x03fff000

080036f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3360      	adds	r3, #96	@ 0x60
 8003702:	461a      	mov	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3360      	adds	r3, #96	@ 0x60
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	431a      	orrs	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3360      	adds	r3, #96	@ 0x60
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3360      	adds	r3, #96	@ 0x60
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	615a      	str	r2, [r3, #20]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3330      	adds	r3, #48	@ 0x30
 80037f8:	461a      	mov	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	4413      	add	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	211f      	movs	r1, #31
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0e9b      	lsrs	r3, r3, #26
 8003820:	f003 011f 	and.w	r1, r3, #31
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	431a      	orrs	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3314      	adds	r3, #20
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	0d1b      	lsrs	r3, r3, #20
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2107      	movs	r1, #7
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	0d1b      	lsrs	r3, r3, #20
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0318 	and.w	r3, r3, #24
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80038bc:	40d9      	lsrs	r1, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	400b      	ands	r3, r1
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	0007ffff 	.word	0x0007ffff

080038e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6093      	str	r3, [r2, #8]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003918:	d101      	bne.n	800391e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800393c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003940:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003968:	d101      	bne.n	800396e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <LL_ADC_IsEnabled+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_IsEnabled+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d101      	bne.n	80039ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d101      	bne.n	80039e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e1a9      	b.n	8003d5e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fa8d 	bl	8002f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff67 	bl	8003904 <LL_ADC_IsDeepPowerDownEnabled>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff4d 	bl	80038e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff82 	bl	8003954 <LL_ADC_IsInternalRegulatorEnabled>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d115      	bne.n	8003a82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff66 	bl	800392c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a60:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd4 <HAL_ADC_Init+0x2e4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	4a9c      	ldr	r2, [pc, #624]	@ (8003cd8 <HAL_ADC_Init+0x2e8>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff64 	bl	8003954 <LL_ADC_IsInternalRegulatorEnabled>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	f043 0210 	orr.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff75 	bl	80039a2 <LL_ADC_REG_IsConversionOngoing>
 8003ab8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 8142 	bne.w	8003d4c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 813e 	bne.w	8003d4c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ad8:	f043 0202 	orr.w	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff49 	bl	800397c <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d141      	bne.n	8003b74 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_Init+0x114>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a77      	ldr	r2, [pc, #476]	@ (8003cdc <HAL_ADC_Init+0x2ec>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10f      	bne.n	8003b24 <HAL_ADC_Init+0x134>
 8003b04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b08:	f7ff ff38 	bl	800397c <LL_ADC_IsEnabled>
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	4873      	ldr	r0, [pc, #460]	@ (8003cdc <HAL_ADC_Init+0x2ec>)
 8003b10:	f7ff ff34 	bl	800397c <LL_ADC_IsEnabled>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4323      	orrs	r3, r4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_ADC_Init+0x15a>
 8003b24:	486e      	ldr	r0, [pc, #440]	@ (8003ce0 <HAL_ADC_Init+0x2f0>)
 8003b26:	f7ff ff29 	bl	800397c <LL_ADC_IsEnabled>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	486d      	ldr	r0, [pc, #436]	@ (8003ce4 <HAL_ADC_Init+0x2f4>)
 8003b2e:	f7ff ff25 	bl	800397c <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	431c      	orrs	r4, r3
 8003b36:	486c      	ldr	r0, [pc, #432]	@ (8003ce8 <HAL_ADC_Init+0x2f8>)
 8003b38:	f7ff ff20 	bl	800397c <LL_ADC_IsEnabled>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4323      	orrs	r3, r4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b56:	d004      	beq.n	8003b62 <HAL_ADC_Init+0x172>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5f      	ldr	r2, [pc, #380]	@ (8003cdc <HAL_ADC_Init+0x2ec>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_Init+0x176>
 8003b62:	4a62      	ldr	r2, [pc, #392]	@ (8003cec <HAL_ADC_Init+0x2fc>)
 8003b64:	e000      	b.n	8003b68 <HAL_ADC_Init+0x178>
 8003b66:	4a62      	ldr	r2, [pc, #392]	@ (8003cf0 <HAL_ADC_Init+0x300>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7ff fd68 	bl	8003644 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7f5b      	ldrb	r3, [r3, #29]
 8003b78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d106      	bne.n	8003bb0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	045b      	lsls	r3, r3, #17
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	4b48      	ldr	r3, [pc, #288]	@ (8003cf4 <HAL_ADC_Init+0x304>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fee4 	bl	80039c8 <LL_ADC_INJ_IsConversionOngoing>
 8003c00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d17f      	bne.n	8003d08 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d17c      	bne.n	8003d08 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c2a:	f023 0302 	bic.w	r3, r3, #2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6911      	ldr	r1, [r2, #16]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c6e:	e013      	b.n	8003c98 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c94:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d12a      	bne.n	8003cf8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	611a      	str	r2, [r3, #16]
 8003cd2:	e019      	b.n	8003d08 <HAL_ADC_Init+0x318>
 8003cd4:	200002bc 	.word	0x200002bc
 8003cd8:	053e2d63 	.word	0x053e2d63
 8003cdc:	50000100 	.word	0x50000100
 8003ce0:	50000400 	.word	0x50000400
 8003ce4:	50000500 	.word	0x50000500
 8003ce8:	50000600 	.word	0x50000600
 8003cec:	50000300 	.word	0x50000300
 8003cf0:	50000700 	.word	0x50000700
 8003cf4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f023 010f 	bic.w	r1, r3, #15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	1e5a      	subs	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d28:	e007      	b.n	8003d3a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 020f 	bic.w	r2, r2, #15
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d4a:	e007      	b.n	8003d5c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	@ 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop

08003d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b0b6      	sub	sp, #216	@ 0xd8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x24>
 8003d86:	2302      	movs	r3, #2
 8003d88:	f000 bc13 	b.w	80045b2 <HAL_ADC_ConfigChannel+0x84a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fe02 	bl	80039a2 <LL_ADC_REG_IsConversionOngoing>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 83f3 	bne.w	800458c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7ff fd18 	bl	80037e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fdf0 	bl	80039a2 <LL_ADC_REG_IsConversionOngoing>
 8003dc2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fdfc 	bl	80039c8 <LL_ADC_INJ_IsConversionOngoing>
 8003dd0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 81d9 	bne.w	8004190 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 81d4 	bne.w	8004190 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df0:	d10f      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7ff fd1f 	bl	8003840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fcd9 	bl	80037c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e10:	e00e      	b.n	8003e30 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7ff fd0e 	bl	8003840 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fcc9 	bl	80037c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d022      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6919      	ldr	r1, [r3, #16]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e62:	f7ff fc23 	bl	80036ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6919      	ldr	r1, [r3, #16]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7ff fc6f 	bl	8003756 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d102      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x126>
 8003e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e8c:	e000      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x128>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	461a      	mov	r2, r3
 8003e92:	f7ff fc7b 	bl	800378c <LL_ADC_SetOffsetSaturation>
 8003e96:	e17b      	b.n	8004190 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fc28 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x15c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fc1d 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	f003 021f 	and.w	r2, r3, #31
 8003ec2:	e01e      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x19a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fc12 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ee6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e004      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x1b2>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0e9b      	lsrs	r3, r3, #26
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	e018      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x1e4>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	e004      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d106      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fbe1 	bl	8003720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fbc5 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x222>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fbba 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	0e9b      	lsrs	r3, r3, #26
 8003f84:	f003 021f 	and.w	r2, r3, #31
 8003f88:	e01e      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x260>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fbaf 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003fa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	e004      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x278>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0e9b      	lsrs	r3, r3, #26
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	e018      	b.n	8004012 <HAL_ADC_ConfigChannel+0x2aa>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e004      	b.n	8004012 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004012:	429a      	cmp	r2, r3
 8004014:	d106      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fb7e 	bl	8003720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fb62 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x2e8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fb57 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	f003 021f 	and.w	r2, r3, #31
 800404e:	e01e      	b.n	800408e <HAL_ADC_ConfigChannel+0x326>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2102      	movs	r1, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fb4c 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800406e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004076:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e004      	b.n	800408c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x33e>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	0e9b      	lsrs	r3, r3, #26
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	e016      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x36c>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80040b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80040be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e004      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80040ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d106      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fb1d 	bl	8003720 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2103      	movs	r1, #3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fb01 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x3aa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2103      	movs	r1, #3
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff faf6 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	0e9b      	lsrs	r3, r3, #26
 800410c:	f003 021f 	and.w	r2, r3, #31
 8004110:	e017      	b.n	8004142 <HAL_ADC_ConfigChannel+0x3da>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2103      	movs	r1, #3
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff faeb 	bl	80036f4 <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800412a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800412c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800412e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_ADC_ConfigChannel+0x3f2>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	0e9b      	lsrs	r3, r3, #26
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	e011      	b.n	800417e <HAL_ADC_ConfigChannel+0x416>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800416c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e003      	b.n	800417e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800417e:	429a      	cmp	r2, r3
 8004180:	d106      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	2103      	movs	r1, #3
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fac8 	bl	8003720 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fbf1 	bl	800397c <LL_ADC_IsEnabled>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 813d 	bne.w	800441c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7ff fb72 	bl	8003898 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4aa2      	ldr	r2, [pc, #648]	@ (8004444 <HAL_ADC_ConfigChannel+0x6dc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	f040 812e 	bne.w	800441c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x480>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2b09      	cmp	r3, #9
 80041de:	bf94      	ite	ls
 80041e0:	2301      	movls	r3, #1
 80041e2:	2300      	movhi	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e019      	b.n	800421c <HAL_ADC_ConfigChannel+0x4b4>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2b09      	cmp	r3, #9
 8004214:	bf94      	ite	ls
 8004216:	2301      	movls	r3, #1
 8004218:	2300      	movhi	r3, #0
 800421a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800421c:	2b00      	cmp	r3, #0
 800421e:	d079      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <HAL_ADC_ConfigChannel+0x4d4>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	069b      	lsls	r3, r3, #26
 8004236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423a:	e015      	b.n	8004268 <HAL_ADC_ConfigChannel+0x500>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800424a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x520>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	e017      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x550>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80042a0:	2320      	movs	r3, #32
 80042a2:	e003      	b.n	80042ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80042a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	ea42 0103 	orr.w	r1, r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_ADC_ConfigChannel+0x576>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	3301      	adds	r3, #1
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	051b      	lsls	r3, r3, #20
 80042dc:	e018      	b.n	8004310 <HAL_ADC_ConfigChannel+0x5a8>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80042f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80042f6:	2320      	movs	r3, #32
 80042f8:	e003      	b.n	8004302 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004310:	430b      	orrs	r3, r1
 8004312:	e07e      	b.n	8004412 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5c8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	069b      	lsls	r3, r3, #26
 800432a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800432e:	e015      	b.n	800435c <HAL_ADC_ConfigChannel+0x5f4>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004348:	2320      	movs	r3, #32
 800434a:	e003      	b.n	8004354 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800434c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	069b      	lsls	r3, r3, #26
 8004358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <HAL_ADC_ConfigChannel+0x614>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	e017      	b.n	80043ac <HAL_ADC_ConfigChannel+0x644>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	61fb      	str	r3, [r7, #28]
  return result;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004394:	2320      	movs	r3, #32
 8004396:	e003      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	ea42 0103 	orr.w	r1, r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x670>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	3301      	adds	r3, #1
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4613      	mov	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	3b1e      	subs	r3, #30
 80043d0:	051b      	lsls	r3, r3, #20
 80043d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	e01b      	b.n	8004410 <HAL_ADC_ConfigChannel+0x6a8>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	613b      	str	r3, [r7, #16]
  return result;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e003      	b.n	80043fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1e      	subs	r3, #30
 800440a:	051b      	lsls	r3, r3, #20
 800440c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004410:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004416:	4619      	mov	r1, r3
 8004418:	f7ff fa12 	bl	8003840 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_ADC_ConfigChannel+0x6e0>)
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80be 	beq.w	80045a6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004432:	d004      	beq.n	800443e <HAL_ADC_ConfigChannel+0x6d6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	@ (800444c <HAL_ADC_ConfigChannel+0x6e4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10a      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x6ec>
 800443e:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <HAL_ADC_ConfigChannel+0x6e8>)
 8004440:	e009      	b.n	8004456 <HAL_ADC_ConfigChannel+0x6ee>
 8004442:	bf00      	nop
 8004444:	407f0000 	.word	0x407f0000
 8004448:	80080000 	.word	0x80080000
 800444c:	50000100 	.word	0x50000100
 8004450:	50000300 	.word	0x50000300
 8004454:	4b59      	ldr	r3, [pc, #356]	@ (80045bc <HAL_ADC_ConfigChannel+0x854>)
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff f91a 	bl	8003690 <LL_ADC_GetCommonPathInternalCh>
 800445c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a56      	ldr	r2, [pc, #344]	@ (80045c0 <HAL_ADC_ConfigChannel+0x858>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_ADC_ConfigChannel+0x70c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a55      	ldr	r2, [pc, #340]	@ (80045c4 <HAL_ADC_ConfigChannel+0x85c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d13a      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d134      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004488:	d005      	beq.n	8004496 <HAL_ADC_ConfigChannel+0x72e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4e      	ldr	r2, [pc, #312]	@ (80045c8 <HAL_ADC_ConfigChannel+0x860>)
 8004490:	4293      	cmp	r3, r2
 8004492:	f040 8085 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800449e:	d004      	beq.n	80044aa <HAL_ADC_ConfigChannel+0x742>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a49      	ldr	r2, [pc, #292]	@ (80045cc <HAL_ADC_ConfigChannel+0x864>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x746>
 80044aa:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <HAL_ADC_ConfigChannel+0x868>)
 80044ac:	e000      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x748>
 80044ae:	4a43      	ldr	r2, [pc, #268]	@ (80045bc <HAL_ADC_ConfigChannel+0x854>)
 80044b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7ff f8d5 	bl	800366a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c0:	4b44      	ldr	r3, [pc, #272]	@ (80045d4 <HAL_ADC_ConfigChannel+0x86c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	4a44      	ldr	r2, [pc, #272]	@ (80045d8 <HAL_ADC_ConfigChannel+0x870>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	4613      	mov	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044da:	e002      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f9      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e8:	e05a      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3b      	ldr	r2, [pc, #236]	@ (80045dc <HAL_ADC_ConfigChannel+0x874>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d125      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11f      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a31      	ldr	r2, [pc, #196]	@ (80045cc <HAL_ADC_ConfigChannel+0x864>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d104      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x7ac>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a34      	ldr	r2, [pc, #208]	@ (80045e0 <HAL_ADC_ConfigChannel+0x878>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d047      	beq.n	80045a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800451c:	d004      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x7c0>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <HAL_ADC_ConfigChannel+0x864>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x7c4>
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <HAL_ADC_ConfigChannel+0x868>)
 800452a:	e000      	b.n	800452e <HAL_ADC_ConfigChannel+0x7c6>
 800452c:	4a23      	ldr	r2, [pc, #140]	@ (80045bc <HAL_ADC_ConfigChannel+0x854>)
 800452e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7ff f896 	bl	800366a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800453e:	e031      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <HAL_ADC_ConfigChannel+0x87c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d12d      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800454a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800454e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d127      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1c      	ldr	r2, [pc, #112]	@ (80045cc <HAL_ADC_ConfigChannel+0x864>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004568:	d004      	beq.n	8004574 <HAL_ADC_ConfigChannel+0x80c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a17      	ldr	r2, [pc, #92]	@ (80045cc <HAL_ADC_ConfigChannel+0x864>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x810>
 8004574:	4a16      	ldr	r2, [pc, #88]	@ (80045d0 <HAL_ADC_ConfigChannel+0x868>)
 8004576:	e000      	b.n	800457a <HAL_ADC_ConfigChannel+0x812>
 8004578:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <HAL_ADC_ConfigChannel+0x854>)
 800457a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800457e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7ff f870 	bl	800366a <LL_ADC_SetCommonPathInternalCh>
 800458a:	e00c      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800459e:	e002      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	37d8      	adds	r7, #216	@ 0xd8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	50000700 	.word	0x50000700
 80045c0:	c3210000 	.word	0xc3210000
 80045c4:	90c00010 	.word	0x90c00010
 80045c8:	50000600 	.word	0x50000600
 80045cc:	50000100 	.word	0x50000100
 80045d0:	50000300 	.word	0x50000300
 80045d4:	200002bc 	.word	0x200002bc
 80045d8:	053e2d63 	.word	0x053e2d63
 80045dc:	c7520000 	.word	0xc7520000
 80045e0:	50000500 	.word	0x50000500
 80045e4:	cb840000 	.word	0xcb840000

080045e8 <LL_ADC_IsEnabled>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <LL_ADC_IsEnabled+0x18>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <LL_ADC_IsEnabled+0x1a>
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_ADC_REG_IsConversionOngoing>:
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d101      	bne.n	8004626 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b0a1      	sub	sp, #132	@ 0x84
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0e7      	b.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800465a:	2300      	movs	r3, #0
 800465c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800465e:	2300      	movs	r3, #0
 8004660:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800466a:	d102      	bne.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800466c:	4b6f      	ldr	r3, [pc, #444]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e009      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6e      	ldr	r2, [pc, #440]	@ (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d102      	bne.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800467c:	4b6d      	ldr	r3, [pc, #436]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	e001      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0be      	b.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ffb1 	bl	800460e <LL_ADC_REG_IsConversionOngoing>
 80046ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffab 	bl	800460e <LL_ADC_REG_IsConversionOngoing>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 80a0 	bne.w	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 809c 	bne.w	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046d0:	d004      	beq.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a55      	ldr	r2, [pc, #340]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046dc:	4b56      	ldr	r3, [pc, #344]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80046de:	e000      	b.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046e0:	4b56      	ldr	r3, [pc, #344]	@ (800483c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80046e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d04b      	beq.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046fe:	035b      	lsls	r3, r3, #13
 8004700:	430b      	orrs	r3, r1
 8004702:	431a      	orrs	r2, r3
 8004704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004706:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004710:	d004      	beq.n	800471c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a45      	ldr	r2, [pc, #276]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10f      	bne.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800471c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004720:	f7ff ff62 	bl	80045e8 <LL_ADC_IsEnabled>
 8004724:	4604      	mov	r4, r0
 8004726:	4841      	ldr	r0, [pc, #260]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004728:	f7ff ff5e 	bl	80045e8 <LL_ADC_IsEnabled>
 800472c:	4603      	mov	r3, r0
 800472e:	4323      	orrs	r3, r4
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e012      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800473c:	483c      	ldr	r0, [pc, #240]	@ (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800473e:	f7ff ff53 	bl	80045e8 <LL_ADC_IsEnabled>
 8004742:	4604      	mov	r4, r0
 8004744:	483b      	ldr	r0, [pc, #236]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004746:	f7ff ff4f 	bl	80045e8 <LL_ADC_IsEnabled>
 800474a:	4603      	mov	r3, r0
 800474c:	431c      	orrs	r4, r3
 800474e:	483c      	ldr	r0, [pc, #240]	@ (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004750:	f7ff ff4a 	bl	80045e8 <LL_ADC_IsEnabled>
 8004754:	4603      	mov	r3, r0
 8004756:	4323      	orrs	r3, r4
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d056      	beq.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800476e:	f023 030f 	bic.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6811      	ldr	r1, [r2, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6892      	ldr	r2, [r2, #8]
 800477a:	430a      	orrs	r2, r1
 800477c:	431a      	orrs	r2, r3
 800477e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004780:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004782:	e047      	b.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800478e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004798:	d004      	beq.n	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a23      	ldr	r2, [pc, #140]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10f      	bne.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047a8:	f7ff ff1e 	bl	80045e8 <LL_ADC_IsEnabled>
 80047ac:	4604      	mov	r4, r0
 80047ae:	481f      	ldr	r0, [pc, #124]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047b0:	f7ff ff1a 	bl	80045e8 <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4323      	orrs	r3, r4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e012      	b.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047c4:	481a      	ldr	r0, [pc, #104]	@ (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047c6:	f7ff ff0f 	bl	80045e8 <LL_ADC_IsEnabled>
 80047ca:	4604      	mov	r4, r0
 80047cc:	4819      	ldr	r0, [pc, #100]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047ce:	f7ff ff0b 	bl	80045e8 <LL_ADC_IsEnabled>
 80047d2:	4603      	mov	r3, r0
 80047d4:	431c      	orrs	r4, r3
 80047d6:	481a      	ldr	r0, [pc, #104]	@ (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047d8:	f7ff ff06 	bl	80045e8 <LL_ADC_IsEnabled>
 80047dc:	4603      	mov	r3, r0
 80047de:	4323      	orrs	r3, r4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047f6:	f023 030f 	bic.w	r3, r3, #15
 80047fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80047fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047fe:	e009      	b.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004812:	e000      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800481e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004822:	4618      	mov	r0, r3
 8004824:	3784      	adds	r7, #132	@ 0x84
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	bf00      	nop
 800482c:	50000100 	.word	0x50000100
 8004830:	50000400 	.word	0x50000400
 8004834:	50000500 	.word	0x50000500
 8004838:	50000300 	.word	0x50000300
 800483c:	50000700 	.word	0x50000700
 8004840:	50000600 	.word	0x50000600

08004844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db0b      	blt.n	80048d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	4907      	ldr	r1, [pc, #28]	@ (80048e0 <__NVIC_EnableIRQ+0x38>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100

080048e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db0a      	blt.n	800490e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	490c      	ldr	r1, [pc, #48]	@ (8004930 <__NVIC_SetPriority+0x4c>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800490c:	e00a      	b.n	8004924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4908      	ldr	r1, [pc, #32]	@ (8004934 <__NVIC_SetPriority+0x50>)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3b04      	subs	r3, #4
 800491c:	0112      	lsls	r2, r2, #4
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	440b      	add	r3, r1
 8004922:	761a      	strb	r2, [r3, #24]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000e100 	.word	0xe000e100
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf28      	it	cs
 8004956:	2304      	movcs	r3, #4
 8004958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3304      	adds	r3, #4
 800495e:	2b06      	cmp	r3, #6
 8004960:	d902      	bls.n	8004968 <NVIC_EncodePriority+0x30>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b03      	subs	r3, #3
 8004966:	e000      	b.n	800496a <NVIC_EncodePriority+0x32>
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	401a      	ands	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004980:	f04f 31ff 	mov.w	r1, #4294967295
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43d9      	mvns	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	4313      	orrs	r3, r2
         );
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	@ 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b0:	d301      	bcc.n	80049b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00f      	b.n	80049d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <SysTick_Config+0x40>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049be:	210f      	movs	r1, #15
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	f7ff ff8e 	bl	80048e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <SysTick_Config+0x40>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <SysTick_Config+0x40>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010

080049e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff29 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a08:	f7ff ff40 	bl	800488c <__NVIC_GetPriorityGrouping>
 8004a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff ff90 	bl	8004938 <NVIC_EncodePriority>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff5f 	bl	80048e4 <__NVIC_SetPriority>
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff33 	bl	80048a8 <__NVIC_EnableIRQ>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa4 	bl	80049a0 <SysTick_Config>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e08d      	b.n	8004b92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <HAL_DMA_Init+0x138>)
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d80f      	bhi.n	8004aa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b45      	ldr	r3, [pc, #276]	@ (8004ba0 <HAL_DMA_Init+0x13c>)
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4a45      	ldr	r2, [pc, #276]	@ (8004ba4 <HAL_DMA_Init+0x140>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	009a      	lsls	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <HAL_DMA_Init+0x144>)
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aa0:	e00e      	b.n	8004ac0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4b40      	ldr	r3, [pc, #256]	@ (8004bac <HAL_DMA_Init+0x148>)
 8004aaa:	4413      	add	r3, r2
 8004aac:	4a3d      	ldr	r2, [pc, #244]	@ (8004ba4 <HAL_DMA_Init+0x140>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	009a      	lsls	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb0 <HAL_DMA_Init+0x14c>)
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa76 	bl	8005004 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b20:	d102      	bne.n	8004b28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d010      	beq.n	8004b68 <HAL_DMA_Init+0x104>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d80c      	bhi.n	8004b68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa96 	bl	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e008      	b.n	8004b7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40020407 	.word	0x40020407
 8004ba0:	bffdfff8 	.word	0xbffdfff8
 8004ba4:	cccccccd 	.word	0xcccccccd
 8004ba8:	40020000 	.word	0x40020000
 8004bac:	bffdfbf8 	.word	0xbffdfbf8
 8004bb0:	40020400 	.word	0x40020400

08004bb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_DMA_Start_IT+0x20>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e066      	b.n	8004ca2 <HAL_DMA_Start_IT+0xee>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d155      	bne.n	8004c94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f9bb 	bl	8004f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 020e 	orr.w	r2, r2, #14
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e00f      	b.n	8004c4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 020a 	orr.w	r2, r2, #10
 8004c4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e005      	b.n	8004ca0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d005      	beq.n	8004cce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	e037      	b.n	8004d3e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 020e 	bic.w	r2, r2, #14
 8004cdc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f003 021f 	and.w	r2, r3, #31
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d10:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d1a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d32:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d3c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d00d      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e047      	b.n	8004e20 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 020e 	bic.w	r2, r2, #14
 8004d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	f003 021f 	and.w	r2, r3, #31
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ddc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
    }
  }
  return status;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d026      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x7a>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d021      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d107      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0204 	bic.w	r2, r2, #4
 8004e7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f003 021f 	and.w	r2, r3, #31
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d071      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ea2:	e06c      	b.n	8004f7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2202      	movs	r2, #2
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02e      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d029      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 020a 	bic.w	r2, r2, #10
 8004ede:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8004efa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d038      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f14:	e033      	b.n	8004f7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2208      	movs	r2, #8
 8004f20:	409a      	lsls	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02a      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d025      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 020e 	bic.w	r2, r2, #14
 8004f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f48:	f003 021f 	and.w	r2, r3, #31
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f202 	lsl.w	r2, r1, r2
 8004f56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
}
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	f003 021f 	and.w	r2, r3, #31
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d108      	bne.n	8004fe8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fe6:	e007      	b.n	8004ff8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b16      	ldr	r3, [pc, #88]	@ (800506c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d802      	bhi.n	800501e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005018:	4b15      	ldr	r3, [pc, #84]	@ (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e001      	b.n	8005022 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005020:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3b08      	subs	r3, #8
 800502e:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a0b      	ldr	r2, [pc, #44]	@ (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800504e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2201      	movs	r2, #1
 8005058:	409a      	lsls	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40020407 	.word	0x40020407
 8005070:	40020800 	.word	0x40020800
 8005074:	40020820 	.word	0x40020820
 8005078:	cccccccd 	.word	0xcccccccd
 800507c:	40020880 	.word	0x40020880

08005080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a08      	ldr	r2, [pc, #32]	@ (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	1000823f 	.word	0x1000823f
 80050c4:	40020940 	.word	0x40020940

080050c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050d6:	e15a      	b.n	800538e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	2101      	movs	r1, #1
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 814c 	beq.w	8005388 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d005      	beq.n	8005108 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005104:	2b02      	cmp	r3, #2
 8005106:	d130      	bne.n	800516a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2203      	movs	r2, #3
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800513e:	2201      	movs	r2, #1
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4013      	ands	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 0201 	and.w	r2, r3, #1
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b03      	cmp	r3, #3
 8005174:	d017      	beq.n	80051a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d123      	bne.n	80051fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	08da      	lsrs	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3208      	adds	r2, #8
 80051ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	220f      	movs	r2, #15
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	08da      	lsrs	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3208      	adds	r2, #8
 80051f4:	6939      	ldr	r1, [r7, #16]
 80051f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2203      	movs	r2, #3
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4013      	ands	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80a6 	beq.w	8005388 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523c:	4b5b      	ldr	r3, [pc, #364]	@ (80053ac <HAL_GPIO_Init+0x2e4>)
 800523e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005240:	4a5a      	ldr	r2, [pc, #360]	@ (80053ac <HAL_GPIO_Init+0x2e4>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6613      	str	r3, [r2, #96]	@ 0x60
 8005248:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <HAL_GPIO_Init+0x2e4>)
 800524a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005254:	4a56      	ldr	r2, [pc, #344]	@ (80053b0 <HAL_GPIO_Init+0x2e8>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	220f      	movs	r2, #15
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4013      	ands	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800527e:	d01f      	beq.n	80052c0 <HAL_GPIO_Init+0x1f8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a4c      	ldr	r2, [pc, #304]	@ (80053b4 <HAL_GPIO_Init+0x2ec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d019      	beq.n	80052bc <HAL_GPIO_Init+0x1f4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a4b      	ldr	r2, [pc, #300]	@ (80053b8 <HAL_GPIO_Init+0x2f0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <HAL_GPIO_Init+0x1f0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a4a      	ldr	r2, [pc, #296]	@ (80053bc <HAL_GPIO_Init+0x2f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00d      	beq.n	80052b4 <HAL_GPIO_Init+0x1ec>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a49      	ldr	r2, [pc, #292]	@ (80053c0 <HAL_GPIO_Init+0x2f8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <HAL_GPIO_Init+0x1e8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a48      	ldr	r2, [pc, #288]	@ (80053c4 <HAL_GPIO_Init+0x2fc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_GPIO_Init+0x1e4>
 80052a8:	2305      	movs	r3, #5
 80052aa:	e00a      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052ac:	2306      	movs	r3, #6
 80052ae:	e008      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052b0:	2304      	movs	r3, #4
 80052b2:	e006      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052b4:	2303      	movs	r3, #3
 80052b6:	e004      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e002      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_GPIO_Init+0x1fa>
 80052c0:	2300      	movs	r3, #0
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	f002 0203 	and.w	r2, r2, #3
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	4093      	lsls	r3, r2
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052d2:	4937      	ldr	r1, [pc, #220]	@ (80053b0 <HAL_GPIO_Init+0x2e8>)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	3302      	adds	r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052e0:	4b39      	ldr	r3, [pc, #228]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800532e:	4a26      	ldr	r2, [pc, #152]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005334:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	43db      	mvns	r3, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800535e:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005382:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <HAL_GPIO_Init+0x300>)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3301      	adds	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	f47f ae9d 	bne.w	80050d8 <HAL_GPIO_Init+0x10>
  }
}
 800539e:	bf00      	nop
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40010000 	.word	0x40010000
 80053b4:	48000400 	.word	0x48000400
 80053b8:	48000800 	.word	0x48000800
 80053bc:	48000c00 	.word	0x48000c00
 80053c0:	48001000 	.word	0x48001000
 80053c4:	48001400 	.word	0x48001400
 80053c8:	40010400 	.word	0x40010400

080053cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	807b      	strh	r3, [r7, #2]
 80053d8:	4613      	mov	r3, r2
 80053da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053dc:	787b      	ldrb	r3, [r7, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053e2:	887a      	ldrh	r2, [r7, #2]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053e8:	e002      	b.n	80053f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	041a      	lsls	r2, r3, #16
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	43d9      	mvns	r1, r3
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	400b      	ands	r3, r1
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	619a      	str	r2, [r3, #24]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800543a:	4b08      	ldr	r3, [pc, #32]	@ (800545c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005446:	4a05      	ldr	r2, [pc, #20]	@ (800545c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fafc 	bl	8002a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40010400 	.word	0x40010400

08005460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d141      	bne.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800546e:	4b4b      	ldr	r3, [pc, #300]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547a:	d131      	bne.n	80054e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800547c:	4b47      	ldr	r3, [pc, #284]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005482:	4a46      	ldr	r2, [pc, #280]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800548c:	4b43      	ldr	r3, [pc, #268]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005494:	4a41      	ldr	r2, [pc, #260]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800549a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800549c:	4b40      	ldr	r3, [pc, #256]	@ (80055a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2232      	movs	r2, #50	@ 0x32
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4a3f      	ldr	r2, [pc, #252]	@ (80055a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	0c9b      	lsrs	r3, r3, #18
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	e002      	b.n	80054ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ba:	4b38      	ldr	r3, [pc, #224]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c6:	d102      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f2      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ce:	4b33      	ldr	r3, [pc, #204]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054da:	d158      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e057      	b.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e0:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e6:	4a2d      	ldr	r2, [pc, #180]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054f0:	e04d      	b.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f8:	d141      	bne.n	800557e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054fa:	4b28      	ldr	r3, [pc, #160]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005506:	d131      	bne.n	800556c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005508:	4b24      	ldr	r3, [pc, #144]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550e:	4a23      	ldr	r2, [pc, #140]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005518:	4b20      	ldr	r3, [pc, #128]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005520:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2232      	movs	r2, #50	@ 0x32
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	0c9b      	lsrs	r3, r3, #18
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800553e:	e002      	b.n	8005546 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3b01      	subs	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005546:	4b15      	ldr	r3, [pc, #84]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005552:	d102      	bne.n	800555a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f2      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005566:	d112      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e011      	b.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005572:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800557c:	e007      	b.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005588:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800558c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40007000 	.word	0x40007000
 80055a0:	200002bc 	.word	0x200002bc
 80055a4:	431bde83 	.word	0x431bde83

080055a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055ac:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a04      	ldr	r2, [pc, #16]	@ (80055c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055b6:	6093      	str	r3, [r2, #8]
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40007000 	.word	0x40007000

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e2fe      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d075      	beq.n	80056d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	4b97      	ldr	r3, [pc, #604]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f0:	4b94      	ldr	r3, [pc, #592]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_OscConfig+0x3e>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d002      	beq.n	800560c <HAL_RCC_OscConfig+0x44>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4b8d      	ldr	r3, [pc, #564]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05b      	beq.n	80056d0 <HAL_RCC_OscConfig+0x108>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d157      	bne.n	80056d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e2d9      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800562c:	d106      	bne.n	800563c <HAL_RCC_OscConfig+0x74>
 800562e:	4b85      	ldr	r3, [pc, #532]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a84      	ldr	r2, [pc, #528]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e01d      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x98>
 8005646:	4b7f      	ldr	r3, [pc, #508]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7e      	ldr	r2, [pc, #504]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800564c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b7c      	ldr	r3, [pc, #496]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7b      	ldr	r2, [pc, #492]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 8005660:	4b78      	ldr	r3, [pc, #480]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a77      	ldr	r2, [pc, #476]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b75      	ldr	r3, [pc, #468]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a74      	ldr	r2, [pc, #464]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fd ffd4 	bl	800362c <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd ffd0 	bl	800362c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	@ 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e29e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569a:	4b6a      	ldr	r3, [pc, #424]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0xc0>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd ffc0 	bl	800362c <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fd ffbc 	bl	800362c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e28a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c2:	4b60      	ldr	r3, [pc, #384]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0xe8>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d075      	beq.n	80057ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056de:	4b59      	ldr	r3, [pc, #356]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e8:	4b56      	ldr	r3, [pc, #344]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d102      	bne.n	80056fe <HAL_RCC_OscConfig+0x136>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_OscConfig+0x13c>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d11f      	bne.n	8005744 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005704:	4b4f      	ldr	r3, [pc, #316]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_OscConfig+0x154>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e25d      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571c:	4b49      	ldr	r3, [pc, #292]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	4946      	ldr	r1, [pc, #280]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <HAL_RCC_OscConfig+0x280>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd ff2d 	bl	8003594 <HAL_InitTick>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d043      	beq.n	80057c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e249      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574c:	4b3d      	ldr	r3, [pc, #244]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3c      	ldr	r2, [pc, #240]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fd ff68 	bl	800362c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fd ff64 	bl	800362c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e232      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005772:	4b34      	ldr	r3, [pc, #208]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	492d      	ldr	r1, [pc, #180]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	604b      	str	r3, [r1, #4]
 8005792:	e01a      	b.n	80057ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005794:	4b2b      	ldr	r3, [pc, #172]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800579a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fd ff44 	bl	800362c <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fd ff40 	bl	800362c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e20e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ba:	4b22      	ldr	r3, [pc, #136]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1e0>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d041      	beq.n	800585a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01c      	beq.n	8005818 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e4:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fd ff1d 	bl	800362c <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fd ff19 	bl	800362c <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e1e7      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800580a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ef      	beq.n	80057f6 <HAL_RCC_OscConfig+0x22e>
 8005816:	e020      	b.n	800585a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005818:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581e:	4a09      	ldr	r2, [pc, #36]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd ff00 	bl	800362c <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800582e:	e00d      	b.n	800584c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005830:	f7fd fefc 	bl	800362c <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d906      	bls.n	800584c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1ca      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	200002c0 	.word	0x200002c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800584c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ea      	bne.n	8005830 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a6 	beq.w	80059b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005868:	2300      	movs	r3, #0
 800586a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800586c:	4b84      	ldr	r3, [pc, #528]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x2b4>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x2b6>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b7f      	ldr	r3, [pc, #508]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	4a7e      	ldr	r2, [pc, #504]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	@ 0x58
 800588e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589e:	4b79      	ldr	r3, [pc, #484]	@ (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058aa:	4b76      	ldr	r3, [pc, #472]	@ (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a75      	ldr	r2, [pc, #468]	@ (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fd feb9 	bl	800362c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fd feb5 	bl	800362c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e183      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <HAL_RCC_OscConfig+0x32e>
 80058e4:	4b66      	ldr	r3, [pc, #408]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ea:	4a65      	ldr	r2, [pc, #404]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f4:	e024      	b.n	8005940 <HAL_RCC_OscConfig+0x378>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d110      	bne.n	8005920 <HAL_RCC_OscConfig+0x358>
 80058fe:	4b60      	ldr	r3, [pc, #384]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005904:	4a5e      	ldr	r2, [pc, #376]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800590e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005914:	4a5a      	ldr	r2, [pc, #360]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800591e:	e00f      	b.n	8005940 <HAL_RCC_OscConfig+0x378>
 8005920:	4b57      	ldr	r3, [pc, #348]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005926:	4a56      	ldr	r2, [pc, #344]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005930:	4b53      	ldr	r3, [pc, #332]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005936:	4a52      	ldr	r2, [pc, #328]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d016      	beq.n	8005976 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005948:	f7fd fe70 	bl	800362c <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fd fe6c 	bl	800362c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e138      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005966:	4b46      	ldr	r3, [pc, #280]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ed      	beq.n	8005950 <HAL_RCC_OscConfig+0x388>
 8005974:	e015      	b.n	80059a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fd fe59 	bl	800362c <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fd fe55 	bl	800362c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e121      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005994:	4b3a      	ldr	r3, [pc, #232]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ed      	bne.n	800597e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b35      	ldr	r3, [pc, #212]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ac:	4a34      	ldr	r2, [pc, #208]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03c      	beq.n	8005a3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01c      	beq.n	8005a02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fd fe28 	bl	800362c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059e0:	f7fd fe24 	bl	800362c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0f2      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059f2:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ef      	beq.n	80059e0 <HAL_RCC_OscConfig+0x418>
 8005a00:	e01b      	b.n	8005a3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a02:	4b1f      	ldr	r3, [pc, #124]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a12:	f7fd fe0b 	bl	800362c <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a1a:	f7fd fe07 	bl	800362c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0d5      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a2c:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ef      	bne.n	8005a1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80c9 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a44:	4b0e      	ldr	r3, [pc, #56]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	f000 8083 	beq.w	8005b58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d15e      	bne.n	8005b18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a08      	ldr	r2, [pc, #32]	@ (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fd fde1 	bl	800362c <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	e00c      	b.n	8005a88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fd fddd 	bl	800362c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d905      	bls.n	8005a88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e0ab      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a88:	4b55      	ldr	r3, [pc, #340]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ec      	bne.n	8005a6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a94:	4b52      	ldr	r3, [pc, #328]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	4b52      	ldr	r3, [pc, #328]	@ (8005be4 <HAL_RCC_OscConfig+0x61c>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6a11      	ldr	r1, [r2, #32]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	4311      	orrs	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005aae:	0212      	lsls	r2, r2, #8
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ab6:	0852      	lsrs	r2, r2, #1
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0552      	lsls	r2, r2, #21
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ac2:	0852      	lsrs	r2, r2, #1
 8005ac4:	3a01      	subs	r2, #1
 8005ac6:	0652      	lsls	r2, r2, #25
 8005ac8:	4311      	orrs	r1, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ace:	06d2      	lsls	r2, r2, #27
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	4943      	ldr	r1, [pc, #268]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	4b41      	ldr	r3, [pc, #260]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a40      	ldr	r2, [pc, #256]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fd9c 	bl	800362c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fd fd98 	bl	800362c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e066      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0a:	4b35      	ldr	r3, [pc, #212]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x530>
 8005b16:	e05e      	b.n	8005bd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b31      	ldr	r3, [pc, #196]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a30      	ldr	r2, [pc, #192]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fd fd82 	bl	800362c <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fd fd7e 	bl	800362c <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e04c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3e:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b4a:	4b25      	ldr	r3, [pc, #148]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	4924      	ldr	r1, [pc, #144]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b50:	4b25      	ldr	r3, [pc, #148]	@ (8005be8 <HAL_RCC_OscConfig+0x620>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60cb      	str	r3, [r1, #12]
 8005b56:	e03e      	b.n	8005bd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e039      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b64:	4b1e      	ldr	r3, [pc, #120]	@ (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 0203 	and.w	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d12c      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	3b01      	subs	r3, #1
 8005b84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d123      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d11b      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d113      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d109      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000
 8005be4:	019f800c 	.word	0x019f800c
 8005be8:	feeefffc 	.word	0xfeeefffc

08005bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e11e      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b91      	ldr	r3, [pc, #580]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d910      	bls.n	8005c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b8e      	ldr	r3, [pc, #568]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 020f 	bic.w	r2, r3, #15
 8005c1a:	498c      	ldr	r1, [pc, #560]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b8a      	ldr	r3, [pc, #552]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e106      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d073      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d129      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c48:	4b81      	ldr	r3, [pc, #516]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0f4      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c58:	f000 f99e 	bl	8005f98 <RCC_GetSysClockFreqFromPLLSource>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4a7c      	ldr	r2, [pc, #496]	@ (8005e54 <HAL_RCC_ClockConfig+0x268>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d93f      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c66:	4b7a      	ldr	r3, [pc, #488]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d033      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d12f      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c86:	4b72      	ldr	r3, [pc, #456]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c8e:	4a70      	ldr	r2, [pc, #448]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e024      	b.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0c6      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb4:	4b66      	ldr	r3, [pc, #408]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0be      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005cc4:	f000 f8ce 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4a61      	ldr	r2, [pc, #388]	@ (8005e54 <HAL_RCC_ClockConfig+0x268>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d909      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cda:	4a5d      	ldr	r2, [pc, #372]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f023 0203 	bic.w	r2, r3, #3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4957      	ldr	r1, [pc, #348]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fd fc98 	bl	800362c <HAL_GetTick>
 8005cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d00:	f7fd fc94 	bl	800362c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e095      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d16:	4b4e      	ldr	r3, [pc, #312]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 020c 	and.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d1eb      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d023      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d40:	4b43      	ldr	r3, [pc, #268]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a42      	ldr	r2, [pc, #264]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d58:	4b3d      	ldr	r3, [pc, #244]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d60:	4a3b      	ldr	r2, [pc, #236]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b39      	ldr	r3, [pc, #228]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4936      	ldr	r1, [pc, #216]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d105      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d82:	4b33      	ldr	r3, [pc, #204]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d21d      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f023 020f 	bic.w	r2, r3, #15
 8005da4:	4929      	ldr	r1, [pc, #164]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dac:	f7fd fc3e 	bl	800362c <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fd fc3a 	bl	800362c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e03b      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1ed      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4917      	ldr	r1, [pc, #92]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490f      	ldr	r1, [pc, #60]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e16:	f000 f825 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490c      	ldr	r1, [pc, #48]	@ (8005e58 <HAL_RCC_ClockConfig+0x26c>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e32:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <HAL_RCC_ClockConfig+0x270>)
 8005e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e36:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x274>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fbaa 	bl	8003594 <HAL_InitTick>
 8005e40:	4603      	mov	r3, r0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40022000 	.word	0x40022000
 8005e50:	40021000 	.word	0x40021000
 8005e54:	04c4b400 	.word	0x04c4b400
 8005e58:	0800a988 	.word	0x0800a988
 8005e5c:	200002bc 	.word	0x200002bc
 8005e60:	200002c0 	.word	0x200002c0

08005e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d102      	bne.n	8005e7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e76:	4b2a      	ldr	r3, [pc, #168]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e047      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e7c:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 030c 	and.w	r3, r3, #12
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d102      	bne.n	8005e8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e88:	4b26      	ldr	r3, [pc, #152]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e03e      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d136      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e9a:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec2:	68d2      	ldr	r2, [r2, #12]
 8005ec4:	0a12      	lsrs	r2, r2, #8
 8005ec6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	617b      	str	r3, [r7, #20]
      break;
 8005ed0:	e00c      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	4a10      	ldr	r2, [pc, #64]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005edc:	68d2      	ldr	r2, [r2, #12]
 8005ede:	0a12      	lsrs	r2, r2, #8
 8005ee0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
      break;
 8005eea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eec:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	0e5b      	lsrs	r3, r3, #25
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	e001      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f0c:	693b      	ldr	r3, [r7, #16]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	016e3600 	.word	0x016e3600

08005f28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	@ (8005f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	200002bc 	.word	0x200002bc

08005f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f44:	f7ff fff0 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4904      	ldr	r1, [pc, #16]	@ (8005f68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40021000 	.word	0x40021000
 8005f68:	0800a998 	.word	0x0800a998

08005f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f70:	f7ff ffda 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0adb      	lsrs	r3, r3, #11
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4904      	ldr	r1, [pc, #16]	@ (8005f94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0800a998 	.word	0x0800a998

08005f98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d10c      	bne.n	8005fd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fbc:	4a17      	ldr	r2, [pc, #92]	@ (800601c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	4a14      	ldr	r2, [pc, #80]	@ (8006018 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fc6:	68d2      	ldr	r2, [r2, #12]
 8005fc8:	0a12      	lsrs	r2, r2, #8
 8005fca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	617b      	str	r3, [r7, #20]
    break;
 8005fd4:	e00c      	b.n	8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fd6:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	4a0e      	ldr	r2, [pc, #56]	@ (8006018 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fe0:	68d2      	ldr	r2, [r2, #12]
 8005fe2:	0a12      	lsrs	r2, r2, #8
 8005fe4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]
    break;
 8005fee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ff0:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0e5b      	lsrs	r3, r3, #25
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800600a:	687b      	ldr	r3, [r7, #4]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40021000 	.word	0x40021000
 800601c:	016e3600 	.word	0x016e3600
 8006020:	00f42400 	.word	0x00f42400

08006024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800602c:	2300      	movs	r3, #0
 800602e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006030:	2300      	movs	r3, #0
 8006032:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8098 	beq.w	8006172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006042:	2300      	movs	r3, #0
 8006044:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006046:	4b43      	ldr	r3, [pc, #268]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10d      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	4b40      	ldr	r3, [pc, #256]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	4a3f      	ldr	r2, [pc, #252]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
 800605e:	4b3d      	ldr	r3, [pc, #244]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606a:	2301      	movs	r3, #1
 800606c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800606e:	4b3a      	ldr	r3, [pc, #232]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a39      	ldr	r2, [pc, #228]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607a:	f7fd fad7 	bl	800362c <HAL_GetTick>
 800607e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006080:	e009      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006082:	f7fd fad3 	bl	800362c <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d902      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	74fb      	strb	r3, [r7, #19]
        break;
 8006094:	e005      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006096:	4b30      	ldr	r3, [pc, #192]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0ef      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80060a2:	7cfb      	ldrb	r3, [r7, #19]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d159      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01e      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d019      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060c4:	4b23      	ldr	r3, [pc, #140]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d0:	4b20      	ldr	r3, [pc, #128]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060f0:	4a18      	ldr	r2, [pc, #96]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d016      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006102:	f7fd fa93 	bl	800362c <HAL_GetTick>
 8006106:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006108:	e00b      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fd fa8f 	bl	800362c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006118:	4293      	cmp	r3, r2
 800611a:	d902      	bls.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	74fb      	strb	r3, [r7, #19]
            break;
 8006120:	e006      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006122:	4b0c      	ldr	r3, [pc, #48]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ec      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006130:	7cfb      	ldrb	r3, [r7, #19]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006136:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006144:	4903      	ldr	r1, [pc, #12]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800614c:	e008      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	74bb      	strb	r3, [r7, #18]
 8006152:	e005      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006154:	40021000 	.word	0x40021000
 8006158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006160:	7c7b      	ldrb	r3, [r7, #17]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d105      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006166:	4ba7      	ldr	r3, [pc, #668]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616a:	4aa6      	ldr	r2, [pc, #664]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006170:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800617e:	4ba1      	ldr	r3, [pc, #644]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f023 0203 	bic.w	r2, r3, #3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	499d      	ldr	r1, [pc, #628]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061a0:	4b98      	ldr	r3, [pc, #608]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f023 020c 	bic.w	r2, r3, #12
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4995      	ldr	r1, [pc, #596]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061c2:	4b90      	ldr	r3, [pc, #576]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	498c      	ldr	r1, [pc, #560]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061e4:	4b87      	ldr	r3, [pc, #540]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4984      	ldr	r1, [pc, #528]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006206:	4b7f      	ldr	r3, [pc, #508]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	497b      	ldr	r1, [pc, #492]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006228:	4b76      	ldr	r3, [pc, #472]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	4973      	ldr	r1, [pc, #460]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800624a:	4b6e      	ldr	r3, [pc, #440]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006250:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	496a      	ldr	r1, [pc, #424]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800626c:	4b65      	ldr	r3, [pc, #404]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4962      	ldr	r1, [pc, #392]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800628e:	4b5d      	ldr	r3, [pc, #372]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	4959      	ldr	r1, [pc, #356]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062b0:	4b54      	ldr	r3, [pc, #336]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062b6:	f023 0203 	bic.w	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	4951      	ldr	r1, [pc, #324]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	4948      	ldr	r1, [pc, #288]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d015      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f4:	4b43      	ldr	r3, [pc, #268]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	4940      	ldr	r1, [pc, #256]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006312:	d105      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006314:	4b3b      	ldr	r3, [pc, #236]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4a3a      	ldr	r2, [pc, #232]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800631e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006328:	2b00      	cmp	r3, #0
 800632a:	d015      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800632c:	4b35      	ldr	r3, [pc, #212]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006332:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	4932      	ldr	r1, [pc, #200]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800634a:	d105      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800634c:	4b2d      	ldr	r3, [pc, #180]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006356:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d015      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006364:	4b27      	ldr	r3, [pc, #156]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	4924      	ldr	r1, [pc, #144]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006382:	d105      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006384:	4b1f      	ldr	r3, [pc, #124]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4a1e      	ldr	r2, [pc, #120]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800638e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800639c:	4b19      	ldr	r3, [pc, #100]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063aa:	4916      	ldr	r1, [pc, #88]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ba:	d105      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063bc:	4b11      	ldr	r3, [pc, #68]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4a10      	ldr	r2, [pc, #64]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d019      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	4908      	ldr	r1, [pc, #32]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063f2:	d109      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f4:	4b03      	ldr	r3, [pc, #12]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	4a02      	ldr	r2, [pc, #8]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063fe:	60d3      	str	r3, [r2, #12]
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006402:	bf00      	nop
 8006404:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d015      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006414:	4b29      	ldr	r3, [pc, #164]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006422:	4926      	ldr	r1, [pc, #152]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006432:	d105      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006434:	4b21      	ldr	r3, [pc, #132]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a20      	ldr	r2, [pc, #128]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800643a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d015      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800644c:	4b1b      	ldr	r3, [pc, #108]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006452:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645a:	4918      	ldr	r1, [pc, #96]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646a:	d105      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800646c:	4b13      	ldr	r3, [pc, #76]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006476:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006484:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800648a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006492:	490a      	ldr	r1, [pc, #40]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064a2:	d105      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000

080064c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e054      	b.n	800657c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d111      	bne.n	8006502 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 feec 	bl	80082c4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a23      	ldr	r2, [pc, #140]	@ (8006584 <HAL_TIM_Base_Init+0xc4>)
 80064f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f001 fa35 	bl	8007984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	08002fe1 	.word	0x08002fe1

08006588 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e04c      	b.n	800663a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a26      	ldr	r2, [pc, #152]	@ (8006648 <HAL_TIM_Base_Start+0xc0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ba:	d01d      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	@ (800664c <HAL_TIM_Base_Start+0xc4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	@ (8006650 <HAL_TIM_Base_Start+0xc8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <HAL_TIM_Base_Start+0xcc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	@ (8006658 <HAL_TIM_Base_Start+0xd0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	@ (800665c <HAL_TIM_Base_Start+0xd4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIM_Base_Start+0x70>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <HAL_TIM_Base_Start+0xd8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d115      	bne.n	8006624 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	4b19      	ldr	r3, [pc, #100]	@ (8006664 <HAL_TIM_Base_Start+0xdc>)
 8006600:	4013      	ands	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b06      	cmp	r3, #6
 8006608:	d015      	beq.n	8006636 <HAL_TIM_Base_Start+0xae>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006610:	d011      	beq.n	8006636 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	e008      	b.n	8006636 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e000      	b.n	8006638 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40012c00 	.word	0x40012c00
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40013400 	.word	0x40013400
 800665c:	40014000 	.word	0x40014000
 8006660:	40015000 	.word	0x40015000
 8006664:	00010007 	.word	0x00010007

08006668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d001      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e054      	b.n	800672a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a26      	ldr	r2, [pc, #152]	@ (8006738 <HAL_TIM_Base_Start_IT+0xd0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d01d      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a22      	ldr	r2, [pc, #136]	@ (800673c <HAL_TIM_Base_Start_IT+0xd4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_TIM_Base_Start_IT+0xd8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006748 <HAL_TIM_Base_Start_IT+0xe0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <HAL_TIM_Base_Start_IT+0xe4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x80>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006750 <HAL_TIM_Base_Start_IT+0xe8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d115      	bne.n	8006714 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	4b19      	ldr	r3, [pc, #100]	@ (8006754 <HAL_TIM_Base_Start_IT+0xec>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d015      	beq.n	8006726 <HAL_TIM_Base_Start_IT+0xbe>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006700:	d011      	beq.n	8006726 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006712:	e008      	b.n	8006726 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e000      	b.n	8006728 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40014000 	.word	0x40014000
 8006750:	40015000 	.word	0x40015000
 8006754:	00010007 	.word	0x00010007

08006758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e054      	b.n	8006814 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d111      	bne.n	800679a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fda0 	bl	80082c4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a23      	ldr	r2, [pc, #140]	@ (800681c <HAL_TIM_PWM_Init+0xc4>)
 8006790:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f001 f8e9 	bl	8007984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08006821 	.word	0x08006821

08006820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_TIM_PWM_Start+0x24>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e03c      	b.n	80068d2 <HAL_TIM_PWM_Start+0x9e>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d109      	bne.n	8006872 <HAL_TIM_PWM_Start+0x3e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	e02f      	b.n	80068d2 <HAL_TIM_PWM_Start+0x9e>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d109      	bne.n	800688c <HAL_TIM_PWM_Start+0x58>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e022      	b.n	80068d2 <HAL_TIM_PWM_Start+0x9e>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d109      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x72>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b01      	cmp	r3, #1
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	e015      	b.n	80068d2 <HAL_TIM_PWM_Start+0x9e>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_PWM_Start+0x8c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e008      	b.n	80068d2 <HAL_TIM_PWM_Start+0x9e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e0a6      	b.n	8006a28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <HAL_TIM_PWM_Start+0xb6>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068e8:	e023      	b.n	8006932 <HAL_TIM_PWM_Start+0xfe>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_PWM_Start+0xc6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f8:	e01b      	b.n	8006932 <HAL_TIM_PWM_Start+0xfe>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d104      	bne.n	800690a <HAL_TIM_PWM_Start+0xd6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006908:	e013      	b.n	8006932 <HAL_TIM_PWM_Start+0xfe>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b0c      	cmp	r3, #12
 800690e:	d104      	bne.n	800691a <HAL_TIM_PWM_Start+0xe6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006918:	e00b      	b.n	8006932 <HAL_TIM_PWM_Start+0xfe>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b10      	cmp	r3, #16
 800691e:	d104      	bne.n	800692a <HAL_TIM_PWM_Start+0xf6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006928:	e003      	b.n	8006932 <HAL_TIM_PWM_Start+0xfe>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2201      	movs	r2, #1
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f001 fc9c 	bl	8008278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3a      	ldr	r2, [pc, #232]	@ (8006a30 <HAL_TIM_PWM_Start+0x1fc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_TIM_PWM_Start+0x148>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a39      	ldr	r2, [pc, #228]	@ (8006a34 <HAL_TIM_PWM_Start+0x200>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_TIM_PWM_Start+0x148>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a37      	ldr	r2, [pc, #220]	@ (8006a38 <HAL_TIM_PWM_Start+0x204>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIM_PWM_Start+0x148>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <HAL_TIM_PWM_Start+0x208>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIM_PWM_Start+0x148>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	@ (8006a40 <HAL_TIM_PWM_Start+0x20c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_PWM_Start+0x148>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <HAL_TIM_PWM_Start+0x210>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <HAL_TIM_PWM_Start+0x14c>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <HAL_TIM_PWM_Start+0x14e>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a25      	ldr	r2, [pc, #148]	@ (8006a30 <HAL_TIM_PWM_Start+0x1fc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a8:	d01d      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a26      	ldr	r2, [pc, #152]	@ (8006a48 <HAL_TIM_PWM_Start+0x214>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a24      	ldr	r2, [pc, #144]	@ (8006a4c <HAL_TIM_PWM_Start+0x218>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a23      	ldr	r2, [pc, #140]	@ (8006a50 <HAL_TIM_PWM_Start+0x21c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a19      	ldr	r2, [pc, #100]	@ (8006a34 <HAL_TIM_PWM_Start+0x200>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a18      	ldr	r2, [pc, #96]	@ (8006a38 <HAL_TIM_PWM_Start+0x204>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x1b2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	@ (8006a44 <HAL_TIM_PWM_Start+0x210>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d115      	bne.n	8006a12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <HAL_TIM_PWM_Start+0x220>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d015      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x1f0>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fe:	d011      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	e008      	b.n	8006a24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e000      	b.n	8006a26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800
 8006a44:	40015000 	.word	0x40015000
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40000c00 	.word	0x40000c00
 8006a54:	00010007 	.word	0x00010007

08006a58 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e04c      	b.n	8006b06 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d111      	bne.n	8006a9c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fc1f 	bl	80082c4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1f      	ldr	r2, [pc, #124]	@ (8006b10 <HAL_TIM_OnePulse_Init+0xb8>)
 8006a92:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 ff68 	bl	8007984 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0208 	bic.w	r2, r2, #8
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	08006b15 	.word	0x08006b15

08006b14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b50:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d108      	bne.n	8006b6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d105      	bne.n	8006b6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b5e:	7b7b      	ldrb	r3, [r7, #13]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d102      	bne.n	8006b6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b64:	7b3b      	ldrb	r3, [r7, #12]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e059      	b.n	8006c22 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0202 	orr.w	r2, r2, #2
 8006b9c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0204 	orr.w	r2, r2, #4
 8006bac:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fb5e 	bl	8008278 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	2104      	movs	r1, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fb57 	bl	8008278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a15      	ldr	r2, [pc, #84]	@ (8006c30 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a14      	ldr	r2, [pc, #80]	@ (8006c34 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a12      	ldr	r2, [pc, #72]	@ (8006c38 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a11      	ldr	r2, [pc, #68]	@ (8006c3c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0f      	ldr	r2, [pc, #60]	@ (8006c40 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40013400 	.word	0x40013400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800
 8006c40:	40015000 	.word	0x40015000

08006c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0a2      	b.n	8006d9e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d111      	bne.n	8006c88 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fb29 	bl	80082c4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8006da8 <HAL_TIM_Encoder_Init+0x164>)
 8006c7e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f000 fe68 	bl	8007984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	4313      	orrs	r3, r2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cfa:	f023 030c 	bic.w	r3, r3, #12
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	4313      	orrs	r3, r2
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	011a      	lsls	r2, r3, #4
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	031b      	lsls	r3, r3, #12
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	080030c1 	.word	0x080030c1

08006dac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006dc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d110      	bne.n	8006dfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d102      	bne.n	8006de8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006de2:	7b7b      	ldrb	r3, [r7, #13]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d001      	beq.n	8006dec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e069      	b.n	8006ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dfc:	e031      	b.n	8006e62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d110      	bne.n	8006e26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d102      	bne.n	8006e10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e0a:	7b3b      	ldrb	r3, [r7, #12]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d001      	beq.n	8006e14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e055      	b.n	8006ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e24:	e01d      	b.n	8006e62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d108      	bne.n	8006e3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d105      	bne.n	8006e3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e32:	7b7b      	ldrb	r3, [r7, #13]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d102      	bne.n	8006e3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e38:	7b3b      	ldrb	r3, [r7, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d001      	beq.n	8006e42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e03e      	b.n	8006ec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_TIM_Encoder_Start+0xc4>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d008      	beq.n	8006e80 <HAL_TIM_Encoder_Start+0xd4>
 8006e6e:	e00f      	b.n	8006e90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2201      	movs	r2, #1
 8006e76:	2100      	movs	r1, #0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 f9fd 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 8006e7e:	e016      	b.n	8006eae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	2104      	movs	r1, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 f9f5 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 8006e8e:	e00e      	b.n	8006eae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2201      	movs	r2, #1
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f9ed 	bl	8008278 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 f9e6 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 8006eac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d026      	beq.n	8006f38 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d021      	beq.n	8006f38 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0202 	mvn.w	r2, #2
 8006efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	e009      	b.n	8006f32 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d026      	beq.n	8006f90 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d021      	beq.n	8006f90 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0204 	mvn.w	r2, #4
 8006f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
 8006f74:	e009      	b.n	8006f8a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d026      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d021      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0208 	mvn.w	r2, #8
 8006fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
 8006fcc:	e009      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d026      	beq.n	8007040 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d021      	beq.n	8007040 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0210 	mvn.w	r2, #16
 8007004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2208      	movs	r2, #8
 800700a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
 8007024:	e009      	b.n	800703a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0201 	mvn.w	r2, #1
 800705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800708e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00e      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f06f 0220 	mvn.w	r2, #32
 8007106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800712e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800717e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00e      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80071a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0ff      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b14      	cmp	r3, #20
 80071e6:	f200 80f0 	bhi.w	80073ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007245 	.word	0x08007245
 80071f4:	080073cb 	.word	0x080073cb
 80071f8:	080073cb 	.word	0x080073cb
 80071fc:	080073cb 	.word	0x080073cb
 8007200:	08007285 	.word	0x08007285
 8007204:	080073cb 	.word	0x080073cb
 8007208:	080073cb 	.word	0x080073cb
 800720c:	080073cb 	.word	0x080073cb
 8007210:	080072c7 	.word	0x080072c7
 8007214:	080073cb 	.word	0x080073cb
 8007218:	080073cb 	.word	0x080073cb
 800721c:	080073cb 	.word	0x080073cb
 8007220:	08007307 	.word	0x08007307
 8007224:	080073cb 	.word	0x080073cb
 8007228:	080073cb 	.word	0x080073cb
 800722c:	080073cb 	.word	0x080073cb
 8007230:	08007349 	.word	0x08007349
 8007234:	080073cb 	.word	0x080073cb
 8007238:	080073cb 	.word	0x080073cb
 800723c:	080073cb 	.word	0x080073cb
 8007240:	08007389 	.word	0x08007389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fc4e 	bl	8007aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0208 	orr.w	r2, r2, #8
 800725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6999      	ldr	r1, [r3, #24]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	619a      	str	r2, [r3, #24]
      break;
 8007282:	e0a5      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fcc8 	bl	8007c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6999      	ldr	r1, [r3, #24]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	021a      	lsls	r2, r3, #8
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	619a      	str	r2, [r3, #24]
      break;
 80072c4:	e084      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd3b 	bl	8007d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0208 	orr.w	r2, r2, #8
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0204 	bic.w	r2, r2, #4
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	61da      	str	r2, [r3, #28]
      break;
 8007304:	e064      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fdad 	bl	8007e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69d9      	ldr	r1, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	021a      	lsls	r2, r3, #8
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	61da      	str	r2, [r3, #28]
      break;
 8007346:	e043      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fe20 	bl	8007f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0204 	bic.w	r2, r2, #4
 8007372:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007386:	e023      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fe6a 	bl	8008068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073c8:	e002      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
      break;
 80073ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop

080073e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_ConfigClockSource+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e0f6      	b.n	80075ee <HAL_TIM_ConfigClockSource+0x20a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800741e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800742a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a6f      	ldr	r2, [pc, #444]	@ (80075f8 <HAL_TIM_ConfigClockSource+0x214>)
 800743a:	4293      	cmp	r3, r2
 800743c:	f000 80c1 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007440:	4a6d      	ldr	r2, [pc, #436]	@ (80075f8 <HAL_TIM_ConfigClockSource+0x214>)
 8007442:	4293      	cmp	r3, r2
 8007444:	f200 80c6 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007448:	4a6c      	ldr	r2, [pc, #432]	@ (80075fc <HAL_TIM_ConfigClockSource+0x218>)
 800744a:	4293      	cmp	r3, r2
 800744c:	f000 80b9 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007450:	4a6a      	ldr	r2, [pc, #424]	@ (80075fc <HAL_TIM_ConfigClockSource+0x218>)
 8007452:	4293      	cmp	r3, r2
 8007454:	f200 80be 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007458:	4a69      	ldr	r2, [pc, #420]	@ (8007600 <HAL_TIM_ConfigClockSource+0x21c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	f000 80b1 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007460:	4a67      	ldr	r2, [pc, #412]	@ (8007600 <HAL_TIM_ConfigClockSource+0x21c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	f200 80b6 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007468:	4a66      	ldr	r2, [pc, #408]	@ (8007604 <HAL_TIM_ConfigClockSource+0x220>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f000 80a9 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007470:	4a64      	ldr	r2, [pc, #400]	@ (8007604 <HAL_TIM_ConfigClockSource+0x220>)
 8007472:	4293      	cmp	r3, r2
 8007474:	f200 80ae 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007478:	4a63      	ldr	r2, [pc, #396]	@ (8007608 <HAL_TIM_ConfigClockSource+0x224>)
 800747a:	4293      	cmp	r3, r2
 800747c:	f000 80a1 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007480:	4a61      	ldr	r2, [pc, #388]	@ (8007608 <HAL_TIM_ConfigClockSource+0x224>)
 8007482:	4293      	cmp	r3, r2
 8007484:	f200 80a6 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007488:	4a60      	ldr	r2, [pc, #384]	@ (800760c <HAL_TIM_ConfigClockSource+0x228>)
 800748a:	4293      	cmp	r3, r2
 800748c:	f000 8099 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007490:	4a5e      	ldr	r2, [pc, #376]	@ (800760c <HAL_TIM_ConfigClockSource+0x228>)
 8007492:	4293      	cmp	r3, r2
 8007494:	f200 809e 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007498:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800749c:	f000 8091 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 80074a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074a4:	f200 8096 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ac:	f000 8089 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 80074b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074b4:	f200 808e 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074bc:	d03e      	beq.n	800753c <HAL_TIM_ConfigClockSource+0x158>
 80074be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c2:	f200 8087 	bhi.w	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ca:	f000 8086 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1f6>
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d2:	d87f      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074d4:	2b70      	cmp	r3, #112	@ 0x70
 80074d6:	d01a      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x12a>
 80074d8:	2b70      	cmp	r3, #112	@ 0x70
 80074da:	d87b      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074dc:	2b60      	cmp	r3, #96	@ 0x60
 80074de:	d050      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x19e>
 80074e0:	2b60      	cmp	r3, #96	@ 0x60
 80074e2:	d877      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074e4:	2b50      	cmp	r3, #80	@ 0x50
 80074e6:	d03c      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x17e>
 80074e8:	2b50      	cmp	r3, #80	@ 0x50
 80074ea:	d873      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ec:	2b40      	cmp	r3, #64	@ 0x40
 80074ee:	d058      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x1be>
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	d86f      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074f4:	2b30      	cmp	r3, #48	@ 0x30
 80074f6:	d064      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 80074f8:	2b30      	cmp	r3, #48	@ 0x30
 80074fa:	d86b      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d060      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d867      	bhi.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d05c      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 8007508:	2b10      	cmp	r3, #16
 800750a:	d05a      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x1de>
 800750c:	e062      	b.n	80075d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800751e:	f000 fe8b 	bl	8008238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	609a      	str	r2, [r3, #8]
      break;
 800753a:	e04f      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800754c:	f000 fe74 	bl	8008238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800755e:	609a      	str	r2, [r3, #8]
      break;
 8007560:	e03c      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800756e:	461a      	mov	r2, r3
 8007570:	f000 fde6 	bl	8008140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2150      	movs	r1, #80	@ 0x50
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fe3f 	bl	80081fe <TIM_ITRx_SetConfig>
      break;
 8007580:	e02c      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800758e:	461a      	mov	r2, r3
 8007590:	f000 fe05 	bl	800819e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2160      	movs	r1, #96	@ 0x60
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fe2f 	bl	80081fe <TIM_ITRx_SetConfig>
      break;
 80075a0:	e01c      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ae:	461a      	mov	r2, r3
 80075b0:	f000 fdc6 	bl	8008140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2140      	movs	r1, #64	@ 0x40
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fe1f 	bl	80081fe <TIM_ITRx_SetConfig>
      break;
 80075c0:	e00c      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f000 fe16 	bl	80081fe <TIM_ITRx_SetConfig>
      break;
 80075d2:	e003      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      break;
 80075d8:	e000      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80075da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	00100070 	.word	0x00100070
 80075fc:	00100060 	.word	0x00100060
 8007600:	00100050 	.word	0x00100050
 8007604:	00100040 	.word	0x00100040
 8007608:	00100030 	.word	0x00100030
 800760c:	00100020 	.word	0x00100020

08007610 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	460b      	mov	r3, r1
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e14a      	b.n	8007976 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80dd 	bne.w	80078a8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	2b1f      	cmp	r3, #31
 80076f2:	f200 80d6 	bhi.w	80078a2 <HAL_TIM_RegisterCallback+0x1de>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HAL_TIM_RegisterCallback+0x38>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800777d 	.word	0x0800777d
 8007700:	08007785 	.word	0x08007785
 8007704:	0800778d 	.word	0x0800778d
 8007708:	08007795 	.word	0x08007795
 800770c:	0800779d 	.word	0x0800779d
 8007710:	080077a5 	.word	0x080077a5
 8007714:	080077ad 	.word	0x080077ad
 8007718:	080077b5 	.word	0x080077b5
 800771c:	080077bd 	.word	0x080077bd
 8007720:	080077c5 	.word	0x080077c5
 8007724:	080077cd 	.word	0x080077cd
 8007728:	080077d5 	.word	0x080077d5
 800772c:	080077dd 	.word	0x080077dd
 8007730:	080077e5 	.word	0x080077e5
 8007734:	080077ef 	.word	0x080077ef
 8007738:	080077f9 	.word	0x080077f9
 800773c:	08007803 	.word	0x08007803
 8007740:	0800780d 	.word	0x0800780d
 8007744:	08007817 	.word	0x08007817
 8007748:	08007821 	.word	0x08007821
 800774c:	0800782b 	.word	0x0800782b
 8007750:	08007835 	.word	0x08007835
 8007754:	0800783f 	.word	0x0800783f
 8007758:	08007849 	.word	0x08007849
 800775c:	08007853 	.word	0x08007853
 8007760:	0800785d 	.word	0x0800785d
 8007764:	08007867 	.word	0x08007867
 8007768:	08007871 	.word	0x08007871
 800776c:	0800787b 	.word	0x0800787b
 8007770:	08007885 	.word	0x08007885
 8007774:	0800788f 	.word	0x0800788f
 8007778:	08007899 	.word	0x08007899
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007782:	e0f7      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800778a:	e0f3      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007792:	e0ef      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800779a:	e0eb      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80077a2:	e0e7      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80077aa:	e0e3      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80077b2:	e0df      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80077ba:	e0db      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80077c2:	e0d7      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80077ca:	e0d3      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80077d2:	e0cf      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80077da:	e0cb      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80077e2:	e0c7      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80077ec:	e0c2      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80077f6:	e0bd      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007800:	e0b8      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800780a:	e0b3      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007814:	e0ae      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800781e:	e0a9      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007828:	e0a4      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007832:	e09f      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800783c:	e09a      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007846:	e095      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007850:	e090      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800785a:	e08b      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007864:	e086      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800786e:	e081      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007878:	e07c      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007882:	e077      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800788c:	e072      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007896:	e06d      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80078a0:	e068      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
        break;
 80078a6:	e065      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d15d      	bne.n	8007970 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b0d      	cmp	r3, #13
 80078b8:	d857      	bhi.n	800796a <HAL_TIM_RegisterCallback+0x2a6>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <HAL_TIM_RegisterCallback+0x1fc>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078f9 	.word	0x080078f9
 80078c4:	08007901 	.word	0x08007901
 80078c8:	08007909 	.word	0x08007909
 80078cc:	08007911 	.word	0x08007911
 80078d0:	08007919 	.word	0x08007919
 80078d4:	08007921 	.word	0x08007921
 80078d8:	08007929 	.word	0x08007929
 80078dc:	08007931 	.word	0x08007931
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007941 	.word	0x08007941
 80078e8:	08007949 	.word	0x08007949
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007959 	.word	0x08007959
 80078f4:	08007961 	.word	0x08007961
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80078fe:	e039      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007906:	e035      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800790e:	e031      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007916:	e02d      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800791e:	e029      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007926:	e025      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800792e:	e021      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007936:	e01d      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800793e:	e019      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007946:	e015      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800794e:	e011      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007956:	e00d      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800795e:	e009      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007968:	e004      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
        break;
 800796e:	e001      	b.n	8007974 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
}
 8007976:	4618      	mov	r0, r3
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a4c      	ldr	r2, [pc, #304]	@ (8007ac8 <TIM_Base_SetConfig+0x144>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d017      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d013      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a49      	ldr	r2, [pc, #292]	@ (8007acc <TIM_Base_SetConfig+0x148>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00f      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a48      	ldr	r2, [pc, #288]	@ (8007ad0 <TIM_Base_SetConfig+0x14c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a47      	ldr	r2, [pc, #284]	@ (8007ad4 <TIM_Base_SetConfig+0x150>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a46      	ldr	r2, [pc, #280]	@ (8007ad8 <TIM_Base_SetConfig+0x154>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_Base_SetConfig+0x48>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a45      	ldr	r2, [pc, #276]	@ (8007adc <TIM_Base_SetConfig+0x158>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a39      	ldr	r2, [pc, #228]	@ (8007ac8 <TIM_Base_SetConfig+0x144>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d023      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ec:	d01f      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a36      	ldr	r2, [pc, #216]	@ (8007acc <TIM_Base_SetConfig+0x148>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01b      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a35      	ldr	r2, [pc, #212]	@ (8007ad0 <TIM_Base_SetConfig+0x14c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d017      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a34      	ldr	r2, [pc, #208]	@ (8007ad4 <TIM_Base_SetConfig+0x150>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a33      	ldr	r2, [pc, #204]	@ (8007ad8 <TIM_Base_SetConfig+0x154>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a33      	ldr	r2, [pc, #204]	@ (8007ae0 <TIM_Base_SetConfig+0x15c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a32      	ldr	r2, [pc, #200]	@ (8007ae4 <TIM_Base_SetConfig+0x160>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a31      	ldr	r2, [pc, #196]	@ (8007ae8 <TIM_Base_SetConfig+0x164>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xaa>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2c      	ldr	r2, [pc, #176]	@ (8007adc <TIM_Base_SetConfig+0x158>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a18      	ldr	r2, [pc, #96]	@ (8007ac8 <TIM_Base_SetConfig+0x144>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d013      	beq.n	8007a94 <TIM_Base_SetConfig+0x110>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad8 <TIM_Base_SetConfig+0x154>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00f      	beq.n	8007a94 <TIM_Base_SetConfig+0x110>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ae0 <TIM_Base_SetConfig+0x15c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00b      	beq.n	8007a94 <TIM_Base_SetConfig+0x110>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a19      	ldr	r2, [pc, #100]	@ (8007ae4 <TIM_Base_SetConfig+0x160>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d007      	beq.n	8007a94 <TIM_Base_SetConfig+0x110>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a18      	ldr	r2, [pc, #96]	@ (8007ae8 <TIM_Base_SetConfig+0x164>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_Base_SetConfig+0x110>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a13      	ldr	r2, [pc, #76]	@ (8007adc <TIM_Base_SetConfig+0x158>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d105      	bne.n	8007aba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f023 0201 	bic.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	611a      	str	r2, [r3, #16]
  }
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00
 8007ad8:	40013400 	.word	0x40013400
 8007adc:	40015000 	.word	0x40015000
 8007ae0:	40014000 	.word	0x40014000
 8007ae4:	40014400 	.word	0x40014400
 8007ae8:	40014800 	.word	0x40014800

08007aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f023 0201 	bic.w	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 0302 	bic.w	r3, r3, #2
 8007b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a30      	ldr	r2, [pc, #192]	@ (8007c08 <TIM_OC1_SetConfig+0x11c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d013      	beq.n	8007b74 <TIM_OC1_SetConfig+0x88>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8007c0c <TIM_OC1_SetConfig+0x120>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00f      	beq.n	8007b74 <TIM_OC1_SetConfig+0x88>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a2e      	ldr	r2, [pc, #184]	@ (8007c10 <TIM_OC1_SetConfig+0x124>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00b      	beq.n	8007b74 <TIM_OC1_SetConfig+0x88>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8007c14 <TIM_OC1_SetConfig+0x128>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d007      	beq.n	8007b74 <TIM_OC1_SetConfig+0x88>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a2c      	ldr	r2, [pc, #176]	@ (8007c18 <TIM_OC1_SetConfig+0x12c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_OC1_SetConfig+0x88>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8007c1c <TIM_OC1_SetConfig+0x130>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d10c      	bne.n	8007b8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f023 0308 	bic.w	r3, r3, #8
 8007b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 0304 	bic.w	r3, r3, #4
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <TIM_OC1_SetConfig+0x11c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <TIM_OC1_SetConfig+0xd2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1c      	ldr	r2, [pc, #112]	@ (8007c0c <TIM_OC1_SetConfig+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00f      	beq.n	8007bbe <TIM_OC1_SetConfig+0xd2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c10 <TIM_OC1_SetConfig+0x124>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00b      	beq.n	8007bbe <TIM_OC1_SetConfig+0xd2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c14 <TIM_OC1_SetConfig+0x128>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <TIM_OC1_SetConfig+0xd2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <TIM_OC1_SetConfig+0x12c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d003      	beq.n	8007bbe <TIM_OC1_SetConfig+0xd2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a18      	ldr	r2, [pc, #96]	@ (8007c1c <TIM_OC1_SetConfig+0x130>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d111      	bne.n	8007be2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	621a      	str	r2, [r3, #32]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	40015000 	.word	0x40015000

08007c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	f023 0210 	bic.w	r2, r3, #16
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0320 	bic.w	r3, r3, #32
 8007c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d30 <TIM_OC2_SetConfig+0x110>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_OC2_SetConfig+0x74>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a2b      	ldr	r2, [pc, #172]	@ (8007d34 <TIM_OC2_SetConfig+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0x74>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d38 <TIM_OC2_SetConfig+0x118>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d10d      	bne.n	8007cb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <TIM_OC2_SetConfig+0x110>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xc0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <TIM_OC2_SetConfig+0x114>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00f      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xc0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d3c <TIM_OC2_SetConfig+0x11c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xc0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a1d      	ldr	r2, [pc, #116]	@ (8007d40 <TIM_OC2_SetConfig+0x120>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xc0>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8007d44 <TIM_OC2_SetConfig+0x124>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC2_SetConfig+0xc0>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <TIM_OC2_SetConfig+0x118>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d113      	bne.n	8007d08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40013400 	.word	0x40013400
 8007d38:	40015000 	.word	0x40015000
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800

08007d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a2b      	ldr	r2, [pc, #172]	@ (8007e54 <TIM_OC3_SetConfig+0x10c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <TIM_OC3_SetConfig+0x72>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a2a      	ldr	r2, [pc, #168]	@ (8007e58 <TIM_OC3_SetConfig+0x110>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_OC3_SetConfig+0x72>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a29      	ldr	r2, [pc, #164]	@ (8007e5c <TIM_OC3_SetConfig+0x114>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d10d      	bne.n	8007dd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8007e54 <TIM_OC3_SetConfig+0x10c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d013      	beq.n	8007e06 <TIM_OC3_SetConfig+0xbe>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e58 <TIM_OC3_SetConfig+0x110>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00f      	beq.n	8007e06 <TIM_OC3_SetConfig+0xbe>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <TIM_OC3_SetConfig+0x118>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00b      	beq.n	8007e06 <TIM_OC3_SetConfig+0xbe>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e64 <TIM_OC3_SetConfig+0x11c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d007      	beq.n	8007e06 <TIM_OC3_SetConfig+0xbe>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <TIM_OC3_SetConfig+0x120>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d003      	beq.n	8007e06 <TIM_OC3_SetConfig+0xbe>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a16      	ldr	r2, [pc, #88]	@ (8007e5c <TIM_OC3_SetConfig+0x114>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d113      	bne.n	8007e2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	621a      	str	r2, [r3, #32]
}
 8007e48:	bf00      	nop
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40013400 	.word	0x40013400
 8007e5c:	40015000 	.word	0x40015000
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800

08007e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	031b      	lsls	r3, r3, #12
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a2c      	ldr	r2, [pc, #176]	@ (8007f7c <TIM_OC4_SetConfig+0x110>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_OC4_SetConfig+0x74>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8007f80 <TIM_OC4_SetConfig+0x114>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC4_SetConfig+0x74>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a2a      	ldr	r2, [pc, #168]	@ (8007f84 <TIM_OC4_SetConfig+0x118>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10d      	bne.n	8007efc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007efa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a1f      	ldr	r2, [pc, #124]	@ (8007f7c <TIM_OC4_SetConfig+0x110>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <TIM_OC4_SetConfig+0xc0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	@ (8007f80 <TIM_OC4_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00f      	beq.n	8007f2c <TIM_OC4_SetConfig+0xc0>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f88 <TIM_OC4_SetConfig+0x11c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_OC4_SetConfig+0xc0>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a1d      	ldr	r2, [pc, #116]	@ (8007f8c <TIM_OC4_SetConfig+0x120>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_OC4_SetConfig+0xc0>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f90 <TIM_OC4_SetConfig+0x124>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC4_SetConfig+0xc0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <TIM_OC4_SetConfig+0x118>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d113      	bne.n	8007f54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	019b      	lsls	r3, r3, #6
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40015000 	.word	0x40015000
 8007f88:	40014000 	.word	0x40014000
 8007f8c:	40014400 	.word	0x40014400
 8007f90:	40014800 	.word	0x40014800

08007f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <TIM_OC5_SetConfig+0xbc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <TIM_OC5_SetConfig+0x82>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a18      	ldr	r2, [pc, #96]	@ (8008054 <TIM_OC5_SetConfig+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00f      	beq.n	8008016 <TIM_OC5_SetConfig+0x82>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a17      	ldr	r2, [pc, #92]	@ (8008058 <TIM_OC5_SetConfig+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00b      	beq.n	8008016 <TIM_OC5_SetConfig+0x82>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a16      	ldr	r2, [pc, #88]	@ (800805c <TIM_OC5_SetConfig+0xc8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d007      	beq.n	8008016 <TIM_OC5_SetConfig+0x82>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a15      	ldr	r2, [pc, #84]	@ (8008060 <TIM_OC5_SetConfig+0xcc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_OC5_SetConfig+0x82>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a14      	ldr	r2, [pc, #80]	@ (8008064 <TIM_OC5_SetConfig+0xd0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d109      	bne.n	800802a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800801c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	621a      	str	r2, [r3, #32]
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40013400 	.word	0x40013400
 8008058:	40014000 	.word	0x40014000
 800805c:	40014400 	.word	0x40014400
 8008060:	40014800 	.word	0x40014800
 8008064:	40015000 	.word	0x40015000

08008068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800809a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1a      	ldr	r2, [pc, #104]	@ (8008128 <TIM_OC6_SetConfig+0xc0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d013      	beq.n	80080ec <TIM_OC6_SetConfig+0x84>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a19      	ldr	r2, [pc, #100]	@ (800812c <TIM_OC6_SetConfig+0xc4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00f      	beq.n	80080ec <TIM_OC6_SetConfig+0x84>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <TIM_OC6_SetConfig+0xc8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00b      	beq.n	80080ec <TIM_OC6_SetConfig+0x84>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <TIM_OC6_SetConfig+0xcc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <TIM_OC6_SetConfig+0x84>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a16      	ldr	r2, [pc, #88]	@ (8008138 <TIM_OC6_SetConfig+0xd0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC6_SetConfig+0x84>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a15      	ldr	r2, [pc, #84]	@ (800813c <TIM_OC6_SetConfig+0xd4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d109      	bne.n	8008100 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	029b      	lsls	r3, r3, #10
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40013400 	.word	0x40013400
 8008130:	40014000 	.word	0x40014000
 8008134:	40014400 	.word	0x40014400
 8008138:	40014800 	.word	0x40014800
 800813c:	40015000 	.word	0x40015000

08008140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800816a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f023 030a 	bic.w	r3, r3, #10
 800817c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800819e:	b480      	push	{r7}
 80081a0:	b087      	sub	sp, #28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f023 0210 	bic.w	r2, r3, #16
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	bf00      	nop
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	f043 0307 	orr.w	r3, r3, #7
 8008224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	609a      	str	r2, [r3, #8]
}
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	021a      	lsls	r2, r3, #8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	431a      	orrs	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4313      	orrs	r3, r2
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2201      	movs	r2, #1
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	43db      	mvns	r3, r3
 800829a:	401a      	ands	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	431a      	orrs	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a26      	ldr	r2, [pc, #152]	@ (8008368 <TIM_ResetCallback+0xa4>)
 80082d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a25      	ldr	r2, [pc, #148]	@ (800836c <TIM_ResetCallback+0xa8>)
 80082d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a24      	ldr	r2, [pc, #144]	@ (8008370 <TIM_ResetCallback+0xac>)
 80082e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a23      	ldr	r2, [pc, #140]	@ (8008374 <TIM_ResetCallback+0xb0>)
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a22      	ldr	r2, [pc, #136]	@ (8008378 <TIM_ResetCallback+0xb4>)
 80082f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a21      	ldr	r2, [pc, #132]	@ (800837c <TIM_ResetCallback+0xb8>)
 80082f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a20      	ldr	r2, [pc, #128]	@ (8008380 <TIM_ResetCallback+0xbc>)
 8008300:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1f      	ldr	r2, [pc, #124]	@ (8008384 <TIM_ResetCallback+0xc0>)
 8008308:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1e      	ldr	r2, [pc, #120]	@ (8008388 <TIM_ResetCallback+0xc4>)
 8008310:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1d      	ldr	r2, [pc, #116]	@ (800838c <TIM_ResetCallback+0xc8>)
 8008318:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1c      	ldr	r2, [pc, #112]	@ (8008390 <TIM_ResetCallback+0xcc>)
 8008320:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <TIM_ResetCallback+0xd0>)
 8008328:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <TIM_ResetCallback+0xd4>)
 8008330:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a19      	ldr	r2, [pc, #100]	@ (800839c <TIM_ResetCallback+0xd8>)
 8008338:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a18      	ldr	r2, [pc, #96]	@ (80083a0 <TIM_ResetCallback+0xdc>)
 8008340:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a17      	ldr	r2, [pc, #92]	@ (80083a4 <TIM_ResetCallback+0xe0>)
 8008348:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a16      	ldr	r2, [pc, #88]	@ (80083a8 <TIM_ResetCallback+0xe4>)
 8008350:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a15      	ldr	r2, [pc, #84]	@ (80083ac <TIM_ResetCallback+0xe8>)
 8008358:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	08002aa9 	.word	0x08002aa9
 800836c:	08007611 	.word	0x08007611
 8008370:	08007689 	.word	0x08007689
 8008374:	0800769d 	.word	0x0800769d
 8008378:	08007639 	.word	0x08007639
 800837c:	0800764d 	.word	0x0800764d
 8008380:	08007625 	.word	0x08007625
 8008384:	08007661 	.word	0x08007661
 8008388:	08007675 	.word	0x08007675
 800838c:	080076b1 	.word	0x080076b1
 8008390:	08008605 	.word	0x08008605
 8008394:	08008619 	.word	0x08008619
 8008398:	0800862d 	.word	0x0800862d
 800839c:	08008641 	.word	0x08008641
 80083a0:	08008655 	.word	0x08008655
 80083a4:	08008669 	.word	0x08008669
 80083a8:	0800867d 	.word	0x0800867d
 80083ac:	08008691 	.word	0x08008691

080083b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e074      	b.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a34      	ldr	r2, [pc, #208]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a33      	ldr	r2, [pc, #204]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a31      	ldr	r2, [pc, #196]	@ (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d108      	bne.n	8008418 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800840c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800841e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a21      	ldr	r2, [pc, #132]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d022      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008448:	d01d      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1f      	ldr	r2, [pc, #124]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d018      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a1c      	ldr	r2, [pc, #112]	@ (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00e      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a15      	ldr	r2, [pc, #84]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d009      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a18      	ldr	r2, [pc, #96]	@ (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d004      	beq.n	8008486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a11      	ldr	r2, [pc, #68]	@ (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d10c      	bne.n	80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800848c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	4313      	orrs	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40015000 	.word	0x40015000
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40014000 	.word	0x40014000

080084dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e078      	b.n	80085ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	4313      	orrs	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1c      	ldr	r2, [pc, #112]	@ (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a19      	ldr	r2, [pc, #100]	@ (8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d11c      	bne.n	80085d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	051b      	lsls	r3, r3, #20
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40013400 	.word	0x40013400
 8008600:	40015000 	.word	0x40015000

08008604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e050      	b.n	8008758 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d114      	bne.n	80086ea <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fde5 	bl	8009298 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <HAL_UART_Init+0xbc>)
 80086dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2224      	movs	r2, #36	@ 0x24
 80086ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0201 	bic.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 f912 	bl	8009934 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fe13 	bl	800933c <UART_SetConfig>
 8008716:	4603      	mov	r3, r0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e01b      	b.n	8008758 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800872e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800873e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f991 	bl	8009a78 <UART_CheckIdleState>
 8008756:	4603      	mov	r3, r0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08003239 	.word	0x08003239

08008764 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008782:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e09c      	b.n	80088ca <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008796:	2b20      	cmp	r3, #32
 8008798:	d16c      	bne.n	8008874 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	2b0c      	cmp	r3, #12
 800879e:	d85e      	bhi.n	800885e <HAL_UART_RegisterCallback+0xfa>
 80087a0:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <HAL_UART_RegisterCallback+0x44>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080087dd 	.word	0x080087dd
 80087ac:	080087e7 	.word	0x080087e7
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087fb 	.word	0x080087fb
 80087b8:	08008805 	.word	0x08008805
 80087bc:	0800880f 	.word	0x0800880f
 80087c0:	08008819 	.word	0x08008819
 80087c4:	08008823 	.word	0x08008823
 80087c8:	0800882d 	.word	0x0800882d
 80087cc:	08008837 	.word	0x08008837
 80087d0:	08008841 	.word	0x08008841
 80087d4:	0800884b 	.word	0x0800884b
 80087d8:	08008855 	.word	0x08008855
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80087e4:	e070      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80087ee:	e06b      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80087f8:	e066      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008802:	e061      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800880c:	e05c      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008816:	e057      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008820:	e052      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800882a:	e04d      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008834:	e048      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800883e:	e043      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008848:	e03e      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008852:	e039      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800885c:	e034      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008864:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	75fb      	strb	r3, [r7, #23]
        break;
 8008872:	e029      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887a:	2b00      	cmp	r3, #0
 800887c:	d11a      	bne.n	80088b4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	2b0b      	cmp	r3, #11
 8008882:	d002      	beq.n	800888a <HAL_UART_RegisterCallback+0x126>
 8008884:	2b0c      	cmp	r3, #12
 8008886:	d005      	beq.n	8008894 <HAL_UART_RegisterCallback+0x130>
 8008888:	e009      	b.n	800889e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008892:	e019      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800889c:	e014      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
        break;
 80088b2:	e009      	b.n	80088c8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	@ 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d167      	bne.n	80089c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_UART_Transmit_DMA+0x24>
 80088f6:	88fb      	ldrh	r3, [r7, #6]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e060      	b.n	80089c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2221      	movs	r2, #33	@ 0x21
 8008922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d028      	beq.n	8008980 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008932:	4a26      	ldr	r2, [pc, #152]	@ (80089cc <HAL_UART_Transmit_DMA+0xf4>)
 8008934:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800893a:	4a25      	ldr	r2, [pc, #148]	@ (80089d0 <HAL_UART_Transmit_DMA+0xf8>)
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008942:	4a24      	ldr	r2, [pc, #144]	@ (80089d4 <HAL_UART_Transmit_DMA+0xfc>)
 8008944:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800894a:	2200      	movs	r2, #0
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008956:	4619      	mov	r1, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3328      	adds	r3, #40	@ 0x28
 800895e:	461a      	mov	r2, r3
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	f7fc f927 	bl	8004bb4 <HAL_DMA_Start_IT>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2210      	movs	r2, #16
 8008970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e020      	b.n	80089c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2240      	movs	r2, #64	@ 0x40
 8008986:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	613b      	str	r3, [r7, #16]
   return(result);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a8:	623a      	str	r2, [r7, #32]
 80089aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69f9      	ldr	r1, [r7, #28]
 80089ae:	6a3a      	ldr	r2, [r7, #32]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	e000      	b.n	80089c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80089c0:	2302      	movs	r3, #2
  }
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3728      	adds	r7, #40	@ 0x28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	08009f43 	.word	0x08009f43
 80089d0:	08009fe1 	.word	0x08009fe1
 80089d4:	0800a17b 	.word	0x0800a17b

080089d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d137      	bne.n	8008a60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <HAL_UART_Receive_DMA+0x24>
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e030      	b.n	8008a62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a18      	ldr	r2, [pc, #96]	@ (8008a6c <HAL_UART_Receive_DMA+0x94>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d01f      	beq.n	8008a50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d018      	beq.n	8008a50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	623b      	str	r3, [r7, #32]
 8008a3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69f9      	ldr	r1, [r7, #28]
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f001 f926 	bl	8009ca8 <UART_Start_Receive_DMA>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	e000      	b.n	8008a62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a60:	2302      	movs	r3, #2
  }
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3728      	adds	r7, #40	@ 0x28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40008000 	.word	0x40008000

08008a70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b0ba      	sub	sp, #232	@ 0xe8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d015      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8312 	beq.w	80090fe <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
      }
      return;
 8008ae2:	e30c      	b.n	80090fe <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8129 	beq.w	8008d40 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008aee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008af2:	4b90      	ldr	r3, [pc, #576]	@ (8008d34 <HAL_UART_IRQHandler+0x2c4>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008afa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008afe:	4b8e      	ldr	r3, [pc, #568]	@ (8008d38 <HAL_UART_IRQHandler+0x2c8>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 811c 	beq.w	8008d40 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d011      	beq.n	8008b38 <HAL_UART_IRQHandler+0xc8>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2201      	movs	r2, #1
 8008b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	f043 0201 	orr.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d011      	beq.n	8008b68 <HAL_UART_IRQHandler+0xf8>
 8008b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2202      	movs	r2, #2
 8008b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5e:	f043 0204 	orr.w	r2, r3, #4
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d011      	beq.n	8008b98 <HAL_UART_IRQHandler+0x128>
 8008b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2204      	movs	r2, #4
 8008b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8e:	f043 0202 	orr.w	r2, r3, #2
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d017      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d105      	bne.n	8008bbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008bb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8008d34 <HAL_UART_IRQHandler+0x2c4>)
 8008bb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bca:	f043 0208 	orr.w	r2, r3, #8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d012      	beq.n	8008c06 <HAL_UART_IRQHandler+0x196>
 8008be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00c      	beq.n	8008c06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfc:	f043 0220 	orr.w	r2, r3, #32
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8278 	beq.w	8009102 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5a:	2b40      	cmp	r3, #64	@ 0x40
 8008c5c:	d005      	beq.n	8008c6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d058      	beq.n	8008d1c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 f903 	bl	8009e76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b40      	cmp	r3, #64	@ 0x40
 8008c7c:	d148      	bne.n	8008d10 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008caa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1d9      	bne.n	8008c7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d017      	beq.n	8008d04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cda:	4a18      	ldr	r2, [pc, #96]	@ (8008d3c <HAL_UART_IRQHandler+0x2cc>)
 8008cdc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fc f839 	bl	8004d5c <HAL_DMA_Abort_IT>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01f      	beq.n	8008d30 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cfe:	4610      	mov	r0, r2
 8008d00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d02:	e015      	b.n	8008d30 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0e:	e00f      	b.n	8008d30 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1a:	e009      	b.n	8008d30 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d2e:	e1e8      	b.n	8009102 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	bf00      	nop
    return;
 8008d32:	e1e6      	b.n	8009102 <HAL_UART_IRQHandler+0x692>
 8008d34:	10000001 	.word	0x10000001
 8008d38:	04000120 	.word	0x04000120
 8008d3c:	0800a1ff 	.word	0x0800a1ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	f040 8176 	bne.w	8009036 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4e:	f003 0310 	and.w	r3, r3, #16
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 816f 	beq.w	8009036 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8168 	beq.w	8009036 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2210      	movs	r2, #16
 8008d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d78:	2b40      	cmp	r3, #64	@ 0x40
 8008d7a:	f040 80dc 	bne.w	8008f36 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80b1 	beq.w	8008ef8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008da0:	429a      	cmp	r2, r3
 8008da2:	f080 80a9 	bcs.w	8008ef8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 8087 	bne.w	8008ed2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008df2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1da      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e1      	bne.n	8008e0e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea0:	f023 0310 	bic.w	r3, r3, #16
 8008ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e4      	bne.n	8008e90 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fb feec 	bl	8004caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008eea:	b292      	uxth	r2, r2
 8008eec:	1a8a      	subs	r2, r1, r2
 8008eee:	b292      	uxth	r2, r2
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008ef6:	e106      	b.n	8009106 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f040 80ff 	bne.w	8009106 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	f040 80f5 	bne.w	8009106 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008f2e:	4611      	mov	r1, r2
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
      return;
 8008f34:	e0e7      	b.n	8009106 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80d9 	beq.w	800910a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80d4 	beq.w	800910a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e4      	bne.n	8008f62 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e1      	bne.n	8008f98 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f023 0310 	bic.w	r3, r3, #16
 8008ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	69b9      	ldr	r1, [r7, #24]
 8009010:	69fa      	ldr	r2, [r7, #28]
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	617b      	str	r3, [r7, #20]
   return(result);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e4      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800902a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800902e:	4611      	mov	r1, r2
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009034:	e069      	b.n	800910a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d010      	beq.n	8009064 <HAL_UART_IRQHandler+0x5f4>
 8009042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009056:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009062:	e055      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d014      	beq.n	800909a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800907c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d008      	beq.n	800909a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800908c:	2b00      	cmp	r3, #0
 800908e:	d03e      	beq.n	800910e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	4798      	blx	r3
    }
    return;
 8009098:	e039      	b.n	800910e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800909e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <HAL_UART_IRQHandler+0x64a>
 80090a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f8b7 	bl	800a226 <UART_EndTransmit_IT>
    return;
 80090b8:	e02a      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00b      	beq.n	80090de <HAL_UART_IRQHandler+0x66e>
 80090c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090dc:	e018      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d012      	beq.n	8009110 <HAL_UART_IRQHandler+0x6a0>
 80090ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da0e      	bge.n	8009110 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090fc:	e008      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
      return;
 80090fe:	bf00      	nop
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009102:	bf00      	nop
 8009104:	e004      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009106:	bf00      	nop
 8009108:	e002      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
      return;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <HAL_UART_IRQHandler+0x6a0>
    return;
 800910e:	bf00      	nop
  }
}
 8009110:	37e8      	adds	r7, #232	@ 0xe8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop

08009118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a09      	ldr	r2, [pc, #36]	@ (8009204 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	615a      	str	r2, [r3, #20]
  }
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	40008000 	.word	0x40008000

08009208 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a18      	ldr	r2, [pc, #96]	@ (8009278 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d027      	beq.n	800926a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009220:	2b20      	cmp	r3, #32
 8009222:	d120      	bne.n	8009266 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_UART_EnableReceiverTimeout+0x2a>
 800922e:	2302      	movs	r3, #2
 8009230:	e01c      	b.n	800926c <HAL_UART_EnableReceiverTimeout+0x64>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2224      	movs	r2, #36	@ 0x24
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009250:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	e002      	b.n	800926c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009266:	2302      	movs	r3, #2
 8009268:	e000      	b.n	800926c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
  }
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40008000 	.word	0x40008000

0800927c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
	...

08009298 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a1a      	ldr	r2, [pc, #104]	@ (800930c <UART_InitCallbacksToDefault+0x74>)
 80092a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a19      	ldr	r2, [pc, #100]	@ (8009310 <UART_InitCallbacksToDefault+0x78>)
 80092ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a18      	ldr	r2, [pc, #96]	@ (8009314 <UART_InitCallbacksToDefault+0x7c>)
 80092b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a17      	ldr	r2, [pc, #92]	@ (8009318 <UART_InitCallbacksToDefault+0x80>)
 80092bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a16      	ldr	r2, [pc, #88]	@ (800931c <UART_InitCallbacksToDefault+0x84>)
 80092c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a15      	ldr	r2, [pc, #84]	@ (8009320 <UART_InitCallbacksToDefault+0x88>)
 80092cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a14      	ldr	r2, [pc, #80]	@ (8009324 <UART_InitCallbacksToDefault+0x8c>)
 80092d4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a13      	ldr	r2, [pc, #76]	@ (8009328 <UART_InitCallbacksToDefault+0x90>)
 80092dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a12      	ldr	r2, [pc, #72]	@ (800932c <UART_InitCallbacksToDefault+0x94>)
 80092e4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a11      	ldr	r2, [pc, #68]	@ (8009330 <UART_InitCallbacksToDefault+0x98>)
 80092ec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a10      	ldr	r2, [pc, #64]	@ (8009334 <UART_InitCallbacksToDefault+0x9c>)
 80092f4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a0f      	ldr	r2, [pc, #60]	@ (8009338 <UART_InitCallbacksToDefault+0xa0>)
 80092fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	0800912d 	.word	0x0800912d
 8009310:	08009119 	.word	0x08009119
 8009314:	08009155 	.word	0x08009155
 8009318:	08009141 	.word	0x08009141
 800931c:	08009169 	.word	0x08009169
 8009320:	0800917d 	.word	0x0800917d
 8009324:	08009191 	.word	0x08009191
 8009328:	080091a5 	.word	0x080091a5
 800932c:	0800a281 	.word	0x0800a281
 8009330:	0800a295 	.word	0x0800a295
 8009334:	0800a2a9 	.word	0x0800a2a9
 8009338:	080091b9 	.word	0x080091b9

0800933c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800933c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009340:	b08c      	sub	sp, #48	@ 0x30
 8009342:	af00      	add	r7, sp, #0
 8009344:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	431a      	orrs	r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	431a      	orrs	r2, r3
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	4313      	orrs	r3, r2
 8009362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4baa      	ldr	r3, [pc, #680]	@ (8009614 <UART_SetConfig+0x2d8>)
 800936c:	4013      	ands	r3, r2
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009374:	430b      	orrs	r3, r1
 8009376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a9f      	ldr	r2, [pc, #636]	@ (8009618 <UART_SetConfig+0x2dc>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d004      	beq.n	80093a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a4:	4313      	orrs	r3, r2
 80093a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80093b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093bc:	430b      	orrs	r3, r1
 80093be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c6:	f023 010f 	bic.w	r1, r3, #15
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a90      	ldr	r2, [pc, #576]	@ (800961c <UART_SetConfig+0x2e0>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d125      	bne.n	800942c <UART_SetConfig+0xf0>
 80093e0:	4b8f      	ldr	r3, [pc, #572]	@ (8009620 <UART_SetConfig+0x2e4>)
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d81a      	bhi.n	8009424 <UART_SetConfig+0xe8>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <UART_SetConfig+0xb8>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009405 	.word	0x08009405
 80093f8:	08009415 	.word	0x08009415
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	0800941d 	.word	0x0800941d
 8009404:	2301      	movs	r3, #1
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940a:	e116      	b.n	800963a <UART_SetConfig+0x2fe>
 800940c:	2302      	movs	r3, #2
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009412:	e112      	b.n	800963a <UART_SetConfig+0x2fe>
 8009414:	2304      	movs	r3, #4
 8009416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800941a:	e10e      	b.n	800963a <UART_SetConfig+0x2fe>
 800941c:	2308      	movs	r3, #8
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e10a      	b.n	800963a <UART_SetConfig+0x2fe>
 8009424:	2310      	movs	r3, #16
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	e106      	b.n	800963a <UART_SetConfig+0x2fe>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a7c      	ldr	r2, [pc, #496]	@ (8009624 <UART_SetConfig+0x2e8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d138      	bne.n	80094a8 <UART_SetConfig+0x16c>
 8009436:	4b7a      	ldr	r3, [pc, #488]	@ (8009620 <UART_SetConfig+0x2e4>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	f003 030c 	and.w	r3, r3, #12
 8009440:	2b0c      	cmp	r3, #12
 8009442:	d82d      	bhi.n	80094a0 <UART_SetConfig+0x164>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x110>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009481 	.word	0x08009481
 8009450:	080094a1 	.word	0x080094a1
 8009454:	080094a1 	.word	0x080094a1
 8009458:	080094a1 	.word	0x080094a1
 800945c:	08009491 	.word	0x08009491
 8009460:	080094a1 	.word	0x080094a1
 8009464:	080094a1 	.word	0x080094a1
 8009468:	080094a1 	.word	0x080094a1
 800946c:	08009489 	.word	0x08009489
 8009470:	080094a1 	.word	0x080094a1
 8009474:	080094a1 	.word	0x080094a1
 8009478:	080094a1 	.word	0x080094a1
 800947c:	08009499 	.word	0x08009499
 8009480:	2300      	movs	r3, #0
 8009482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009486:	e0d8      	b.n	800963a <UART_SetConfig+0x2fe>
 8009488:	2302      	movs	r3, #2
 800948a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800948e:	e0d4      	b.n	800963a <UART_SetConfig+0x2fe>
 8009490:	2304      	movs	r3, #4
 8009492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009496:	e0d0      	b.n	800963a <UART_SetConfig+0x2fe>
 8009498:	2308      	movs	r3, #8
 800949a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949e:	e0cc      	b.n	800963a <UART_SetConfig+0x2fe>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a6:	e0c8      	b.n	800963a <UART_SetConfig+0x2fe>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a5e      	ldr	r2, [pc, #376]	@ (8009628 <UART_SetConfig+0x2ec>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d125      	bne.n	80094fe <UART_SetConfig+0x1c2>
 80094b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009620 <UART_SetConfig+0x2e4>)
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094bc:	2b30      	cmp	r3, #48	@ 0x30
 80094be:	d016      	beq.n	80094ee <UART_SetConfig+0x1b2>
 80094c0:	2b30      	cmp	r3, #48	@ 0x30
 80094c2:	d818      	bhi.n	80094f6 <UART_SetConfig+0x1ba>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d00a      	beq.n	80094de <UART_SetConfig+0x1a2>
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d814      	bhi.n	80094f6 <UART_SetConfig+0x1ba>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <UART_SetConfig+0x19a>
 80094d0:	2b10      	cmp	r3, #16
 80094d2:	d008      	beq.n	80094e6 <UART_SetConfig+0x1aa>
 80094d4:	e00f      	b.n	80094f6 <UART_SetConfig+0x1ba>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094dc:	e0ad      	b.n	800963a <UART_SetConfig+0x2fe>
 80094de:	2302      	movs	r3, #2
 80094e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094e4:	e0a9      	b.n	800963a <UART_SetConfig+0x2fe>
 80094e6:	2304      	movs	r3, #4
 80094e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ec:	e0a5      	b.n	800963a <UART_SetConfig+0x2fe>
 80094ee:	2308      	movs	r3, #8
 80094f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f4:	e0a1      	b.n	800963a <UART_SetConfig+0x2fe>
 80094f6:	2310      	movs	r3, #16
 80094f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fc:	e09d      	b.n	800963a <UART_SetConfig+0x2fe>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a4a      	ldr	r2, [pc, #296]	@ (800962c <UART_SetConfig+0x2f0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d125      	bne.n	8009554 <UART_SetConfig+0x218>
 8009508:	4b45      	ldr	r3, [pc, #276]	@ (8009620 <UART_SetConfig+0x2e4>)
 800950a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009512:	2bc0      	cmp	r3, #192	@ 0xc0
 8009514:	d016      	beq.n	8009544 <UART_SetConfig+0x208>
 8009516:	2bc0      	cmp	r3, #192	@ 0xc0
 8009518:	d818      	bhi.n	800954c <UART_SetConfig+0x210>
 800951a:	2b80      	cmp	r3, #128	@ 0x80
 800951c:	d00a      	beq.n	8009534 <UART_SetConfig+0x1f8>
 800951e:	2b80      	cmp	r3, #128	@ 0x80
 8009520:	d814      	bhi.n	800954c <UART_SetConfig+0x210>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <UART_SetConfig+0x1f0>
 8009526:	2b40      	cmp	r3, #64	@ 0x40
 8009528:	d008      	beq.n	800953c <UART_SetConfig+0x200>
 800952a:	e00f      	b.n	800954c <UART_SetConfig+0x210>
 800952c:	2300      	movs	r3, #0
 800952e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009532:	e082      	b.n	800963a <UART_SetConfig+0x2fe>
 8009534:	2302      	movs	r3, #2
 8009536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800953a:	e07e      	b.n	800963a <UART_SetConfig+0x2fe>
 800953c:	2304      	movs	r3, #4
 800953e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009542:	e07a      	b.n	800963a <UART_SetConfig+0x2fe>
 8009544:	2308      	movs	r3, #8
 8009546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800954a:	e076      	b.n	800963a <UART_SetConfig+0x2fe>
 800954c:	2310      	movs	r3, #16
 800954e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009552:	e072      	b.n	800963a <UART_SetConfig+0x2fe>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a35      	ldr	r2, [pc, #212]	@ (8009630 <UART_SetConfig+0x2f4>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d12a      	bne.n	80095b4 <UART_SetConfig+0x278>
 800955e:	4b30      	ldr	r3, [pc, #192]	@ (8009620 <UART_SetConfig+0x2e4>)
 8009560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800956c:	d01a      	beq.n	80095a4 <UART_SetConfig+0x268>
 800956e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009572:	d81b      	bhi.n	80095ac <UART_SetConfig+0x270>
 8009574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009578:	d00c      	beq.n	8009594 <UART_SetConfig+0x258>
 800957a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957e:	d815      	bhi.n	80095ac <UART_SetConfig+0x270>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d003      	beq.n	800958c <UART_SetConfig+0x250>
 8009584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009588:	d008      	beq.n	800959c <UART_SetConfig+0x260>
 800958a:	e00f      	b.n	80095ac <UART_SetConfig+0x270>
 800958c:	2300      	movs	r3, #0
 800958e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009592:	e052      	b.n	800963a <UART_SetConfig+0x2fe>
 8009594:	2302      	movs	r3, #2
 8009596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800959a:	e04e      	b.n	800963a <UART_SetConfig+0x2fe>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095a2:	e04a      	b.n	800963a <UART_SetConfig+0x2fe>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095aa:	e046      	b.n	800963a <UART_SetConfig+0x2fe>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b2:	e042      	b.n	800963a <UART_SetConfig+0x2fe>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a17      	ldr	r2, [pc, #92]	@ (8009618 <UART_SetConfig+0x2dc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d13a      	bne.n	8009634 <UART_SetConfig+0x2f8>
 80095be:	4b18      	ldr	r3, [pc, #96]	@ (8009620 <UART_SetConfig+0x2e4>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80095c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095cc:	d01a      	beq.n	8009604 <UART_SetConfig+0x2c8>
 80095ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095d2:	d81b      	bhi.n	800960c <UART_SetConfig+0x2d0>
 80095d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095d8:	d00c      	beq.n	80095f4 <UART_SetConfig+0x2b8>
 80095da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095de:	d815      	bhi.n	800960c <UART_SetConfig+0x2d0>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <UART_SetConfig+0x2b0>
 80095e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095e8:	d008      	beq.n	80095fc <UART_SetConfig+0x2c0>
 80095ea:	e00f      	b.n	800960c <UART_SetConfig+0x2d0>
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095f2:	e022      	b.n	800963a <UART_SetConfig+0x2fe>
 80095f4:	2302      	movs	r3, #2
 80095f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095fa:	e01e      	b.n	800963a <UART_SetConfig+0x2fe>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009602:	e01a      	b.n	800963a <UART_SetConfig+0x2fe>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800960a:	e016      	b.n	800963a <UART_SetConfig+0x2fe>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009612:	e012      	b.n	800963a <UART_SetConfig+0x2fe>
 8009614:	cfff69f3 	.word	0xcfff69f3
 8009618:	40008000 	.word	0x40008000
 800961c:	40013800 	.word	0x40013800
 8009620:	40021000 	.word	0x40021000
 8009624:	40004400 	.word	0x40004400
 8009628:	40004800 	.word	0x40004800
 800962c:	40004c00 	.word	0x40004c00
 8009630:	40005000 	.word	0x40005000
 8009634:	2310      	movs	r3, #16
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4aae      	ldr	r2, [pc, #696]	@ (80098f8 <UART_SetConfig+0x5bc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	f040 8097 	bne.w	8009774 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009646:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800964a:	2b08      	cmp	r3, #8
 800964c:	d823      	bhi.n	8009696 <UART_SetConfig+0x35a>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x318>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009679 	.word	0x08009679
 8009658:	08009697 	.word	0x08009697
 800965c:	08009681 	.word	0x08009681
 8009660:	08009697 	.word	0x08009697
 8009664:	08009687 	.word	0x08009687
 8009668:	08009697 	.word	0x08009697
 800966c:	08009697 	.word	0x08009697
 8009670:	08009697 	.word	0x08009697
 8009674:	0800968f 	.word	0x0800968f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fc fc62 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 800967c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800967e:	e010      	b.n	80096a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009680:	4b9e      	ldr	r3, [pc, #632]	@ (80098fc <UART_SetConfig+0x5c0>)
 8009682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009684:	e00d      	b.n	80096a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009686:	f7fc fbed 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 800968a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800968c:	e009      	b.n	80096a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800968e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009694:	e005      	b.n	80096a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8130 	beq.w	800990a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ae:	4a94      	ldr	r2, [pc, #592]	@ (8009900 <UART_SetConfig+0x5c4>)
 80096b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096b4:	461a      	mov	r2, r3
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	4413      	add	r3, r2
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d305      	bcc.n	80096da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d903      	bls.n	80096e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096e0:	e113      	b.n	800990a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e4:	2200      	movs	r2, #0
 80096e6:	60bb      	str	r3, [r7, #8]
 80096e8:	60fa      	str	r2, [r7, #12]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ee:	4a84      	ldr	r2, [pc, #528]	@ (8009900 <UART_SetConfig+0x5c4>)
 80096f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2200      	movs	r2, #0
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009700:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009704:	f7f7 f9c6 	bl	8000a94 <__aeabi_uldivmod>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4610      	mov	r0, r2
 800970e:	4619      	mov	r1, r3
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	020b      	lsls	r3, r1, #8
 800971a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800971e:	0202      	lsls	r2, r0, #8
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	6849      	ldr	r1, [r1, #4]
 8009724:	0849      	lsrs	r1, r1, #1
 8009726:	2000      	movs	r0, #0
 8009728:	460c      	mov	r4, r1
 800972a:	4605      	mov	r5, r0
 800972c:	eb12 0804 	adds.w	r8, r2, r4
 8009730:	eb43 0905 	adc.w	r9, r3, r5
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	469a      	mov	sl, r3
 800973c:	4693      	mov	fp, r2
 800973e:	4652      	mov	r2, sl
 8009740:	465b      	mov	r3, fp
 8009742:	4640      	mov	r0, r8
 8009744:	4649      	mov	r1, r9
 8009746:	f7f7 f9a5 	bl	8000a94 <__aeabi_uldivmod>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4613      	mov	r3, r2
 8009750:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009758:	d308      	bcc.n	800976c <UART_SetConfig+0x430>
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009760:	d204      	bcs.n	800976c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	60da      	str	r2, [r3, #12]
 800976a:	e0ce      	b.n	800990a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009772:	e0ca      	b.n	800990a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800977c:	d166      	bne.n	800984c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800977e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009782:	2b08      	cmp	r3, #8
 8009784:	d827      	bhi.n	80097d6 <UART_SetConfig+0x49a>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <UART_SetConfig+0x450>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097b1 	.word	0x080097b1
 8009790:	080097b9 	.word	0x080097b9
 8009794:	080097c1 	.word	0x080097c1
 8009798:	080097d7 	.word	0x080097d7
 800979c:	080097c7 	.word	0x080097c7
 80097a0:	080097d7 	.word	0x080097d7
 80097a4:	080097d7 	.word	0x080097d7
 80097a8:	080097d7 	.word	0x080097d7
 80097ac:	080097cf 	.word	0x080097cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097b0:	f7fc fbc6 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 80097b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097b6:	e014      	b.n	80097e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b8:	f7fc fbd8 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 80097bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097be:	e010      	b.n	80097e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097c0:	4b4e      	ldr	r3, [pc, #312]	@ (80098fc <UART_SetConfig+0x5c0>)
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097c4:	e00d      	b.n	80097e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097c6:	f7fc fb4d 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 80097ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097cc:	e009      	b.n	80097e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097d4:	e005      	b.n	80097e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 8090 	beq.w	800990a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ee:	4a44      	ldr	r2, [pc, #272]	@ (8009900 <UART_SetConfig+0x5c4>)
 80097f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f4:	461a      	mov	r2, r3
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097fc:	005a      	lsls	r2, r3, #1
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	441a      	add	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	fbb2 f3f3 	udiv	r3, r2, r3
 800980e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	2b0f      	cmp	r3, #15
 8009814:	d916      	bls.n	8009844 <UART_SetConfig+0x508>
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800981c:	d212      	bcs.n	8009844 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	b29b      	uxth	r3, r3
 8009822:	f023 030f 	bic.w	r3, r3, #15
 8009826:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	b29b      	uxth	r3, r3
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	b29a      	uxth	r2, r3
 8009834:	8bfb      	ldrh	r3, [r7, #30]
 8009836:	4313      	orrs	r3, r2
 8009838:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	8bfa      	ldrh	r2, [r7, #30]
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	e062      	b.n	800990a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800984a:	e05e      	b.n	800990a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800984c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009850:	2b08      	cmp	r3, #8
 8009852:	d828      	bhi.n	80098a6 <UART_SetConfig+0x56a>
 8009854:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <UART_SetConfig+0x520>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	08009881 	.word	0x08009881
 8009860:	08009889 	.word	0x08009889
 8009864:	08009891 	.word	0x08009891
 8009868:	080098a7 	.word	0x080098a7
 800986c:	08009897 	.word	0x08009897
 8009870:	080098a7 	.word	0x080098a7
 8009874:	080098a7 	.word	0x080098a7
 8009878:	080098a7 	.word	0x080098a7
 800987c:	0800989f 	.word	0x0800989f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009880:	f7fc fb5e 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8009884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009886:	e014      	b.n	80098b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009888:	f7fc fb70 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 800988c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800988e:	e010      	b.n	80098b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009890:	4b1a      	ldr	r3, [pc, #104]	@ (80098fc <UART_SetConfig+0x5c0>)
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009894:	e00d      	b.n	80098b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009896:	f7fc fae5 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 800989a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800989c:	e009      	b.n	80098b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800989e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098a4:	e005      	b.n	80098b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098b0:	bf00      	nop
    }

    if (pclk != 0U)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d028      	beq.n	800990a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098bc:	4a10      	ldr	r2, [pc, #64]	@ (8009900 <UART_SetConfig+0x5c4>)
 80098be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	441a      	add	r2, r3
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2b0f      	cmp	r3, #15
 80098e0:	d910      	bls.n	8009904 <UART_SetConfig+0x5c8>
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e8:	d20c      	bcs.n	8009904 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	60da      	str	r2, [r3, #12]
 80098f4:	e009      	b.n	800990a <UART_SetConfig+0x5ce>
 80098f6:	bf00      	nop
 80098f8:	40008000 	.word	0x40008000
 80098fc:	00f42400 	.word	0x00f42400
 8009900:	0800a9a0 	.word	0x0800a9a0
      }
      else
      {
        ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2201      	movs	r2, #1
 800990e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2201      	movs	r2, #1
 8009916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2200      	movs	r2, #0
 800991e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2200      	movs	r2, #0
 8009924:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009926:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800992a:	4618      	mov	r0, r3
 800992c:	3730      	adds	r7, #48	@ 0x30
 800992e:	46bd      	mov	sp, r7
 8009930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a6:	f003 0304 	and.w	r3, r3, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00a      	beq.n	80099e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01a      	beq.n	8009a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a32:	d10a      	bne.n	8009a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b098      	sub	sp, #96	@ 0x60
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a88:	f7f9 fdd0 	bl	800362c <HAL_GetTick>
 8009a8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d12f      	bne.n	8009afc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f88e 	bl	8009bcc <UART_WaitOnFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d022      	beq.n	8009afc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e6      	bne.n	8009ab6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e063      	b.n	8009bc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d149      	bne.n	8009b9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b12:	2200      	movs	r2, #0
 8009b14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f857 	bl	8009bcc <UART_WaitOnFlagUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d03c      	beq.n	8009b9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	623b      	str	r3, [r7, #32]
   return(result);
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e6      	bne.n	8009b24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3308      	adds	r3, #8
 8009b74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b76:	61fa      	str	r2, [r7, #28]
 8009b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	69b9      	ldr	r1, [r7, #24]
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	617b      	str	r3, [r7, #20]
   return(result);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e5      	bne.n	8009b56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e012      	b.n	8009bc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3758      	adds	r7, #88	@ 0x58
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bdc:	e04f      	b.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d04b      	beq.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be6:	f7f9 fd21 	bl	800362c <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d302      	bcc.n	8009bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e04e      	b.n	8009c9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d037      	beq.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b80      	cmp	r3, #128	@ 0x80
 8009c12:	d034      	beq.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b40      	cmp	r3, #64	@ 0x40
 8009c18:	d031      	beq.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d110      	bne.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2208      	movs	r2, #8
 8009c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f920 	bl	8009e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e029      	b.n	8009c9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c58:	d111      	bne.n	8009c7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 f906 	bl	8009e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e00f      	b.n	8009c9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69da      	ldr	r2, [r3, #28]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4013      	ands	r3, r2
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	bf0c      	ite	eq
 8009c8e:	2301      	moveq	r3, #1
 8009c90:	2300      	movne	r3, #0
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	461a      	mov	r2, r3
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d0a0      	beq.n	8009bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b096      	sub	sp, #88	@ 0x58
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2222      	movs	r2, #34	@ 0x22
 8009cd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d02d      	beq.n	8009d3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce4:	4a40      	ldr	r2, [pc, #256]	@ (8009de8 <UART_Start_Receive_DMA+0x140>)
 8009ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cee:	4a3f      	ldr	r2, [pc, #252]	@ (8009dec <UART_Start_Receive_DMA+0x144>)
 8009cf0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf8:	4a3d      	ldr	r2, [pc, #244]	@ (8009df0 <UART_Start_Receive_DMA+0x148>)
 8009cfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d02:	2200      	movs	r2, #0
 8009d04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3324      	adds	r3, #36	@ 0x24
 8009d12:	4619      	mov	r1, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d18:	461a      	mov	r2, r3
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	f7fa ff4a 	bl	8004bb4 <HAL_DMA_Start_IT>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2210      	movs	r2, #16
 8009d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e051      	b.n	8009dde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d018      	beq.n	8009d74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d56:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d68:	e841 2300 	strex	r3, r2, [r1]
 8009d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e6      	bne.n	8009d42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3308      	adds	r3, #8
 8009d92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d94:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e5      	bne.n	8009d74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3308      	adds	r3, #8
 8009dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	613b      	str	r3, [r7, #16]
   return(result);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dc8:	623a      	str	r2, [r7, #32]
 8009dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	69f9      	ldr	r1, [r7, #28]
 8009dce:	6a3a      	ldr	r2, [r7, #32]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e5      	bne.n	8009da8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3758      	adds	r7, #88	@ 0x58
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	0800a001 	.word	0x0800a001
 8009dec:	0800a135 	.word	0x0800a135
 8009df0:	0800a17b 	.word	0x0800a17b

08009df4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b08f      	sub	sp, #60	@ 0x3c
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e6      	bne.n	8009dfc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e4e:	61ba      	str	r2, [r7, #24]
 8009e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6979      	ldr	r1, [r7, #20]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e5      	bne.n	8009e2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e6a:	bf00      	nop
 8009e6c:	373c      	adds	r7, #60	@ 0x3c
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b095      	sub	sp, #84	@ 0x54
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e86:	e853 3f00 	ldrex	r3, [r3]
 8009e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e6      	bne.n	8009e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e3      	bne.n	8009eb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d118      	bne.n	8009f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f023 0310 	bic.w	r3, r3, #16
 8009f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f12:	6979      	ldr	r1, [r7, #20]
 8009f14:	69ba      	ldr	r2, [r7, #24]
 8009f16:	e841 2300 	strex	r3, r2, [r1]
 8009f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e6      	bne.n	8009ef0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f36:	bf00      	nop
 8009f38:	3754      	adds	r7, #84	@ 0x54
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b090      	sub	sp, #64	@ 0x40
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d137      	bne.n	8009fce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	623b      	str	r3, [r7, #32]
   return(result);
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3308      	adds	r3, #8
 8009f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f86:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e5      	bne.n	8009f66 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69b9      	ldr	r1, [r7, #24]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fcc:	e004      	b.n	8009fd8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009fd6:	4798      	blx	r3
}
 8009fd8:	bf00      	nop
 8009fda:	3740      	adds	r7, #64	@ 0x40
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b09c      	sub	sp, #112	@ 0x70
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0320 	and.w	r3, r3, #32
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d171      	bne.n	800a100 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01e:	2200      	movs	r2, #0
 800a020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a042:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a044:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a076:	647a      	str	r2, [r7, #68]	@ 0x44
 800a078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a07c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a08a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	623b      	str	r3, [r7, #32]
   return(result);
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e5      	bne.n	800a08a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d118      	bne.n	800a100 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0310 	bic.w	r3, r3, #16
 800a0e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69b9      	ldr	r1, [r7, #24]
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e6      	bne.n	800a0ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a102:	2200      	movs	r2, #0
 800a104:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d109      	bne.n	800a122 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a10e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a110:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a116:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a11a:	4611      	mov	r1, r2
 800a11c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a11e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a120:	e004      	b.n	800a12c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a128:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a12a:	4798      	blx	r3
}
 800a12c:	bf00      	nop
 800a12e:	3770      	adds	r7, #112	@ 0x70
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d10b      	bne.n	800a168 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a15c:	0852      	lsrs	r2, r2, #1
 800a15e:	b292      	uxth	r2, r2
 800a160:	4611      	mov	r1, r2
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a166:	e004      	b.n	800a172 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	4798      	blx	r3
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a18e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a196:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1a2:	2b80      	cmp	r3, #128	@ 0x80
 800a1a4:	d109      	bne.n	800a1ba <UART_DMAError+0x40>
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b21      	cmp	r3, #33	@ 0x21
 800a1aa:	d106      	bne.n	800a1ba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a1b4:	6978      	ldr	r0, [r7, #20]
 800a1b6:	f7ff fe1d 	bl	8009df4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c4:	2b40      	cmp	r3, #64	@ 0x40
 800a1c6:	d109      	bne.n	800a1dc <UART_DMAError+0x62>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b22      	cmp	r3, #34	@ 0x22
 800a1cc:	d106      	bne.n	800a1dc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	f7ff fe4d 	bl	8009e76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e2:	f043 0210 	orr.w	r2, r3, #16
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1f6:	bf00      	nop
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b088      	sub	sp, #32
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	6979      	ldr	r1, [r7, #20]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	613b      	str	r3, [r7, #16]
   return(result);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e6      	bne.n	800a22e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a278:	bf00      	nop
 800a27a:	3720      	adds	r7, #32
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e027      	b.n	800a322 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2224      	movs	r2, #36	@ 0x24
 800a2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0201 	bic.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a342:	2302      	movs	r3, #2
 800a344:	e02d      	b.n	800a3a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2224      	movs	r2, #36	@ 0x24
 800a352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0201 	bic.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f850 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e02d      	b.n	800a41e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2224      	movs	r2, #36	@ 0x24
 800a3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0201 	bic.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f812 	bl	800a428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2220      	movs	r2, #32
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a448:	e031      	b.n	800a4ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a44a:	2308      	movs	r3, #8
 800a44c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a44e:	2308      	movs	r3, #8
 800a450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	0e5b      	lsrs	r3, r3, #25
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	0f5b      	lsrs	r3, r3, #29
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	7b3a      	ldrb	r2, [r7, #12]
 800a476:	4911      	ldr	r1, [pc, #68]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a478:	5c8a      	ldrb	r2, [r1, r2]
 800a47a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a47e:	7b3a      	ldrb	r2, [r7, #12]
 800a480:	490f      	ldr	r1, [pc, #60]	@ (800a4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a484:	fb93 f3f2 	sdiv	r3, r3, r2
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	7b7a      	ldrb	r2, [r7, #13]
 800a494:	4909      	ldr	r1, [pc, #36]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x94>)
 800a496:	5c8a      	ldrb	r2, [r1, r2]
 800a498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a49c:	7b7a      	ldrb	r2, [r7, #13]
 800a49e:	4908      	ldr	r1, [pc, #32]	@ (800a4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	0800a9b8 	.word	0x0800a9b8
 800a4c0:	0800a9c0 	.word	0x0800a9c0

0800a4c4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	ed93 7a06 	vldr	s14, [r3, #24]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	edd3 7a07 	vldr	s15, [r3, #28]
 800a4da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	edd3 7a08 	vldr	s15, [r3, #32]
 800a4e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	edd3 7a06 	vldr	s15, [r3, #24]
 800a4f4:	eeb1 7a67 	vneg.f32	s14, s15
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	edd3 7a08 	vldr	s15, [r3, #32]
 800a4fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a502:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a1a      	ldr	r2, [r3, #32]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d006      	beq.n	800a528 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	330c      	adds	r3, #12
 800a51e:	220c      	movs	r2, #12
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f9a9 	bl	800a87a <memset>
  }

}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a530:	b480      	push	{r7}
 800a532:	b08b      	sub	sp, #44	@ 0x2c
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	61fb      	str	r3, [r7, #28]
  arm_status status;                             /* status of matrix addition */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d111      	bne.n	800a57e <arm_mat_add_f32+0x4e>
      (pSrcA->numCols != pSrcB->numCols) ||
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	885a      	ldrh	r2, [r3, #2]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	885b      	ldrh	r3, [r3, #2]
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a562:	429a      	cmp	r2, r3
 800a564:	d10b      	bne.n	800a57e <arm_mat_add_f32+0x4e>
      (pSrcA->numRows != pDst->numRows)  ||
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	881a      	ldrh	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	881b      	ldrh	r3, [r3, #0]
      (pSrcA->numCols != pSrcB->numCols) ||
 800a56e:	429a      	cmp	r2, r3
 800a570:	d105      	bne.n	800a57e <arm_mat_add_f32+0x4e>
      (pSrcA->numCols != pDst->numCols)    )
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	885a      	ldrh	r2, [r3, #2]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d002      	beq.n	800a584 <arm_mat_add_f32+0x54>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a57e:	23fd      	movs	r3, #253	@ 0xfd
 800a580:	75fb      	strb	r3, [r7, #23]
 800a582:	e023      	b.n	800a5cc <arm_mat_add_f32+0x9c>

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	885b      	ldrh	r3, [r3, #2]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	613b      	str	r3, [r7, #16]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a598:	e013      	b.n	800a5c2 <arm_mat_add_f32+0x92>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	1d1a      	adds	r2, r3, #4
 800a59e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5a0:	ed93 7a00 	vldr	s14, [r3]
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	623a      	str	r2, [r7, #32]
 800a5aa:	edd3 7a00 	vldr	s15, [r3]
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	1d1a      	adds	r2, r3, #4
 800a5b2:	61fa      	str	r2, [r7, #28]
 800a5b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5b8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e8      	bne.n	800a59a <arm_mat_add_f32+0x6a>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	372c      	adds	r7, #44	@ 0x2c
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	607b      	str	r3, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	817b      	strh	r3, [r7, #10]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	897a      	ldrh	r2, [r7, #10]
 800a5f2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	893a      	ldrh	r2, [r7, #8]
 800a5f8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	605a      	str	r2, [r3, #4]
}
 800a600:	bf00      	nop
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b093      	sub	sp, #76	@ 0x4c
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	61fb      	str	r3, [r7, #28]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	61bb      	str	r3, [r7, #24]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	82fb      	strh	r3, [r7, #22]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	885b      	ldrh	r3, [r3, #2]
 800a640:	82bb      	strh	r3, [r7, #20]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	885b      	ldrh	r3, [r3, #2]
 800a646:	827b      	strh	r3, [r7, #18]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800a648:	2300      	movs	r3, #0
 800a64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a64c:	8afb      	ldrh	r3, [r7, #22]
 800a64e:	62bb      	str	r3, [r7, #40]	@ 0x28
  arm_status status;                             /* Status of matrix multiplication */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numCols != pSrcB->numRows) ||
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	885a      	ldrh	r2, [r3, #2]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d10b      	bne.n	800a674 <arm_mat_mult_f32+0x68>
      (pSrcA->numRows != pDst->numRows)  ||
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	881a      	ldrh	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	881b      	ldrh	r3, [r3, #0]
  if ((pSrcA->numCols != pSrcB->numRows) ||
 800a664:	429a      	cmp	r2, r3
 800a666:	d105      	bne.n	800a674 <arm_mat_mult_f32+0x68>
      (pSrcB->numCols != pDst->numCols)    )
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	885a      	ldrh	r2, [r3, #2]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a670:	429a      	cmp	r2, r3
 800a672:	d003      	beq.n	800a67c <arm_mat_mult_f32+0x70>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a674:	23fd      	movs	r3, #253	@ 0xfd
 800a676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a67a:	e050      	b.n	800a71e <arm_mat_mult_f32+0x112>
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800a67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	4413      	add	r3, r2
 800a684:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800a686:	8abb      	ldrh	r3, [r7, #20]
 800a688:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800a690:	f04f 0300 	mov.w	r3, #0
 800a694:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800a696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a698:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800a69a:	8a7b      	ldrh	r3, [r7, #18]
 800a69c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800a69e:	e017      	b.n	800a6d0 <arm_mat_mult_f32+0xc4>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800a6a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6a2:	1d1a      	adds	r2, r3, #4
 800a6a4:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6a6:	ed93 7a00 	vldr	s14, [r3]
 800a6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ac:	edd3 7a00 	vldr	s15, [r3]
 800a6b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800a6b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6bc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800a6c0:	8abb      	ldrh	r3, [r7, #20]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6c6:	4413      	add	r3, r2
 800a6c8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e4      	bne.n	800a6a0 <arm_mat_mult_f32+0x94>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a6dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6de:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800a6e6:	8aba      	ldrh	r2, [r7, #20]
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1ca      	bne.n	800a690 <arm_mat_mult_f32+0x84>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800a6fa:	8abb      	ldrh	r3, [r7, #20]
 800a6fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6fe:	4413      	add	r3, r2
 800a700:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800a702:	8a7b      	ldrh	r3, [r7, #18]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a708:	4413      	add	r3, r2
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	3b01      	subs	r3, #1
 800a710:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1b1      	bne.n	800a67c <arm_mat_mult_f32+0x70>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Return to application */
  return (status);
 800a71e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
}
 800a722:	4618      	mov	r0, r3
 800a724:	374c      	adds	r7, #76	@ 0x4c
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a72e:	b480      	push	{r7}
 800a730:	b08b      	sub	sp, #44	@ 0x2c
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	61fb      	str	r3, [r7, #28]
  arm_status status;                             /* status of matrix subtraction */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	881a      	ldrh	r2, [r3, #0]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	d111      	bne.n	800a77c <arm_mat_sub_f32+0x4e>
      (pSrcA->numCols != pSrcB->numCols) ||
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	885a      	ldrh	r2, [r3, #2]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	885b      	ldrh	r3, [r3, #2]
  if ((pSrcA->numRows != pSrcB->numRows) ||
 800a760:	429a      	cmp	r2, r3
 800a762:	d10b      	bne.n	800a77c <arm_mat_sub_f32+0x4e>
      (pSrcA->numRows != pDst->numRows)  ||
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	881a      	ldrh	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	881b      	ldrh	r3, [r3, #0]
      (pSrcA->numCols != pSrcB->numCols) ||
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d105      	bne.n	800a77c <arm_mat_sub_f32+0x4e>
      (pSrcA->numCols != pDst->numCols)    )
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	885a      	ldrh	r2, [r3, #2]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	885b      	ldrh	r3, [r3, #2]
      (pSrcA->numRows != pDst->numRows)  ||
 800a778:	429a      	cmp	r2, r3
 800a77a:	d002      	beq.n	800a782 <arm_mat_sub_f32+0x54>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a77c:	23fd      	movs	r3, #253	@ 0xfd
 800a77e:	75fb      	strb	r3, [r7, #23]
 800a780:	e023      	b.n	800a7ca <arm_mat_sub_f32+0x9c>

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	885b      	ldrh	r3, [r3, #2]
 800a78c:	fb02 f303 	mul.w	r3, r2, r3
 800a790:	613b      	str	r3, [r7, #16]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a796:	e013      	b.n	800a7c0 <arm_mat_sub_f32+0x92>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a79e:	ed93 7a00 	vldr	s14, [r3]
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	623a      	str	r2, [r7, #32]
 800a7a8:	edd3 7a00 	vldr	s15, [r3]
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	1d1a      	adds	r2, r3, #4
 800a7b0:	61fa      	str	r2, [r7, #28]
 800a7b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7b6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e8      	bne.n	800a798 <arm_mat_sub_f32+0x6a>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	372c      	adds	r7, #44	@ 0x2c
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b08b      	sub	sp, #44	@ 0x2c
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	817b      	strh	r3, [r7, #10]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	885b      	ldrh	r3, [r3, #2]
 800a7fa:	813b      	strh	r3, [r7, #8]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800a7fc:	897b      	ldrh	r3, [r7, #10]
 800a7fe:	61bb      	str	r3, [r7, #24]
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  arm_status status;                             /* status of matrix transpose */

#ifdef ARM_MATH_MATRIX_CHECK

  /* Check for matrix mismatch condition */
  if ((pSrc->numRows != pDst->numCols) ||
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	881a      	ldrh	r2, [r3, #0]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	885b      	ldrh	r3, [r3, #2]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d105      	bne.n	800a81c <arm_mat_trans_f32+0x42>
      (pSrc->numCols != pDst->numRows)   )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	885a      	ldrh	r2, [r3, #2]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	881b      	ldrh	r3, [r3, #0]
  if ((pSrc->numRows != pDst->numCols) ||
 800a818:	429a      	cmp	r2, r3
 800a81a:	d002      	beq.n	800a822 <arm_mat_trans_f32+0x48>
  {
    /* Set status as ARM_MATH_SIZE_MISMATCH */
    status = ARM_MATH_SIZE_MISMATCH;
 800a81c:	23fd      	movs	r3, #253	@ 0xfd
 800a81e:	74fb      	strb	r3, [r7, #19]
 800a820:	e023      	b.n	800a86a <arm_mat_trans_f32+0x90>
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800a82c:	893b      	ldrh	r3, [r7, #8]
 800a82e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800a830:	e00d      	b.n	800a84e <arm_mat_trans_f32+0x74>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	1d1a      	adds	r2, r3, #4
 800a836:	627a      	str	r2, [r7, #36]	@ 0x24
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	4413      	add	r3, r2
 800a846:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1ee      	bne.n	800a832 <arm_mat_trans_f32+0x58>
      }

      i++;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	3301      	adds	r3, #1
 800a858:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1dd      	bne.n	800a822 <arm_mat_trans_f32+0x48>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a866:	2300      	movs	r3, #0
 800a868:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800a86a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	372c      	adds	r7, #44	@ 0x2c
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <memset>:
 800a87a:	4402      	add	r2, r0
 800a87c:	4603      	mov	r3, r0
 800a87e:	4293      	cmp	r3, r2
 800a880:	d100      	bne.n	800a884 <memset+0xa>
 800a882:	4770      	bx	lr
 800a884:	f803 1b01 	strb.w	r1, [r3], #1
 800a888:	e7f9      	b.n	800a87e <memset+0x4>
	...

0800a88c <__libc_init_array>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	4d0d      	ldr	r5, [pc, #52]	@ (800a8c4 <__libc_init_array+0x38>)
 800a890:	4c0d      	ldr	r4, [pc, #52]	@ (800a8c8 <__libc_init_array+0x3c>)
 800a892:	1b64      	subs	r4, r4, r5
 800a894:	10a4      	asrs	r4, r4, #2
 800a896:	2600      	movs	r6, #0
 800a898:	42a6      	cmp	r6, r4
 800a89a:	d109      	bne.n	800a8b0 <__libc_init_array+0x24>
 800a89c:	4d0b      	ldr	r5, [pc, #44]	@ (800a8cc <__libc_init_array+0x40>)
 800a89e:	4c0c      	ldr	r4, [pc, #48]	@ (800a8d0 <__libc_init_array+0x44>)
 800a8a0:	f000 f826 	bl	800a8f0 <_init>
 800a8a4:	1b64      	subs	r4, r4, r5
 800a8a6:	10a4      	asrs	r4, r4, #2
 800a8a8:	2600      	movs	r6, #0
 800a8aa:	42a6      	cmp	r6, r4
 800a8ac:	d105      	bne.n	800a8ba <__libc_init_array+0x2e>
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b4:	4798      	blx	r3
 800a8b6:	3601      	adds	r6, #1
 800a8b8:	e7ee      	b.n	800a898 <__libc_init_array+0xc>
 800a8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8be:	4798      	blx	r3
 800a8c0:	3601      	adds	r6, #1
 800a8c2:	e7f2      	b.n	800a8aa <__libc_init_array+0x1e>
 800a8c4:	0800a9d0 	.word	0x0800a9d0
 800a8c8:	0800a9d0 	.word	0x0800a9d0
 800a8cc:	0800a9d0 	.word	0x0800a9d0
 800a8d0:	0800a9d4 	.word	0x0800a9d4

0800a8d4 <memcpy>:
 800a8d4:	440a      	add	r2, r1
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8dc:	d100      	bne.n	800a8e0 <memcpy+0xc>
 800a8de:	4770      	bx	lr
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ea:	4291      	cmp	r1, r2
 800a8ec:	d1f9      	bne.n	800a8e2 <memcpy+0xe>
 800a8ee:	bd10      	pop	{r4, pc}

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr

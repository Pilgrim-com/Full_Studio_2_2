
Studio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf8c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c164  0800c164  0000d164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a4  0800c1a4  0000e274  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c1a4  0800c1a4  0000d1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1ac  0800c1ac  0000e274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1ac  0800c1ac  0000d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  0800c1b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  20000278  0800c428  0000e278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001394  0800c428  0000e394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d979  00000000  00000000  0000e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003740  00000000  00000000  0002bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d6  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bc6  00000000  00000000  00031c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfe4  00000000  00000000  000597e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115fc4  00000000  00000000  000757c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b78c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006600  00000000  00000000  0018b7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00191dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000278 	.word	0x20000278
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c14c 	.word	0x0800c14c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000027c 	.word	0x2000027c
 8000214:	0800c14c 	.word	0x0800c14c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <modbus_1t5_Timeout+0x3c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <modbus_1t5_Timeout+0x3c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <modbus_1t5_Timeout+0x3c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <modbus_1t5_Timeout+0x3c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000294 	.word	0x20000294

08000f60 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <modbus_3t5_Timeout+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	755a      	strb	r2, [r3, #21]

}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	20000294 	.word	0x20000294

08000f80 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f009 ff23 	bl	800add4 <HAL_UART_GetError>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d101      	bne.n	8000f98 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f94:	f7ff ffc4 	bl	8000f20 <modbus_1t5_Timeout>

	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000faa:	4a25      	ldr	r2, [pc, #148]	@ (8001040 <Modbus_init+0xa0>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <Modbus_init+0xa0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <Modbus_init+0xa4>)
 8000fbe:	210e      	movs	r1, #14
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f008 f92b 	bl	800921c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 feab 	bl	800ad28 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f009 fec2 	bl	800ad60 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	@ (8001048 <Modbus_init+0xa8>)
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f009 f969 	bl	800a2bc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <Modbus_init+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <Modbus_init+0xa0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <Modbus_init+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000ffc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001000:	4413      	add	r3, r2
 8001002:	3302      	adds	r3, #2
 8001004:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001008:	4619      	mov	r1, r3
 800100a:	f009 fa91 	bl	800a530 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <Modbus_init+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10c      	bne.n	8001038 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <Modbus_init+0xa0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4618      	mov	r0, r3
 8001026:	f007 f825 	bl	8008074 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <Modbus_init+0xa0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fa7e 	bl	8008534 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	08000f61 	.word	0x08000f61
 8001048:	08000f81 	.word	0x08000f81

0800104c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800105c:	23ff      	movs	r3, #255	@ 0xff
 800105e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001060:	e013      	b.n	800108a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	4053      	eors	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001072:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <CRC16+0x68>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4053      	eors	r3, r2
 800107e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <CRC16+0x6c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800108a:	883b      	ldrh	r3, [r7, #0]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	803a      	strh	r2, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e6      	bne.n	8001062 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	b21b      	sxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29b      	uxth	r3, r3
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000100 	.word	0x20000100
 80010b8:	20000000 	.word	0x20000000

080010bc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010c2:	4b7e      	ldr	r3, [pc, #504]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	7ddb      	ldrb	r3, [r3, #23]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80a      	bhi.n	80010e4 <Modbus_Protocal_Worker+0x28>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <Modbus_Protocal_Worker+0x18>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010ef 	.word	0x080010ef
 80010d8:	08001283 	.word	0x08001283
 80010dc:	0800117b 	.word	0x0800117b
 80010e0:	080011bf 	.word	0x080011bf
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010e4:	4b75      	ldr	r3, [pc, #468]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	75da      	strb	r2, [r3, #23]
		break;
 80010ec:	e0e1      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010ee:	4b73      	ldr	r3, [pc, #460]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010fa:	4b70      	ldr	r3, [pc, #448]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2202      	movs	r2, #2
 8001100:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001102:	f000 f9cd 	bl	80014a0 <Modbus_Emission>
 8001106:	e018      	b.n	800113a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001108:	4b6c      	ldr	r3, [pc, #432]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001112:	4b6a      	ldr	r3, [pc, #424]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800111c:	b29b      	uxth	r3, r3
 800111e:	429a      	cmp	r2, r3
 8001120:	d00b      	beq.n	800113a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001122:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800112a:	4b64      	ldr	r3, [pc, #400]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001132:	4b62      	ldr	r3, [pc, #392]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2203      	movs	r2, #3
 8001138:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800113a:	4b60      	ldr	r3, [pc, #384]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001144:	2b20      	cmp	r3, #32
 8001146:	f040 80ad 	bne.w	80012a4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800114a:	4b5c      	ldr	r3, [pc, #368]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001154:	4b59      	ldr	r3, [pc, #356]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800115a:	4b58      	ldr	r3, [pc, #352]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b57      	ldr	r3, [pc, #348]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001166:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800116a:	4413      	add	r3, r2
 800116c:	3302      	adds	r3, #2
 800116e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001172:	4619      	mov	r1, r3
 8001174:	f009 f9dc 	bl	800a530 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001178:	e094      	b.n	80012a4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800117a:	4b50      	ldr	r3, [pc, #320]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	7d1b      	ldrb	r3, [r3, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8091 	beq.w	80012a8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001186:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	22fe      	movs	r2, #254	@ 0xfe
 800118c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800118e:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001198:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80011a8:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80011ac:	1a8a      	subs	r2, r1, r2
 80011ae:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80011b0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80011b4:	4b41      	ldr	r3, [pc, #260]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2204      	movs	r2, #4
 80011ba:	75da      	strb	r2, [r3, #23]
		}
		break;
 80011bc:	e074      	b.n	80012a8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011be:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80011c6:	f113 0f02 	cmn.w	r3, #2
 80011ca:	d150      	bne.n	800126e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011cc:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011d4:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011e4:	3b02      	subs	r3, #2
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f7ff ff2f 	bl	800104c <CRC16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011f2:	793a      	ldrb	r2, [r7, #4]
 80011f4:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	4b30      	ldr	r3, [pc, #192]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001200:	3b02      	subs	r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001208:	429a      	cmp	r2, r3
 800120a:	d10c      	bne.n	8001226 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800120c:	797a      	ldrb	r2, [r7, #5]
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800121a:	3b01      	subs	r3, #1
 800121c:	440b      	add	r3, r1
 800121e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001222:	429a      	cmp	r2, r3
 8001224:	d004      	beq.n	8001230 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001226:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	22ff      	movs	r2, #255	@ 0xff
 800122c:	759a      	strb	r2, [r3, #22]
				break;
 800122e:	e040      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001238:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d113      	bne.n	800126a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001252:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800125c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800125e:	461a      	mov	r2, r3
 8001260:	f00a ff44 	bl	800c0ec <memcpy>

			//execute command
			Modbus_frame_response();
 8001264:	f000 f904 	bl	8001470 <Modbus_frame_response>
 8001268:	e001      	b.n	800126e <Modbus_Protocal_Worker+0x1b2>
				break;
 800126a:	bf00      	nop
					}
		break;


	}
}
 800126c:	e021      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	7d5b      	ldrb	r3, [r3, #21]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d019      	beq.n	80012ac <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	75da      	strb	r2, [r3, #23]
		break;
 8001280:	e014      	b.n	80012ac <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800128c:	2b20      	cmp	r3, #32
 800128e:	d10f      	bne.n	80012b0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <Modbus_Protocal_Worker+0x200>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	75da      	strb	r2, [r3, #23]
		break;
 80012a2:	e005      	b.n	80012b0 <Modbus_Protocal_Worker+0x1f4>
		break;
 80012a4:	bf00      	nop
 80012a6:	e004      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012a8:	bf00      	nop
 80012aa:	e002      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012ac:	bf00      	nop
 80012ae:	e000      	b.n	80012b2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80012b0:	bf00      	nop
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000294 	.word	0x20000294

080012c0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <modbusWrite1Register+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	7e5b      	ldrb	r3, [r3, #25]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4a1a      	ldr	r2, [pc, #104]	@ (800133c <modbusWrite1Register+0x7c>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	7e92      	ldrb	r2, [r2, #26]
 80012d6:	4413      	add	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012da:	88fa      	ldrh	r2, [r7, #6]
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <modbusWrite1Register+0x7c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d903      	bls.n	80012ee <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f000 f8a0 	bl	800142c <ModbusErrorReply>
			 return;
 80012ec:	e023      	b.n	8001336 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <modbusWrite1Register+0x7c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <modbusWrite1Register+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	7ed2      	ldrb	r2, [r2, #27]
 8001300:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <modbusWrite1Register+0x7c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <modbusWrite1Register+0x7c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	7f12      	ldrb	r2, [r2, #28]
 8001314:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <modbusWrite1Register+0x7c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <modbusWrite1Register+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001324:	2208      	movs	r2, #8
 8001326:	4619      	mov	r1, r3
 8001328:	f00a fee0 	bl	800c0ec <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <modbusWrite1Register+0x7c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000294 	.word	0x20000294

08001340 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <modbusRead1Register+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7edb      	ldrb	r3, [r3, #27]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	4a35      	ldr	r2, [pc, #212]	@ (8001428 <modbusRead1Register+0xe8>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	7f12      	ldrb	r2, [r2, #28]
 8001356:	4413      	add	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800135a:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <modbusRead1Register+0xe8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	7e5b      	ldrb	r3, [r3, #25]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <modbusRead1Register+0xe8>)
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	7e92      	ldrb	r2, [r2, #26]
 800136a:	4413      	add	r3, r2
 800136c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <modbusRead1Register+0x3a>
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	2b7d      	cmp	r3, #125	@ 0x7d
 8001378:	d903      	bls.n	8001382 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800137a:	2003      	movs	r0, #3
 800137c:	f000 f856 	bl	800142c <ModbusErrorReply>
		 return;
 8001380:	e04e      	b.n	8001420 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001382:	88ba      	ldrh	r2, [r7, #4]
 8001384:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d808      	bhi.n	80013a0 <modbusRead1Register+0x60>
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4413      	add	r3, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <modbusRead1Register+0xe8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	d903      	bls.n	80013a8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 f843 	bl	800142c <ModbusErrorReply>
		 return;
 80013a6:	e03b      	b.n	8001420 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <modbusRead1Register+0xe8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <modbusRead1Register+0xe8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0052      	lsls	r2, r2, #1
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	2400      	movs	r4, #0
 80013c4:	e020      	b.n	8001408 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <modbusRead1Register+0xe8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	4423      	add	r3, r4
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	18d1      	adds	r1, r2, r3
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <modbusRead1Register+0xe8>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	1c63      	adds	r3, r4, #1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	7849      	ldrb	r1, [r1, #1]
 80013de:	4413      	add	r3, r2
 80013e0:	460a      	mov	r2, r1
 80013e2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <modbusRead1Register+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	4423      	add	r3, r4
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	18d1      	adds	r1, r2, r3
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <modbusRead1Register+0xe8>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	0063      	lsls	r3, r4, #1
 80013fa:	3303      	adds	r3, #3
 80013fc:	7809      	ldrb	r1, [r1, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	460a      	mov	r2, r1
 8001402:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001406:	3401      	adds	r4, #1
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	429c      	cmp	r4, r3
 800140c:	dbdb      	blt.n	80013c6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <modbusRead1Register+0xe8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0052      	lsls	r2, r2, #1
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	20000294 	.word	0x20000294

0800142c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <ModbusErrorReply+0x40>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	7e1a      	ldrb	r2, [r3, #24]
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <ModbusErrorReply+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <ModbusErrorReply+0x40>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <ModbusErrorReply+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2202      	movs	r2, #2
 800145a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000294 	.word	0x20000294

08001470 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <Modbus_frame_response+0x2c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	7e1b      	ldrb	r3, [r3, #24]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d004      	beq.n	8001488 <Modbus_frame_response+0x18>
 800147e:	2b06      	cmp	r3, #6
 8001480:	d105      	bne.n	800148e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001482:	f7ff ff1d 	bl	80012c0 <modbusWrite1Register>
		break;
 8001486:	e006      	b.n	8001496 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001488:	f7ff ff5a 	bl	8001340 <modbusRead1Register>
		break;
 800148c:	e003      	b.n	8001496 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff ffcc 	bl	800142c <ModbusErrorReply>
		break;
 8001494:	bf00      	nop

	}
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000294 	.word	0x20000294

080014a0 <Modbus_Emission>:

void Modbus_Emission()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014a6:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <Modbus_Emission+0xe8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	d15d      	bne.n	8001570 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <Modbus_Emission+0xe8>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <Modbus_Emission+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <Modbus_Emission+0xe8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80014ca:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <Modbus_Emission+0xe8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <Modbus_Emission+0xe8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80014dc:	461a      	mov	r2, r3
 80014de:	f00a fe05 	bl	800c0ec <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <Modbus_Emission+0xe8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <Modbus_Emission+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3203      	adds	r2, #3
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014f8:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <Modbus_Emission+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <Modbus_Emission+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001508:	3b02      	subs	r3, #2
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff fd9d 	bl	800104c <CRC16>
 8001512:	4603      	mov	r3, r0
 8001514:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <Modbus_Emission+0xe8>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <Modbus_Emission+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001522:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001524:	7939      	ldrb	r1, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <Modbus_Emission+0xe8>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <Modbus_Emission+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800153a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800153c:	7979      	ldrb	r1, [r7, #5]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <Modbus_Emission+0xe8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001550:	2b20      	cmp	r3, #32
 8001552:	d10d      	bne.n	8001570 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <Modbus_Emission+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <Modbus_Emission+0xe8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <Modbus_Emission+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001566:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800156a:	461a      	mov	r2, r3
 800156c:	f008 ff60 	bl	800a430 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <Modbus_Emission+0xe8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <Modbus_Emission+0xe8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	755a      	strb	r2, [r3, #21]

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000294 	.word	0x20000294

0800158c <PIDInit>:


#include "PID.h"

void PIDInit(CONTROLLER* controller, float u_max, float u_min)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	ed87 0a02 	vstr	s0, [r7, #8]
 8001598:	edc7 0a01 	vstr	s1, [r7, #4]
	controller -> u_max = u_max;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	611a      	str	r2, [r3, #16]
	controller -> u_min = u_min;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	615a      	str	r2, [r3, #20]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PIDCompute>:

float PIDCompute(CONTROLLER* controller , float kp, float ki, float kd, float error)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6178      	str	r0, [r7, #20]
 80015bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80015c0:	edc7 0a03 	vstr	s1, [r7, #12]
 80015c4:	ed87 1a02 	vstr	s2, [r7, #8]
 80015c8:	edc7 1a01 	vstr	s3, [r7, #4]

	controller -> kp = kp;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]
	controller -> kd = kd;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	609a      	str	r2, [r3, #8]
	controller -> ki = ki;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]

    // Anti-windup: only integrate if not saturated
    if (!((controller->u >= controller->u_max && error > 0) ||
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80015ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	bfac      	ite	ge
 80015f4:	2301      	movge	r3, #1
 80015f6:	2300      	movlt	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10e      	bne.n	8001622 <PIDCompute+0x6e>
 8001604:	edd7 7a01 	vldr	s15, [r7, #4]
 8001608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d059      	beq.n	80016d6 <PIDCompute+0x122>
          (controller->u <= controller->u_min && error < 0)))
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	ed93 7a03 	vldr	s14, [r3, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	edd3 7a05 	vldr	s15, [r3, #20]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	bf94      	ite	ls
 8001638:	2301      	movls	r3, #1
 800163a:	2300      	movhi	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f083 0301 	eor.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
    if (!((controller->u >= controller->u_max && error > 0) ||
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10e      	bne.n	8001666 <PIDCompute+0xb2>
          (controller->u <= controller->u_min && error < 0)))
 8001648:	edd7 7a01 	vldr	s15, [r7, #4]
 800164c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	bf4c      	ite	mi
 8001656:	2301      	movmi	r3, #1
 8001658:	2300      	movpl	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d037      	beq.n	80016d6 <PIDCompute+0x122>
    {
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	edd3 7a02 	vldr	s15, [r3, #8]
 800167c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001680:	edd7 7a01 	vldr	s15, [r7, #4]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
                      - (controller->kp + 2 * controller->kd) * controller->prev_error_one
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	edd3 6a00 	vldr	s13, [r3]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	edd3 7a02 	vldr	s15, [r3, #8]
 8001694:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001698:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	edd3 7a06 	vldr	s15, [r3, #24]
 80016a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a6:	ee37 7a67 	vsub.f32	s14, s14, s15
                      + (controller->kd * controller->prev_error_two);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80016b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float delta_u = (controller->kp + controller->ki + controller->kd) * error
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	edc7 7a07 	vstr	s15, [r7, #28]

        controller->u += delta_u;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80016c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (controller->u > controller->u_max) {controller->u = controller->u_max;}
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	edd3 7a04 	vldr	s15, [r3, #16]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dd04      	ble.n	80016f6 <PIDCompute+0x142>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	e00e      	b.n	8001714 <PIDCompute+0x160>
    else if (controller->u < controller->u_min) {controller->u = controller->u_min;}
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d503      	bpl.n	8001714 <PIDCompute+0x160>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	60da      	str	r2, [r3, #12]

    // Shift error history
    controller->prev_error_two = controller->prev_error_one;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	61da      	str	r2, [r3, #28]
    controller->prev_error_one = error;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	619a      	str	r2, [r3, #24]

    return controller->u;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3724      	adds	r7, #36	@ 0x24
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <QEIInit>:
#include "QEI.h"


// Constructor
void QEIInit(QEI *qei, TIM_HandleTypeDef *htim_qei, int32_t ppr, float frequency, int32_t counter_period)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6178      	str	r0, [r7, #20]
 8001740:	6139      	str	r1, [r7, #16]
 8001742:	60fa      	str	r2, [r7, #12]
 8001744:	ed87 0a02 	vstr	s0, [r7, #8]
 8001748:	607b      	str	r3, [r7, #4]

	qei->htim_qei = htim_qei;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]
	qei->ppr = ppr;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]
	qei->frequency = frequency;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	609a      	str	r2, [r3, #8]
	qei->cp = counter_period;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]

	qei->new_val = 0;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->old_val = 0;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->pulses = 0;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	qei->revs = 0;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
	qei->rads = 0;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
	qei->radps = 0;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(htim_qei,TIM_CHANNEL_ALL);
 800178c:	213c      	movs	r1, #60	@ 0x3c
 800178e:	6938      	ldr	r0, [r7, #16]
 8001790:	f007 f812 	bl	80087b8 <HAL_TIM_Encoder_Start>

}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	0000      	movs	r0, r0
	...

080017a0 <QEIPosVelUpdate>:

// Function
void QEIPosVelUpdate(QEI *qei)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

	qei -> new_val = __HAL_TIM_GET_COUNTER(qei -> htim_qei);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28

	// Wrap around
	qei->diff_count = (qei -> new_val) -  (qei -> old_val);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	621a      	str	r2, [r3, #32]

	if (qei->diff_count > (qei->cp)/2){ qei->diff_count -= qei->cp;}
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0fd9      	lsrs	r1, r3, #31
 80017ce:	440b      	add	r3, r1
 80017d0:	105b      	asrs	r3, r3, #1
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dd07      	ble.n	80017e6 <QEIPosVelUpdate+0x46>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	1ad2      	subs	r2, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	621a      	str	r2, [r3, #32]
 80017e4:	e010      	b.n	8001808 <QEIPosVelUpdate+0x68>
	else if (qei->diff_count < -(qei->cp/2)) { qei->diff_count += qei->cp;}
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1a      	ldr	r2, [r3, #32]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	0fd9      	lsrs	r1, r3, #31
 80017f0:	440b      	add	r3, r1
 80017f2:	105b      	asrs	r3, r3, #1
 80017f4:	425b      	negs	r3, r3
 80017f6:	429a      	cmp	r2, r3
 80017f8:	da06      	bge.n	8001808 <QEIPosVelUpdate+0x68>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	441a      	add	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	621a      	str	r2, [r3, #32]


	// Pulse Position
	qei -> pulses += qei->diff_count;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	441a      	add	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]


	// Revolution round
 	qei -> revs = ((float)qei -> pulses / qei -> ppr);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	edc3 7a05 	vstr	s15, [r3, #20]

 	// Radian
 	qei -> rads = qei->revs * 2 * M_PI;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a05 	vldr	s15, [r3, #20]
 800183e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001842:	ee17 0a90 	vmov	r0, s15
 8001846:	f7fe fe4b 	bl	80004e0 <__aeabi_f2d>
 800184a:	a323      	add	r3, pc, #140	@ (adr r3, 80018d8 <QEIPosVelUpdate+0x138>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fe9e 	bl	8000590 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f97a 	bl	8000b54 <__aeabi_d2f>
 8001860:	4602      	mov	r2, r0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]

 	// Angular velocity calculation
 	qei -> radps = ((qei->diff_count * qei->frequency)*2*M_PI/qei->ppr);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a02 	vldr	s15, [r3, #8]
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001880:	ee17 0a90 	vmov	r0, s15
 8001884:	f7fe fe2c 	bl	80004e0 <__aeabi_f2d>
 8001888:	a313      	add	r3, pc, #76	@ (adr r3, 80018d8 <QEIPosVelUpdate+0x138>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fe7f 	bl	8000590 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	461d      	mov	r5, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe0c 	bl	80004bc <__aeabi_i2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4602      	mov	r2, r0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24

 	// Update value
 	qei -> old_val = qei -> new_val;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	400921fb 	.word	0x400921fb

080018e0 <QEI_Reset>:

void QEI_Reset(QEI *qei)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    // 1) stop encoder (optional)
    HAL_TIM_Encoder_Stop(qei->htim_qei, TIM_CHANNEL_ALL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	213c      	movs	r1, #60	@ 0x3c
 80018ee:	4618      	mov	r0, r3
 80018f0:	f006 fff0 	bl	80088d4 <HAL_TIM_Encoder_Stop>

    // 2) clear the hardware counter
    __HAL_TIM_SET_COUNTER(qei->htim_qei, 0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24

    // 3) clear your software state
    qei->new_val   = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->old_val   = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->pulses    = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
    qei->revs      = 0.0f;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
    qei->rads      = 0.0f;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
    qei->radps     = 0.0f;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4) restart encoder
    HAL_TIM_Encoder_Start(qei->htim_qei, TIM_CHANNEL_ALL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	213c      	movs	r1, #60	@ 0x3c
 800192e:	4618      	mov	r0, r3
 8001930:	f006 ff42 	bl	80087b8 <HAL_TIM_Encoder_Start>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <Trapezoidal_Init>:
 */

#include "math.h"
#include "Trapezoidal.h"

void Trapezoidal_Init(VELO_PROFILE *profile, float distance_total, float v_max,float a_max, float current_pos) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6178      	str	r0, [r7, #20]
 8001944:	ed87 0a04 	vstr	s0, [r7, #16]
 8001948:	edc7 0a03 	vstr	s1, [r7, #12]
 800194c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001950:	edc7 1a01 	vstr	s3, [r7, #4]
	profile->distance_total = fabsf(distance_total);
 8001954:	edd7 7a04 	vldr	s15, [r7, #16]
 8001958:	eef0 7ae7 	vabs.f32	s15, s15
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	edc3 7a00 	vstr	s15, [r3]
	profile->v_max = fabsf(v_max);
 8001962:	edd7 7a03 	vldr	s15, [r7, #12]
 8001966:	eef0 7ae7 	vabs.f32	s15, s15
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	edc3 7a01 	vstr	s15, [r3, #4]
	profile->a_max = fabsf(a_max);
 8001970:	edd7 7a02 	vldr	s15, [r7, #8]
 8001974:	eef0 7ae7 	vabs.f32	s15, s15
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	edc3 7a03 	vstr	s15, [r3, #12]
	profile->current_position = current_pos;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	611a      	str	r2, [r3, #16]
	profile->current_velocity = 0.0f;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
	profile->target_position = distance_total;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	619a      	str	r2, [r3, #24]
	profile->direction = (distance_total >= 0) ? 1.0f : -1.0f;
 8001992:	edd7 7a04 	vldr	s15, [r7, #16]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	db02      	blt.n	80019a6 <Trapezoidal_Init+0x6a>
 80019a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019a4:	e000      	b.n	80019a8 <Trapezoidal_Init+0x6c>
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <Trapezoidal_Init+0xe8>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	61da      	str	r2, [r3, #28]
	profile->finished = 0;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]

	// Check if triangular or trapezoidal
	float d_total_min = (profile->v_max * profile->v_max) / profile->a_max;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80019be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80019c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019cc:	edc7 7a07 	vstr	s15, [r7, #28]
	if (profile->distance_total < d_total_min) {
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80019da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dd14      	ble.n	8001a0e <Trapezoidal_Init+0xd2>
		// Triangular profile
		profile->is_triangular = 1;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2201      	movs	r2, #1
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = sqrtf(profile->a_max * profile->distance_total);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	f00a fb83 	bl	800c108 <sqrtf>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// Full trapezoidal profile
		profile->is_triangular = 0;
		profile->v_peak = profile->v_max;
	}
}
 8001a0c:	e006      	b.n	8001a1c <Trapezoidal_Init+0xe0>
		profile->is_triangular = 0;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2200      	movs	r2, #0
 8001a12:	625a      	str	r2, [r3, #36]	@ 0x24
		profile->v_peak = profile->v_max;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	609a      	str	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	bf800000 	.word	0xbf800000

08001a28 <Trapezoidal_Update>:

void Trapezoidal_Update(VELO_PROFILE *profile, float dt) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	ed87 0a00 	vstr	s0, [r7]
    if (profile->finished) return;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 80dd 	bne.w	8001bf8 <Trapezoidal_Update+0x1d0>

    float remaining_distance = profile->target_position - profile->current_position;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	edc7 7a03 	vstr	s15, [r7, #12]
    float stopping_distance = (profile->current_velocity * profile->current_velocity) / (2.0f * profile->a_max);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a70:	edc7 7a02 	vstr	s15, [r7, #8]

    if (fabsf(remaining_distance) <= stopping_distance) {
 8001a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a78:	eef0 7ae7 	vabs.f32	s15, s15
 8001a7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	db3c      	blt.n	8001b04 <Trapezoidal_Update+0xdc>
        // Decelerate
        profile->current_velocity -= profile->a_max * dt * profile->direction;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a96:	edd7 7a00 	vldr	s15, [r7]
 8001a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	edc3 7a05 	vstr	s15, [r3, #20]
        if (profile->direction > 0 && profile->current_velocity < 0.0f) profile->current_velocity = 0.0f;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	dd0b      	ble.n	8001ada <Trapezoidal_Update+0xb2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	d503      	bpl.n	8001ada <Trapezoidal_Update+0xb2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
        if (profile->direction < 0 && profile->current_velocity > 0.0f) profile->current_velocity = 0.0f;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d545      	bpl.n	8001b76 <Trapezoidal_Update+0x14e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af8:	dd3d      	ble.n	8001b76 <Trapezoidal_Update+0x14e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	e038      	b.n	8001b76 <Trapezoidal_Update+0x14e>
    } else {
        // Accelerate
        if (fabsf(profile->current_velocity) < profile->v_peak) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b0a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d52b      	bpl.n	8001b76 <Trapezoidal_Update+0x14e>
            profile->current_velocity += profile->a_max * dt * profile->direction;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b2a:	edd7 7a00 	vldr	s15, [r7]
 8001b2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edc3 7a05 	vstr	s15, [r3, #20]
            if (fabsf(profile->current_velocity) > profile->v_peak) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b4c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	dd0a      	ble.n	8001b76 <Trapezoidal_Update+0x14e>
                profile->current_velocity = profile->v_peak * profile->direction;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	edc3 7a05 	vstr	s15, [r3, #20]
        }
        // In triangular mode, no cruising phase
    }

    // Update position
    profile->current_position += profile->current_velocity * dt;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b82:	edd7 7a00 	vldr	s15, [r7]
 8001b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edc3 7a04 	vstr	s15, [r3, #16]

    // Check if finished
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd0a      	ble.n	8001bba <Trapezoidal_Update+0x192>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	da12      	bge.n	8001be0 <Trapezoidal_Update+0x1b8>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edd3 7a07 	vldr	s15, [r3, #28]
    if ((profile->direction > 0 && profile->current_position >= profile->target_position) ||
 8001bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d517      	bpl.n	8001bfa <Trapezoidal_Update+0x1d2>
        (profile->direction < 0 && profile->current_position <= profile->target_position)) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d80c      	bhi.n	8001bfa <Trapezoidal_Update+0x1d2>
        profile->current_position = profile->target_position;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
        profile->current_velocity = 0.0f;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
        profile->finished = 1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	621a      	str	r2, [r3, #32]
 8001bf6:	e000      	b.n	8001bfa <Trapezoidal_Update+0x1d2>
    if (profile->finished) return;
 8001bf8:	bf00      	nop
    }
}
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c0a:	f002 fc76 	bl	80044fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c0e:	f000 f8d1 	bl	8001db4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c12:	f000 fcd9 	bl	80025c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c16:	f000 fc95 	bl	8002544 <MX_DMA_Init>
	MX_TIM1_Init();
 8001c1a:	f000 fa05 	bl	8002028 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c1e:	f000 facb 	bl	80021b8 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001c22:	f000 fb6d 	bl	8002300 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001c26:	f000 fbc1 	bl	80023ac <MX_TIM5_Init>
	MX_TIM3_Init();
 8001c2a:	f000 fb13 	bl	8002254 <MX_TIM3_Init>
	MX_ADC1_Init();
 8001c2e:	f000 f90d 	bl	8001e4c <MX_ADC1_Init>
	MX_TIM16_Init();
 8001c32:	f000 fc09 	bl	8002448 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 8001c36:	f000 fc37 	bl	80024a8 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8001c3a:	f000 f98f 	bl	8001f5c <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	hmodbus.huart = &huart2;
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d38 <main+0x134>)
 8001c40:	4a3e      	ldr	r2, [pc, #248]	@ (8001d3c <main+0x138>)
 8001c42:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001c44:	4b3c      	ldr	r3, [pc, #240]	@ (8001d38 <main+0x134>)
 8001c46:	4a3e      	ldr	r2, [pc, #248]	@ (8001d40 <main+0x13c>)
 8001c48:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <main+0x134>)
 8001c4c:	2215      	movs	r2, #21
 8001c4e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70;
 8001c50:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <main+0x134>)
 8001c52:	2246      	movs	r2, #70	@ 0x46
 8001c54:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001c56:	493b      	ldr	r1, [pc, #236]	@ (8001d44 <main+0x140>)
 8001c58:	4837      	ldr	r0, [pc, #220]	@ (8001d38 <main+0x134>)
 8001c5a:	f7ff f9a1 	bl	8000fa0 <Modbus_init>

	PID_POS_pris.Kp = Kp_pos_pris;
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d48 <main+0x144>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a3a      	ldr	r2, [pc, #232]	@ (8001d4c <main+0x148>)
 8001c64:	6193      	str	r3, [r2, #24]
	PID_POS_pris.Ki = Ki_pos_pris;
 8001c66:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <main+0x14c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a38      	ldr	r2, [pc, #224]	@ (8001d4c <main+0x148>)
 8001c6c:	61d3      	str	r3, [r2, #28]
	PID_POS_pris.Kd = Kd_pos_pris;
 8001c6e:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <main+0x150>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a36      	ldr	r2, [pc, #216]	@ (8001d4c <main+0x148>)
 8001c74:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_pris, 0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	4834      	ldr	r0, [pc, #208]	@ (8001d4c <main+0x148>)
 8001c7a:	f00a f9cf 	bl	800c01c <arm_pid_init_f32>

	PID_POS_re.Kp = Kp_pos_re;
 8001c7e:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <main+0x154>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a36      	ldr	r2, [pc, #216]	@ (8001d5c <main+0x158>)
 8001c84:	6193      	str	r3, [r2, #24]
	PID_POS_re.Ki = Ki_pos_re;
 8001c86:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <main+0x15c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a34      	ldr	r2, [pc, #208]	@ (8001d5c <main+0x158>)
 8001c8c:	61d3      	str	r3, [r2, #28]
	PID_POS_re.Kd = Kd_pos_re;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <main+0x160>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <main+0x158>)
 8001c94:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID_POS_re, 0);
 8001c96:	2100      	movs	r1, #0
 8001c98:	4830      	ldr	r0, [pc, #192]	@ (8001d5c <main+0x158>)
 8001c9a:	f00a f9bf 	bl	800c01c <arm_pid_init_f32>

	MotorInit(&prismatic_motor, &htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_7);
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <main+0x164>)
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4931      	ldr	r1, [pc, #196]	@ (8001d6c <main+0x168>)
 8001ca8:	4831      	ldr	r0, [pc, #196]	@ (8001d70 <main+0x16c>)
 8001caa:	f001 fec1 	bl	8003a30 <MotorInit>
	MotorInit(&revolute_motor, &htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_6);
 8001cae:	2340      	movs	r3, #64	@ 0x40
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <main+0x164>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	492d      	ldr	r1, [pc, #180]	@ (8001d6c <main+0x168>)
 8001cb8:	482e      	ldr	r0, [pc, #184]	@ (8001d74 <main+0x170>)
 8001cba:	f001 feb9 	bl	8003a30 <MotorInit>
	HAL_TIM_Base_Start(&htim1);
 8001cbe:	482b      	ldr	r0, [pc, #172]	@ (8001d6c <main+0x168>)
 8001cc0:	f006 f968 	bl	8007f94 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4829      	ldr	r0, [pc, #164]	@ (8001d6c <main+0x168>)
 8001cc8:	f006 faba 	bl	8008240 <HAL_TIM_PWM_Start>

	QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 8001ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd0:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001d78 <main+0x174>
 8001cd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd8:	4928      	ldr	r1, [pc, #160]	@ (8001d7c <main+0x178>)
 8001cda:	4829      	ldr	r0, [pc, #164]	@ (8001d80 <main+0x17c>)
 8001cdc:	f7ff fd2c 	bl	8001738 <QEIInit>
	QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 8001ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ce4:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001d78 <main+0x174>
 8001ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cec:	4925      	ldr	r1, [pc, #148]	@ (8001d84 <main+0x180>)
 8001cee:	4826      	ldr	r0, [pc, #152]	@ (8001d88 <main+0x184>)
 8001cf0:	f7ff fd22 	bl	8001738 <QEIInit>

	PIDInit(&prismatic_vel_control, 65535, -65535);
 8001cf4:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001d8c <main+0x188>
 8001cf8:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001d90 <main+0x18c>
 8001cfc:	4825      	ldr	r0, [pc, #148]	@ (8001d94 <main+0x190>)
 8001cfe:	f7ff fc45 	bl	800158c <PIDInit>
	PIDInit(&revolute_vel_control, 65535, -65535);
 8001d02:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001d8c <main+0x188>
 8001d06:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001d90 <main+0x18c>
 8001d0a:	4823      	ldr	r0, [pc, #140]	@ (8001d98 <main+0x194>)
 8001d0c:	f7ff fc3e 	bl	800158c <PIDInit>

	HAL_TIM_Base_Start_IT(&htim5);
 8001d10:	4822      	ldr	r0, [pc, #136]	@ (8001d9c <main+0x198>)
 8001d12:	f006 f9af 	bl	8008074 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d16:	4822      	ldr	r0, [pc, #136]	@ (8001da0 <main+0x19c>)
 8001d18:	f006 f9ac 	bl	8008074 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
 8001d1c:	2214      	movs	r2, #20
 8001d1e:	4921      	ldr	r1, [pc, #132]	@ (8001da4 <main+0x1a0>)
 8001d20:	4821      	ldr	r0, [pc, #132]	@ (8001da8 <main+0x1a4>)
 8001d22:	f003 f857 	bl	8004dd4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, Prox_RawRead, 10);
 8001d26:	220a      	movs	r2, #10
 8001d28:	4920      	ldr	r1, [pc, #128]	@ (8001dac <main+0x1a8>)
 8001d2a:	4821      	ldr	r0, [pc, #132]	@ (8001db0 <main+0x1ac>)
 8001d2c:	f003 f852 	bl	8004dd4 <HAL_ADC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8001d30:	f7ff f9c4 	bl	80010bc <Modbus_Protocal_Worker>
 8001d34:	e7fc      	b.n	8001d30 <main+0x12c>
 8001d36:	bf00      	nop
 8001d38:	20000ad4 	.word	0x20000ad4
 8001d3c:	200008f8 	.word	0x200008f8
 8001d40:	2000082c 	.word	0x2000082c
 8001d44:	20000fac 	.word	0x20000fac
 8001d48:	20000208 	.word	0x20000208
 8001d4c:	20001098 	.word	0x20001098
 8001d50:	20001088 	.word	0x20001088
 8001d54:	2000108c 	.word	0x2000108c
 8001d58:	2000020c 	.word	0x2000020c
 8001d5c:	200010bc 	.word	0x200010bc
 8001d60:	200011bc 	.word	0x200011bc
 8001d64:	200011c0 	.word	0x200011c0
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	20000430 	.word	0x20000430
 8001d70:	20001040 	.word	0x20001040
 8001d74:	2000105c 	.word	0x2000105c
 8001d78:	447a0000 	.word	0x447a0000
 8001d7c:	20000694 	.word	0x20000694
 8001d80:	200010e8 	.word	0x200010e8
 8001d84:	200005c8 	.word	0x200005c8
 8001d88:	20001164 	.word	0x20001164
 8001d8c:	c77fff00 	.word	0xc77fff00
 8001d90:	477fff00 	.word	0x477fff00
 8001d94:	20001118 	.word	0x20001118
 8001d98:	20001198 	.word	0x20001198
 8001d9c:	20000760 	.word	0x20000760
 8001da0:	200004fc 	.word	0x200004fc
 8001da4:	200011fc 	.word	0x200011fc
 8001da8:	20000298 	.word	0x20000298
 8001dac:	20001230 	.word	0x20001230
 8001db0:	20000304 	.word	0x20000304

08001db4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b094      	sub	sp, #80	@ 0x50
 8001db8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001dba:	f107 0318 	add.w	r3, r7, #24
 8001dbe:	2238      	movs	r2, #56	@ 0x38
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00a f960 	bl	800c088 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f005 f848 	bl	8006e6c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de6:	2340      	movs	r3, #64	@ 0x40
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dea:	2302      	movs	r3, #2
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dee:	2302      	movs	r3, #2
 8001df0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001df2:	2304      	movs	r3, #4
 8001df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001df6:	2355      	movs	r3, #85	@ 0x55
 8001df8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 f8e2 	bl	8006fd4 <HAL_RCC_OscConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0x66>
		Error_Handler();
 8001e16:	f001 fe05 	bl	8003a24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2104      	movs	r1, #4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 fbe0 	bl	80075f8 <HAL_RCC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x8e>
		Error_Handler();
 8001e3e:	f001 fdf1 	bl	8003a24 <Error_Handler>
	}
}
 8001e42:	bf00      	nop
 8001e44:	3750      	adds	r7, #80	@ 0x50
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	@ 0x30
 8001e50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2220      	movs	r2, #32
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00a f90f 	bl	800c088 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001e6a:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e70:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e78:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e7a:	4b35      	ldr	r3, [pc, #212]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e80:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e92:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e94:	2204      	movs	r2, #4
 8001e96:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 2;
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eaa:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ec6:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ed4:	481e      	ldr	r0, [pc, #120]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ed6:	f002 fdc1 	bl	8004a5c <HAL_ADC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_ADC1_Init+0x98>
		Error_Handler();
 8001ee0:	f001 fda0 	bl	8003a24 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	4818      	ldr	r0, [pc, #96]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001ef0:	f004 f88e 	bl	8006010 <HAL_ADCEx_MultiModeConfigChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001efa:	f001 fd93 	bl	8003a24 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_ADC1_Init+0x108>)
 8001f00:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f02:	2306      	movs	r3, #6
 8001f04:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001f06:	2307      	movs	r3, #7
 8001f08:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f0a:	237f      	movs	r3, #127	@ 0x7f
 8001f0c:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001f1c:	f003 fab6 	bl	800548c <HAL_ADC_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_ADC1_Init+0xde>
		Error_Handler();
 8001f26:	f001 fd7d 	bl	8003a24 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_ADC1_Init+0x10c>)
 8001f2c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4806      	ldr	r0, [pc, #24]	@ (8001f50 <MX_ADC1_Init+0x104>)
 8001f38:	f003 faa8 	bl	800548c <HAL_ADC_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_ADC1_Init+0xfa>
		Error_Handler();
 8001f42:	f001 fd6f 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	3730      	adds	r7, #48	@ 0x30
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000298 	.word	0x20000298
 8001f54:	1d500080 	.word	0x1d500080
 8001f58:	21800100 	.word	0x21800100

08001f5c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f62:	463b      	mov	r3, r7
 8001f64:	2220      	movs	r2, #32
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00a f88d 	bl	800c088 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <MX_ADC2_Init+0xc4>)
 8001f72:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f7a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001fd6:	4811      	ldr	r0, [pc, #68]	@ (800201c <MX_ADC2_Init+0xc0>)
 8001fd8:	f002 fd40 	bl	8004a5c <HAL_ADC_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_ADC2_Init+0x8a>
		Error_Handler();
 8001fe2:	f001 fd1f 	bl	8003a24 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <MX_ADC2_Init+0xc8>)
 8001fe8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fea:	2306      	movs	r3, #6
 8001fec:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ff2:	237f      	movs	r3, #127	@ 0x7f
 8001ff4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001ffe:	463b      	mov	r3, r7
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <MX_ADC2_Init+0xc0>)
 8002004:	f003 fa42 	bl	800548c <HAL_ADC_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_ADC2_Init+0xb6>
		Error_Handler();
 800200e:	f001 fd09 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000304 	.word	0x20000304
 8002020:	50000100 	.word	0x50000100
 8002024:	19200040 	.word	0x19200040

08002028 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b09c      	sub	sp, #112	@ 0x70
 800202c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800202e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800203c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002048:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	615a      	str	r2, [r3, #20]
 800205a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2234      	movs	r2, #52	@ 0x34
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f00a f810 	bl	800c088 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002068:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <MX_TIM1_Init+0x188>)
 800206a:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <MX_TIM1_Init+0x18c>)
 800206c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 169;
 800206e:	4b50      	ldr	r3, [pc, #320]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002070:	22a9      	movs	r2, #169	@ 0xa9
 8002072:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002074:	4b4e      	ldr	r3, [pc, #312]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 800207a:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <MX_TIM1_Init+0x188>)
 800207c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002080:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002082:	4b4b      	ldr	r3, [pc, #300]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002088:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <MX_TIM1_Init+0x188>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b48      	ldr	r3, [pc, #288]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002094:	4846      	ldr	r0, [pc, #280]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002096:	f005 ff19 	bl	8007ecc <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80020a0:	f001 fcc0 	bl	8003a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a8:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80020aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020ae:	4619      	mov	r1, r3
 80020b0:	483f      	ldr	r0, [pc, #252]	@ (80021b0 <MX_TIM1_Init+0x188>)
 80020b2:	f006 ff43 	bl	8008f3c <HAL_TIM_ConfigClockSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x98>
		Error_Handler();
 80020bc:	f001 fcb2 	bl	8003a24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80020c0:	483b      	ldr	r0, [pc, #236]	@ (80021b0 <MX_TIM1_Init+0x188>)
 80020c2:	f006 f84f 	bl	8008164 <HAL_TIM_PWM_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xa8>
		Error_Handler();
 80020cc:	f001 fcaa 	bl	8003a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80020dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020e0:	4619      	mov	r1, r3
 80020e2:	4833      	ldr	r0, [pc, #204]	@ (80021b0 <MX_TIM1_Init+0x188>)
 80020e4:	f007 ff10 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80020ee:	f001 fc99 	bl	8003a24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	@ 0x60
 80020f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800210e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4826      	ldr	r0, [pc, #152]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002118:	f006 fdfc 	bl	8008d14 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8002122:	f001 fc7f 	bl	8003a24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002126:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800212a:	2204      	movs	r2, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4820      	ldr	r0, [pc, #128]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002130:	f006 fdf0 	bl	8008d14 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 800213a:	f001 fc73 	bl	8003a24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800213e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002142:	2208      	movs	r2, #8
 8002144:	4619      	mov	r1, r3
 8002146:	481a      	ldr	r0, [pc, #104]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002148:	f006 fde4 	bl	8008d14 <HAL_TIM_PWM_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x12e>
			!= HAL_OK) {
		Error_Handler();
 8002152:	f001 fc67 	bl	8003a24 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800217c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <MX_TIM1_Init+0x188>)
 8002194:	f007 ff4e 	bl	800a034 <HAL_TIMEx_ConfigBreakDeadTime>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800219e:	f001 fc41 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <MX_TIM1_Init+0x188>)
 80021a4:	f001 ffc6 	bl	8004134 <HAL_TIM_MspPostInit>

}
 80021a8:	bf00      	nop
 80021aa:	3770      	adds	r7, #112	@ 0x70
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000430 	.word	0x20000430
 80021b4:	40012c00 	.word	0x40012c00

080021b8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021dc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 169;
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021e0:	22a9      	movs	r2, #169	@ 0xa9
 80021e2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80021ea:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021f0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f8:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <MX_TIM2_Init+0x98>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80021fe:	4814      	ldr	r0, [pc, #80]	@ (8002250 <MX_TIM2_Init+0x98>)
 8002200:	f005 fe64 	bl	8007ecc <HAL_TIM_Base_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x56>
		Error_Handler();
 800220a:	f001 fc0b 	bl	8003a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002212:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	4619      	mov	r1, r3
 800221a:	480d      	ldr	r0, [pc, #52]	@ (8002250 <MX_TIM2_Init+0x98>)
 800221c:	f006 fe8e 	bl	8008f3c <HAL_TIM_ConfigClockSource>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM2_Init+0x72>
		Error_Handler();
 8002226:	f001 fbfd 	bl	8003a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	@ (8002250 <MX_TIM2_Init+0x98>)
 8002238:	f007 fe66 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8002242:	f001 fbef 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200004fc 	.word	0x200004fc

08002254 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	2224      	movs	r2, #36	@ 0x24
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f009 ff10 	bl	800c088 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002268:	463b      	mov	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002272:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 8002274:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <MX_TIM3_Init+0xa8>)
 8002276:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002278:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002284:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 8002286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800228a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002292:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002298:	2303      	movs	r3, #3
 800229a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022a0:	2301      	movs	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	4619      	mov	r1, r3
 80022c2:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 80022c4:	f006 f9c4 	bl	8008650 <HAL_TIM_Encoder_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80022ce:	f001 fba9 	bl	8003a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80022da:	463b      	mov	r3, r7
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <MX_TIM3_Init+0xa4>)
 80022e0:	f007 fe12 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80022ea:	f001 fb9b 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	@ 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200005c8 	.word	0x200005c8
 80022fc:	40000400 	.word	0x40000400

08002300 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2224      	movs	r2, #36	@ 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f009 feba 	bl	800c088 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 8002320:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <MX_TIM4_Init+0xa8>)
 8002322:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002324:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002330:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 8002332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002336:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002344:	2303      	movs	r3, #3
 8002346:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 8002370:	f006 f96e 	bl	8008650 <HAL_TIM_Encoder_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM4_Init+0x7e>
		Error_Handler();
 800237a:	f001 fb53 	bl	8003a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <MX_TIM4_Init+0xa4>)
 800238c:	f007 fdbc 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002396:	f001 fb45 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3730      	adds	r7, #48	@ 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000694 	.word	0x20000694
 80023a8:	40000800 	.word	0x40000800

080023ac <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <MX_TIM5_Init+0x98>)
 80023ce:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 169;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023d2:	22a9      	movs	r2, #169	@ 0xa9
 80023d4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023e2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80023f0:	4813      	ldr	r0, [pc, #76]	@ (8002440 <MX_TIM5_Init+0x94>)
 80023f2:	f005 fd6b 	bl	8007ecc <HAL_TIM_Base_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM5_Init+0x54>
		Error_Handler();
 80023fc:	f001 fb12 	bl	8003a24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002404:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	4619      	mov	r1, r3
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <MX_TIM5_Init+0x94>)
 800240e:	f006 fd95 	bl	8008f3c <HAL_TIM_ConfigClockSource>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM5_Init+0x70>
		Error_Handler();
 8002418:	f001 fb04 	bl	8003a24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_TIM5_Init+0x94>)
 800242a:	f007 fd6d 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002434:	f001 faf6 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000760 	.word	0x20000760
 8002444:	40000c00 	.word	0x40000c00

08002448 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800244e:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <MX_TIM16_Init+0x5c>)
 8002450:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 169;
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002454:	22a9      	movs	r2, #169	@ 0xa9
 8002456:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1145;
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002460:	f240 4279 	movw	r2, #1145	@ 0x479
 8002464:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <MX_TIM16_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8002478:	4809      	ldr	r0, [pc, #36]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800247a:	f005 fd27 	bl	8007ecc <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM16_Init+0x40>
		Error_Handler();
 8002484:	f001 face 	bl	8003a24 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK) {
 8002488:	2108      	movs	r1, #8
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_TIM16_Init+0x58>)
 800248c:	f005 ffea 	bl	8008464 <HAL_TIM_OnePulse_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM16_Init+0x52>
		Error_Handler();
 8002496:	f001 fac5 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000082c 	.word	0x2000082c
 80024a4:	40014400 	.word	0x40014400

080024a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ae:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <MX_USART2_UART_Init+0x98>)
 80024b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 80024b2:	4b22      	ldr	r3, [pc, #136]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80024b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80024ba:	4b20      	ldr	r3, [pc, #128]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80024f4:	4811      	ldr	r0, [pc, #68]	@ (800253c <MX_USART2_UART_Init+0x94>)
 80024f6:	f007 fe81 	bl	800a1fc <HAL_UART_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x5c>
		Error_Handler();
 8002500:	f001 fa90 	bl	8003a24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8002504:	2100      	movs	r1, #0
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_USART2_UART_Init+0x94>)
 8002508:	f009 fcbd 	bl	800be86 <HAL_UARTEx_SetTxFifoThreshold>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART2_UART_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8002512:	f001 fa87 	bl	8003a24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002516:	2100      	movs	r1, #0
 8002518:	4808      	ldr	r0, [pc, #32]	@ (800253c <MX_USART2_UART_Init+0x94>)
 800251a:	f009 fcf2 	bl	800bf02 <HAL_UARTEx_SetRxFifoThreshold>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_USART2_UART_Init+0x80>
			!= HAL_OK) {
		Error_Handler();
 8002524:	f001 fa7e 	bl	8003a24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_USART2_UART_Init+0x94>)
 800252a:	f009 fc73 	bl	800be14 <HAL_UARTEx_DisableFifoMode>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART2_UART_Init+0x90>
		Error_Handler();
 8002534:	f001 fa76 	bl	8003a24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200008f8 	.word	0x200008f8
 8002540:	40004400 	.word	0x40004400

08002544 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <MX_DMA_Init+0x80>)
 800254c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6493      	str	r3, [r2, #72]	@ 0x48
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6493      	str	r3, [r2, #72]	@ 0x48
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <MX_DMA_Init+0x80>)
 8002570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200b      	movs	r0, #11
 8002580:	f003 ff29 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002584:	200b      	movs	r0, #11
 8002586:	f003 ff40 	bl	800640a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	200c      	movs	r0, #12
 8002590:	f003 ff21 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002594:	200c      	movs	r0, #12
 8002596:	f003 ff38 	bl	800640a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200d      	movs	r0, #13
 80025a0:	f003 ff19 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025a4:	200d      	movs	r0, #13
 80025a6:	f003 ff30 	bl	800640a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200e      	movs	r0, #14
 80025b0:	f003 ff11 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025b4:	200e      	movs	r0, #14
 80025b6:	f003 ff28 	bl	800640a <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	4b65      	ldr	r3, [pc, #404]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4a64      	ldr	r2, [pc, #400]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80025f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 80025fc:	f043 0320 	orr.w	r3, r3, #32
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4b5c      	ldr	r3, [pc, #368]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b59      	ldr	r3, [pc, #356]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a58      	ldr	r2, [pc, #352]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b56      	ldr	r3, [pc, #344]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <MX_GPIO_Init+0x1ac>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2120      	movs	r1, #32
 8002642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002646:	f004 fbc7 	bl	8006dd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10,
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 8002650:	4849      	ldr	r0, [pc, #292]	@ (8002778 <MX_GPIO_Init+0x1b0>)
 8002652:	f004 fbc1 	bl	8006dd8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800265c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002660:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4842      	ldr	r0, [pc, #264]	@ (8002778 <MX_GPIO_Init+0x1b0>)
 800266e:	f004 fa19 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC3 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_9;
 8002672:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002676:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002678:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800267c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	483b      	ldr	r0, [pc, #236]	@ (8002778 <MX_GPIO_Init+0x1b0>)
 800268a:	f004 fa0b 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RUN_Joy_Pin Save_Joy_Pin */
	GPIO_InitStruct.Pin = RUN_Joy_Pin | Save_Joy_Pin;
 800268e:	2303      	movs	r3, #3
 8002690:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002696:	2301      	movs	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a4:	f004 f9fe 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a8:	2310      	movs	r3, #16
 80026aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026be:	f004 f9f1 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80026c2:	2320      	movs	r3, #32
 80026c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026dc:	f004 f9e2 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80026e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4821      	ldr	r0, [pc, #132]	@ (800277c <MX_GPIO_Init+0x1b4>)
 80026f6:	f004 f9d5 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80026fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80026fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002704:	2302      	movs	r3, #2
 8002706:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	481b      	ldr	r0, [pc, #108]	@ (800277c <MX_GPIO_Init+0x1b4>)
 8002710:	f004 f9c8 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002714:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002718:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4812      	ldr	r0, [pc, #72]	@ (8002778 <MX_GPIO_Init+0x1b0>)
 800272e:	f004 f9b9 	bl	8006aa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002736:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	480c      	ldr	r0, [pc, #48]	@ (8002778 <MX_GPIO_Init+0x1b0>)
 8002748:	f004 f9ac 	bl	8006aa4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	2009      	movs	r0, #9
 8002752:	f003 fe40 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002756:	2009      	movs	r0, #9
 8002758:	f003 fe57 	bl	800640a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2028      	movs	r0, #40	@ 0x28
 8002762:	f003 fe38 	bl	80063d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002766:	2028      	movs	r0, #40	@ 0x28
 8002768:	f003 fe4f 	bl	800640a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800276c:	bf00      	nop
 800276e:	3728      	adds	r7, #40	@ 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	48000800 	.word	0x48000800
 800277c:	48000400 	.word	0x48000400

08002780 <Prismatic_CasCadeControl>:

/* USER CODE BEGIN 4 */
void Prismatic_CasCadeControl() {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
//	error_pos_pris = target_position_prismatic - ball_screw_pos;

	error_pos_pris = prisProfile.current_position - ball_screw_pos;
 8002786:	4b7a      	ldr	r3, [pc, #488]	@ (8002970 <Prismatic_CasCadeControl+0x1f0>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fea8 	bl	80004e0 <__aeabi_f2d>
 8002790:	4b78      	ldr	r3, [pc, #480]	@ (8002974 <Prismatic_CasCadeControl+0x1f4>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd fd43 	bl	8000220 <__aeabi_dsub>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe f9d7 	bl	8000b54 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a73      	ldr	r2, [pc, #460]	@ (8002978 <Prismatic_CasCadeControl+0x1f8>)
 80027aa:	6013      	str	r3, [r2, #0]

	output_pos_pris = arm_pid_f32(&PID_POS_pris, error_pos_pris);
 80027ac:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <Prismatic_CasCadeControl+0x1f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a72      	ldr	r2, [pc, #456]	@ (800297c <Prismatic_CasCadeControl+0x1fc>)
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	ed93 7a00 	vldr	s14, [r3]
 80027bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80027d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80027d4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edd3 6a02 	vldr	s13, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80027e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a5b      	ldr	r2, [pc, #364]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 8002812:	6013      	str	r3, [r2, #0]

	if (output_pos_pris > 600) {
 8002814:	4b5a      	ldr	r3, [pc, #360]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002984 <Prismatic_CasCadeControl+0x204>
 800281e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	dd03      	ble.n	8002830 <Prismatic_CasCadeControl+0xb0>
		output_pos_pris = 600;
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 800282a:	4a57      	ldr	r2, [pc, #348]	@ (8002988 <Prismatic_CasCadeControl+0x208>)
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00c      	b.n	800284a <Prismatic_CasCadeControl+0xca>
	} else if (output_pos_pris < -600) {
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800298c <Prismatic_CasCadeControl+0x20c>
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d502      	bpl.n	800284a <Prismatic_CasCadeControl+0xca>
		output_pos_pris = -600;
 8002844:	4b4e      	ldr	r3, [pc, #312]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 8002846:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <Prismatic_CasCadeControl+0x210>)
 8002848:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris = output_pos_pris - ball_screw_vel;
 800284a:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe46 	bl	80004e0 <__aeabi_f2d>
 8002854:	4b4f      	ldr	r3, [pc, #316]	@ (8002994 <Prismatic_CasCadeControl+0x214>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fce1 	bl	8000220 <__aeabi_dsub>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f975 	bl	8000b54 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <Prismatic_CasCadeControl+0x218>)
 800286e:	6013      	str	r3, [r2, #0]
	output_velo_pris = PIDCompute(&prismatic_vel_control, Kp_velo_pris,
 8002870:	4b4a      	ldr	r3, [pc, #296]	@ (800299c <Prismatic_CasCadeControl+0x21c>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <Prismatic_CasCadeControl+0x220>)
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	4b49      	ldr	r3, [pc, #292]	@ (80029a4 <Prismatic_CasCadeControl+0x224>)
 800287e:	edd3 6a00 	vldr	s13, [r3]
 8002882:	4b45      	ldr	r3, [pc, #276]	@ (8002998 <Prismatic_CasCadeControl+0x218>)
 8002884:	ed93 6a00 	vldr	s12, [r3]
 8002888:	eef0 1a46 	vmov.f32	s3, s12
 800288c:	eeb0 1a66 	vmov.f32	s2, s13
 8002890:	eef0 0a47 	vmov.f32	s1, s14
 8002894:	eeb0 0a67 	vmov.f32	s0, s15
 8002898:	4843      	ldr	r0, [pc, #268]	@ (80029a8 <Prismatic_CasCadeControl+0x228>)
 800289a:	f7fe fe8b 	bl	80015b4 <PIDCompute>
 800289e:	eef0 7a40 	vmov.f32	s15, s0
 80028a2:	4b42      	ldr	r3, [pc, #264]	@ (80029ac <Prismatic_CasCadeControl+0x22c>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
			Ki_velo_pris, Kd_velo_pris, error_velo_pris);

	if (limit_r == 1 && output_prismatic < 0) {
 80028a8:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <Prismatic_CasCadeControl+0x230>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <Prismatic_CasCadeControl+0x14a>
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d504      	bpl.n	80028ca <Prismatic_CasCadeControl+0x14a>
		output_prismatic = 0;
 80028c0:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e00f      	b.n	80028ea <Prismatic_CasCadeControl+0x16a>
	} else if (limit_l == 1 && output_prismatic > 0) {
 80028ca:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <Prismatic_CasCadeControl+0x238>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10b      	bne.n	80028ea <Prismatic_CasCadeControl+0x16a>
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd03      	ble.n	80028ea <Prismatic_CasCadeControl+0x16a>
		output_prismatic = 0;
 80028e2:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
	}

	// Motor control
	if (ball_screw_pos >= target_position_prismatic - 0.05
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <Prismatic_CasCadeControl+0x23c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fdf6 	bl	80004e0 <__aeabi_f2d>
 80028f4:	a31c      	add	r3, pc, #112	@ (adr r3, 8002968 <Prismatic_CasCadeControl+0x1e8>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fc91 	bl	8000220 <__aeabi_dsub>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <Prismatic_CasCadeControl+0x1f4>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fe f8bc 	bl	8000a88 <__aeabi_dcmple>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <Prismatic_CasCadeControl+0x1cc>
			&& ball_screw_pos <= target_position_prismatic + 0.05) {
 8002916:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <Prismatic_CasCadeControl+0x23c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fde0 	bl	80004e0 <__aeabi_f2d>
 8002920:	a311      	add	r3, pc, #68	@ (adr r3, 8002968 <Prismatic_CasCadeControl+0x1e8>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fc7d 	bl	8000224 <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <Prismatic_CasCadeControl+0x1f4>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fe f8b0 	bl	8000a9c <__aeabi_dcmpge>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <Prismatic_CasCadeControl+0x1cc>
		output_prismatic = 0;
 8002942:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e003      	b.n	8002954 <Prismatic_CasCadeControl+0x1d4>
	} else {
		output_prismatic = output_pos_pris;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <Prismatic_CasCadeControl+0x200>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 8002952:	6013      	str	r3, [r2, #0]
	}
	output_prismatic = output_velo_pris;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <Prismatic_CasCadeControl+0x22c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <Prismatic_CasCadeControl+0x234>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f3af 8000 	nop.w
 8002968:	9999999a 	.word	0x9999999a
 800296c:	3fa99999 	.word	0x3fa99999
 8002970:	20000a84 	.word	0x20000a84
 8002974:	20001150 	.word	0x20001150
 8002978:	20001094 	.word	0x20001094
 800297c:	20001098 	.word	0x20001098
 8002980:	20001090 	.word	0x20001090
 8002984:	44160000 	.word	0x44160000
 8002988:	44160000 	.word	0x44160000
 800298c:	c4160000 	.word	0xc4160000
 8002990:	c4160000 	.word	0xc4160000
 8002994:	20001158 	.word	0x20001158
 8002998:	20001084 	.word	0x20001084
 800299c:	20000200 	.word	0x20000200
 80029a0:	20000204 	.word	0x20000204
 80029a4:	2000107c 	.word	0x2000107c
 80029a8:	20001118 	.word	0x20001118
 80029ac:	20001080 	.word	0x20001080
 80029b0:	200011b8 	.word	0x200011b8
 80029b4:	200010e0 	.word	0x200010e0
 80029b8:	200011b9 	.word	0x200011b9
 80029bc:	20001078 	.word	0x20001078

080029c0 <Revolute_CasCadeControl>:

void Revolute_CasCadeControl() {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
//	error_pos_re = target_position_revolute - revolute_encoder.rads;

	error_pos_re = revProfile.current_position - revolute_encoder.rads;
 80029c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b40 <Revolute_CasCadeControl+0x180>)
 80029c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80029cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002b44 <Revolute_CasCadeControl+0x184>)
 80029ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b48 <Revolute_CasCadeControl+0x188>)
 80029d8:	edc3 7a00 	vstr	s15, [r3]

	output_pos_re = arm_pid_f32(&PID_POS_re, error_pos_re);
 80029dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b48 <Revolute_CasCadeControl+0x188>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b4c <Revolute_CasCadeControl+0x18c>)
 80029e2:	60fa      	str	r2, [r7, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
    out = (S->A0 * in) +
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	ed93 7a00 	vldr	s14, [r3]
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002a04:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	615a      	str	r2, [r3, #20]
    return (out);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a43      	ldr	r2, [pc, #268]	@ (8002b50 <Revolute_CasCadeControl+0x190>)
 8002a42:	6013      	str	r3, [r2, #0]

	if (output_pos_re > 300) {
 8002a44:	4b42      	ldr	r3, [pc, #264]	@ (8002b50 <Revolute_CasCadeControl+0x190>)
 8002a46:	edd3 7a00 	vldr	s15, [r3]
 8002a4a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002b54 <Revolute_CasCadeControl+0x194>
 8002a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	dd03      	ble.n	8002a60 <Revolute_CasCadeControl+0xa0>
		output_pos_re = 300;
 8002a58:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <Revolute_CasCadeControl+0x190>)
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <Revolute_CasCadeControl+0x198>)
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e00c      	b.n	8002a7a <Revolute_CasCadeControl+0xba>
	} else if (output_pos_re < -300) {
 8002a60:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <Revolute_CasCadeControl+0x190>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002b5c <Revolute_CasCadeControl+0x19c>
 8002a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d502      	bpl.n	8002a7a <Revolute_CasCadeControl+0xba>
		output_pos_re = -300;
 8002a74:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <Revolute_CasCadeControl+0x190>)
 8002a76:	4a3a      	ldr	r2, [pc, #232]	@ (8002b60 <Revolute_CasCadeControl+0x1a0>)
 8002a78:	601a      	str	r2, [r3, #0]
	}

	error_velo_re = error_pos_re - (revolute_encoder.radps / 2);
 8002a7a:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <Revolute_CasCadeControl+0x188>)
 8002a7c:	ed93 7a00 	vldr	s14, [r3]
 8002a80:	4b30      	ldr	r3, [pc, #192]	@ (8002b44 <Revolute_CasCadeControl+0x184>)
 8002a82:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002a86:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002a8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <Revolute_CasCadeControl+0x1a4>)
 8002a94:	edc3 7a00 	vstr	s15, [r3]

	output_velo_re = PIDCompute(&revolute_vel_control, Kp_velo_re, Ki_velo_re,
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <Revolute_CasCadeControl+0x1a8>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	4b33      	ldr	r3, [pc, #204]	@ (8002b6c <Revolute_CasCadeControl+0x1ac>)
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <Revolute_CasCadeControl+0x1b0>)
 8002aa6:	edd3 6a00 	vldr	s13, [r3]
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <Revolute_CasCadeControl+0x1a4>)
 8002aac:	ed93 6a00 	vldr	s12, [r3]
 8002ab0:	eef0 1a46 	vmov.f32	s3, s12
 8002ab4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ab8:	eef0 0a47 	vmov.f32	s1, s14
 8002abc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac0:	482c      	ldr	r0, [pc, #176]	@ (8002b74 <Revolute_CasCadeControl+0x1b4>)
 8002ac2:	f7fe fd77 	bl	80015b4 <PIDCompute>
 8002ac6:	eef0 7a40 	vmov.f32	s15, s0
 8002aca:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <Revolute_CasCadeControl+0x1b8>)
 8002acc:	edc3 7a00 	vstr	s15, [r3]
			Kd_velo_re, error_velo_re);

	if (revolute_flag == 1 && output_revolute > 0) {
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <Revolute_CasCadeControl+0x1bc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d10c      	bne.n	8002af2 <Revolute_CasCadeControl+0x132>
 8002ad8:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <Revolute_CasCadeControl+0x1c0>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	dd04      	ble.n	8002af2 <Revolute_CasCadeControl+0x132>
		output_revolute = 0;
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <Revolute_CasCadeControl+0x1c0>)
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e018      	b.n	8002b24 <Revolute_CasCadeControl+0x164>
	} else if (revolute_encoder.rads >= (2 * M_PI) && output_revolute < 0) {
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <Revolute_CasCadeControl+0x184>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fcf2 	bl	80004e0 <__aeabi_f2d>
 8002afc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002b38 <Revolute_CasCadeControl+0x178>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd ffcb 	bl	8000a9c <__aeabi_dcmpge>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <Revolute_CasCadeControl+0x164>
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <Revolute_CasCadeControl+0x1c0>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d503      	bpl.n	8002b24 <Revolute_CasCadeControl+0x164>
		output_revolute = 0;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <Revolute_CasCadeControl+0x1c0>)
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
//			&& revolute_encoder.rads <= target_position_revolute + 0.1) {
//		output_revolute = 0;
//	} else {
//		output_revolute = output_velo_re;;
//	}
	output_revolute = output_velo_re;
 8002b24:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <Revolute_CasCadeControl+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <Revolute_CasCadeControl+0x1c0>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	f3af 8000 	nop.w
 8002b38:	54442d18 	.word	0x54442d18
 8002b3c:	401921fb 	.word	0x401921fb
 8002b40:	20000aac 	.word	0x20000aac
 8002b44:	20001164 	.word	0x20001164
 8002b48:	200011c8 	.word	0x200011c8
 8002b4c:	200010bc 	.word	0x200010bc
 8002b50:	200011c4 	.word	0x200011c4
 8002b54:	43960000 	.word	0x43960000
 8002b58:	43960000 	.word	0x43960000
 8002b5c:	c3960000 	.word	0xc3960000
 8002b60:	c3960000 	.word	0xc3960000
 8002b64:	200011d4 	.word	0x200011d4
 8002b68:	20000210 	.word	0x20000210
 8002b6c:	20000214 	.word	0x20000214
 8002b70:	200011cc 	.word	0x200011cc
 8002b74:	20001198 	.word	0x20001198
 8002b78:	200011d0 	.word	0x200011d0
 8002b7c:	20001194 	.word	0x20001194
 8002b80:	200010e4 	.word	0x200010e4
 8002b84:	00000000 	.word	0x00000000

08002b88 <ball_screw_converter>:

void ball_screw_converter() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	ball_screw_pos = (prismatic_encoder.rads * (16.00f / (2.0f * M_PI)));
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <ball_screw_converter+0x50>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fca5 	bl	80004e0 <__aeabi_f2d>
 8002b96:	a30e      	add	r3, pc, #56	@ (adr r3, 8002bd0 <ball_screw_converter+0x48>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fcf8 	bl	8000590 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	490d      	ldr	r1, [pc, #52]	@ (8002bdc <ball_screw_converter+0x54>)
 8002ba6:	e9c1 2300 	strd	r2, r3, [r1]
	ball_screw_vel = prismatic_radps_lowpass * (16.0f / (2.0f * M_PI));
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <ball_screw_converter+0x58>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fc96 	bl	80004e0 <__aeabi_f2d>
 8002bb4:	a306      	add	r3, pc, #24	@ (adr r3, 8002bd0 <ball_screw_converter+0x48>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fce9 	bl	8000590 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <ball_screw_converter+0x5c>)
 8002bc4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	6dc9c883 	.word	0x6dc9c883
 8002bd4:	40045f30 	.word	0x40045f30
 8002bd8:	200010e8 	.word	0x200010e8
 8002bdc:	20001150 	.word	0x20001150
 8002be0:	2000113c 	.word	0x2000113c
 8002be4:	20001158 	.word	0x20001158

08002be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bf8:	d105      	bne.n	8002c06 <HAL_GPIO_EXTI_Callback+0x1e>
		current_state = STATE_ERROR;
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002bfc:	2206      	movs	r2, #6
 8002bfe:	701a      	strb	r2, [r3, #0]
		registerFrame[1].U16 = STATUS_IDLE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_GPIO_EXTI_Callback+0x30>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	805a      	strh	r2, [r3, #2]
	}
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20001038 	.word	0x20001038
 8002c18:	20000fac 	.word	0x20000fac

08002c1c <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	1a8a      	subs	r2, r1, r2
 8002c36:	fb03 f202 	mul.w	r2, r3, r2
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1acb      	subs	r3, r1, r3
 8002c40:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4413      	add	r3, r2
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <mapf>:

float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c5e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c62:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c66:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c6a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c7a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb4:	ed2d 8b02 	vpush	{d8}
 8002cb8:	b08c      	sub	sp, #48	@ 0x30
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	6078      	str	r0, [r7, #4]

	// sensor timer 1000 hz
	if (htim == &htim2) {
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4ab1      	ldr	r2, [pc, #708]	@ (8002f88 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f040 81ec 	bne.w	80030a0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002cc8:	2120      	movs	r1, #32
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cce:	f004 f89b 	bl	8006e08 <HAL_GPIO_TogglePin>
//		MotorSet(&revolute_motor, 1000, 65535);
		QEIPosVelUpdate(&prismatic_encoder);
 8002cd2:	48ae      	ldr	r0, [pc, #696]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002cd4:	f7fe fd64 	bl	80017a0 <QEIPosVelUpdate>
		QEIPosVelUpdate(&revolute_encoder);
 8002cd8:	48ad      	ldr	r0, [pc, #692]	@ (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002cda:	f7fe fd61 	bl	80017a0 <QEIPosVelUpdate>
		//Limit Switch check
		limit_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8002cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ce2:	48ac      	ldr	r0, [pc, #688]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ce4:	f004 f860 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4baa      	ldr	r3, [pc, #680]	@ (8002f98 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002cee:	701a      	strb	r2, [r3, #0]
		limit_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8002cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cf4:	48a7      	ldr	r0, [pc, #668]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002cf6:	f004 f857 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4ba7      	ldr	r3, [pc, #668]	@ (8002f9c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002d00:	701a      	strb	r2, [r3, #0]
		limit_plot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002d02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d06:	48a3      	ldr	r0, [pc, #652]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d08:	f004 f84e 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4ba3      	ldr	r3, [pc, #652]	@ (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d12:	701a      	strb	r2, [r3, #0]
		//Joy Calculate

		// filter
		int32_t sum_x = 0, sum_y = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < 20; i++) {
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e018      	b.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0xa4>
			if ((i & 1) == 0)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x8e>
				sum_y += JOY_RawRead[i];
 8002d2c:	4a9d      	ldr	r2, [pc, #628]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d34:	461a      	mov	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	4413      	add	r3, r2
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	e007      	b.n	8002d4e <HAL_TIM_PeriodElapsedCallback+0x9e>
			else
				sum_x += JOY_RawRead[i];
 8002d3e:	4a99      	ldr	r2, [pc, #612]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	4413      	add	r3, r2
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; i < 20; i++) {
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b13      	cmp	r3, #19
 8002d58:	dde3      	ble.n	8002d22 <HAL_TIM_PeriodElapsedCallback+0x72>
		}

		int32_t raw_x = sum_x / 10;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	4a92      	ldr	r2, [pc, #584]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d62:	1092      	asrs	r2, r2, #2
 8002d64:	17db      	asrs	r3, r3, #31
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	61bb      	str	r3, [r7, #24]
		int32_t raw_y = sum_y / 10;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	4a8e      	ldr	r2, [pc, #568]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d72:	1092      	asrs	r2, r2, #2
 8002d74:	17db      	asrs	r3, r3, #31
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]

		if (raw_x < 1700 && raw_x > 1500) {
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002d80:	4293      	cmp	r3, r2
 8002d82:	dc07      	bgt.n	8002d94 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	dd02      	ble.n	8002d94 <HAL_TIM_PeriodElapsedCallback+0xe4>
			raw_x = 3400 / 2;
 8002d8e:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002d92:	61bb      	str	r3, [r7, #24]
		}
		if (raw_y < 1700 && raw_y > 1500) {
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	dc07      	bgt.n	8002dae <HAL_TIM_PeriodElapsedCallback+0xfe>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002da4:	4293      	cmp	r3, r2
 8002da6:	dd02      	ble.n	8002dae <HAL_TIM_PeriodElapsedCallback+0xfe>
			raw_y = 3400 / 2;
 8002da8:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8002dac:	617b      	str	r3, [r7, #20]
		}

		Joy_x = map(raw_x, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002dae:	2364      	movs	r3, #100	@ 0x64
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002db6:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002dba:	2100      	movs	r1, #0
 8002dbc:	69b8      	ldr	r0, [r7, #24]
 8002dbe:	f7ff ff2d 	bl	8002c1c <map>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002dc8:	801a      	strh	r2, [r3, #0]
		Joy_y = map(raw_y, RAW_MIN, RAW_MAX, OUT_MIN, OUT_MAX);
 8002dca:	2364      	movs	r3, #100	@ 0x64
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002dd2:	f640 5248 	movw	r2, #3400	@ 0xd48
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f7ff ff1f 	bl	8002c1c <map>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002de4:	801a      	strh	r2, [r3, #0]
//		Joy_save = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

		//Prismatic Low pass filter
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
				+ alpha
						* (prismatic_encoder.radps
 8002de6:	4b69      	ldr	r3, [pc, #420]	@ (8002f8c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002de8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
								- prismatic_radps_lowpass_prev);
 8002dec:	4b71      	ldr	r3, [pc, #452]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_encoder.radps
 8002df6:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002fb8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002dfa:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_radps_lowpass = prismatic_radps_lowpass_prev
 8002e08:	4b6c      	ldr	r3, [pc, #432]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]

		prismatic_acceleration = ((prismatic_radps_lowpass
				- prismatic_radps_lowpass_prev) / dt);
 8002e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	4b67      	ldr	r3, [pc, #412]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e1e:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002fc0 <HAL_TIM_PeriodElapsedCallback+0x310>
 8002e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
		prismatic_acceleration = ((prismatic_radps_lowpass
 8002e26:	4b67      	ldr	r3, [pc, #412]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002e28:	edc3 7a00 	vstr	s15, [r3]
		prismatic_radps_lowpass_prev = prismatic_radps_lowpass;
 8002e2c:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a60      	ldr	r2, [pc, #384]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002e32:	6013      	str	r3, [r2, #0]
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
				+ alpha
						* (prismatic_acceleration
								- prismatic_acceleration_lowpass_prev);
 8002e34:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4b63      	ldr	r3, [pc, #396]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (prismatic_acceleration
 8002e44:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002fb8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002e48:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee77 7a27 	vadd.f32	s15, s14, s15
		prismatic_acceleration_lowpass = prismatic_acceleration_lowpass_prev
 8002e56:	4b5d      	ldr	r3, [pc, #372]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002e58:	edc3 7a00 	vstr	s15, [r3]
		ball_screw_converter();
 8002e5c:	f7ff fe94 	bl	8002b88 <ball_screw_converter>
		// ==== Revolute Low‐Pass Filter ====
		// 1) กรองความเร็ว (rad/s) ของแกน Revolute
		revolute_radps_lowpass =
				revolute_radps_lowpass_prev
						+ alpha
								* (revolute_encoder.radps
 8002e60:	4b4b      	ldr	r3, [pc, #300]	@ (8002f90 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e62:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
										- revolute_radps_lowpass_prev);
 8002e66:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
								* (revolute_encoder.radps
 8002e70:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002fb8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002e74:	ee27 7a87 	vmul.f32	s14, s15, s14
						+ alpha
 8002e78:	4b55      	ldr	r3, [pc, #340]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_radps_lowpass =
 8002e82:	4b54      	ldr	r3, [pc, #336]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002e84:	edc3 7a00 	vstr	s15, [r3]
		// 2) คำนวณอัตราเร่งดิบ (rad/s^2) จากความเปลี่ยนแปลงของค่าที่กรองแล้ว
		revolute_acceleration = (revolute_radps_lowpass
				- revolute_radps_lowpass_prev) / dt;
 8002e88:	4b52      	ldr	r3, [pc, #328]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e98:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002fc0 <HAL_TIM_PeriodElapsedCallback+0x310>
 8002e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
		revolute_acceleration = (revolute_radps_lowpass
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
		// 3) กรองอัตราเร่งให้ลื่น (หากต้องการใช้ค่าเร่งหลังกรอง)
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
				+ alpha
						* (revolute_acceleration
								- revolute_acceleration_lowpass_prev);
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (revolute_acceleration
 8002eb6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002fb8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8002eba:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ alpha
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
		revolute_acceleration_lowpass = revolute_acceleration_lowpass_prev
 8002ec8:	4b45      	ldr	r3, [pc, #276]	@ (8002fe0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
		// 4) เก็บสถานะย้อนกลับไว้ใช้รอบถัดไป
		revolute_radps_lowpass_prev = revolute_radps_lowpass;
 8002ece:	4b41      	ldr	r3, [pc, #260]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002ed4:	6013      	str	r3, [r2, #0]
		revolute_acceleration_lowpass_prev = revolute_acceleration_lowpass;
 8002ed6:	4b42      	ldr	r3, [pc, #264]	@ (8002fe0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a40      	ldr	r2, [pc, #256]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002edc:	6013      	str	r3, [r2, #0]

		// Prox shimttrigger
//		revolute_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
		if (Prox_RawRead[0] > 3000) {
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d903      	bls.n	8002ef2 <HAL_TIM_PeriodElapsedCallback+0x242>
			revolute_flag = 0;
 8002eea:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e008      	b.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x254>
		} else if (Prox_RawRead[0] < 1500) {
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x254>
			revolute_flag = 1;
 8002efe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
		}
		//Servo
		if (registerFrame[4].U16 == 1) {
 8002f04:	4b39      	ldr	r3, [pc, #228]	@ (8002fec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f06:	891b      	ldrh	r3, [r3, #8]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x26a>
//			registerFrame[5].U16 = (registerFrame[4].U16 == 1) ? 0 : 1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 65535 / 3.5);
 8002f0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f644 1224 	movw	r2, #18724	@ 0x4924
 8002f16:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f18:	e008      	b.n	8002f2c <HAL_TIM_PeriodElapsedCallback+0x27c>
		} else if (registerFrame[5].U16 == 1) {
 8002f1a:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f1c:	895b      	ldrh	r3, [r3, #10]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d103      	bne.n	8002f2c <HAL_TIM_PeriodElapsedCallback+0x27c>
//			registerFrame[4].U16 = (registerFrame[4].U16 == 1) ? 0 : 1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002f24:	4b32      	ldr	r3, [pc, #200]	@ (8002ff0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		Joy_save = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f30:	4818      	ldr	r0, [pc, #96]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f32:	f003 ff39 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002f3c:	701a      	strb	r2, [r3, #0]
		Joy_run = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002f3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f42:	4814      	ldr	r0, [pc, #80]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f44:	f003 ff30 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002f4e:	701a      	strb	r2, [r3, #0]

		//button
		button_emer =
				(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) ? 1 : 0;
 8002f50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f54:	4829      	ldr	r0, [pc, #164]	@ (8002ffc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002f56:	f003 ff27 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
		button_emer =
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002f6a:	701a      	strb	r2, [r3, #0]

		button_reset =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 8002f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f70:	4808      	ldr	r0, [pc, #32]	@ (8002f94 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002f72:	f003 ff19 	bl	8006da8 <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
						&& button_emer == 1) ? 1 : 0;
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d143      	bne.n	8003004 <HAL_TIM_PeriodElapsedCallback+0x354>
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d13f      	bne.n	8003004 <HAL_TIM_PeriodElapsedCallback+0x354>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e03e      	b.n	8003006 <HAL_TIM_PeriodElapsedCallback+0x356>
 8002f88:	200004fc 	.word	0x200004fc
 8002f8c:	200010e8 	.word	0x200010e8
 8002f90:	20001164 	.word	0x20001164
 8002f94:	48000400 	.word	0x48000400
 8002f98:	200011b9 	.word	0x200011b9
 8002f9c:	200011b8 	.word	0x200011b8
 8002fa0:	200011bb 	.word	0x200011bb
 8002fa4:	200011fc 	.word	0x200011fc
 8002fa8:	66666667 	.word	0x66666667
 8002fac:	20001224 	.word	0x20001224
 8002fb0:	20001226 	.word	0x20001226
 8002fb4:	20001138 	.word	0x20001138
 8002fb8:	3cf98536 	.word	0x3cf98536
 8002fbc:	2000113c 	.word	0x2000113c
 8002fc0:	3a83126f 	.word	0x3a83126f
 8002fc4:	20001140 	.word	0x20001140
 8002fc8:	20001148 	.word	0x20001148
 8002fcc:	20001144 	.word	0x20001144
 8002fd0:	200011d8 	.word	0x200011d8
 8002fd4:	200011dc 	.word	0x200011dc
 8002fd8:	200011e0 	.word	0x200011e0
 8002fdc:	200011e4 	.word	0x200011e4
 8002fe0:	200011e8 	.word	0x200011e8
 8002fe4:	20001230 	.word	0x20001230
 8002fe8:	20001194 	.word	0x20001194
 8002fec:	20000fac 	.word	0x20000fac
 8002ff0:	20000430 	.word	0x20000430
 8002ff4:	20001229 	.word	0x20001229
 8002ff8:	20001228 	.word	0x20001228
 8002ffc:	48000800 	.word	0x48000800
 8003000:	20001248 	.word	0x20001248
 8003004:	2300      	movs	r3, #0
		button_reset =
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b8b      	ldr	r3, [pc, #556]	@ (8003238 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800300a:	701a      	strb	r2, [r3, #0]

		button_run =
				(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET
 800300c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003010:	488a      	ldr	r0, [pc, #552]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003012:	f003 fec9 	bl	8006da8 <HAL_GPIO_ReadPin>
 8003016:	4603      	mov	r3, r0
						&& button_emer) ? 1 : 0;
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x378>
 800301c:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_TIM_PeriodElapsedCallback+0x37a>
 8003028:	2300      	movs	r3, #0
		button_run =
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b85      	ldr	r3, [pc, #532]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800302e:	701a      	strb	r2, [r3, #0]

		MotorSet(&prismatic_motor, 1000, output_prismatic);
 8003030:	4b85      	ldr	r3, [pc, #532]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	eef0 0a67 	vmov.f32	s1, s15
 800303a:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 800324c <HAL_TIM_PeriodElapsedCallback+0x59c>
 800303e:	4884      	ldr	r0, [pc, #528]	@ (8003250 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003040:	f000 fd1e 	bl	8003a80 <MotorSet>
		MotorSet(&revolute_motor, 1000, output_revolute);
 8003044:	4b83      	ldr	r3, [pc, #524]	@ (8003254 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	eef0 0a67 	vmov.f32	s1, s15
 800304e:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800324c <HAL_TIM_PeriodElapsedCallback+0x59c>
 8003052:	4881      	ldr	r0, [pc, #516]	@ (8003258 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003054:	f000 fd14 	bl	8003a80 <MotorSet>

		// Protocal
		// Heart beat protocal 0.5 sec
		if (heartbeat_counter > 500) {
 8003058:	4b80      	ldr	r3, [pc, #512]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8003062:	428a      	cmp	r2, r1
 8003064:	f173 0300 	sbcs.w	r3, r3, #0
 8003068:	d311      	bcc.n	800308e <HAL_TIM_PeriodElapsedCallback+0x3de>
			heartbeat_counter = 0;
 800306a:	497c      	ldr	r1, [pc, #496]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
			registerFrame[0].U16 = (registerFrame[0].U16 == 0) ? 22881 : 0;
 8003078:	4b79      	ldr	r3, [pc, #484]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8003082:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003086:	e000      	b.n	800308a <HAL_TIM_PeriodElapsedCallback+0x3da>
 8003088:	2200      	movs	r2, #0
 800308a:	4b75      	ldr	r3, [pc, #468]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800308c:	801a      	strh	r2, [r3, #0]
		}
		heartbeat_counter++;
 800308e:	4b73      	ldr	r3, [pc, #460]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	1c54      	adds	r4, r2, #1
 8003096:	f143 0500 	adc.w	r5, r3, #0
 800309a:	4b70      	ldr	r3, [pc, #448]	@ (800325c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800309c:	e9c3 4500 	strd	r4, r5, [r3]
	}

	// state timer 1000 hz
	if (htim == &htim5) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a70      	ldr	r2, [pc, #448]	@ (8003264 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f040 847f 	bne.w	80039a8 <HAL_TIM_PeriodElapsedCallback+0xcf8>
		// ตรวจสอบคำสั่งหยุดฉุกเฉิน (มีความสำคัญสูงสุด)
		if (registerFrame[1].U16 & STATUS_STOP) {
 80030aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80030ac:	885b      	ldrh	r3, [r3, #2]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_TIM_PeriodElapsedCallback+0x40e>
			current_state = STATE_STOPPING;
 80030b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80030ba:	2205      	movs	r2, #5
 80030bc:	701a      	strb	r2, [r3, #0]
		}

		if (registerFrame[1].U16 & STATUS_HOME) {
 80030be:	4b68      	ldr	r3, [pc, #416]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80030c0:	885b      	ldrh	r3, [r3, #2]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_PeriodElapsedCallback+0x424>
			current_state = STATE_HOMING;
 80030cc:	4b66      	ldr	r3, [pc, #408]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e02e      	b.n	8003132 <HAL_TIM_PeriodElapsedCallback+0x482>
		} else if (registerFrame[1].U16 & STATUS_JOG) {
 80030d4:	4b62      	ldr	r3, [pc, #392]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80030d6:	885b      	ldrh	r3, [r3, #2]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_TIM_PeriodElapsedCallback+0x440>
			current_state = STATE_JOGGING;
 80030e2:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80030e4:	2202      	movs	r2, #2
 80030e6:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_JOG;
 80030e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80030ea:	2202      	movs	r2, #2
 80030ec:	829a      	strh	r2, [r3, #20]
 80030ee:	e020      	b.n	8003132 <HAL_TIM_PeriodElapsedCallback+0x482>
		} else if (registerFrame[1].U16 & STATUS_POINT) {
 80030f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80030f2:	885b      	ldrh	r3, [r3, #2]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_PeriodElapsedCallback+0x462>
			current_state = STATE_POINT_MOVING;
 80030fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003100:	2203      	movs	r2, #3
 8003102:	701a      	strb	r2, [r3, #0]
			pointMoveNeedsInit = 1;
 8003104:	4b59      	ldr	r3, [pc, #356]	@ (800326c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_POINT;
 800310a:	4b55      	ldr	r3, [pc, #340]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800310c:	2204      	movs	r2, #4
 800310e:	829a      	strh	r2, [r3, #20]
 8003110:	e00f      	b.n	8003132 <HAL_TIM_PeriodElapsedCallback+0x482>
		} else if (registerFrame[1].U16 & STATUS_GO_TO_TARGET) {
 8003112:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003114:	885b      	ldrh	r3, [r3, #2]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_TIM_PeriodElapsedCallback+0x47e>
			current_state = STATE_GO_TO_TARGET;
 8003120:	4b51      	ldr	r3, [pc, #324]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003122:	2204      	movs	r2, #4
 8003124:	701a      	strb	r2, [r3, #0]
			registerFrame[10].U16 = STATUS_GO_TO_TARGET;
 8003126:	4b4e      	ldr	r3, [pc, #312]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003128:	2208      	movs	r2, #8
 800312a:	829a      	strh	r2, [r3, #20]
 800312c:	e001      	b.n	8003132 <HAL_TIM_PeriodElapsedCallback+0x482>
		} else if (registerFrame[1].U16 & STATUS_IDLE) {
 800312e:	4b4c      	ldr	r3, [pc, #304]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003130:	885b      	ldrh	r3, [r3, #2]
//		} else {
//			//Pen Doen Servo Off
//			registerFrame[3].U16 = 1 << 1;
//		}

		if (button_run == 1
 8003132:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_PeriodElapsedCallback+0x4a8>
				&& (current_state == STATE_ERROR || current_state == 0)
 800313a:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d003      	beq.n	800314a <HAL_TIM_PeriodElapsedCallback+0x49a>
 8003142:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_TIM_PeriodElapsedCallback+0x4a8>
				&& button_emer == 1) {
 800314a:	4b3d      	ldr	r3, [pc, #244]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_TIM_PeriodElapsedCallback+0x4a8>
			registerFrame[1].U16 = STATUS_HOME;
 8003152:	4b43      	ldr	r3, [pc, #268]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003154:	2201      	movs	r2, #1
 8003156:	805a      	strh	r2, [r3, #2]
		}

		switch (current_state) {
 8003158:	4b43      	ldr	r3, [pc, #268]	@ (8003268 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	2b05      	cmp	r3, #5
 8003160:	f200 841e 	bhi.w	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	08003185 	.word	0x08003185
 8003170:	080032a9 	.word	0x080032a9
 8003174:	080034b9 	.word	0x080034b9
 8003178:	08003781 	.word	0x08003781
 800317c:	08003949 	.word	0x08003949
 8003180:	08003979 	.word	0x08003979
		case STATE_HOMING:
			if (limit_r != 1) {
 8003184:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d003      	beq.n	8003194 <HAL_TIM_PeriodElapsedCallback+0x4e4>
				output_prismatic = -(65535 / 2.0);
 800318c:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800318e:	4a39      	ldr	r2, [pc, #228]	@ (8003274 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e017      	b.n	80031c4 <HAL_TIM_PeriodElapsedCallback+0x514>
			} else if (limit_r == 1) {
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_TIM_PeriodElapsedCallback+0x514>
				limit_l_prev = 1;
 800319c:	4b36      	ldr	r3, [pc, #216]	@ (8003278 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
				output_prismatic = 0;
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 80031aa:	4834      	ldr	r0, [pc, #208]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80031ac:	f7fe fb98 	bl	80018e0 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 80031b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031b4:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 800324c <HAL_TIM_PeriodElapsedCallback+0x59c>
 80031b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031bc:	4930      	ldr	r1, [pc, #192]	@ (8003280 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80031be:	482f      	ldr	r0, [pc, #188]	@ (800327c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80031c0:	f7fe faba 	bl	8001738 <QEIInit>
			}
			if (revolute_flag != 1) {
 80031c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d003      	beq.n	80031d4 <HAL_TIM_PeriodElapsedCallback+0x524>
				output_revolute = -60000;
 80031cc:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80031ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003288 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e017      	b.n	8003204 <HAL_TIM_PeriodElapsedCallback+0x554>
			} else if (revolute_flag == 1) {
 80031d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_TIM_PeriodElapsedCallback+0x554>
				revolute_homed = 1; // Check Proximity trick
 80031dc:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
				output_revolute = 0;
 80031e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003254 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 80031ea:	4829      	ldr	r0, [pc, #164]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80031ec:	f7fe fb78 	bl	80018e0 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80031f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031f4:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800324c <HAL_TIM_PeriodElapsedCallback+0x59c>
 80031f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031fc:	4925      	ldr	r1, [pc, #148]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80031fe:	4824      	ldr	r0, [pc, #144]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003200:	f7fe fa9a 	bl	8001738 <QEIInit>
			}
			target_position_prismatic = 0;
 8003204:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
			target_position_revolute = 0;
 800320c:	4b23      	ldr	r3, [pc, #140]	@ (800329c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
			error_pos_re = 0;
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
			error_pos_pris = 0;
 800321c:	4b21      	ldr	r3, [pc, #132]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			registerFrame[4].U16 = 1;
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003226:	2201      	movs	r2, #1
 8003228:	811a      	strh	r2, [r3, #8]
			registerFrame[5].U16 = 0;
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800322c:	2200      	movs	r2, #0
 800322e:	815a      	strh	r2, [r3, #10]
			registerFrame[10].U16 = STATUS_HOME;
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003232:	2201      	movs	r2, #1
 8003234:	829a      	strh	r2, [r3, #20]
			break;
 8003236:	e3b3      	b.n	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>
 8003238:	20001245 	.word	0x20001245
 800323c:	48000400 	.word	0x48000400
 8003240:	20001248 	.word	0x20001248
 8003244:	20001247 	.word	0x20001247
 8003248:	200010e0 	.word	0x200010e0
 800324c:	447a0000 	.word	0x447a0000
 8003250:	20001040 	.word	0x20001040
 8003254:	200010e4 	.word	0x200010e4
 8003258:	2000105c 	.word	0x2000105c
 800325c:	200011f0 	.word	0x200011f0
 8003260:	20000fac 	.word	0x20000fac
 8003264:	20000760 	.word	0x20000760
 8003268:	20001038 	.word	0x20001038
 800326c:	20001250 	.word	0x20001250
 8003270:	200011b8 	.word	0x200011b8
 8003274:	c6ffff00 	.word	0xc6ffff00
 8003278:	200011ba 	.word	0x200011ba
 800327c:	200010e8 	.word	0x200010e8
 8003280:	20000694 	.word	0x20000694
 8003284:	20001194 	.word	0x20001194
 8003288:	c76a6000 	.word	0xc76a6000
 800328c:	20001244 	.word	0x20001244
 8003290:	20001164 	.word	0x20001164
 8003294:	200005c8 	.word	0x200005c8
 8003298:	20001078 	.word	0x20001078
 800329c:	20001160 	.word	0x20001160
 80032a0:	200011c8 	.word	0x200011c8
 80032a4:	20001094 	.word	0x20001094

		case STATE_JOGGING:
			//Call joystick mode
			joy_flag = 1;
 80032a8:	4bb3      	ldr	r3, [pc, #716]	@ (8003578 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

			if (limit_r == 1) {
 80032ae:	4bb3      	ldr	r3, [pc, #716]	@ (800357c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d110      	bne.n	80032d8 <HAL_TIM_PeriodElapsedCallback+0x628>
				output_prismatic = 0;
 80032b6:	4bb2      	ldr	r3, [pc, #712]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 80032be:	48b1      	ldr	r0, [pc, #708]	@ (8003584 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 80032c0:	f7fe fb0e 	bl	80018e0 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 80032c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032c8:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8003588 <HAL_TIM_PeriodElapsedCallback+0x8d8>
 80032cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032d0:	49ae      	ldr	r1, [pc, #696]	@ (800358c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80032d2:	48ac      	ldr	r0, [pc, #688]	@ (8003584 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 80032d4:	f7fe fa30 	bl	8001738 <QEIInit>
			}

			if (revolute_flag == 1) {
 80032d8:	4bad      	ldr	r3, [pc, #692]	@ (8003590 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d110      	bne.n	8003302 <HAL_TIM_PeriodElapsedCallback+0x652>
				output_revolute = 0;
 80032e0:	4bac      	ldr	r3, [pc, #688]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 80032e8:	48ab      	ldr	r0, [pc, #684]	@ (8003598 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80032ea:	f7fe faf9 	bl	80018e0 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80032ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032f2:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8003588 <HAL_TIM_PeriodElapsedCallback+0x8d8>
 80032f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032fa:	49a8      	ldr	r1, [pc, #672]	@ (800359c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80032fc:	48a6      	ldr	r0, [pc, #664]	@ (8003598 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80032fe:	f7fe fa1b 	bl	8001738 <QEIInit>
			}

			output_prismatic = (Joy_x / 100.0) * 30000;
 8003302:	4ba7      	ldr	r3, [pc, #668]	@ (80035a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f8d7 	bl	80004bc <__aeabi_i2d>
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	4ba4      	ldr	r3, [pc, #656]	@ (80035a4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003314:	f7fd fa66 	bl	80007e4 <__aeabi_ddiv>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	a38f      	add	r3, pc, #572	@ (adr r3, 8003560 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f933 	bl	8000590 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f7fd fc0f 	bl	8000b54 <__aeabi_d2f>
 8003336:	4603      	mov	r3, r0
 8003338:	4a91      	ldr	r2, [pc, #580]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800333a:	6013      	str	r3, [r2, #0]

			if (limit_r == 1 && output_prismatic < 0) {
 800333c:	4b8f      	ldr	r3, [pc, #572]	@ (800357c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10c      	bne.n	800335e <HAL_TIM_PeriodElapsedCallback+0x6ae>
 8003344:	4b8e      	ldr	r3, [pc, #568]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	d504      	bpl.n	800335e <HAL_TIM_PeriodElapsedCallback+0x6ae>
				output_prismatic = 0;
 8003354:	4b8a      	ldr	r3, [pc, #552]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e00f      	b.n	800337e <HAL_TIM_PeriodElapsedCallback+0x6ce>
			} else if (limit_l == 1 && output_prismatic > 0) {
 800335e:	4b92      	ldr	r3, [pc, #584]	@ (80035a8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10b      	bne.n	800337e <HAL_TIM_PeriodElapsedCallback+0x6ce>
 8003366:	4b86      	ldr	r3, [pc, #536]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd03      	ble.n	800337e <HAL_TIM_PeriodElapsedCallback+0x6ce>
				output_prismatic = 0;
 8003376:	4b82      	ldr	r3, [pc, #520]	@ (8003580 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
			}

			output_revolute = (Joy_y / 100.0) * 60000.0;
 800337e:	4b8b      	ldr	r3, [pc, #556]	@ (80035ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f899 	bl	80004bc <__aeabi_i2d>
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003390:	f7fd fa28 	bl	80007e4 <__aeabi_ddiv>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	a372      	add	r3, pc, #456	@ (adr r3, 8003568 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd f8f5 	bl	8000590 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fbd1 	bl	8000b54 <__aeabi_d2f>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4a77      	ldr	r2, [pc, #476]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80033b6:	6013      	str	r3, [r2, #0]

			if (revolute_flag == 1 && output_revolute < 0) {
 80033b8:	4b75      	ldr	r3, [pc, #468]	@ (8003590 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10c      	bne.n	80033da <HAL_TIM_PeriodElapsedCallback+0x72a>
 80033c0:	4b74      	ldr	r3, [pc, #464]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d504      	bpl.n	80033da <HAL_TIM_PeriodElapsedCallback+0x72a>
				output_revolute = 0;
 80033d0:	4b70      	ldr	r3, [pc, #448]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e018      	b.n	800340c <HAL_TIM_PeriodElapsedCallback+0x75c>
			} else if (revolute_encoder.rads >= (2 * M_PI)
 80033da:	4b6f      	ldr	r3, [pc, #444]	@ (8003598 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f87e 	bl	80004e0 <__aeabi_f2d>
 80033e4:	a362      	add	r3, pc, #392	@ (adr r3, 8003570 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f7fd fb57 	bl	8000a9c <__aeabi_dcmpge>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_TIM_PeriodElapsedCallback+0x75c>
					&& output_revolute > 0) {
 80033f4:	4b67      	ldr	r3, [pc, #412]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	dd03      	ble.n	800340c <HAL_TIM_PeriodElapsedCallback+0x75c>
				output_revolute = 0;
 8003404:	4b63      	ldr	r3, [pc, #396]	@ (8003594 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
			}

			if (button_reset == 1 && button_reset_prev == 0) {
 800340c:	4b68      	ldr	r3, [pc, #416]	@ (80035b0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	f040 82c0 	bne.w	8003996 <HAL_TIM_PeriodElapsedCallback+0xce6>
 8003416:	4b67      	ldr	r3, [pc, #412]	@ (80035b4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 82bb 	bne.w	8003996 <HAL_TIM_PeriodElapsedCallback+0xce6>
				count++;
 8003420:	4b65      	ldr	r3, [pc, #404]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	4a64      	ldr	r2, [pc, #400]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003428:	6013      	str	r3, [r2, #0]
				if (count > 0 && count <= 10) {
 800342a:	4b63      	ldr	r3, [pc, #396]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	dd3e      	ble.n	80034b0 <HAL_TIM_PeriodElapsedCallback+0x800>
 8003432:	4b61      	ldr	r3, [pc, #388]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b0a      	cmp	r3, #10
 8003438:	dc3a      	bgt.n	80034b0 <HAL_TIM_PeriodElapsedCallback+0x800>
					registerFrame[18 + count * 2].U16 = ball_screw_pos * 10;
 800343a:	4b60      	ldr	r3, [pc, #384]	@ (80035bc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800343c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8003446:	f7fd f8a3 	bl	8000590 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	4b59      	ldr	r3, [pc, #356]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3309      	adds	r3, #9
 8003458:	005c      	lsls	r4, r3, #1
 800345a:	f7fd fb5b 	bl	8000b14 <__aeabi_d2uiz>
 800345e:	4603      	mov	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b58      	ldr	r3, [pc, #352]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8003464:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
 8003468:	4b4b      	ldr	r3, [pc, #300]	@ (8003598 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd f837 	bl	80004e0 <__aeabi_f2d>
							/ (2 * M_PI)) * 1800.0;
 8003472:	a33f      	add	r3, pc, #252	@ (adr r3, 8003570 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fd f9b4 	bl	80007e4 <__aeabi_ddiv>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	4b4f      	ldr	r3, [pc, #316]	@ (80035c8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800348a:	f7fd f881 	bl	8000590 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
					registerFrame[19 + count * 2].U16 = (revolute_encoder.rads
 8003496:	4b48      	ldr	r3, [pc, #288]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	f103 0413 	add.w	r4, r3, #19
 80034a0:	f7fd fb38 	bl	8000b14 <__aeabi_d2uiz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b46      	ldr	r3, [pc, #280]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80034aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				} else {
					count = 0;
				}
			}
			break;
 80034ae:	e272      	b.n	8003996 <HAL_TIM_PeriodElapsedCallback+0xce6>
					count = 0;
 80034b0:	4b41      	ldr	r3, [pc, #260]	@ (80035b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
			break;
 80034b6:	e26e      	b.n	8003996 <HAL_TIM_PeriodElapsedCallback+0xce6>
		case STATE_POINT_MOVING:
			registerFrame[4].U16 = 1;
 80034b8:	4b42      	ldr	r3, [pc, #264]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	811a      	strh	r2, [r3, #8]
			registerFrame[5].U16 = 0;
 80034be:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	815a      	strh	r2, [r3, #10]
			theta = (float) (registerFrame[65].U16);
 80034c4:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80034c6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
//			target_position_prismatic = registerFrame[64].U16 / 10;
			if (theta <= 1800) {
 80034da:	4b3c      	ldr	r3, [pc, #240]	@ (80035cc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80035d0 <HAL_TIM_PeriodElapsedCallback+0x920>
 80034e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ec:	d878      	bhi.n	80035e0 <HAL_TIM_PeriodElapsedCallback+0x930>
				target_position_revolute = (float) (registerFrame[65].U16
 80034ee:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80034f0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80034f4:	b29b      	uxth	r3, r3
						/ 1800.0) * (2.0 * M_PI);
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fc ffe0 	bl	80004bc <__aeabi_i2d>
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003502:	f7fd f96f 	bl	80007e4 <__aeabi_ddiv>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
				target_position_revolute = (float) (registerFrame[65].U16
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd fb21 	bl	8000b54 <__aeabi_d2f>
 8003512:	4603      	mov	r3, r0
 8003514:	4618      	mov	r0, r3
 8003516:	f7fc ffe3 	bl	80004e0 <__aeabi_f2d>
						/ 1800.0) * (2.0 * M_PI);
 800351a:	a315      	add	r3, pc, #84	@ (adr r3, 8003570 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f7fd f836 	bl	8000590 <__aeabi_dmul>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f7fd fb12 	bl	8000b54 <__aeabi_d2f>
 8003530:	4603      	mov	r3, r0
				target_position_revolute = (float) (registerFrame[65].U16
 8003532:	4a28      	ldr	r2, [pc, #160]	@ (80035d4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003534:	6013      	str	r3, [r2, #0]
				target_position_prismatic = 300 - (registerFrame[64].U16 / 10);
 8003536:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8003538:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	4a26      	ldr	r2, [pc, #152]	@ (80035d8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	b29b      	uxth	r3, r3
 8003548:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8003556:	edc3 7a00 	vstr	s15, [r3]
 800355a:	e0a1      	b.n	80036a0 <HAL_TIM_PeriodElapsedCallback+0x9f0>
 800355c:	f3af 8000 	nop.w
 8003560:	00000000 	.word	0x00000000
 8003564:	40dd4c00 	.word	0x40dd4c00
 8003568:	00000000 	.word	0x00000000
 800356c:	40ed4c00 	.word	0x40ed4c00
 8003570:	54442d18 	.word	0x54442d18
 8003574:	401921fb 	.word	0x401921fb
 8003578:	2000103c 	.word	0x2000103c
 800357c:	200011b8 	.word	0x200011b8
 8003580:	200010e0 	.word	0x200010e0
 8003584:	200010e8 	.word	0x200010e8
 8003588:	447a0000 	.word	0x447a0000
 800358c:	20000694 	.word	0x20000694
 8003590:	20001194 	.word	0x20001194
 8003594:	200010e4 	.word	0x200010e4
 8003598:	20001164 	.word	0x20001164
 800359c:	200005c8 	.word	0x200005c8
 80035a0:	20001224 	.word	0x20001224
 80035a4:	40590000 	.word	0x40590000
 80035a8:	200011b9 	.word	0x200011b9
 80035ac:	20001226 	.word	0x20001226
 80035b0:	20001245 	.word	0x20001245
 80035b4:	20001246 	.word	0x20001246
 80035b8:	2000122c 	.word	0x2000122c
 80035bc:	20001150 	.word	0x20001150
 80035c0:	40240000 	.word	0x40240000
 80035c4:	20000fac 	.word	0x20000fac
 80035c8:	409c2000 	.word	0x409c2000
 80035cc:	2000124c 	.word	0x2000124c
 80035d0:	44e10000 	.word	0x44e10000
 80035d4:	20001160 	.word	0x20001160
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	20001078 	.word	0x20001078
			} else if (theta > 1800) {
 80035e0:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003734 <HAL_TIM_PeriodElapsedCallback+0xa84>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	dd55      	ble.n	80036a0 <HAL_TIM_PeriodElapsedCallback+0x9f0>
				target_position_revolute = (float) (fabs(
						180 - registerFrame[65].U16 / 10.0));
 80035f4:	4b50      	ldr	r3, [pc, #320]	@ (8003738 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 80035f6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ff5d 	bl	80004bc <__aeabi_i2d>
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8003608:	f7fd f8ec 	bl	80007e4 <__aeabi_ddiv>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	494a      	ldr	r1, [pc, #296]	@ (8003740 <HAL_TIM_PeriodElapsedCallback+0xa90>)
 8003616:	f7fc fe03 	bl	8000220 <__aeabi_dsub>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
				target_position_revolute = (float) (fabs(
 800361e:	4690      	mov	r8, r2
 8003620:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003624:	4640      	mov	r0, r8
 8003626:	4649      	mov	r1, r9
 8003628:	f7fd fa94 	bl	8000b54 <__aeabi_d2f>
 800362c:	4603      	mov	r3, r0
 800362e:	4a45      	ldr	r2, [pc, #276]	@ (8003744 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8003630:	6013      	str	r3, [r2, #0]
				target_position_revolute = (float) (target_position_revolute
 8003632:	4b44      	ldr	r3, [pc, #272]	@ (8003744 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003748 <HAL_TIM_PeriodElapsedCallback+0xa98>
 800363c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003640:	ee16 0a90 	vmov	r0, s13
 8003644:	f7fc ff4c 	bl	80004e0 <__aeabi_f2d>
						/ 180.0) * (2.0 * M_PI);
 8003648:	a337      	add	r3, pc, #220	@ (adr r3, 8003728 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fc ff9f 	bl	8000590 <__aeabi_dmul>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f7fd fa7b 	bl	8000b54 <__aeabi_d2f>
 800365e:	4603      	mov	r3, r0
				target_position_revolute = (float) (target_position_revolute
 8003660:	4a38      	ldr	r2, [pc, #224]	@ (8003744 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8003662:	6013      	str	r3, [r2, #0]
				target_position_prismatic = mapf((registerFrame[64].U16 / 10),
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8003666:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800366a:	b29b      	uxth	r3, r3
 800366c:	4a37      	ldr	r2, [pc, #220]	@ (800374c <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	b29b      	uxth	r3, r3
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8003750 <HAL_TIM_PeriodElapsedCallback+0xaa0>
 8003682:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8003754 <HAL_TIM_PeriodElapsedCallback+0xaa4>
 8003686:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8003754 <HAL_TIM_PeriodElapsedCallback+0xaa4>
 800368a:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8003758 <HAL_TIM_PeriodElapsedCallback+0xaa8>
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	f7ff fadf 	bl	8002c54 <mapf>
 8003696:	eef0 7a40 	vmov.f32	s15, s0
 800369a:	4b30      	ldr	r3, [pc, #192]	@ (800375c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
						0, 300, 300, 600);
//				target_position_revolute = 300 + (registerFrame[64].U16 / 10);
			}

			if (pointMoveNeedsInit) {
 80036a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003760 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8178 	beq.w	800399a <HAL_TIM_PeriodElapsedCallback+0xcea>
				float dist_pris = target_position_prismatic
						- (float) ball_screw_pos;
 80036aa:	4b2c      	ldr	r3, [pc, #176]	@ (800375c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 80036ac:	ed93 8a00 	vldr	s16, [r3]
 80036b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003764 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7fd fa4b 	bl	8000b54 <__aeabi_d2f>
 80036be:	ee07 0a90 	vmov	s15, r0
				float dist_pris = target_position_prismatic
 80036c2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80036c6:	edc7 7a04 	vstr	s15, [r7, #16]
				float dist_rev = target_position_revolute
						- (float) revolute_encoder.rads;
 80036ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	4b25      	ldr	r3, [pc, #148]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80036d2:	edd3 7a06 	vldr	s15, [r3, #24]
				float dist_rev = target_position_revolute
 80036d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036da:	edc7 7a03 	vstr	s15, [r7, #12]

				// Choose v_max, a_max to suit your system:
				Trapezoidal_Init(&prisProfile, dist_pris, 550.0f, 250.0f,
 80036de:	4b21      	ldr	r3, [pc, #132]	@ (8003764 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd fa34 	bl	8000b54 <__aeabi_d2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	ee01 3a90 	vmov	s3, r3
 80036f2:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 800376c <HAL_TIM_PeriodElapsedCallback+0xabc>
 80036f6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8003770 <HAL_TIM_PeriodElapsedCallback+0xac0>
 80036fa:	ed97 0a04 	vldr	s0, [r7, #16]
 80036fe:	481d      	ldr	r0, [pc, #116]	@ (8003774 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8003700:	f7fe f91c 	bl	800193c <Trapezoidal_Init>
						ball_screw_pos);
				Trapezoidal_Init(&revProfile, dist_rev, 2.0f, 0.4f,
 8003704:	4b18      	ldr	r3, [pc, #96]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 8003706:	edd3 7a06 	vldr	s15, [r3, #24]
 800370a:	eef0 1a67 	vmov.f32	s3, s15
 800370e:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8003778 <HAL_TIM_PeriodElapsedCallback+0xac8>
 8003712:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8003716:	ed97 0a03 	vldr	s0, [r7, #12]
 800371a:	4818      	ldr	r0, [pc, #96]	@ (800377c <HAL_TIM_PeriodElapsedCallback+0xacc>)
 800371c:	f7fe f90e 	bl	800193c <Trapezoidal_Init>
						revolute_encoder.rads);

				pointMoveNeedsInit = 0; // Clear so we don’t re‐Init on the next tick
 8003720:	4b0f      	ldr	r3, [pc, #60]	@ (8003760 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003726:	e138      	b.n	800399a <HAL_TIM_PeriodElapsedCallback+0xcea>
 8003728:	54442d18 	.word	0x54442d18
 800372c:	401921fb 	.word	0x401921fb
 8003730:	2000124c 	.word	0x2000124c
 8003734:	44e10000 	.word	0x44e10000
 8003738:	20000fac 	.word	0x20000fac
 800373c:	40240000 	.word	0x40240000
 8003740:	40668000 	.word	0x40668000
 8003744:	20001160 	.word	0x20001160
 8003748:	43340000 	.word	0x43340000
 800374c:	cccccccd 	.word	0xcccccccd
 8003750:	44160000 	.word	0x44160000
 8003754:	43960000 	.word	0x43960000
 8003758:	00000000 	.word	0x00000000
 800375c:	20001078 	.word	0x20001078
 8003760:	20001250 	.word	0x20001250
 8003764:	20001150 	.word	0x20001150
 8003768:	20001164 	.word	0x20001164
 800376c:	437a0000 	.word	0x437a0000
 8003770:	44098000 	.word	0x44098000
 8003774:	20000a84 	.word	0x20000a84
 8003778:	3ecccccd 	.word	0x3ecccccd
 800377c:	20000aac 	.word	0x20000aac
		case STATE_GO_TO_TARGET:

			if (!prisProfile.finished) {
 8003780:	4b91      	ldr	r3, [pc, #580]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PeriodElapsedCallback+0xae2>
				Trapezoidal_Update(&prisProfile, 0.001f);
 8003788:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80039cc <HAL_TIM_PeriodElapsedCallback+0xd1c>
 800378c:	488e      	ldr	r0, [pc, #568]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 800378e:	f7fe f94b 	bl	8001a28 <Trapezoidal_Update>
			}
			if (!revProfile.finished) {
 8003792:	4b8f      	ldr	r3, [pc, #572]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0xaf4>
				Trapezoidal_Update(&revProfile, 0.001f);
 800379a:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 80039cc <HAL_TIM_PeriodElapsedCallback+0xd1c>
 800379e:	488c      	ldr	r0, [pc, #560]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 80037a0:	f7fe f942 	bl	8001a28 <Trapezoidal_Update>
			}

			Revolute_CasCadeControl();
 80037a4:	f7ff f90c 	bl	80029c0 <Revolute_CasCadeControl>
			Prismatic_CasCadeControl();
 80037a8:	f7fe ffea 	bl	8002780 <Prismatic_CasCadeControl>

			if (limit_r == 1 && limit_l_prev == 0) {
 80037ac:	4b89      	ldr	r3, [pc, #548]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d114      	bne.n	80037de <HAL_TIM_PeriodElapsedCallback+0xb2e>
 80037b4:	4b88      	ldr	r3, [pc, #544]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d110      	bne.n	80037de <HAL_TIM_PeriodElapsedCallback+0xb2e>
				output_prismatic = 0;
 80037bc:	4b87      	ldr	r3, [pc, #540]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
				QEI_Reset(&prismatic_encoder);
 80037c4:	4886      	ldr	r0, [pc, #536]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 80037c6:	f7fe f88b 	bl	80018e0 <QEI_Reset>
				QEIInit(&prismatic_encoder, &htim4, 8192, 1000, 65536);
 80037ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037ce:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80039e4 <HAL_TIM_PeriodElapsedCallback+0xd34>
 80037d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d6:	4984      	ldr	r1, [pc, #528]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 80037d8:	4881      	ldr	r0, [pc, #516]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 80037da:	f7fd ffad 	bl	8001738 <QEIInit>
			}

			if (revolute_flag == 1 && revolute_homed == 0) {
 80037de:	4b83      	ldr	r3, [pc, #524]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d114      	bne.n	8003810 <HAL_TIM_PeriodElapsedCallback+0xb60>
 80037e6:	4b82      	ldr	r3, [pc, #520]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d110      	bne.n	8003810 <HAL_TIM_PeriodElapsedCallback+0xb60>
				output_revolute = 0;
 80037ee:	4b81      	ldr	r3, [pc, #516]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
				QEI_Reset(&revolute_encoder);
 80037f6:	4880      	ldr	r0, [pc, #512]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 80037f8:	f7fe f872 	bl	80018e0 <QEI_Reset>
				QEIInit(&revolute_encoder, &htim3, 8192, 1000, 65536);
 80037fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003800:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80039e4 <HAL_TIM_PeriodElapsedCallback+0xd34>
 8003804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003808:	497c      	ldr	r1, [pc, #496]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 800380a:	487b      	ldr	r0, [pc, #492]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 800380c:	f7fd ff94 	bl	8001738 <QEIInit>
			}
			registerFrame[11].U16 = (int) (ball_screw_pos * 10);
 8003810:	4b7b      	ldr	r3, [pc, #492]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8003812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800381c:	f7fc feb8 	bl	8000590 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f94c 	bl	8000ac4 <__aeabi_d2iz>
 800382c:	4603      	mov	r3, r0
 800382e:	b29a      	uxth	r2, r3
 8003830:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003832:	82da      	strh	r2, [r3, #22]
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
 8003834:	4b70      	ldr	r3, [pc, #448]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fe51 	bl	80004e0 <__aeabi_f2d>
 800383e:	a35e      	add	r3, pc, #376	@ (adr r3, 80039b8 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f7fc fea4 	bl	8000590 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
					* 10);
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b6b      	ldr	r3, [pc, #428]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8003856:	f7fc fe9b 	bl	8000590 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
			registerFrame[12].U16 = (int) (revolute_encoder.rads * (180 / M_PI)
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f7fd f92f 	bl	8000ac4 <__aeabi_d2iz>
 8003866:	4603      	mov	r3, r0
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b67      	ldr	r3, [pc, #412]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800386c:	831a      	strh	r2, [r3, #24]
			registerFrame[13].U16 = (int) (ball_screw_vel * 10);
 800386e:	4b67      	ldr	r3, [pc, #412]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8003870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	4b62      	ldr	r3, [pc, #392]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 800387a:	f7fc fe89 	bl	8000590 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f7fd f91d 	bl	8000ac4 <__aeabi_d2iz>
 800388a:	4603      	mov	r3, r0
 800388c:	b29a      	uxth	r2, r3
 800388e:	4b5e      	ldr	r3, [pc, #376]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003890:	835a      	strh	r2, [r3, #26]
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fe22 	bl	80004e0 <__aeabi_f2d>
 800389c:	a346      	add	r3, pc, #280	@ (adr r3, 80039b8 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc fe75 	bl	8000590 <__aeabi_dmul>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
					* 10);
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	4b54      	ldr	r3, [pc, #336]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 80038b4:	f7fc fe6c 	bl	8000590 <__aeabi_dmul>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
			registerFrame[14].U16 = (int) (revolute_radps_lowpass * (180 / M_PI)
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f7fd f900 	bl	8000ac4 <__aeabi_d2iz>
 80038c4:	4603      	mov	r3, r0
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 80038ca:	839a      	strh	r2, [r3, #28]
			registerFrame[15].U16 = (int) (prismatic_acceleration_lowpass * 10);
 80038cc:	4b51      	ldr	r3, [pc, #324]	@ (8003a14 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80038d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038de:	ee17 3a90 	vmov	r3, s15
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 80038e6:	83da      	strh	r2, [r3, #30]
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
					- prev_revolute_vel) / 0.001) * 10);
 80038e8:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 80038ea:	ed93 7a00 	vldr	s14, [r3]
 80038ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003a18 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f8:	ee17 0a90 	vmov	r0, s15
 80038fc:	f7fc fdf0 	bl	80004e0 <__aeabi_f2d>
 8003900:	a32f      	add	r3, pc, #188	@ (adr r3, 80039c0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc ff6d 	bl	80007e4 <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8003918:	f7fc fe3a 	bl	8000590 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
			registerFrame[16].U16 = (int) (((revolute_radps_lowpass
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fd f8ce 	bl	8000ac4 <__aeabi_d2iz>
 8003928:	4603      	mov	r3, r0
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800392e:	841a      	strh	r2, [r3, #32]
//			    }
//			else {
//				// At least one error is outside its deadband → reset counter:
//				stopCounter = 0;
//			}
			if (prisProfile.finished && revProfile.finished) {
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d032      	beq.n	800399e <HAL_TIM_PeriodElapsedCallback+0xcee>
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02e      	beq.n	800399e <HAL_TIM_PeriodElapsedCallback+0xcee>
				registerFrame[1].U16 = STATUS_STOP;
 8003940:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003942:	2210      	movs	r2, #16
 8003944:	805a      	strh	r2, [r3, #2]
			}

			break;
 8003946:	e02a      	b.n	800399e <HAL_TIM_PeriodElapsedCallback+0xcee>
		case STATE_STOPPING:
			registerFrame[10].U16 = STATUS_STOP;
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800394a:	2210      	movs	r2, #16
 800394c:	829a      	strh	r2, [r3, #20]
			revolute_homed = 0;
 800394e:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
			limit_l_prev = 0;
 8003954:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
			output_revolute = 0;
 800395a:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 8003962:	4b1e      	ldr	r3, [pc, #120]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
			registerFrame[4].U16 = 0;
 800396a:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800396c:	2200      	movs	r2, #0
 800396e:	811a      	strh	r2, [r3, #8]
			registerFrame[5].U16 = 1;
 8003970:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003972:	2201      	movs	r2, #1
 8003974:	815a      	strh	r2, [r3, #10]
			break;
 8003976:	e013      	b.n	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>

		case STATE_ERROR:
			//when emergency trick
			output_revolute = 0;
 8003978:	4b1e      	ldr	r3, [pc, #120]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
			output_prismatic = 0;
 8003980:	4b16      	ldr	r3, [pc, #88]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
			registerFrame[4].U16 = 0;
 8003988:	4b1f      	ldr	r3, [pc, #124]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 800398a:	2200      	movs	r2, #0
 800398c:	811a      	strh	r2, [r3, #8]
			registerFrame[5].U16 = 1;
 800398e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8003990:	2201      	movs	r2, #1
 8003992:	815a      	strh	r2, [r3, #10]
			break;
 8003994:	e004      	b.n	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>
			break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>
			break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_TIM_PeriodElapsedCallback+0xcf0>
			break;
 800399e:	bf00      	nop
		}
		button_reset_prev = button_reset;
 80039a0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 80039a6:	701a      	strb	r2, [r3, #0]
	}
}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	@ 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	ecbd 8b02 	vpop	{d8}
 80039b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039b6:	bf00      	nop
 80039b8:	1a63c1f8 	.word	0x1a63c1f8
 80039bc:	404ca5dc 	.word	0x404ca5dc
 80039c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80039c4:	3f50624d 	.word	0x3f50624d
 80039c8:	20000a84 	.word	0x20000a84
 80039cc:	3a83126f 	.word	0x3a83126f
 80039d0:	20000aac 	.word	0x20000aac
 80039d4:	200011b8 	.word	0x200011b8
 80039d8:	200011ba 	.word	0x200011ba
 80039dc:	200010e0 	.word	0x200010e0
 80039e0:	200010e8 	.word	0x200010e8
 80039e4:	447a0000 	.word	0x447a0000
 80039e8:	20000694 	.word	0x20000694
 80039ec:	20001194 	.word	0x20001194
 80039f0:	20001244 	.word	0x20001244
 80039f4:	200010e4 	.word	0x200010e4
 80039f8:	20001164 	.word	0x20001164
 80039fc:	200005c8 	.word	0x200005c8
 8003a00:	20001150 	.word	0x20001150
 8003a04:	40240000 	.word	0x40240000
 8003a08:	20000fac 	.word	0x20000fac
 8003a0c:	20001158 	.word	0x20001158
 8003a10:	200011dc 	.word	0x200011dc
 8003a14:	20001144 	.word	0x20001144
 8003a18:	200011f8 	.word	0x200011f8
 8003a1c:	20001245 	.word	0x20001245
 8003a20:	20001246 	.word	0x20001246

08003a24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <Error_Handler+0x8>

08003a30 <MotorInit>:
#include "motor.h"

void MotorInit(MOTOR* MOTOR, TIM_HandleTypeDef* htimx, uint16_t tim_chx, GPIO_TypeDef* gpiox, uint16_t motor_pin)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
	MOTOR->htimx = htimx;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	601a      	str	r2, [r3, #0]
	MOTOR->cpu_freq = 170e6;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	@ (8003a7c <MotorInit+0x4c>)
 8003a4a:	615a      	str	r2, [r3, #20]
	MOTOR->tim_chx = tim_chx;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	815a      	strh	r2, [r3, #10]
	MOTOR->OC = 0;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
	MOTOR->gpiox = gpiox;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
	MOTOR->motor_pin = motor_pin;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8b3a      	ldrh	r2, [r7, #24]
 8003a62:	811a      	strh	r2, [r3, #8]

	HAL_TIM_Base_Start(htimx);
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f004 fa95 	bl	8007f94 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f004 fbe6 	bl	8008240 <HAL_TIM_PWM_Start>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0a21fe80 	.word	0x0a21fe80

08003a80 <MotorSet>:

void MotorSet(MOTOR* MOTOR, float freq, float val)
{
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a8c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (freq == 0)
 8003a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	d137      	bne.n	8003b0e <MotorSet+0x8e>
	{
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	895b      	ldrh	r3, [r3, #10]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <MotorSet+0x32>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34
		// Apply value to TIM
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
	}
}
 8003ab0:	e104      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, 0);  // Fixed
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	895b      	ldrh	r3, [r3, #10]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d105      	bne.n	8003ac6 <MotorSet+0x46>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6393      	str	r3, [r2, #56]	@ 0x38
 8003ac4:	e0fa      	b.n	8003cbc <MotorSet+0x23c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	895b      	ldrh	r3, [r3, #10]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d105      	bne.n	8003ada <MotorSet+0x5a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003ad8:	e0f0      	b.n	8003cbc <MotorSet+0x23c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	895b      	ldrh	r3, [r3, #10]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d105      	bne.n	8003aee <MotorSet+0x6e>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aec:	e0e6      	b.n	8003cbc <MotorSet+0x23c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	895b      	ldrh	r3, [r3, #10]
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d105      	bne.n	8003b02 <MotorSet+0x82>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b00:	e0dc      	b.n	8003cbc <MotorSet+0x23c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b0c:	e0d6      	b.n	8003cbc <MotorSet+0x23c>
		MOTOR->period_cyc = (uint32_t) (MOTOR->cpu_freq / freq);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b26:	ee17 2a90 	vmov	r2, s15
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	60da      	str	r2, [r3, #12]
		MOTOR->prescaler = (uint16_t) ((MOTOR->period_cyc + 65535 - 1)/65535.00) - 1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003b36:	33fe      	adds	r3, #254	@ 0xfe
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fcaf 	bl	800049c <__aeabi_ui2d>
 8003b3e:	a362      	add	r3, pc, #392	@ (adr r3, 8003cc8 <MotorSet+0x248>)
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f7fc fe4e 	bl	80007e4 <__aeabi_ddiv>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fc ffe0 	bl	8000b14 <__aeabi_d2uiz>
 8003b54:	4603      	mov	r3, r0
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	821a      	strh	r2, [r3, #16]
		MOTOR->overflow = (uint16_t) ((MOTOR->cpu_freq/ (float)(MOTOR->prescaler+1) / freq) - 1);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8a1b      	ldrh	r3, [r3, #16]
 8003b70:	3301      	adds	r3, #1
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	825a      	strh	r2, [r3, #18]
		MOTOR->OC = (uint16_t) (MOTOR->overflow * fabs(val) / 65535.00);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8a5b      	ldrh	r3, [r3, #18]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fc8b 	bl	80004bc <__aeabi_i2d>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	460d      	mov	r5, r1
 8003baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bae:	eef0 7ae7 	vabs.f32	s15, s15
 8003bb2:	ee17 0a90 	vmov	r0, s15
 8003bb6:	f7fc fc93 	bl	80004e0 <__aeabi_f2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fce5 	bl	8000590 <__aeabi_dmul>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	a33e      	add	r3, pc, #248	@ (adr r3, 8003cc8 <MotorSet+0x248>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fe06 	bl	80007e4 <__aeabi_ddiv>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fc ff98 	bl	8000b14 <__aeabi_d2uiz>
 8003be4:	4603      	mov	r3, r0
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	619a      	str	r2, [r3, #24]
		if (val >= 0) {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_RESET);}
 8003bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	db08      	blt.n	8003c0e <MotorSet+0x18e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6858      	ldr	r0, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	891b      	ldrh	r3, [r3, #8]
 8003c04:	2200      	movs	r2, #0
 8003c06:	4619      	mov	r1, r3
 8003c08:	f003 f8e6 	bl	8006dd8 <HAL_GPIO_WritePin>
 8003c0c:	e007      	b.n	8003c1e <MotorSet+0x19e>
		else {HAL_GPIO_WritePin(MOTOR->gpiox, MOTOR->motor_pin, GPIO_PIN_SET);}
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6858      	ldr	r0, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	891b      	ldrh	r3, [r3, #8]
 8003c16:	2201      	movs	r2, #1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f003 f8dd 	bl	8006dd8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_PRESCALER(MOTOR->htimx, MOTOR->prescaler);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8a1a      	ldrh	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(MOTOR->htimx, MOTOR->overflow);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8a5a      	ldrh	r2, [r3, #18]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8a5a      	ldrh	r2, [r3, #18]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	895b      	ldrh	r3, [r3, #10]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <MotorSet+0x1d6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6992      	ldr	r2, [r2, #24]
 8003c52:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c54:	e032      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	895b      	ldrh	r3, [r3, #10]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d106      	bne.n	8003c6c <MotorSet+0x1ec>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003c6a:	e027      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	895b      	ldrh	r3, [r3, #10]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d106      	bne.n	8003c82 <MotorSet+0x202>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003c80:	e01c      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	895b      	ldrh	r3, [r3, #10]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d106      	bne.n	8003c98 <MotorSet+0x218>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003c96:	e011      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	895b      	ldrh	r3, [r3, #10]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d106      	bne.n	8003cae <MotorSet+0x22e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003cac:	e006      	b.n	8003cbc <MotorSet+0x23c>
		__HAL_TIM_SET_COMPARE(MOTOR->htimx, MOTOR->tim_chx, MOTOR->OC);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003cba:	e7ff      	b.n	8003cbc <MotorSet+0x23c>
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	40efffe0 	.word	0x40efffe0

08003cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <HAL_MspInit+0x44>)
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	4a0e      	ldr	r2, [pc, #56]	@ (8003d14 <HAL_MspInit+0x44>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <HAL_MspInit+0x44>)
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <HAL_MspInit+0x44>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	4a08      	ldr	r2, [pc, #32]	@ (8003d14 <HAL_MspInit+0x44>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_MspInit+0x44>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d06:	f003 f955 	bl	8006fb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b0a0      	sub	sp, #128	@ 0x80
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	2254      	movs	r2, #84	@ 0x54
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f008 f9a5 	bl	800c088 <memset>
  if(hadc->Instance==ADC1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d46:	d170      	bne.n	8003e2a <HAL_ADC_MspInit+0x112>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003d4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d54:	f107 0318 	add.w	r3, r7, #24
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f003 fe69 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003d64:	f7ff fe5e 	bl	8003a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003d68:	4b6c      	ldr	r3, [pc, #432]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003d70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003d72:	4b6a      	ldr	r3, [pc, #424]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d10b      	bne.n	8003d92 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003d7a:	4b69      	ldr	r3, [pc, #420]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003d80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d86:	4b66      	ldr	r3, [pc, #408]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	4b63      	ldr	r3, [pc, #396]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	4a62      	ldr	r2, [pc, #392]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9e:	4b60      	ldr	r3, [pc, #384]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003daa:	2306      	movs	r3, #6
 8003dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dae:	2303      	movs	r3, #3
 8003db0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4859      	ldr	r0, [pc, #356]	@ (8003f24 <HAL_ADC_MspInit+0x20c>)
 8003dbe:	f002 fe71 	bl	8006aa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003dc2:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dc4:	4a59      	ldr	r2, [pc, #356]	@ (8003f2c <HAL_ADC_MspInit+0x214>)
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003dc8:	4b57      	ldr	r3, [pc, #348]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dca:	2205      	movs	r2, #5
 8003dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dce:	4b56      	ldr	r3, [pc, #344]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd4:	4b54      	ldr	r3, [pc, #336]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dda:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003de0:	4b51      	ldr	r3, [pc, #324]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003de6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003de8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003df0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003df2:	2220      	movs	r2, #32
 8003df4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003df6:	4b4c      	ldr	r3, [pc, #304]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003dfc:	484a      	ldr	r0, [pc, #296]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003dfe:	f002 fb1f 	bl	8006440 <HAL_DMA_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8003e08:	f7ff fe0c 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a46      	ldr	r2, [pc, #280]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003e10:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e12:	4a45      	ldr	r2, [pc, #276]	@ (8003f28 <HAL_ADC_MspInit+0x210>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	2012      	movs	r0, #18
 8003e1e:	f002 fada 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003e22:	2012      	movs	r0, #18
 8003e24:	f002 faf1 	bl	800640a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e28:	e074      	b.n	8003f14 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	@ (8003f30 <HAL_ADC_MspInit+0x218>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d16f      	bne.n	8003f14 <HAL_ADC_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003e34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003e3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e40:	f107 0318 	add.w	r3, r7, #24
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fdf3 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 8003e50:	f7ff fde8 	bl	8003a24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003e5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f1c <HAL_ADC_MspInit+0x204>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10b      	bne.n	8003e7e <HAL_ADC_MspInit+0x166>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003e66:	4b2e      	ldr	r3, [pc, #184]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e72:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_ADC_MspInit+0x208>)
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e96:	2301      	movs	r3, #1
 8003e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	481e      	ldr	r0, [pc, #120]	@ (8003f24 <HAL_ADC_MspInit+0x20c>)
 8003eaa:	f002 fdfb 	bl	8006aa4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel4;
 8003eae:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003eb0:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_ADC_MspInit+0x220>)
 8003eb2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ec8:	2280      	movs	r2, #128	@ 0x80
 8003eca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ed4:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eda:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003edc:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ede:	2220      	movs	r2, #32
 8003ee0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003ee2:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003ee8:	4812      	ldr	r0, [pc, #72]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003eea:	f002 faa9 	bl	8006440 <HAL_DMA_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8003ef4:	f7ff fd96 	bl	8003a24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0e      	ldr	r2, [pc, #56]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003efe:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <HAL_ADC_MspInit+0x21c>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003f04:	2200      	movs	r2, #0
 8003f06:	2100      	movs	r1, #0
 8003f08:	2012      	movs	r0, #18
 8003f0a:	f002 fa64 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003f0e:	2012      	movs	r0, #18
 8003f10:	f002 fa7b 	bl	800640a <HAL_NVIC_EnableIRQ>
}
 8003f14:	bf00      	nop
 8003f16:	3780      	adds	r7, #128	@ 0x80
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20001254 	.word	0x20001254
 8003f20:	40021000 	.word	0x40021000
 8003f24:	48000800 	.word	0x48000800
 8003f28:	20000370 	.word	0x20000370
 8003f2c:	40020030 	.word	0x40020030
 8003f30:	50000100 	.word	0x50000100
 8003f34:	200003d0 	.word	0x200003d0
 8003f38:	40020044 	.word	0x40020044

08003f3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a34      	ldr	r2, [pc, #208]	@ (800401c <HAL_TIM_Base_MspInit+0xe0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d114      	bne.n	8003f78 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f4e:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	4a33      	ldr	r2, [pc, #204]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f5a:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2019      	movs	r0, #25
 8003f6c:	f002 fa33 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f70:	2019      	movs	r0, #25
 8003f72:	f002 fa4a 	bl	800640a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003f76:	e04c      	b.n	8004012 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d114      	bne.n	8003fac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f82:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	4a26      	ldr	r2, [pc, #152]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8e:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	201c      	movs	r0, #28
 8003fa0:	f002 fa19 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fa4:	201c      	movs	r0, #28
 8003fa6:	f002 fa30 	bl	800640a <HAL_NVIC_EnableIRQ>
}
 8003faa:	e032      	b.n	8004012 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <HAL_TIM_Base_MspInit+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d114      	bne.n	8003fe0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003fbc:	f043 0308 	orr.w	r3, r3, #8
 8003fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc2:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2032      	movs	r0, #50	@ 0x32
 8003fd4:	f002 f9ff 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003fd8:	2032      	movs	r0, #50	@ 0x32
 8003fda:	f002 fa16 	bl	800640a <HAL_NVIC_EnableIRQ>
}
 8003fde:	e018      	b.n	8004012 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a10      	ldr	r2, [pc, #64]	@ (8004028 <HAL_TIM_Base_MspInit+0xec>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_TIM_Base_MspInit+0xe4>)
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	2019      	movs	r0, #25
 8004008:	f002 f9e5 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800400c:	2019      	movs	r0, #25
 800400e:	f002 f9fc 	bl	800640a <HAL_NVIC_EnableIRQ>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40014400 	.word	0x40014400

0800402c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 031c 	add.w	r3, r7, #28
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a36      	ldr	r2, [pc, #216]	@ (8004124 <HAL_TIM_Encoder_MspInit+0xf8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d131      	bne.n	80040b2 <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800404e:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	4a35      	ldr	r2, [pc, #212]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6593      	str	r3, [r2, #88]	@ 0x58
 800405a:	4b33      	ldr	r3, [pc, #204]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004072:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800407e:	23c0      	movs	r3, #192	@ 0xc0
 8004080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408a:	2300      	movs	r3, #0
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800408e:	2302      	movs	r3, #2
 8004090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004092:	f107 031c 	add.w	r3, r7, #28
 8004096:	4619      	mov	r1, r3
 8004098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800409c:	f002 fd02 	bl	8006aa4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	201d      	movs	r0, #29
 80040a6:	f002 f996 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040aa:	201d      	movs	r0, #29
 80040ac:	f002 f9ad 	bl	800640a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040b0:	e034      	b.n	800411c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM4)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_TIM_Encoder_MspInit+0x100>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d12f      	bne.n	800411c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d4:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d8:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040da:	f043 0302 	orr.w	r3, r3, #2
 80040de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_TIM_Encoder_MspInit+0xfc>)
 80040e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ec:	23c0      	movs	r3, #192	@ 0xc0
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040fc:	2302      	movs	r3, #2
 80040fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004100:	f107 031c 	add.w	r3, r7, #28
 8004104:	4619      	mov	r1, r3
 8004106:	480a      	ldr	r0, [pc, #40]	@ (8004130 <HAL_TIM_Encoder_MspInit+0x104>)
 8004108:	f002 fccc 	bl	8006aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800410c:	2200      	movs	r2, #0
 800410e:	2100      	movs	r1, #0
 8004110:	201e      	movs	r0, #30
 8004112:	f002 f960 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004116:	201e      	movs	r0, #30
 8004118:	f002 f977 	bl	800640a <HAL_NVIC_EnableIRQ>
}
 800411c:	bf00      	nop
 800411e:	3730      	adds	r7, #48	@ 0x30
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40000400 	.word	0x40000400
 8004128:	40021000 	.word	0x40021000
 800412c:	40000800 	.word	0x40000800
 8004130:	48000400 	.word	0x48000400

08004134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a12      	ldr	r2, [pc, #72]	@ (800419c <HAL_TIM_MspPostInit+0x68>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d11d      	bne.n	8004192 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_TIM_MspPostInit+0x6c>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <HAL_TIM_MspPostInit+0x6c>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004162:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <HAL_TIM_MspPostInit+0x6c>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800416e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004172:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004180:	2306      	movs	r3, #6
 8004182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	4619      	mov	r1, r3
 800418a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800418e:	f002 fc89 	bl	8006aa4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004192:	bf00      	nop
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b09e      	sub	sp, #120	@ 0x78
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	2254      	movs	r2, #84	@ 0x54
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f007 ff5f 	bl	800c088 <memset>
  if(huart->Instance==USART2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004304 <HAL_UART_MspInit+0x160>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f040 8092 	bne.w	80042fa <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041d6:	2302      	movs	r3, #2
 80041d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041de:	f107 0310 	add.w	r3, r7, #16
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 fc24 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80041ee:	f7ff fc19 	bl	8003a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041f2:	4b45      	ldr	r3, [pc, #276]	@ (8004308 <HAL_UART_MspInit+0x164>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	4a44      	ldr	r2, [pc, #272]	@ (8004308 <HAL_UART_MspInit+0x164>)
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fe:	4b42      	ldr	r3, [pc, #264]	@ (8004308 <HAL_UART_MspInit+0x164>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	4b3f      	ldr	r3, [pc, #252]	@ (8004308 <HAL_UART_MspInit+0x164>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	4a3e      	ldr	r2, [pc, #248]	@ (8004308 <HAL_UART_MspInit+0x164>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <HAL_UART_MspInit+0x164>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004222:	230c      	movs	r3, #12
 8004224:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422e:	2300      	movs	r3, #0
 8004230:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004232:	2307      	movs	r3, #7
 8004234:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800423a:	4619      	mov	r1, r3
 800423c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004240:	f002 fc30 	bl	8006aa4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004246:	4a32      	ldr	r2, [pc, #200]	@ (8004310 <HAL_UART_MspInit+0x16c>)
 8004248:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800424a:	4b30      	ldr	r3, [pc, #192]	@ (800430c <HAL_UART_MspInit+0x168>)
 800424c:	221a      	movs	r2, #26
 800424e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004250:	4b2e      	ldr	r3, [pc, #184]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004256:	4b2d      	ldr	r3, [pc, #180]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004258:	2200      	movs	r2, #0
 800425a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800425c:	4b2b      	ldr	r3, [pc, #172]	@ (800430c <HAL_UART_MspInit+0x168>)
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004262:	4b2a      	ldr	r3, [pc, #168]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <HAL_UART_MspInit+0x168>)
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800426e:	4b27      	ldr	r3, [pc, #156]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004270:	2200      	movs	r2, #0
 8004272:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004274:	4b25      	ldr	r3, [pc, #148]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004276:	2200      	movs	r2, #0
 8004278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800427a:	4824      	ldr	r0, [pc, #144]	@ (800430c <HAL_UART_MspInit+0x168>)
 800427c:	f002 f8e0 	bl	8006440 <HAL_DMA_Init>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004286:	f7ff fbcd 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <HAL_UART_MspInit+0x168>)
 800428e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <HAL_UART_MspInit+0x168>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <HAL_UART_MspInit+0x170>)
 800429a:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <HAL_UART_MspInit+0x174>)
 800429c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042a0:	221b      	movs	r2, #27
 80042a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042a6:	2210      	movs	r2, #16
 80042a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042b0:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042b2:	2280      	movs	r2, #128	@ 0x80
 80042b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042b6:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042bc:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042c2:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042c8:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042ce:	4811      	ldr	r0, [pc, #68]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042d0:	f002 f8b6 	bl	8006440 <HAL_DMA_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80042da:	f7ff fba3 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <HAL_UART_MspInit+0x170>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	2026      	movs	r0, #38	@ 0x26
 80042f0:	f002 f871 	bl	80063d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042f4:	2026      	movs	r0, #38	@ 0x26
 80042f6:	f002 f888 	bl	800640a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80042fa:	bf00      	nop
 80042fc:	3778      	adds	r7, #120	@ 0x78
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40004400 	.word	0x40004400
 8004308:	40021000 	.word	0x40021000
 800430c:	200009c4 	.word	0x200009c4
 8004310:	40020008 	.word	0x40020008
 8004314:	20000a24 	.word	0x20000a24
 8004318:	4002001c 	.word	0x4002001c

0800431c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <NMI_Handler+0x4>

08004324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <HardFault_Handler+0x4>

0800432c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <MemManage_Handler+0x4>

08004334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <BusFault_Handler+0x4>

0800433c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <UsageFault_Handler+0x4>

08004344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004372:	f000 f915 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}

0800437a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800437e:	2008      	movs	r0, #8
 8004380:	f002 fd5c 	bl	8006e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}

08004388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800438c:	4802      	ldr	r0, [pc, #8]	@ (8004398 <DMA1_Channel1_IRQHandler+0x10>)
 800438e:	f002 fa3a 	bl	8006806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200009c4 	.word	0x200009c4

0800439c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <DMA1_Channel2_IRQHandler+0x10>)
 80043a2:	f002 fa30 	bl	8006806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000a24 	.word	0x20000a24

080043b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043b4:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <DMA1_Channel3_IRQHandler+0x10>)
 80043b6:	f002 fa26 	bl	8006806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000370 	.word	0x20000370

080043c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <DMA1_Channel4_IRQHandler+0x10>)
 80043ca:	f002 fa1c 	bl	8006806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200003d0 	.word	0x200003d0

080043d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80043dc:	4803      	ldr	r0, [pc, #12]	@ (80043ec <ADC1_2_IRQHandler+0x14>)
 80043de:	f000 fdcd 	bl	8004f7c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80043e2:	4803      	ldr	r0, [pc, #12]	@ (80043f0 <ADC1_2_IRQHandler+0x18>)
 80043e4:	f000 fdca 	bl	8004f7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000298 	.word	0x20000298
 80043f0:	20000304 	.word	0x20000304

080043f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043f8:	4803      	ldr	r0, [pc, #12]	@ (8004408 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80043fa:	f004 fb12 	bl	8008a22 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80043fe:	4803      	ldr	r0, [pc, #12]	@ (800440c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004400:	f004 fb0f 	bl	8008a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000430 	.word	0x20000430
 800440c:	2000082c 	.word	0x2000082c

08004410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004414:	4802      	ldr	r0, [pc, #8]	@ (8004420 <TIM2_IRQHandler+0x10>)
 8004416:	f004 fb04 	bl	8008a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200004fc 	.word	0x200004fc

08004424 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004428:	4802      	ldr	r0, [pc, #8]	@ (8004434 <TIM3_IRQHandler+0x10>)
 800442a:	f004 fafa 	bl	8008a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200005c8 	.word	0x200005c8

08004438 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800443c:	4802      	ldr	r0, [pc, #8]	@ (8004448 <TIM4_IRQHandler+0x10>)
 800443e:	f004 faf0 	bl	8008a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000694 	.word	0x20000694

0800444c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004450:	4802      	ldr	r0, [pc, #8]	@ (800445c <USART2_IRQHandler+0x10>)
 8004452:	f006 f8b9 	bl	800a5c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200008f8 	.word	0x200008f8

08004460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004464:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004468:	f002 fce8 	bl	8006e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}

08004470 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004474:	4802      	ldr	r0, [pc, #8]	@ (8004480 <TIM5_IRQHandler+0x10>)
 8004476:	f004 fad4 	bl	8008a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000760 	.word	0x20000760

08004484 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <SystemInit+0x20>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	4a05      	ldr	r2, [pc, #20]	@ (80044a4 <SystemInit+0x20>)
 8004490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a8:	480d      	ldr	r0, [pc, #52]	@ (80044e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044ac:	f7ff ffea 	bl	8004484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b0:	480c      	ldr	r0, [pc, #48]	@ (80044e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80044b2:	490d      	ldr	r1, [pc, #52]	@ (80044e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044b4:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <LoopForever+0xe>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044b8:	e002      	b.n	80044c0 <LoopCopyDataInit>

080044ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044be:	3304      	adds	r3, #4

080044c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c4:	d3f9      	bcc.n	80044ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c6:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c8:	4c0a      	ldr	r4, [pc, #40]	@ (80044f4 <LoopForever+0x16>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044cc:	e001      	b.n	80044d2 <LoopFillZerobss>

080044ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d0:	3204      	adds	r2, #4

080044d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d4:	d3fb      	bcc.n	80044ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044d6:	f007 fde5 	bl	800c0a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044da:	f7fd fb93 	bl	8001c04 <main>

080044de <LoopForever>:

LoopForever:
    b LoopForever
 80044de:	e7fe      	b.n	80044de <LoopForever>
  ldr   r0, =_estack
 80044e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e8:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80044ec:	0800c1b4 	.word	0x0800c1b4
  ldr r2, =_sbss
 80044f0:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80044f4:	20001394 	.word	0x20001394

080044f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC3_IRQHandler>

080044fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004504:	2003      	movs	r0, #3
 8004506:	f001 ff5b 	bl	80063c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800450a:	2000      	movs	r0, #0
 800450c:	f000 f80e 	bl	800452c <HAL_InitTick>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	71fb      	strb	r3, [r7, #7]
 800451a:	e001      	b.n	8004520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800451c:	f7ff fbd8 	bl	8003cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004520:	79fb      	ldrb	r3, [r7, #7]

}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <HAL_InitTick+0x68>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004540:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <HAL_InitTick+0x6c>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <HAL_InitTick+0x68>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800454c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	4618      	mov	r0, r3
 8004556:	f001 ff66 	bl	8006426 <HAL_SYSTICK_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10f      	bne.n	8004580 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d809      	bhi.n	800457a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004566:	2200      	movs	r2, #0
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	f001 ff32 	bl	80063d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004572:	4a0a      	ldr	r2, [pc, #40]	@ (800459c <HAL_InitTick+0x70>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e007      	b.n	800458a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e004      	b.n	800458a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e001      	b.n	800458a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000220 	.word	0x20000220
 8004598:	20000218 	.word	0x20000218
 800459c:	2000021c 	.word	0x2000021c

080045a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_IncTick+0x1c>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_IncTick+0x20>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	4a03      	ldr	r2, [pc, #12]	@ (80045bc <HAL_IncTick+0x1c>)
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20001258 	.word	0x20001258
 80045c0:	20000220 	.word	0x20000220

080045c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return uwTick;
 80045c8:	4b03      	ldr	r3, [pc, #12]	@ (80045d8 <HAL_GetTick+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20001258 	.word	0x20001258

080045dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3360      	adds	r3, #96	@ 0x60
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <LL_ADC_SetOffset+0x44>)
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	03fff000 	.word	0x03fff000

0800468c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3360      	adds	r3, #96	@ 0x60
 800469a:	461a      	mov	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3360      	adds	r3, #96	@ 0x60
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	431a      	orrs	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3360      	adds	r3, #96	@ 0x60
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	431a      	orrs	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3360      	adds	r3, #96	@ 0x60
 8004734:	461a      	mov	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	431a      	orrs	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	615a      	str	r2, [r3, #20]
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b087      	sub	sp, #28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3330      	adds	r3, #48	@ 0x30
 80047b6:	461a      	mov	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	4413      	add	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	211f      	movs	r1, #31
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	401a      	ands	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	f003 011f 	and.w	r1, r3, #31
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3314      	adds	r3, #20
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0e5b      	lsrs	r3, r3, #25
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	4413      	add	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	0d1b      	lsrs	r3, r3, #20
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2107      	movs	r1, #7
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0d1b      	lsrs	r3, r3, #20
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	431a      	orrs	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004894:	43db      	mvns	r3, r3
 8004896:	401a      	ands	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f003 0318 	and.w	r3, r3, #24
 800489e:	4908      	ldr	r1, [pc, #32]	@ (80048c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80048a0:	40d9      	lsrs	r1, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	400b      	ands	r3, r1
 80048a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	0007ffff 	.word	0x0007ffff

080048c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 031f 	and.w	r3, r3, #31
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800490c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6093      	str	r3, [r2, #8]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004934:	d101      	bne.n	800493a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800495c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004984:	d101      	bne.n	800498a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <LL_ADC_IsEnabled+0x18>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <LL_ADC_IsEnabled+0x1a>
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d101      	bne.n	8004a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d101      	bne.n	8004a4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b089      	sub	sp, #36	@ 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1a9      	b.n	8004dca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff f947 	bl	8003d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff3f 	bl	8004920 <LL_ADC_IsDeepPowerDownEnabled>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff25 	bl	80048fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff5a 	bl	8004970 <LL_ADC_IsInternalRegulatorEnabled>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d115      	bne.n	8004aee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff3e 	bl	8004948 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004acc:	4b9c      	ldr	r3, [pc, #624]	@ (8004d40 <HAL_ADC_Init+0x2e4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	4a9c      	ldr	r2, [pc, #624]	@ (8004d44 <HAL_ADC_Init+0x2e8>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	3301      	adds	r3, #1
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ae0:	e002      	b.n	8004ae8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f9      	bne.n	8004ae2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ff3c 	bl	8004970 <LL_ADC_IsInternalRegulatorEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	f043 0210 	orr.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff75 	bl	8004a0e <LL_ADC_REG_IsConversionOngoing>
 8004b24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 8142 	bne.w	8004db8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 813e 	bne.w	8004db8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b44:	f043 0202 	orr.w	r2, r3, #2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff35 	bl	80049c0 <LL_ADC_IsEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d141      	bne.n	8004be0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b64:	d004      	beq.n	8004b70 <HAL_ADC_Init+0x114>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a77      	ldr	r2, [pc, #476]	@ (8004d48 <HAL_ADC_Init+0x2ec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10f      	bne.n	8004b90 <HAL_ADC_Init+0x134>
 8004b70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b74:	f7ff ff24 	bl	80049c0 <LL_ADC_IsEnabled>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4873      	ldr	r0, [pc, #460]	@ (8004d48 <HAL_ADC_Init+0x2ec>)
 8004b7c:	f7ff ff20 	bl	80049c0 <LL_ADC_IsEnabled>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4323      	orrs	r3, r4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e012      	b.n	8004bb6 <HAL_ADC_Init+0x15a>
 8004b90:	486e      	ldr	r0, [pc, #440]	@ (8004d4c <HAL_ADC_Init+0x2f0>)
 8004b92:	f7ff ff15 	bl	80049c0 <LL_ADC_IsEnabled>
 8004b96:	4604      	mov	r4, r0
 8004b98:	486d      	ldr	r0, [pc, #436]	@ (8004d50 <HAL_ADC_Init+0x2f4>)
 8004b9a:	f7ff ff11 	bl	80049c0 <LL_ADC_IsEnabled>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	431c      	orrs	r4, r3
 8004ba2:	486c      	ldr	r0, [pc, #432]	@ (8004d54 <HAL_ADC_Init+0x2f8>)
 8004ba4:	f7ff ff0c 	bl	80049c0 <LL_ADC_IsEnabled>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4323      	orrs	r3, r4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bc2:	d004      	beq.n	8004bce <HAL_ADC_Init+0x172>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8004d48 <HAL_ADC_Init+0x2ec>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADC_Init+0x176>
 8004bce:	4a62      	ldr	r2, [pc, #392]	@ (8004d58 <HAL_ADC_Init+0x2fc>)
 8004bd0:	e000      	b.n	8004bd4 <HAL_ADC_Init+0x178>
 8004bd2:	4a62      	ldr	r2, [pc, #392]	@ (8004d5c <HAL_ADC_Init+0x300>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f7ff fcfe 	bl	80045dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7f5b      	ldrb	r3, [r3, #29]
 8004be4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004bea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004bf0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004bf6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bfe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d106      	bne.n	8004c1c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	045b      	lsls	r3, r3, #17
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	4b48      	ldr	r3, [pc, #288]	@ (8004d60 <HAL_ADC_Init+0x304>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	69b9      	ldr	r1, [r7, #24]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fee4 	bl	8004a34 <LL_ADC_INJ_IsConversionOngoing>
 8004c6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d17f      	bne.n	8004d74 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d17c      	bne.n	8004d74 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c96:	f023 0302 	bic.w	r3, r3, #2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d017      	beq.n	8004cdc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004cba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cc4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6911      	ldr	r1, [r2, #16]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004cda:	e013      	b.n	8004d04 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004cea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d12a      	bne.n	8004d64 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d2a:	4311      	orrs	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d30:	430a      	orrs	r2, r1
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
 8004d3e:	e019      	b.n	8004d74 <HAL_ADC_Init+0x318>
 8004d40:	20000218 	.word	0x20000218
 8004d44:	053e2d63 	.word	0x053e2d63
 8004d48:	50000100 	.word	0x50000100
 8004d4c:	50000400 	.word	0x50000400
 8004d50:	50000500 	.word	0x50000500
 8004d54:	50000600 	.word	0x50000600
 8004d58:	50000300 	.word	0x50000300
 8004d5c:	50000700 	.word	0x50000700
 8004d60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	f023 010f 	bic.w	r1, r3, #15
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d94:	e007      	b.n	8004da6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 020f 	bic.w	r2, r2, #15
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004db6:	e007      	b.n	8004dc8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dbc:	f043 0210 	orr.w	r2, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop

08004dd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de8:	d004      	beq.n	8004df4 <HAL_ADC_Start_DMA+0x20>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5a      	ldr	r2, [pc, #360]	@ (8004f58 <HAL_ADC_Start_DMA+0x184>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_Start_DMA+0x24>
 8004df4:	4b59      	ldr	r3, [pc, #356]	@ (8004f5c <HAL_ADC_Start_DMA+0x188>)
 8004df6:	e000      	b.n	8004dfa <HAL_ADC_Start_DMA+0x26>
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_ADC_Start_DMA+0x18c>)
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fd62 	bl	80048c4 <LL_ADC_GetMultimode>
 8004e00:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fe01 	bl	8004a0e <LL_ADC_REG_IsConversionOngoing>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 809b 	bne.w	8004f4a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_ADC_Start_DMA+0x4e>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e096      	b.n	8004f50 <HAL_ADC_Start_DMA+0x17c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8004f64 <HAL_ADC_Start_DMA+0x190>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d008      	beq.n	8004e46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d002      	beq.n	8004e46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d17a      	bne.n	8004f3c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 ff60 	bl	8005d0c <ADC_Enable>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d16d      	bne.n	8004f32 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f58 <HAL_ADC_Start_DMA+0x184>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_ADC_Start_DMA+0xb4>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	@ (8004f68 <HAL_ADC_Start_DMA+0x194>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d002      	beq.n	8004e84 <HAL_ADC_Start_DMA+0xb0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e003      	b.n	8004e8c <HAL_ADC_Start_DMA+0xb8>
 8004e84:	4b39      	ldr	r3, [pc, #228]	@ (8004f6c <HAL_ADC_Start_DMA+0x198>)
 8004e86:	e001      	b.n	8004e8c <HAL_ADC_Start_DMA+0xb8>
 8004e88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d002      	beq.n	8004e9a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb6:	f023 0206 	bic.w	r2, r3, #6
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ebe:	e002      	b.n	8004ec6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	4a29      	ldr	r2, [pc, #164]	@ (8004f70 <HAL_ADC_Start_DMA+0x19c>)
 8004ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed2:	4a28      	ldr	r2, [pc, #160]	@ (8004f74 <HAL_ADC_Start_DMA+0x1a0>)
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	4a27      	ldr	r2, [pc, #156]	@ (8004f78 <HAL_ADC_Start_DMA+0x1a4>)
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	221c      	movs	r2, #28
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0210 	orr.w	r2, r2, #16
 8004efc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3340      	adds	r3, #64	@ 0x40
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f001 fb37 	bl	8006590 <HAL_DMA_Start_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fd5b 	bl	80049e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004f30:	e00d      	b.n	8004f4e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004f3a:	e008      	b.n	8004f4e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004f48:	e001      	b.n	8004f4e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	50000100 	.word	0x50000100
 8004f5c:	50000300 	.word	0x50000300
 8004f60:	50000700 	.word	0x50000700
 8004f64:	50000600 	.word	0x50000600
 8004f68:	50000500 	.word	0x50000500
 8004f6c:	50000400 	.word	0x50000400
 8004f70:	08005e39 	.word	0x08005e39
 8004f74:	08005f11 	.word	0x08005f11
 8004f78:	08005f2d 	.word	0x08005f2d

08004f7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	@ 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa0:	d004      	beq.n	8004fac <HAL_ADC_IRQHandler+0x30>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a8e      	ldr	r2, [pc, #568]	@ (80051e0 <HAL_ADC_IRQHandler+0x264>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_IRQHandler+0x34>
 8004fac:	4b8d      	ldr	r3, [pc, #564]	@ (80051e4 <HAL_ADC_IRQHandler+0x268>)
 8004fae:	e000      	b.n	8004fb2 <HAL_ADC_IRQHandler+0x36>
 8004fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80051e8 <HAL_ADC_IRQHandler+0x26c>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc86 	bl	80048c4 <LL_ADC_GetMultimode>
 8004fb8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <HAL_ADC_IRQHandler+0x78>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 f808 	bl	8005ffc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_ADC_IRQHandler+0x8c>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8094 	beq.w	800513c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 808e 	beq.w	800513c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fb9f 	bl	8004780 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d072      	beq.n	800512e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a64      	ldr	r2, [pc, #400]	@ (80051e0 <HAL_ADC_IRQHandler+0x264>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_ADC_IRQHandler+0xea>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a65      	ldr	r2, [pc, #404]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d002      	beq.n	8005062 <HAL_ADC_IRQHandler+0xe6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	e003      	b.n	800506a <HAL_ADC_IRQHandler+0xee>
 8005062:	4b63      	ldr	r3, [pc, #396]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 8005064:	e001      	b.n	800506a <HAL_ADC_IRQHandler+0xee>
 8005066:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	4293      	cmp	r3, r2
 8005070:	d008      	beq.n	8005084 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b05      	cmp	r3, #5
 800507c:	d002      	beq.n	8005084 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b09      	cmp	r3, #9
 8005082:	d104      	bne.n	800508e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	e014      	b.n	80050b8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a53      	ldr	r2, [pc, #332]	@ (80051e0 <HAL_ADC_IRQHandler+0x264>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_ADC_IRQHandler+0x130>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a53      	ldr	r2, [pc, #332]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d002      	beq.n	80050a8 <HAL_ADC_IRQHandler+0x12c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	e003      	b.n	80050b0 <HAL_ADC_IRQHandler+0x134>
 80050a8:	4b51      	ldr	r3, [pc, #324]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 80050aa:	e001      	b.n	80050b0 <HAL_ADC_IRQHandler+0x134>
 80050ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050b0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d135      	bne.n	800512e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d12e      	bne.n	800512e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fc9a 	bl	8004a0e <LL_ADC_REG_IsConversionOngoing>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11a      	bne.n	8005116 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 020c 	bic.w	r2, r2, #12
 80050ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d112      	bne.n	800512e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510c:	f043 0201 	orr.w	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005114:	e00b      	b.n	800512e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511a:	f043 0210 	orr.w	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f984 	bl	800543c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	220c      	movs	r2, #12
 800513a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_ADC_IRQHandler+0x1d4>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80b3 	beq.w	80052c2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80ad 	beq.w	80052c2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005178:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fb3a 	bl	80047fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 800518a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff faf5 	bl	8004780 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005196:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <HAL_ADC_IRQHandler+0x264>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_ADC_IRQHandler+0x23a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a11      	ldr	r2, [pc, #68]	@ (80051ec <HAL_ADC_IRQHandler+0x270>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d002      	beq.n	80051b2 <HAL_ADC_IRQHandler+0x236>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	e003      	b.n	80051ba <HAL_ADC_IRQHandler+0x23e>
 80051b2:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <HAL_ADC_IRQHandler+0x274>)
 80051b4:	e001      	b.n	80051ba <HAL_ADC_IRQHandler+0x23e>
 80051b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	4293      	cmp	r3, r2
 80051c0:	d008      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d002      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b07      	cmp	r3, #7
 80051d2:	d10f      	bne.n	80051f4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	e01f      	b.n	800521e <HAL_ADC_IRQHandler+0x2a2>
 80051de:	bf00      	nop
 80051e0:	50000100 	.word	0x50000100
 80051e4:	50000300 	.word	0x50000300
 80051e8:	50000700 	.word	0x50000700
 80051ec:	50000500 	.word	0x50000500
 80051f0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a8b      	ldr	r2, [pc, #556]	@ (8005428 <HAL_ADC_IRQHandler+0x4ac>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_ADC_IRQHandler+0x296>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a8a      	ldr	r2, [pc, #552]	@ (800542c <HAL_ADC_IRQHandler+0x4b0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d002      	beq.n	800520e <HAL_ADC_IRQHandler+0x292>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	e003      	b.n	8005216 <HAL_ADC_IRQHandler+0x29a>
 800520e:	4b88      	ldr	r3, [pc, #544]	@ (8005430 <HAL_ADC_IRQHandler+0x4b4>)
 8005210:	e001      	b.n	8005216 <HAL_ADC_IRQHandler+0x29a>
 8005212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005216:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d047      	beq.n	80052b4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_ADC_IRQHandler+0x2c2>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d03f      	beq.n	80052b4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800523a:	2b00      	cmp	r3, #0
 800523c:	d13a      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d133      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d12e      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fbea 	bl	8004a34 <LL_ADC_INJ_IsConversionOngoing>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11a      	bne.n	800529c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005274:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d112      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	65da      	str	r2, [r3, #92]	@ 0x5c
 800529a:	e00b      	b.n	80052b4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	f043 0210 	orr.w	r2, r3, #16
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ac:	f043 0201 	orr.w	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fe79 	bl	8005fac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2260      	movs	r2, #96	@ 0x60
 80052c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d011      	beq.n	80052f0 <HAL_ADC_IRQHandler+0x374>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8be 	bl	8005464 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2280      	movs	r2, #128	@ 0x80
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d012      	beq.n	8005320 <HAL_ADC_IRQHandler+0x3a4>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fe5f 	bl	8005fd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005326:	2b00      	cmp	r3, #0
 8005328:	d012      	beq.n	8005350 <HAL_ADC_IRQHandler+0x3d4>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005338:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fe51 	bl	8005fe8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800534e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b00      	cmp	r3, #0
 8005358:	d043      	beq.n	80053e2 <HAL_ADC_IRQHandler+0x466>
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03e      	beq.n	80053e2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800536c:	2301      	movs	r3, #1
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005370:	e021      	b.n	80053b6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d015      	beq.n	80053a4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005380:	d004      	beq.n	800538c <HAL_ADC_IRQHandler+0x410>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a28      	ldr	r2, [pc, #160]	@ (8005428 <HAL_ADC_IRQHandler+0x4ac>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d101      	bne.n	8005390 <HAL_ADC_IRQHandler+0x414>
 800538c:	4b29      	ldr	r3, [pc, #164]	@ (8005434 <HAL_ADC_IRQHandler+0x4b8>)
 800538e:	e000      	b.n	8005392 <HAL_ADC_IRQHandler+0x416>
 8005390:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <HAL_ADC_IRQHandler+0x4bc>)
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff faa4 	bl	80048e0 <LL_ADC_GetMultiDMATransfer>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800539e:	2301      	movs	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a2:	e008      	b.n	80053b6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80053b2:	2301      	movs	r3, #1
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10e      	bne.n	80053da <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053cc:	f043 0202 	orr.w	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f84f 	bl	8005478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2210      	movs	r2, #16
 80053e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d018      	beq.n	800541e <HAL_ADC_IRQHandler+0x4a2>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d013      	beq.n	800541e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005406:	f043 0208 	orr.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005416:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fdd1 	bl	8005fc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800541e:	bf00      	nop
 8005420:	3728      	adds	r7, #40	@ 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	50000100 	.word	0x50000100
 800542c:	50000500 	.word	0x50000500
 8005430:	50000400 	.word	0x50000400
 8005434:	50000300 	.word	0x50000300
 8005438:	50000700 	.word	0x50000700

0800543c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b0b6      	sub	sp, #216	@ 0xd8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x24>
 80054aa:	2302      	movs	r3, #2
 80054ac:	f000 bc13 	b.w	8005cd6 <HAL_ADC_ConfigChannel+0x84a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff faa6 	bl	8004a0e <LL_ADC_REG_IsConversionOngoing>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 83f3 	bne.w	8005cb0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7ff f965 	bl	80047a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fa94 	bl	8004a0e <LL_ADC_REG_IsConversionOngoing>
 80054e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff faa0 	bl	8004a34 <LL_ADC_INJ_IsConversionOngoing>
 80054f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 81d9 	bne.w	80058b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 81d4 	bne.w	80058b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005514:	d10f      	bne.n	8005536 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	4619      	mov	r1, r3
 8005522:	f7ff f97f 	bl	8004824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f913 	bl	800475a <LL_ADC_SetSamplingTimeCommonConfig>
 8005534:	e00e      	b.n	8005554 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6819      	ldr	r1, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	461a      	mov	r2, r3
 8005544:	f7ff f96e 	bl	8004824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff f903 	bl	800475a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d022      	beq.n	80055bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6919      	ldr	r1, [r3, #16]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005586:	f7ff f85d 	bl	8004644 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6919      	ldr	r1, [r3, #16]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	461a      	mov	r2, r3
 8005598:	f7ff f8a9 	bl	80046ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d102      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x126>
 80055ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055b0:	e000      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x128>
 80055b2:	2300      	movs	r3, #0
 80055b4:	461a      	mov	r2, r3
 80055b6:	f7ff f8b5 	bl	8004724 <LL_ADC_SetOffsetSaturation>
 80055ba:	e17b      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f862 	bl	800468c <LL_ADC_GetOffsetChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x15c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f857 	bl	800468c <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	e01e      	b.n	8005626 <HAL_ADC_ConfigChannel+0x19a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff f84c 	bl	800468c <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800560a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800560e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005616:	2320      	movs	r3, #32
 8005618:	e004      	b.n	8005624 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800561a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_ADC_ConfigChannel+0x1b2>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0e9b      	lsrs	r3, r3, #26
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	e018      	b.n	8005670 <HAL_ADC_ConfigChannel+0x1e4>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800565a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e004      	b.n	8005670 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005670:	429a      	cmp	r2, r3
 8005672:	d106      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f81b 	bl	80046b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe ffff 	bl	800468c <LL_ADC_GetOffsetChannel>
 800568e:	4603      	mov	r3, r0
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_ADC_ConfigChannel+0x222>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fff4 	bl	800468c <LL_ADC_GetOffsetChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	0e9b      	lsrs	r3, r3, #26
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	e01e      	b.n	80056ec <HAL_ADC_ConfigChannel+0x260>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe ffe9 	bl	800468c <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80056cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80056d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80056dc:	2320      	movs	r3, #32
 80056de:	e004      	b.n	80056ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80056e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x278>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0e9b      	lsrs	r3, r3, #26
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	e018      	b.n	8005736 <HAL_ADC_ConfigChannel+0x2aa>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800571c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005720:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005728:	2320      	movs	r3, #32
 800572a:	e004      	b.n	8005736 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800572c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005736:	429a      	cmp	r2, r3
 8005738:	d106      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe ffb8 	bl	80046b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2102      	movs	r1, #2
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe ff9c 	bl	800468c <LL_ADC_GetOffsetChannel>
 8005754:	4603      	mov	r3, r0
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x2e8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe ff91 	bl	800468c <LL_ADC_GetOffsetChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	0e9b      	lsrs	r3, r3, #26
 800576e:	f003 021f 	and.w	r2, r3, #31
 8005772:	e01e      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x326>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe ff86 	bl	800468c <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800579a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80057a2:	2320      	movs	r3, #32
 80057a4:	e004      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80057a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x33e>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	0e9b      	lsrs	r3, r3, #26
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	e016      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x36c>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80057dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80057e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80057ea:	2320      	movs	r3, #32
 80057ec:	e004      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80057ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d106      	bne.n	800580a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2200      	movs	r2, #0
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe ff57 	bl	80046b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2103      	movs	r1, #3
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe ff3b 	bl	800468c <LL_ADC_GetOffsetChannel>
 8005816:	4603      	mov	r3, r0
 8005818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <HAL_ADC_ConfigChannel+0x3aa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2103      	movs	r1, #3
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe ff30 	bl	800468c <LL_ADC_GetOffsetChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	0e9b      	lsrs	r3, r3, #26
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	e017      	b.n	8005866 <HAL_ADC_ConfigChannel+0x3da>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2103      	movs	r1, #3
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe ff25 	bl	800468c <LL_ADC_GetOffsetChannel>
 8005842:	4603      	mov	r3, r0
 8005844:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800584e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005850:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800585c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_ADC_ConfigChannel+0x3f2>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	0e9b      	lsrs	r3, r3, #26
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	e011      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x416>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800588c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800588e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005896:	2320      	movs	r3, #32
 8005898:	e003      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800589a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d106      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	2103      	movs	r1, #3
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe ff02 	bl	80046b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff f881 	bl	80049c0 <LL_ADC_IsEnabled>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 813d 	bne.w	8005b40 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fe ffd2 	bl	800487c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4aa2      	ldr	r2, [pc, #648]	@ (8005b68 <HAL_ADC_ConfigChannel+0x6dc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f040 812e 	bne.w	8005b40 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <HAL_ADC_ConfigChannel+0x480>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	3301      	adds	r3, #1
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2b09      	cmp	r3, #9
 8005902:	bf94      	ite	ls
 8005904:	2301      	movls	r3, #1
 8005906:	2300      	movhi	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e019      	b.n	8005940 <HAL_ADC_ConfigChannel+0x4b4>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800591a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800591c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800591e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005924:	2320      	movs	r3, #32
 8005926:	e003      	b.n	8005930 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	3301      	adds	r3, #1
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2b09      	cmp	r3, #9
 8005938:	bf94      	ite	ls
 800593a:	2301      	movls	r3, #1
 800593c:	2300      	movhi	r3, #0
 800593e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005940:	2b00      	cmp	r3, #0
 8005942:	d079      	beq.n	8005a38 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x4d4>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	3301      	adds	r3, #1
 8005958:	069b      	lsls	r3, r3, #26
 800595a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800595e:	e015      	b.n	800598c <HAL_ADC_ConfigChannel+0x500>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800596e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005970:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005978:	2320      	movs	r3, #32
 800597a:	e003      	b.n	8005984 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800597c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597e:	fab3 f383 	clz	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	3301      	adds	r3, #1
 8005986:	069b      	lsls	r3, r3, #26
 8005988:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_ADC_ConfigChannel+0x520>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	0e9b      	lsrs	r3, r3, #26
 800599e:	3301      	adds	r3, #1
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	e017      	b.n	80059dc <HAL_ADC_ConfigChannel+0x550>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80059ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80059be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80059c4:	2320      	movs	r3, #32
 80059c6:	e003      	b.n	80059d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80059c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x576>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	0e9b      	lsrs	r3, r3, #26
 80059f2:	3301      	adds	r3, #1
 80059f4:	f003 021f 	and.w	r2, r3, #31
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	051b      	lsls	r3, r3, #20
 8005a00:	e018      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x5a8>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	e003      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	f003 021f 	and.w	r2, r3, #31
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a34:	430b      	orrs	r3, r1
 8005a36:	e07e      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x5c8>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e9b      	lsrs	r3, r3, #26
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	069b      	lsls	r3, r3, #26
 8005a4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a52:	e015      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x5f4>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	069b      	lsls	r3, r3, #26
 8005a7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x614>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	0e9b      	lsrs	r3, r3, #26
 8005a92:	3301      	adds	r3, #1
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	e017      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x644>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	fa93 f3a3 	rbit	r3, r3
 8005aac:	61fb      	str	r3, [r7, #28]
  return result;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	e003      	b.n	8005ac4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2101      	movs	r1, #1
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x670>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0e9b      	lsrs	r3, r3, #26
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	3b1e      	subs	r3, #30
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005afa:	e01b      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x6a8>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	613b      	str	r3, [r7, #16]
  return result;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	f003 021f 	and.w	r2, r3, #31
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3b1e      	subs	r3, #30
 8005b2e:	051b      	lsls	r3, r3, #20
 8005b30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7fe fe72 	bl	8004824 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b09      	ldr	r3, [pc, #36]	@ (8005b6c <HAL_ADC_ConfigChannel+0x6e0>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80be 	beq.w	8005cca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b56:	d004      	beq.n	8005b62 <HAL_ADC_ConfigChannel+0x6d6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <HAL_ADC_ConfigChannel+0x6e4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10a      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x6ec>
 8005b62:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <HAL_ADC_ConfigChannel+0x6e8>)
 8005b64:	e009      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x6ee>
 8005b66:	bf00      	nop
 8005b68:	407f0000 	.word	0x407f0000
 8005b6c:	80080000 	.word	0x80080000
 8005b70:	50000100 	.word	0x50000100
 8005b74:	50000300 	.word	0x50000300
 8005b78:	4b59      	ldr	r3, [pc, #356]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fd54 	bl	8004628 <LL_ADC_GetCommonPathInternalCh>
 8005b80:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a56      	ldr	r2, [pc, #344]	@ (8005ce4 <HAL_ADC_ConfigChannel+0x858>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_ADC_ConfigChannel+0x70c>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a55      	ldr	r2, [pc, #340]	@ (8005ce8 <HAL_ADC_ConfigChannel+0x85c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d13a      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d134      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bac:	d005      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x72e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8005cec <HAL_ADC_ConfigChannel+0x860>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f040 8085 	bne.w	8005cc4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc2:	d004      	beq.n	8005bce <HAL_ADC_ConfigChannel+0x742>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a49      	ldr	r2, [pc, #292]	@ (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x746>
 8005bce:	4a49      	ldr	r2, [pc, #292]	@ (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005bd0:	e000      	b.n	8005bd4 <HAL_ADC_ConfigChannel+0x748>
 8005bd2:	4a43      	ldr	r2, [pc, #268]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe fd0f 	bl	8004602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005be4:	4b44      	ldr	r3, [pc, #272]	@ (8005cf8 <HAL_ADC_ConfigChannel+0x86c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	4a44      	ldr	r2, [pc, #272]	@ (8005cfc <HAL_ADC_ConfigChannel+0x870>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005bfe:	e002      	b.n	8005c06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f9      	bne.n	8005c00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c0c:	e05a      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	@ (8005d00 <HAL_ADC_ConfigChannel+0x874>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d125      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11f      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a31      	ldr	r2, [pc, #196]	@ (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d104      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x7ac>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a34      	ldr	r2, [pc, #208]	@ (8005d04 <HAL_ADC_ConfigChannel+0x878>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d047      	beq.n	8005cc8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c40:	d004      	beq.n	8005c4c <HAL_ADC_ConfigChannel+0x7c0>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d101      	bne.n	8005c50 <HAL_ADC_ConfigChannel+0x7c4>
 8005c4c:	4a29      	ldr	r2, [pc, #164]	@ (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005c4e:	e000      	b.n	8005c52 <HAL_ADC_ConfigChannel+0x7c6>
 8005c50:	4a23      	ldr	r2, [pc, #140]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7fe fcd0 	bl	8004602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c62:	e031      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a27      	ldr	r2, [pc, #156]	@ (8005d08 <HAL_ADC_ConfigChannel+0x87c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d12d      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d127      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c8c:	d004      	beq.n	8005c98 <HAL_ADC_ConfigChannel+0x80c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <HAL_ADC_ConfigChannel+0x864>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d101      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x810>
 8005c98:	4a16      	ldr	r2, [pc, #88]	@ (8005cf4 <HAL_ADC_ConfigChannel+0x868>)
 8005c9a:	e000      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x812>
 8005c9c:	4a10      	ldr	r2, [pc, #64]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x854>)
 8005c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ca2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe fcaa 	bl	8004602 <LL_ADC_SetCommonPathInternalCh>
 8005cae:	e00c      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005cc2:	e002      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005cd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	37d8      	adds	r7, #216	@ 0xd8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	50000700 	.word	0x50000700
 8005ce4:	c3210000 	.word	0xc3210000
 8005ce8:	90c00010 	.word	0x90c00010
 8005cec:	50000600 	.word	0x50000600
 8005cf0:	50000100 	.word	0x50000100
 8005cf4:	50000300 	.word	0x50000300
 8005cf8:	20000218 	.word	0x20000218
 8005cfc:	053e2d63 	.word	0x053e2d63
 8005d00:	c7520000 	.word	0xc7520000
 8005d04:	50000500 	.word	0x50000500
 8005d08:	cb840000 	.word	0xcb840000

08005d0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fe4f 	bl	80049c0 <LL_ADC_IsEnabled>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d176      	bne.n	8005e16 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e20 <ADC_Enable+0x114>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3a:	f043 0210 	orr.w	r2, r3, #16
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e062      	b.n	8005e18 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fe1e 	bl	8004998 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d64:	d004      	beq.n	8005d70 <ADC_Enable+0x64>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e24 <ADC_Enable+0x118>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <ADC_Enable+0x68>
 8005d70:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <ADC_Enable+0x11c>)
 8005d72:	e000      	b.n	8005d76 <ADC_Enable+0x6a>
 8005d74:	4b2d      	ldr	r3, [pc, #180]	@ (8005e2c <ADC_Enable+0x120>)
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fc56 	bl	8004628 <LL_ADC_GetCommonPathInternalCh>
 8005d7c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d013      	beq.n	8005dae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d86:	4b2a      	ldr	r3, [pc, #168]	@ (8005e30 <ADC_Enable+0x124>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	4a29      	ldr	r2, [pc, #164]	@ (8005e34 <ADC_Enable+0x128>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	099b      	lsrs	r3, r3, #6
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	4613      	mov	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005da0:	e002      	b.n	8005da8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f9      	bne.n	8005da2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005dae:	f7fe fc09 	bl	80045c4 <HAL_GetTick>
 8005db2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005db4:	e028      	b.n	8005e08 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fe00 	bl	80049c0 <LL_ADC_IsEnabled>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fde4 	bl	8004998 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005dd0:	f7fe fbf8 	bl	80045c4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d914      	bls.n	8005e08 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00d      	beq.n	8005e08 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	f043 0210 	orr.w	r2, r3, #16
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dfc:	f043 0201 	orr.w	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e007      	b.n	8005e18 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d1cf      	bne.n	8005db6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	8000003f 	.word	0x8000003f
 8005e24:	50000100 	.word	0x50000100
 8005e28:	50000300 	.word	0x50000300
 8005e2c:	50000700 	.word	0x50000700
 8005e30:	20000218 	.word	0x20000218
 8005e34:	053e2d63 	.word	0x053e2d63

08005e38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d14b      	bne.n	8005eea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d021      	beq.n	8005eb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fc85 	bl	8004780 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d032      	beq.n	8005ee2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12b      	bne.n	8005ee2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11f      	bne.n	8005ee2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005eae:	e018      	b.n	8005ee2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d111      	bne.n	8005ee2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eda:	f043 0201 	orr.w	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff faaa 	bl	800543c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ee8:	e00e      	b.n	8005f08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fabe 	bl	8005478 <HAL_ADC_ErrorCallback>
}
 8005efc:	e004      	b.n	8005f08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fa96 	bl	8005450 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fa90 	bl	8005478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <LL_ADC_IsEnabled>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <LL_ADC_IsEnabled+0x18>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <LL_ADC_IsEnabled+0x1a>
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_ADC_REG_IsConversionOngoing>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d101      	bne.n	8005f9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b0a1      	sub	sp, #132	@ 0x84
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800602a:	2302      	movs	r3, #2
 800602c:	e0e7      	b.n	80061fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006036:	2300      	movs	r3, #0
 8006038:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800603a:	2300      	movs	r3, #0
 800603c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006046:	d102      	bne.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006048:	4b6f      	ldr	r3, [pc, #444]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	e009      	b.n	8006062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6e      	ldr	r2, [pc, #440]	@ (800620c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d102      	bne.n	800605e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006058:	4b6d      	ldr	r3, [pc, #436]	@ (8006210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	e001      	b.n	8006062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0be      	b.n	80061fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ff7f 	bl	8005f86 <LL_ADC_REG_IsConversionOngoing>
 8006088:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff ff79 	bl	8005f86 <LL_ADC_REG_IsConversionOngoing>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	f040 80a0 	bne.w	80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800609c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 809c 	bne.w	80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ac:	d004      	beq.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a55      	ldr	r2, [pc, #340]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d101      	bne.n	80060bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80060b8:	4b56      	ldr	r3, [pc, #344]	@ (8006214 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80060ba:	e000      	b.n	80060be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80060bc:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80060be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d04b      	beq.n	8006160 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80060c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060da:	035b      	lsls	r3, r3, #13
 80060dc:	430b      	orrs	r3, r1
 80060de:	431a      	orrs	r2, r3
 80060e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ec:	d004      	beq.n	80060f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a45      	ldr	r2, [pc, #276]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10f      	bne.n	8006118 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80060f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80060fc:	f7ff ff30 	bl	8005f60 <LL_ADC_IsEnabled>
 8006100:	4604      	mov	r4, r0
 8006102:	4841      	ldr	r0, [pc, #260]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006104:	f7ff ff2c 	bl	8005f60 <LL_ADC_IsEnabled>
 8006108:	4603      	mov	r3, r0
 800610a:	4323      	orrs	r3, r4
 800610c:	2b00      	cmp	r3, #0
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e012      	b.n	800613e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006118:	483c      	ldr	r0, [pc, #240]	@ (800620c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800611a:	f7ff ff21 	bl	8005f60 <LL_ADC_IsEnabled>
 800611e:	4604      	mov	r4, r0
 8006120:	483b      	ldr	r0, [pc, #236]	@ (8006210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006122:	f7ff ff1d 	bl	8005f60 <LL_ADC_IsEnabled>
 8006126:	4603      	mov	r3, r0
 8006128:	431c      	orrs	r4, r3
 800612a:	483c      	ldr	r0, [pc, #240]	@ (800621c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800612c:	f7ff ff18 	bl	8005f60 <LL_ADC_IsEnabled>
 8006130:	4603      	mov	r3, r0
 8006132:	4323      	orrs	r3, r4
 8006134:	2b00      	cmp	r3, #0
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d056      	beq.n	80061f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800614a:	f023 030f 	bic.w	r3, r3, #15
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6811      	ldr	r1, [r2, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	430a      	orrs	r2, r1
 8006158:	431a      	orrs	r2, r3
 800615a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800615c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800615e:	e047      	b.n	80061f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800616a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006174:	d004      	beq.n	8006180 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10f      	bne.n	80061a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006180:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006184:	f7ff feec 	bl	8005f60 <LL_ADC_IsEnabled>
 8006188:	4604      	mov	r4, r0
 800618a:	481f      	ldr	r0, [pc, #124]	@ (8006208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800618c:	f7ff fee8 	bl	8005f60 <LL_ADC_IsEnabled>
 8006190:	4603      	mov	r3, r0
 8006192:	4323      	orrs	r3, r4
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e012      	b.n	80061c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80061a0:	481a      	ldr	r0, [pc, #104]	@ (800620c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80061a2:	f7ff fedd 	bl	8005f60 <LL_ADC_IsEnabled>
 80061a6:	4604      	mov	r4, r0
 80061a8:	4819      	ldr	r0, [pc, #100]	@ (8006210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80061aa:	f7ff fed9 	bl	8005f60 <LL_ADC_IsEnabled>
 80061ae:	4603      	mov	r3, r0
 80061b0:	431c      	orrs	r4, r3
 80061b2:	481a      	ldr	r0, [pc, #104]	@ (800621c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80061b4:	f7ff fed4 	bl	8005f60 <LL_ADC_IsEnabled>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4323      	orrs	r3, r4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d012      	beq.n	80061f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80061ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80061d2:	f023 030f 	bic.w	r3, r3, #15
 80061d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80061d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061da:	e009      	b.n	80061f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e0:	f043 0220 	orr.w	r2, r3, #32
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80061ee:	e000      	b.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3784      	adds	r7, #132	@ 0x84
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	50000100 	.word	0x50000100
 800620c:	50000400 	.word	0x50000400
 8006210:	50000500 	.word	0x50000500
 8006214:	50000300 	.word	0x50000300
 8006218:	50000700 	.word	0x50000700
 800621c:	50000600 	.word	0x50000600

08006220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <__NVIC_SetPriorityGrouping+0x44>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800623c:	4013      	ands	r3, r2
 800623e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800624c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006252:	4a04      	ldr	r2, [pc, #16]	@ (8006264 <__NVIC_SetPriorityGrouping+0x44>)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	60d3      	str	r3, [r2, #12]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800626c:	4b04      	ldr	r3, [pc, #16]	@ (8006280 <__NVIC_GetPriorityGrouping+0x18>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	f003 0307 	and.w	r3, r3, #7
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	e000ed00 	.word	0xe000ed00

08006284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	2b00      	cmp	r3, #0
 8006294:	db0b      	blt.n	80062ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	f003 021f 	and.w	r2, r3, #31
 800629c:	4907      	ldr	r1, [pc, #28]	@ (80062bc <__NVIC_EnableIRQ+0x38>)
 800629e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	2001      	movs	r0, #1
 80062a6:	fa00 f202 	lsl.w	r2, r0, r2
 80062aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e100 	.word	0xe000e100

080062c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	6039      	str	r1, [r7, #0]
 80062ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	db0a      	blt.n	80062ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	490c      	ldr	r1, [pc, #48]	@ (800630c <__NVIC_SetPriority+0x4c>)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	0112      	lsls	r2, r2, #4
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	440b      	add	r3, r1
 80062e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062e8:	e00a      	b.n	8006300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4908      	ldr	r1, [pc, #32]	@ (8006310 <__NVIC_SetPriority+0x50>)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	3b04      	subs	r3, #4
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	440b      	add	r3, r1
 80062fe:	761a      	strb	r2, [r3, #24]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	e000e100 	.word	0xe000e100
 8006310:	e000ed00 	.word	0xe000ed00

08006314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006314:	b480      	push	{r7}
 8006316:	b089      	sub	sp, #36	@ 0x24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f1c3 0307 	rsb	r3, r3, #7
 800632e:	2b04      	cmp	r3, #4
 8006330:	bf28      	it	cs
 8006332:	2304      	movcs	r3, #4
 8006334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3304      	adds	r3, #4
 800633a:	2b06      	cmp	r3, #6
 800633c:	d902      	bls.n	8006344 <NVIC_EncodePriority+0x30>
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3b03      	subs	r3, #3
 8006342:	e000      	b.n	8006346 <NVIC_EncodePriority+0x32>
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006348:	f04f 32ff 	mov.w	r2, #4294967295
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	43da      	mvns	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	401a      	ands	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800635c:	f04f 31ff 	mov.w	r1, #4294967295
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	43d9      	mvns	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800636c:	4313      	orrs	r3, r2
         );
}
 800636e:	4618      	mov	r0, r3
 8006370:	3724      	adds	r7, #36	@ 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3b01      	subs	r3, #1
 8006388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800638c:	d301      	bcc.n	8006392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800638e:	2301      	movs	r3, #1
 8006390:	e00f      	b.n	80063b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006392:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <SysTick_Config+0x40>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800639a:	210f      	movs	r1, #15
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	f7ff ff8e 	bl	80062c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063a4:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <SysTick_Config+0x40>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063aa:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <SysTick_Config+0x40>)
 80063ac:	2207      	movs	r2, #7
 80063ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	e000e010 	.word	0xe000e010

080063c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff29 	bl	8006220 <__NVIC_SetPriorityGrouping>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063e4:	f7ff ff40 	bl	8006268 <__NVIC_GetPriorityGrouping>
 80063e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f7ff ff90 	bl	8006314 <NVIC_EncodePriority>
 80063f4:	4602      	mov	r2, r0
 80063f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fa:	4611      	mov	r1, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff ff5f 	bl	80062c0 <__NVIC_SetPriority>
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	4603      	mov	r3, r0
 8006412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ff33 	bl	8006284 <__NVIC_EnableIRQ>
}
 800641e:	bf00      	nop
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff ffa4 	bl	800637c <SysTick_Config>
 8006434:	4603      	mov	r3, r0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e08d      	b.n	800656e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	4b47      	ldr	r3, [pc, #284]	@ (8006578 <HAL_DMA_Init+0x138>)
 800645a:	429a      	cmp	r2, r3
 800645c:	d80f      	bhi.n	800647e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	4b45      	ldr	r3, [pc, #276]	@ (800657c <HAL_DMA_Init+0x13c>)
 8006466:	4413      	add	r3, r2
 8006468:	4a45      	ldr	r2, [pc, #276]	@ (8006580 <HAL_DMA_Init+0x140>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	091b      	lsrs	r3, r3, #4
 8006470:	009a      	lsls	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a42      	ldr	r2, [pc, #264]	@ (8006584 <HAL_DMA_Init+0x144>)
 800647a:	641a      	str	r2, [r3, #64]	@ 0x40
 800647c:	e00e      	b.n	800649c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	4b40      	ldr	r3, [pc, #256]	@ (8006588 <HAL_DMA_Init+0x148>)
 8006486:	4413      	add	r3, r2
 8006488:	4a3d      	ldr	r2, [pc, #244]	@ (8006580 <HAL_DMA_Init+0x140>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	009a      	lsls	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a3c      	ldr	r2, [pc, #240]	@ (800658c <HAL_DMA_Init+0x14c>)
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80064c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa76 	bl	80069e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064fc:	d102      	bne.n	8006504 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006518:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d010      	beq.n	8006544 <HAL_DMA_Init+0x104>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d80c      	bhi.n	8006544 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa96 	bl	8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e008      	b.n	8006556 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40020407 	.word	0x40020407
 800657c:	bffdfff8 	.word	0xbffdfff8
 8006580:	cccccccd 	.word	0xcccccccd
 8006584:	40020000 	.word	0x40020000
 8006588:	bffdfbf8 	.word	0xbffdfbf8
 800658c:	40020400 	.word	0x40020400

08006590 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_DMA_Start_IT+0x20>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e066      	b.n	800667e <HAL_DMA_Start_IT+0xee>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d155      	bne.n	8006670 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f9bb 	bl	8006964 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 020e 	orr.w	r2, r2, #14
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e00f      	b.n	8006628 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0204 	bic.w	r2, r2, #4
 8006616:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 020a 	orr.w	r2, r2, #10
 8006626:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006644:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800665c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e005      	b.n	800667c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006678:	2302      	movs	r3, #2
 800667a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d005      	beq.n	80066aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2204      	movs	r2, #4
 80066a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
 80066a8:	e037      	b.n	800671a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 020e 	bic.w	r2, r2, #14
 80066b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f003 021f 	and.w	r2, r3, #31
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2101      	movs	r1, #1
 80066e8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800670e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006718:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d00d      	beq.n	800676c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2204      	movs	r2, #4
 8006754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e047      	b.n	80067fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 020e 	bic.w	r2, r2, #14
 800677a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006796:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800679a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a0:	f003 021f 	and.w	r2, r3, #31
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	2101      	movs	r1, #1
 80067aa:	fa01 f202 	lsl.w	r2, r1, r2
 80067ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
    }
  }
  return status;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2204      	movs	r2, #4
 8006828:	409a      	lsls	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d026      	beq.n	8006880 <HAL_DMA_IRQHandler+0x7a>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d021      	beq.n	8006880 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0204 	bic.w	r2, r2, #4
 8006858:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685e:	f003 021f 	and.w	r2, r3, #31
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	2104      	movs	r1, #4
 8006868:	fa01 f202 	lsl.w	r2, r1, r2
 800686c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006872:	2b00      	cmp	r3, #0
 8006874:	d071      	beq.n	800695a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800687e:	e06c      	b.n	800695a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2202      	movs	r2, #2
 800688a:	409a      	lsls	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4013      	ands	r3, r2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d02e      	beq.n	80068f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d029      	beq.n	80068f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 020a 	bic.w	r2, r2, #10
 80068ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c8:	f003 021f 	and.w	r2, r3, #31
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	2102      	movs	r1, #2
 80068d2:	fa01 f202 	lsl.w	r2, r1, r2
 80068d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d038      	beq.n	800695a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068f0:	e033      	b.n	800695a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	2208      	movs	r2, #8
 80068fc:	409a      	lsls	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02a      	beq.n	800695c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d025      	beq.n	800695c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 020e 	bic.w	r2, r2, #14
 800691e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006924:	f003 021f 	and.w	r2, r3, #31
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	2101      	movs	r1, #1
 800692e:	fa01 f202 	lsl.w	r2, r1, r2
 8006932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800695a:	bf00      	nop
 800695c:	bf00      	nop
}
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800697a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800698c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006992:	f003 021f 	and.w	r2, r3, #31
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	2101      	movs	r1, #1
 800699c:	fa01 f202 	lsl.w	r2, r1, r2
 80069a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d108      	bne.n	80069c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069c2:	e007      	b.n	80069d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d802      	bhi.n	80069fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069f4:	4b15      	ldr	r3, [pc, #84]	@ (8006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	e001      	b.n	80069fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069fa:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	3b08      	subs	r3, #8
 8006a0a:	4a12      	ldr	r2, [pc, #72]	@ (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a18:	089b      	lsrs	r3, r3, #2
 8006a1a:	009a      	lsls	r2, r3, #2
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4413      	add	r3, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a0b      	ldr	r2, [pc, #44]	@ (8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2201      	movs	r2, #1
 8006a34:	409a      	lsls	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40020407 	.word	0x40020407
 8006a4c:	40020800 	.word	0x40020800
 8006a50:	40020820 	.word	0x40020820
 8006a54:	cccccccd 	.word	0xcccccccd
 8006a58:	40020880 	.word	0x40020880

08006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a08      	ldr	r2, [pc, #32]	@ (8006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a7e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	1000823f 	.word	0x1000823f
 8006aa0:	40020940 	.word	0x40020940

08006aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ab2:	e15a      	b.n	8006d6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	2101      	movs	r1, #1
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 814c 	beq.w	8006d64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d005      	beq.n	8006ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d130      	bne.n	8006b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	2203      	movs	r2, #3
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	43db      	mvns	r3, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4013      	ands	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4013      	ands	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0201 	and.w	r2, r3, #1
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d017      	beq.n	8006b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d123      	bne.n	8006bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	08da      	lsrs	r2, r3, #3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3208      	adds	r2, #8
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	220f      	movs	r2, #15
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	08da      	lsrs	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3208      	adds	r2, #8
 8006bd0:	6939      	ldr	r1, [r7, #16]
 8006bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	2203      	movs	r2, #3
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	43db      	mvns	r3, r3
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4013      	ands	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 0203 	and.w	r2, r3, #3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80a6 	beq.w	8006d64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c18:	4b5b      	ldr	r3, [pc, #364]	@ (8006d88 <HAL_GPIO_Init+0x2e4>)
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006d88 <HAL_GPIO_Init+0x2e4>)
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c24:	4b58      	ldr	r3, [pc, #352]	@ (8006d88 <HAL_GPIO_Init+0x2e4>)
 8006c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c30:	4a56      	ldr	r2, [pc, #344]	@ (8006d8c <HAL_GPIO_Init+0x2e8>)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	089b      	lsrs	r3, r3, #2
 8006c36:	3302      	adds	r3, #2
 8006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	220f      	movs	r2, #15
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4013      	ands	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c5a:	d01f      	beq.n	8006c9c <HAL_GPIO_Init+0x1f8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006d90 <HAL_GPIO_Init+0x2ec>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d019      	beq.n	8006c98 <HAL_GPIO_Init+0x1f4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a4b      	ldr	r2, [pc, #300]	@ (8006d94 <HAL_GPIO_Init+0x2f0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_GPIO_Init+0x1f0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d98 <HAL_GPIO_Init+0x2f4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00d      	beq.n	8006c90 <HAL_GPIO_Init+0x1ec>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a49      	ldr	r2, [pc, #292]	@ (8006d9c <HAL_GPIO_Init+0x2f8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <HAL_GPIO_Init+0x1e8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a48      	ldr	r2, [pc, #288]	@ (8006da0 <HAL_GPIO_Init+0x2fc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d101      	bne.n	8006c88 <HAL_GPIO_Init+0x1e4>
 8006c84:	2305      	movs	r3, #5
 8006c86:	e00a      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c88:	2306      	movs	r3, #6
 8006c8a:	e008      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	e006      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c90:	2303      	movs	r3, #3
 8006c92:	e004      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e002      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	f002 0203 	and.w	r2, r2, #3
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	4093      	lsls	r3, r2
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cae:	4937      	ldr	r1, [pc, #220]	@ (8006d8c <HAL_GPIO_Init+0x2e8>)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cbc:	4b39      	ldr	r3, [pc, #228]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ce0:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	43db      	mvns	r3, r3
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d0a:	4a26      	ldr	r2, [pc, #152]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006d10:	4b24      	ldr	r3, [pc, #144]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d34:	4a1b      	ldr	r2, [pc, #108]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	43db      	mvns	r3, r3
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4013      	ands	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d5e:	4a11      	ldr	r2, [pc, #68]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	3301      	adds	r3, #1
 8006d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f ae9d 	bne.w	8006ab4 <HAL_GPIO_Init+0x10>
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	48000400 	.word	0x48000400
 8006d94:	48000800 	.word	0x48000800
 8006d98:	48000c00 	.word	0x48000c00
 8006d9c:	48001000 	.word	0x48001000
 8006da0:	48001400 	.word	0x48001400
 8006da4:	40010400 	.word	0x40010400

08006da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e001      	b.n	8006dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006df4:	e002      	b.n	8006dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	041a      	lsls	r2, r3, #16
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	43d9      	mvns	r1, r3
 8006e26:	887b      	ldrh	r3, [r7, #2]
 8006e28:	400b      	ands	r3, r1
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e46:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e48:	695a      	ldr	r2, [r3, #20]
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e52:	4a05      	ldr	r2, [pc, #20]	@ (8006e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fb fec4 	bl	8002be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40010400 	.word	0x40010400

08006e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d141      	bne.n	8006efe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e86:	d131      	bne.n	8006eec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e88:	4b47      	ldr	r3, [pc, #284]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8e:	4a46      	ldr	r2, [pc, #280]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e98:	4b43      	ldr	r3, [pc, #268]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ea0:	4a41      	ldr	r2, [pc, #260]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ea8:	4b40      	ldr	r3, [pc, #256]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2232      	movs	r2, #50	@ 0x32
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8006fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	0c9b      	lsrs	r3, r3, #18
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ebe:	e002      	b.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ec6:	4b38      	ldr	r3, [pc, #224]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed2:	d102      	bne.n	8006eda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f2      	bne.n	8006ec0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eda:	4b33      	ldr	r3, [pc, #204]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee6:	d158      	bne.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e057      	b.n	8006f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eec:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006efc:	e04d      	b.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f04:	d141      	bne.n	8006f8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f06:	4b28      	ldr	r3, [pc, #160]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f12:	d131      	bne.n	8006f78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f14:	4b24      	ldr	r3, [pc, #144]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1a:	4a23      	ldr	r2, [pc, #140]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f24:	4b20      	ldr	r3, [pc, #128]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f34:	4b1d      	ldr	r3, [pc, #116]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2232      	movs	r2, #50	@ 0x32
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f40:	fba2 2303 	umull	r2, r3, r2, r3
 8006f44:	0c9b      	lsrs	r3, r3, #18
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f4a:	e002      	b.n	8006f52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f52:	4b15      	ldr	r3, [pc, #84]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f5e:	d102      	bne.n	8006f66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f2      	bne.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f66:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f72:	d112      	bne.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e011      	b.n	8006f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f78:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f88:	e007      	b.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f8a:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f92:	4a05      	ldr	r2, [pc, #20]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40007000 	.word	0x40007000
 8006fac:	20000218 	.word	0x20000218
 8006fb0:	431bde83 	.word	0x431bde83

08006fb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a04      	ldr	r2, [pc, #16]	@ (8006fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fc2:	6093      	str	r3, [r2, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40007000 	.word	0x40007000

08006fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e2fe      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d075      	beq.n	80070de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff2:	4b97      	ldr	r3, [pc, #604]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ffc:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b0c      	cmp	r3, #12
 800700a:	d102      	bne.n	8007012 <HAL_RCC_OscConfig+0x3e>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d002      	beq.n	8007018 <HAL_RCC_OscConfig+0x44>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d10b      	bne.n	8007030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	4b8d      	ldr	r3, [pc, #564]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05b      	beq.n	80070dc <HAL_RCC_OscConfig+0x108>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d157      	bne.n	80070dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e2d9      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007038:	d106      	bne.n	8007048 <HAL_RCC_OscConfig+0x74>
 800703a:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a84      	ldr	r2, [pc, #528]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e01d      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x98>
 8007052:	4b7f      	ldr	r3, [pc, #508]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7e      	ldr	r2, [pc, #504]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b7c      	ldr	r3, [pc, #496]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7b      	ldr	r2, [pc, #492]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 800706c:	4b78      	ldr	r3, [pc, #480]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a77      	ldr	r2, [pc, #476]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b75      	ldr	r3, [pc, #468]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a74      	ldr	r2, [pc, #464]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800707e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fd fa9a 	bl	80045c4 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007094:	f7fd fa96 	bl	80045c4 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	@ 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e29e      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0xc0>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fd fa86 	bl	80045c4 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fd fa82 	bl	80045c4 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	@ 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e28a      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070ce:	4b60      	ldr	r3, [pc, #384]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0xe8>
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d075      	beq.n	80071d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ea:	4b59      	ldr	r3, [pc, #356]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f4:	4b56      	ldr	r3, [pc, #344]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	d102      	bne.n	800710a <HAL_RCC_OscConfig+0x136>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d002      	beq.n	8007110 <HAL_RCC_OscConfig+0x13c>
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d11f      	bne.n	8007150 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007110:	4b4f      	ldr	r3, [pc, #316]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_RCC_OscConfig+0x154>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e25d      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007128:	4b49      	ldr	r3, [pc, #292]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	4946      	ldr	r1, [pc, #280]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800713c:	4b45      	ldr	r3, [pc, #276]	@ (8007254 <HAL_RCC_OscConfig+0x280>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd f9f3 	bl	800452c <HAL_InitTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d043      	beq.n	80071d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e249      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d023      	beq.n	80071a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007158:	4b3d      	ldr	r3, [pc, #244]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3c      	ldr	r2, [pc, #240]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800715e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007164:	f7fd fa2e 	bl	80045c4 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800716c:	f7fd fa2a 	bl	80045c4 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e232      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800717e:	4b34      	ldr	r3, [pc, #208]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718a:	4b31      	ldr	r3, [pc, #196]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	061b      	lsls	r3, r3, #24
 8007198:	492d      	ldr	r1, [pc, #180]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	604b      	str	r3, [r1, #4]
 800719e:	e01a      	b.n	80071d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80071a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fd fa0a 	bl	80045c4 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fd fa06 	bl	80045c4 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e20e      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071c6:	4b22      	ldr	r3, [pc, #136]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1e0>
 80071d2:	e000      	b.n	80071d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d041      	beq.n	8007266 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01c      	beq.n	8007224 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ea:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80071ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f0:	4a17      	ldr	r2, [pc, #92]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fd f9e3 	bl	80045c4 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007202:	f7fd f9df 	bl	80045c4 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e1e7      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007214:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0ef      	beq.n	8007202 <HAL_RCC_OscConfig+0x22e>
 8007222:	e020      	b.n	8007266 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007224:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 8007226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800722a:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <HAL_RCC_OscConfig+0x27c>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007234:	f7fd f9c6 	bl	80045c4 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800723a:	e00d      	b.n	8007258 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723c:	f7fd f9c2 	bl	80045c4 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d906      	bls.n	8007258 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1ca      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
 800724e:	bf00      	nop
 8007250:	40021000 	.word	0x40021000
 8007254:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007258:	4b8c      	ldr	r3, [pc, #560]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800725a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1ea      	bne.n	800723c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 80a6 	beq.w	80073c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007274:	2300      	movs	r3, #0
 8007276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007278:	4b84      	ldr	r3, [pc, #528]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_OscConfig+0x2b4>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <HAL_RCC_OscConfig+0x2b6>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4b7f      	ldr	r3, [pc, #508]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007292:	4a7e      	ldr	r2, [pc, #504]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007298:	6593      	str	r3, [r2, #88]	@ 0x58
 800729a:	4b7c      	ldr	r3, [pc, #496]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072aa:	4b79      	ldr	r3, [pc, #484]	@ (8007490 <HAL_RCC_OscConfig+0x4bc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d118      	bne.n	80072e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072b6:	4b76      	ldr	r3, [pc, #472]	@ (8007490 <HAL_RCC_OscConfig+0x4bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a75      	ldr	r2, [pc, #468]	@ (8007490 <HAL_RCC_OscConfig+0x4bc>)
 80072bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c2:	f7fd f97f 	bl	80045c4 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ca:	f7fd f97b 	bl	80045c4 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e183      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007490 <HAL_RCC_OscConfig+0x4bc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d108      	bne.n	8007302 <HAL_RCC_OscConfig+0x32e>
 80072f0:	4b66      	ldr	r3, [pc, #408]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	4a65      	ldr	r2, [pc, #404]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007300:	e024      	b.n	800734c <HAL_RCC_OscConfig+0x378>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b05      	cmp	r3, #5
 8007308:	d110      	bne.n	800732c <HAL_RCC_OscConfig+0x358>
 800730a:	4b60      	ldr	r3, [pc, #384]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	4a5e      	ldr	r2, [pc, #376]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007312:	f043 0304 	orr.w	r3, r3, #4
 8007316:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800731a:	4b5c      	ldr	r3, [pc, #368]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007320:	4a5a      	ldr	r2, [pc, #360]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800732a:	e00f      	b.n	800734c <HAL_RCC_OscConfig+0x378>
 800732c:	4b57      	ldr	r3, [pc, #348]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	4a56      	ldr	r2, [pc, #344]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800733c:	4b53      	ldr	r3, [pc, #332]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	4a52      	ldr	r2, [pc, #328]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007344:	f023 0304 	bic.w	r3, r3, #4
 8007348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d016      	beq.n	8007382 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007354:	f7fd f936 	bl	80045c4 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735a:	e00a      	b.n	8007372 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735c:	f7fd f932 	bl	80045c4 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e138      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007372:	4b46      	ldr	r3, [pc, #280]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ed      	beq.n	800735c <HAL_RCC_OscConfig+0x388>
 8007380:	e015      	b.n	80073ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fd f91f 	bl	80045c4 <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fd f91b 	bl	80045c4 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e121      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073a0:	4b3a      	ldr	r3, [pc, #232]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ed      	bne.n	800738a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d105      	bne.n	80073c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b4:	4b35      	ldr	r3, [pc, #212]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80073b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b8:	4a34      	ldr	r2, [pc, #208]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80073ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d03c      	beq.n	8007446 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01c      	beq.n	800740e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073d4:	4b2d      	ldr	r3, [pc, #180]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073da:	4a2c      	ldr	r2, [pc, #176]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e4:	f7fd f8ee 	bl	80045c4 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ec:	f7fd f8ea 	bl	80045c4 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e0f2      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073fe:	4b23      	ldr	r3, [pc, #140]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0ef      	beq.n	80073ec <HAL_RCC_OscConfig+0x418>
 800740c:	e01b      	b.n	8007446 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800740e:	4b1f      	ldr	r3, [pc, #124]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007414:	4a1d      	ldr	r2, [pc, #116]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741e:	f7fd f8d1 	bl	80045c4 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007426:	f7fd f8cd 	bl	80045c4 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e0d5      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007438:	4b14      	ldr	r3, [pc, #80]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800743a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1ef      	bne.n	8007426 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80c9 	beq.w	80075e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b0c      	cmp	r3, #12
 800745a:	f000 8083 	beq.w	8007564 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d15e      	bne.n	8007524 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007466:	4b09      	ldr	r3, [pc, #36]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a08      	ldr	r2, [pc, #32]	@ (800748c <HAL_RCC_OscConfig+0x4b8>)
 800746c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fd f8a7 	bl	80045c4 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007478:	e00c      	b.n	8007494 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747a:	f7fd f8a3 	bl	80045c4 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d905      	bls.n	8007494 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e0ab      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
 800748c:	40021000 	.word	0x40021000
 8007490:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007494:	4b55      	ldr	r3, [pc, #340]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ec      	bne.n	800747a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a0:	4b52      	ldr	r3, [pc, #328]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	4b52      	ldr	r3, [pc, #328]	@ (80075f0 <HAL_RCC_OscConfig+0x61c>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6a11      	ldr	r1, [r2, #32]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074b0:	3a01      	subs	r2, #1
 80074b2:	0112      	lsls	r2, r2, #4
 80074b4:	4311      	orrs	r1, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80074ba:	0212      	lsls	r2, r2, #8
 80074bc:	4311      	orrs	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074c2:	0852      	lsrs	r2, r2, #1
 80074c4:	3a01      	subs	r2, #1
 80074c6:	0552      	lsls	r2, r2, #21
 80074c8:	4311      	orrs	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074ce:	0852      	lsrs	r2, r2, #1
 80074d0:	3a01      	subs	r2, #1
 80074d2:	0652      	lsls	r2, r2, #25
 80074d4:	4311      	orrs	r1, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074da:	06d2      	lsls	r2, r2, #27
 80074dc:	430a      	orrs	r2, r1
 80074de:	4943      	ldr	r1, [pc, #268]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e4:	4b41      	ldr	r3, [pc, #260]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a40      	ldr	r2, [pc, #256]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f0:	4b3e      	ldr	r3, [pc, #248]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a3d      	ldr	r2, [pc, #244]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fd f862 	bl	80045c4 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fd f85e 	bl	80045c4 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e066      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007516:	4b35      	ldr	r3, [pc, #212]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x530>
 8007522:	e05e      	b.n	80075e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007524:	4b31      	ldr	r3, [pc, #196]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 800752a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800752e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fd f848 	bl	80045c4 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007538:	f7fd f844 	bl	80045c4 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e04c      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800754a:	4b28      	ldr	r3, [pc, #160]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007556:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	4924      	ldr	r1, [pc, #144]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 800755c:	4b25      	ldr	r3, [pc, #148]	@ (80075f4 <HAL_RCC_OscConfig+0x620>)
 800755e:	4013      	ands	r3, r2
 8007560:	60cb      	str	r3, [r1, #12]
 8007562:	e03e      	b.n	80075e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e039      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007570:	4b1e      	ldr	r3, [pc, #120]	@ (80075ec <HAL_RCC_OscConfig+0x618>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f003 0203 	and.w	r2, r3, #3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	429a      	cmp	r2, r3
 8007582:	d12c      	bne.n	80075de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	3b01      	subs	r3, #1
 8007590:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007592:	429a      	cmp	r2, r3
 8007594:	d123      	bne.n	80075de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d11b      	bne.n	80075de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d113      	bne.n	80075de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	3b01      	subs	r3, #1
 80075c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d109      	bne.n	80075de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	3b01      	subs	r3, #1
 80075d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d001      	beq.n	80075e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40021000 	.word	0x40021000
 80075f0:	019f800c 	.word	0x019f800c
 80075f4:	feeefffc 	.word	0xfeeefffc

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e11e      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007610:	4b91      	ldr	r3, [pc, #580]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d910      	bls.n	8007640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b8e      	ldr	r3, [pc, #568]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 020f 	bic.w	r2, r3, #15
 8007626:	498c      	ldr	r1, [pc, #560]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	4313      	orrs	r3, r2
 800762c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800762e:	4b8a      	ldr	r3, [pc, #552]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d001      	beq.n	8007640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e106      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d073      	beq.n	8007734 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b03      	cmp	r3, #3
 8007652:	d129      	bne.n	80076a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007654:	4b81      	ldr	r3, [pc, #516]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e0f4      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007664:	f000 f99e 	bl	80079a4 <RCC_GetSysClockFreqFromPLLSource>
 8007668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4a7c      	ldr	r2, [pc, #496]	@ (8007860 <HAL_RCC_ClockConfig+0x268>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d93f      	bls.n	80076f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007672:	4b7a      	ldr	r3, [pc, #488]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007686:	2b00      	cmp	r3, #0
 8007688:	d033      	beq.n	80076f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800768e:	2b00      	cmp	r3, #0
 8007690:	d12f      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007692:	4b72      	ldr	r3, [pc, #456]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800769a:	4a70      	ldr	r2, [pc, #448]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 800769c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e024      	b.n	80076f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076b0:	4b6a      	ldr	r3, [pc, #424]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0c6      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076c0:	4b66      	ldr	r3, [pc, #408]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0be      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076d0:	f000 f8ce 	bl	8007870 <HAL_RCC_GetSysClockFreq>
 80076d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4a61      	ldr	r2, [pc, #388]	@ (8007860 <HAL_RCC_ClockConfig+0x268>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d909      	bls.n	80076f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076de:	4b5f      	ldr	r3, [pc, #380]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076e6:	4a5d      	ldr	r2, [pc, #372]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80076e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076ee:	2380      	movs	r3, #128	@ 0x80
 80076f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076f2:	4b5a      	ldr	r3, [pc, #360]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f023 0203 	bic.w	r2, r3, #3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4957      	ldr	r1, [pc, #348]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007700:	4313      	orrs	r3, r2
 8007702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fc ff5e 	bl	80045c4 <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770a:	e00a      	b.n	8007722 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800770c:	f7fc ff5a 	bl	80045c4 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e095      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007722:	4b4e      	ldr	r3, [pc, #312]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 020c 	and.w	r2, r3, #12
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	429a      	cmp	r2, r3
 8007732:	d1eb      	bne.n	800770c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d023      	beq.n	8007788 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800774c:	4b43      	ldr	r3, [pc, #268]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	4a42      	ldr	r2, [pc, #264]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007752:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007756:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007764:	4b3d      	ldr	r3, [pc, #244]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800776c:	4a3b      	ldr	r2, [pc, #236]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 800776e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007774:	4b39      	ldr	r3, [pc, #228]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	4936      	ldr	r1, [pc, #216]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
 8007786:	e008      	b.n	800779a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d105      	bne.n	800779a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800778e:	4b33      	ldr	r3, [pc, #204]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	4a32      	ldr	r2, [pc, #200]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007794:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007798:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800779a:	4b2f      	ldr	r3, [pc, #188]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d21d      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f023 020f 	bic.w	r2, r3, #15
 80077b0:	4929      	ldr	r1, [pc, #164]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077b8:	f7fc ff04 	bl	80045c4 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077be:	e00a      	b.n	80077d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c0:	f7fc ff00 	bl	80045c4 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e03b      	b.n	800784e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d6:	4b20      	ldr	r3, [pc, #128]	@ (8007858 <HAL_RCC_ClockConfig+0x260>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d1ed      	bne.n	80077c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4917      	ldr	r1, [pc, #92]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800780e:	4b13      	ldr	r3, [pc, #76]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	490f      	ldr	r1, [pc, #60]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007822:	f000 f825 	bl	8007870 <HAL_RCC_GetSysClockFreq>
 8007826:	4602      	mov	r2, r0
 8007828:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <HAL_RCC_ClockConfig+0x264>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	490c      	ldr	r1, [pc, #48]	@ (8007864 <HAL_RCC_ClockConfig+0x26c>)
 8007834:	5ccb      	ldrb	r3, [r1, r3]
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <HAL_RCC_ClockConfig+0x270>)
 8007840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007842:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <HAL_RCC_ClockConfig+0x274>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc fe70 	bl	800452c <HAL_InitTick>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40022000 	.word	0x40022000
 800785c:	40021000 	.word	0x40021000
 8007860:	04c4b400 	.word	0x04c4b400
 8007864:	0800c164 	.word	0x0800c164
 8007868:	20000218 	.word	0x20000218
 800786c:	2000021c 	.word	0x2000021c

08007870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007876:	4b2c      	ldr	r3, [pc, #176]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
 800787e:	2b04      	cmp	r3, #4
 8007880:	d102      	bne.n	8007888 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007882:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	e047      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007888:	4b27      	ldr	r3, [pc, #156]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b08      	cmp	r3, #8
 8007892:	d102      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007894:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	e03e      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800789a:	4b23      	ldr	r3, [pc, #140]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b0c      	cmp	r3, #12
 80078a4:	d136      	bne.n	8007914 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078a6:	4b20      	ldr	r3, [pc, #128]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3301      	adds	r3, #1
 80078bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d10c      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007930 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	4a16      	ldr	r2, [pc, #88]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ce:	68d2      	ldr	r2, [r2, #12]
 80078d0:	0a12      	lsrs	r2, r2, #8
 80078d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	617b      	str	r3, [r7, #20]
      break;
 80078dc:	e00c      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078de:	4a13      	ldr	r2, [pc, #76]	@ (800792c <HAL_RCC_GetSysClockFreq+0xbc>)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	4a10      	ldr	r2, [pc, #64]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078e8:	68d2      	ldr	r2, [r2, #12]
 80078ea:	0a12      	lsrs	r2, r2, #8
 80078ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]
      break;
 80078f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	0e5b      	lsrs	r3, r3, #25
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e001      	b.n	8007918 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007918:	693b      	ldr	r3, [r7, #16]
}
 800791a:	4618      	mov	r0, r3
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40021000 	.word	0x40021000
 800792c:	00f42400 	.word	0x00f42400
 8007930:	016e3600 	.word	0x016e3600

08007934 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007938:	4b03      	ldr	r3, [pc, #12]	@ (8007948 <HAL_RCC_GetHCLKFreq+0x14>)
 800793a:	681b      	ldr	r3, [r3, #0]
}
 800793c:	4618      	mov	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000218 	.word	0x20000218

0800794c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007950:	f7ff fff0 	bl	8007934 <HAL_RCC_GetHCLKFreq>
 8007954:	4602      	mov	r2, r0
 8007956:	4b06      	ldr	r3, [pc, #24]	@ (8007970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	4904      	ldr	r1, [pc, #16]	@ (8007974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007962:	5ccb      	ldrb	r3, [r1, r3]
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40021000 	.word	0x40021000
 8007974:	0800c174 	.word	0x0800c174

08007978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800797c:	f7ff ffda 	bl	8007934 <HAL_RCC_GetHCLKFreq>
 8007980:	4602      	mov	r2, r0
 8007982:	4b06      	ldr	r3, [pc, #24]	@ (800799c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0adb      	lsrs	r3, r3, #11
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	4904      	ldr	r1, [pc, #16]	@ (80079a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800798e:	5ccb      	ldrb	r3, [r1, r3]
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	0800c174 	.word	0x0800c174

080079a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	3301      	adds	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d10c      	bne.n	80079e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079c8:	4a17      	ldr	r2, [pc, #92]	@ (8007a28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	4a14      	ldr	r2, [pc, #80]	@ (8007a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d2:	68d2      	ldr	r2, [r2, #12]
 80079d4:	0a12      	lsrs	r2, r2, #8
 80079d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	617b      	str	r3, [r7, #20]
    break;
 80079e0:	e00c      	b.n	80079fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e2:	4a12      	ldr	r2, [pc, #72]	@ (8007a2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ec:	68d2      	ldr	r2, [r2, #12]
 80079ee:	0a12      	lsrs	r2, r2, #8
 80079f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]
    break;
 80079fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079fc:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	0e5b      	lsrs	r3, r3, #25
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	3301      	adds	r3, #1
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a16:	687b      	ldr	r3, [r7, #4]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40021000 	.word	0x40021000
 8007a28:	016e3600 	.word	0x016e3600
 8007a2c:	00f42400 	.word	0x00f42400

08007a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a38:	2300      	movs	r3, #0
 8007a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8098 	beq.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a52:	4b43      	ldr	r3, [pc, #268]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a5e:	4b40      	ldr	r3, [pc, #256]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a62:	4a3f      	ldr	r2, [pc, #252]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a76:	2301      	movs	r3, #1
 8007a78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a39      	ldr	r2, [pc, #228]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a86:	f7fc fd9d 	bl	80045c4 <HAL_GetTick>
 8007a8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a8c:	e009      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8e:	f7fc fd99 	bl	80045c4 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d902      	bls.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	74fb      	strb	r3, [r7, #19]
        break;
 8007aa0:	e005      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa2:	4b30      	ldr	r3, [pc, #192]	@ (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0ef      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007aae:	7cfb      	ldrb	r3, [r7, #19]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d159      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007abe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01e      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d019      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ad0:	4b23      	ldr	r3, [pc, #140]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007adc:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aec:	4b1c      	ldr	r3, [pc, #112]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007afc:	4a18      	ldr	r2, [pc, #96]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d016      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0e:	f7fc fd59 	bl	80045c4 <HAL_GetTick>
 8007b12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b14:	e00b      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b16:	f7fc fd55 	bl	80045c4 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d902      	bls.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	74fb      	strb	r3, [r7, #19]
            break;
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0ec      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b3c:	7cfb      	ldrb	r3, [r7, #19]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b42:	4b07      	ldr	r3, [pc, #28]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b50:	4903      	ldr	r1, [pc, #12]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b58:	e008      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b5a:	7cfb      	ldrb	r3, [r7, #19]
 8007b5c:	74bb      	strb	r3, [r7, #18]
 8007b5e:	e005      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b60:	40021000 	.word	0x40021000
 8007b64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b6c:	7c7b      	ldrb	r3, [r7, #17]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d105      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b72:	4ba7      	ldr	r3, [pc, #668]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b76:	4aa6      	ldr	r2, [pc, #664]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b8a:	4ba1      	ldr	r3, [pc, #644]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b90:	f023 0203 	bic.w	r2, r3, #3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	499d      	ldr	r1, [pc, #628]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bac:	4b98      	ldr	r3, [pc, #608]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb2:	f023 020c 	bic.w	r2, r3, #12
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	4995      	ldr	r1, [pc, #596]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bce:	4b90      	ldr	r3, [pc, #576]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	498c      	ldr	r1, [pc, #560]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bf0:	4b87      	ldr	r3, [pc, #540]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	4984      	ldr	r1, [pc, #528]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c12:	4b7f      	ldr	r3, [pc, #508]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	497b      	ldr	r1, [pc, #492]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c34:	4b76      	ldr	r3, [pc, #472]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	4973      	ldr	r1, [pc, #460]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c56:	4b6e      	ldr	r3, [pc, #440]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	496a      	ldr	r1, [pc, #424]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c78:	4b65      	ldr	r3, [pc, #404]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	4962      	ldr	r1, [pc, #392]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca8:	4959      	ldr	r1, [pc, #356]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cbc:	4b54      	ldr	r3, [pc, #336]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	4951      	ldr	r1, [pc, #324]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cde:	4b4c      	ldr	r3, [pc, #304]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	4948      	ldr	r1, [pc, #288]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d015      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d00:	4b43      	ldr	r3, [pc, #268]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0e:	4940      	ldr	r1, [pc, #256]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d1e:	d105      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d20:	4b3b      	ldr	r3, [pc, #236]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	4a3a      	ldr	r2, [pc, #232]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d2a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d015      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d38:	4b35      	ldr	r3, [pc, #212]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d46:	4932      	ldr	r1, [pc, #200]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d56:	d105      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d58:	4b2d      	ldr	r3, [pc, #180]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d62:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d015      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d70:	4b27      	ldr	r3, [pc, #156]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	4924      	ldr	r1, [pc, #144]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d8e:	d105      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d90:	4b1f      	ldr	r3, [pc, #124]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d015      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007da8:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db6:	4916      	ldr	r1, [pc, #88]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc6:	d105      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc8:	4b11      	ldr	r3, [pc, #68]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	4a10      	ldr	r2, [pc, #64]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007de0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	4908      	ldr	r1, [pc, #32]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dfe:	d109      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e00:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	4a02      	ldr	r2, [pc, #8]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e0a:	60d3      	str	r3, [r2, #12]
 8007e0c:	e002      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007e0e:	bf00      	nop
 8007e10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d015      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e20:	4b29      	ldr	r3, [pc, #164]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2e:	4926      	ldr	r1, [pc, #152]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3e:	d105      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e40:	4b21      	ldr	r3, [pc, #132]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	4a20      	ldr	r2, [pc, #128]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d015      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e58:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e66:	4918      	ldr	r1, [pc, #96]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e76:	d105      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e78:	4b13      	ldr	r3, [pc, #76]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	4a12      	ldr	r2, [pc, #72]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d015      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9e:	490a      	ldr	r1, [pc, #40]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eae:	d105      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eb0:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4a04      	ldr	r2, [pc, #16]	@ (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ebc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40021000 	.word	0x40021000

08007ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e054      	b.n	8007f88 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d111      	bne.n	8007f0e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 ff92 	bl	8009e1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a23      	ldr	r2, [pc, #140]	@ (8007f90 <HAL_TIM_Base_Init+0xc4>)
 8007f04:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f001 fadb 	bl	80094dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08003f3d 	.word	0x08003f3d

08007f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e04c      	b.n	8008046 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a26      	ldr	r2, [pc, #152]	@ (8008054 <HAL_TIM_Base_Start+0xc0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d022      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc6:	d01d      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a22      	ldr	r2, [pc, #136]	@ (8008058 <HAL_TIM_Base_Start+0xc4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d018      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a21      	ldr	r2, [pc, #132]	@ (800805c <HAL_TIM_Base_Start+0xc8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d013      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8008060 <HAL_TIM_Base_Start+0xcc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1e      	ldr	r2, [pc, #120]	@ (8008064 <HAL_TIM_Base_Start+0xd0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8008068 <HAL_TIM_Base_Start+0xd4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_TIM_Base_Start+0x70>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800806c <HAL_TIM_Base_Start+0xd8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d115      	bne.n	8008030 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	4b19      	ldr	r3, [pc, #100]	@ (8008070 <HAL_TIM_Base_Start+0xdc>)
 800800c:	4013      	ands	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b06      	cmp	r3, #6
 8008014:	d015      	beq.n	8008042 <HAL_TIM_Base_Start+0xae>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800801c:	d011      	beq.n	8008042 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802e:	e008      	b.n	8008042 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e000      	b.n	8008044 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40013400 	.word	0x40013400
 8008068:	40014000 	.word	0x40014000
 800806c:	40015000 	.word	0x40015000
 8008070:	00010007 	.word	0x00010007

08008074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d001      	beq.n	800808c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e054      	b.n	8008136 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a26      	ldr	r2, [pc, #152]	@ (8008144 <HAL_TIM_Base_Start_IT+0xd0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d022      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b6:	d01d      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a22      	ldr	r2, [pc, #136]	@ (8008148 <HAL_TIM_Base_Start_IT+0xd4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d018      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a21      	ldr	r2, [pc, #132]	@ (800814c <HAL_TIM_Base_Start_IT+0xd8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008150 <HAL_TIM_Base_Start_IT+0xdc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00e      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1e      	ldr	r2, [pc, #120]	@ (8008154 <HAL_TIM_Base_Start_IT+0xe0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d009      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008158 <HAL_TIM_Base_Start_IT+0xe4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_TIM_Base_Start_IT+0x80>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <HAL_TIM_Base_Start_IT+0xe8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d115      	bne.n	8008120 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	4b19      	ldr	r3, [pc, #100]	@ (8008160 <HAL_TIM_Base_Start_IT+0xec>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b06      	cmp	r3, #6
 8008104:	d015      	beq.n	8008132 <HAL_TIM_Base_Start_IT+0xbe>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810c:	d011      	beq.n	8008132 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0201 	orr.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	e008      	b.n	8008132 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e000      	b.n	8008134 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40013400 	.word	0x40013400
 8008158:	40014000 	.word	0x40014000
 800815c:	40015000 	.word	0x40015000
 8008160:	00010007 	.word	0x00010007

08008164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e054      	b.n	8008220 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d111      	bne.n	80081a6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fe46 	bl	8009e1c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a23      	ldr	r2, [pc, #140]	@ (8008228 <HAL_TIM_PWM_Init+0xc4>)
 800819c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f001 f98f 	bl	80094dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	0800822d 	.word	0x0800822d

0800822c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <HAL_TIM_PWM_Start+0x24>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b01      	cmp	r3, #1
 800825a:	bf14      	ite	ne
 800825c:	2301      	movne	r3, #1
 800825e:	2300      	moveq	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	e03c      	b.n	80082de <HAL_TIM_PWM_Start+0x9e>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b04      	cmp	r3, #4
 8008268:	d109      	bne.n	800827e <HAL_TIM_PWM_Start+0x3e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b01      	cmp	r3, #1
 8008274:	bf14      	ite	ne
 8008276:	2301      	movne	r3, #1
 8008278:	2300      	moveq	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	e02f      	b.n	80082de <HAL_TIM_PWM_Start+0x9e>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b08      	cmp	r3, #8
 8008282:	d109      	bne.n	8008298 <HAL_TIM_PWM_Start+0x58>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b01      	cmp	r3, #1
 800828e:	bf14      	ite	ne
 8008290:	2301      	movne	r3, #1
 8008292:	2300      	moveq	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e022      	b.n	80082de <HAL_TIM_PWM_Start+0x9e>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b0c      	cmp	r3, #12
 800829c:	d109      	bne.n	80082b2 <HAL_TIM_PWM_Start+0x72>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	bf14      	ite	ne
 80082aa:	2301      	movne	r3, #1
 80082ac:	2300      	moveq	r3, #0
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	e015      	b.n	80082de <HAL_TIM_PWM_Start+0x9e>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d109      	bne.n	80082cc <HAL_TIM_PWM_Start+0x8c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	bf14      	ite	ne
 80082c4:	2301      	movne	r3, #1
 80082c6:	2300      	moveq	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	e008      	b.n	80082de <HAL_TIM_PWM_Start+0x9e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e0a6      	b.n	8008434 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <HAL_TIM_PWM_Start+0xb6>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082f4:	e023      	b.n	800833e <HAL_TIM_PWM_Start+0xfe>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d104      	bne.n	8008306 <HAL_TIM_PWM_Start+0xc6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008304:	e01b      	b.n	800833e <HAL_TIM_PWM_Start+0xfe>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d104      	bne.n	8008316 <HAL_TIM_PWM_Start+0xd6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008314:	e013      	b.n	800833e <HAL_TIM_PWM_Start+0xfe>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d104      	bne.n	8008326 <HAL_TIM_PWM_Start+0xe6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008324:	e00b      	b.n	800833e <HAL_TIM_PWM_Start+0xfe>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b10      	cmp	r3, #16
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xf6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008334:	e003      	b.n	800833e <HAL_TIM_PWM_Start+0xfe>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2201      	movs	r2, #1
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fd42 	bl	8009dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a3a      	ldr	r2, [pc, #232]	@ (800843c <HAL_TIM_PWM_Start+0x1fc>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d018      	beq.n	8008388 <HAL_TIM_PWM_Start+0x148>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a39      	ldr	r2, [pc, #228]	@ (8008440 <HAL_TIM_PWM_Start+0x200>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <HAL_TIM_PWM_Start+0x148>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a37      	ldr	r2, [pc, #220]	@ (8008444 <HAL_TIM_PWM_Start+0x204>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00e      	beq.n	8008388 <HAL_TIM_PWM_Start+0x148>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a36      	ldr	r2, [pc, #216]	@ (8008448 <HAL_TIM_PWM_Start+0x208>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d009      	beq.n	8008388 <HAL_TIM_PWM_Start+0x148>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a34      	ldr	r2, [pc, #208]	@ (800844c <HAL_TIM_PWM_Start+0x20c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <HAL_TIM_PWM_Start+0x148>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a33      	ldr	r2, [pc, #204]	@ (8008450 <HAL_TIM_PWM_Start+0x210>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d101      	bne.n	800838c <HAL_TIM_PWM_Start+0x14c>
 8008388:	2301      	movs	r3, #1
 800838a:	e000      	b.n	800838e <HAL_TIM_PWM_Start+0x14e>
 800838c:	2300      	movs	r3, #0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a25      	ldr	r2, [pc, #148]	@ (800843c <HAL_TIM_PWM_Start+0x1fc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d022      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b4:	d01d      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a26      	ldr	r2, [pc, #152]	@ (8008454 <HAL_TIM_PWM_Start+0x214>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d018      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <HAL_TIM_PWM_Start+0x218>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a23      	ldr	r2, [pc, #140]	@ (800845c <HAL_TIM_PWM_Start+0x21c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a19      	ldr	r2, [pc, #100]	@ (8008440 <HAL_TIM_PWM_Start+0x200>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a18      	ldr	r2, [pc, #96]	@ (8008444 <HAL_TIM_PWM_Start+0x204>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x1b2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a18      	ldr	r2, [pc, #96]	@ (8008450 <HAL_TIM_PWM_Start+0x210>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d115      	bne.n	800841e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	4b19      	ldr	r3, [pc, #100]	@ (8008460 <HAL_TIM_PWM_Start+0x220>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b06      	cmp	r3, #6
 8008402:	d015      	beq.n	8008430 <HAL_TIM_PWM_Start+0x1f0>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840a:	d011      	beq.n	8008430 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	e008      	b.n	8008430 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e000      	b.n	8008432 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008430:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40012c00 	.word	0x40012c00
 8008440:	40013400 	.word	0x40013400
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400
 800844c:	40014800 	.word	0x40014800
 8008450:	40015000 	.word	0x40015000
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	00010007 	.word	0x00010007

08008464 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e04c      	b.n	8008512 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d111      	bne.n	80084a8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fcc5 	bl	8009e1c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a1f      	ldr	r2, [pc, #124]	@ (800851c <HAL_TIM_OnePulse_Init+0xb8>)
 800849e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f001 f80e 	bl	80094dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0208 	bic.w	r2, r2, #8
 80084ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6819      	ldr	r1, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	08008521 	.word	0x08008521

08008520 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008544:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800854c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008554:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800855c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d108      	bne.n	8008576 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d105      	bne.n	8008576 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d102      	bne.n	8008576 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008570:	7b3b      	ldrb	r3, [r7, #12]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d001      	beq.n	800857a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e059      	b.n	800862e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0202 	orr.w	r2, r2, #2
 80085a8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0204 	orr.w	r2, r2, #4
 80085b8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2201      	movs	r2, #1
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fc04 	bl	8009dd0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	2104      	movs	r1, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fbfd 	bl	8009dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a17      	ldr	r2, [pc, #92]	@ (8008638 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d018      	beq.n	8008612 <HAL_TIM_OnePulse_Start_IT+0xde>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a15      	ldr	r2, [pc, #84]	@ (800863c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_TIM_OnePulse_Start_IT+0xde>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a14      	ldr	r2, [pc, #80]	@ (8008640 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <HAL_TIM_OnePulse_Start_IT+0xde>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a12      	ldr	r2, [pc, #72]	@ (8008644 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIM_OnePulse_Start_IT+0xde>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a0f      	ldr	r2, [pc, #60]	@ (800864c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d101      	bne.n	8008616 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d007      	beq.n	800862c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800862a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40013400 	.word	0x40013400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800
 800864c:	40015000 	.word	0x40015000

08008650 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e0a2      	b.n	80087aa <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d111      	bne.n	8008694 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fbcf 	bl	8009e1c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008682:	2b00      	cmp	r3, #0
 8008684:	d102      	bne.n	800868c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a4a      	ldr	r2, [pc, #296]	@ (80087b4 <HAL_TIM_Encoder_Init+0x164>)
 800868a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f000 ff0e 	bl	80094dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	4313      	orrs	r3, r2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008706:	f023 030c 	bic.w	r3, r3, #12
 800870a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	4313      	orrs	r3, r2
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4313      	orrs	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	011a      	lsls	r2, r3, #4
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	031b      	lsls	r3, r3, #12
 8008736:	4313      	orrs	r3, r2
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008744:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800874c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	4313      	orrs	r3, r2
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	0800402d 	.word	0x0800402d

080087b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d110      	bne.n	800880a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d102      	bne.n	80087f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087ee:	7b7b      	ldrb	r3, [r7, #13]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d001      	beq.n	80087f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e069      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008808:	e031      	b.n	800886e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d110      	bne.n	8008832 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d102      	bne.n	800881c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008816:	7b3b      	ldrb	r3, [r7, #12]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d001      	beq.n	8008820 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e055      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008830:	e01d      	b.n	800886e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d108      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800883e:	7b7b      	ldrb	r3, [r7, #13]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008844:	7b3b      	ldrb	r3, [r7, #12]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d001      	beq.n	800884e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e03e      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_TIM_Encoder_Start+0xc4>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b04      	cmp	r3, #4
 8008878:	d008      	beq.n	800888c <HAL_TIM_Encoder_Start+0xd4>
 800887a:	e00f      	b.n	800889c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2201      	movs	r2, #1
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f001 faa3 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 800888a:	e016      	b.n	80088ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	2104      	movs	r1, #4
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fa9b 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 800889a:	e00e      	b.n	80088ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2201      	movs	r2, #1
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fa93 	bl	8009dd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	2104      	movs	r1, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 fa8c 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 80088b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0201 	orr.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_TIM_Encoder_Stop+0x18>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d008      	beq.n	80088fc <HAL_TIM_Encoder_Stop+0x28>
 80088ea:	e00f      	b.n	800890c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 fa6b 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 80088fa:	e016      	b.n	800892a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	2104      	movs	r1, #4
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fa63 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 800890a:	e00e      	b.n	800892a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fa5b 	bl	8009dd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2200      	movs	r2, #0
 8008920:	2104      	movs	r1, #4
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fa54 	bl	8009dd0 <TIM_CCxChannelCmd>
      break;
 8008928:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a1a      	ldr	r2, [r3, #32]
 8008930:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008934:	4013      	ands	r3, r2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10f      	bne.n	800895a <HAL_TIM_Encoder_Stop+0x86>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <HAL_TIM_Encoder_Stop+0x86>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <HAL_TIM_Encoder_Stop+0x92>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b04      	cmp	r3, #4
 8008964:	d148      	bne.n	80089f8 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <HAL_TIM_Encoder_Stop+0xa2>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008974:	e023      	b.n	80089be <HAL_TIM_Encoder_Stop+0xea>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b04      	cmp	r3, #4
 800897a:	d104      	bne.n	8008986 <HAL_TIM_Encoder_Stop+0xb2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008984:	e01b      	b.n	80089be <HAL_TIM_Encoder_Stop+0xea>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b08      	cmp	r3, #8
 800898a:	d104      	bne.n	8008996 <HAL_TIM_Encoder_Stop+0xc2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008994:	e013      	b.n	80089be <HAL_TIM_Encoder_Stop+0xea>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b0c      	cmp	r3, #12
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_Encoder_Stop+0xd2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089a4:	e00b      	b.n	80089be <HAL_TIM_Encoder_Stop+0xea>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_Encoder_Stop+0xe2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089b4:	e003      	b.n	80089be <HAL_TIM_Encoder_Stop+0xea>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <HAL_TIM_Encoder_Stop+0xfa>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089cc:	e024      	b.n	8008a18 <HAL_TIM_Encoder_Stop+0x144>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d104      	bne.n	80089de <HAL_TIM_Encoder_Stop+0x10a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089dc:	e01c      	b.n	8008a18 <HAL_TIM_Encoder_Stop+0x144>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d104      	bne.n	80089ee <HAL_TIM_Encoder_Stop+0x11a>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089ec:	e014      	b.n	8008a18 <HAL_TIM_Encoder_Stop+0x144>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80089f6:	e00f      	b.n	8008a18 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d026      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d021      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f06f 0202 	mvn.w	r2, #2
 8008a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
 8008a76:	e009      	b.n	8008a8c <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d026      	beq.n	8008aea <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f06f 0204 	mvn.w	r2, #4
 8008aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	e009      	b.n	8008ae4 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d026      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d021      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f06f 0208 	mvn.w	r2, #8
 8008b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
 8008b26:	e009      	b.n	8008b3c <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d026      	beq.n	8008b9a <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d021      	beq.n	8008b9a <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f06f 0210 	mvn.w	r2, #16
 8008b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2208      	movs	r2, #8
 8008b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
 8008b7e:	e009      	b.n	8008b94 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f06f 0201 	mvn.w	r2, #1
 8008bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d104      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00e      	beq.n	8008bf4 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00e      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00e      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00e      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f003 0320 	and.w	r3, r3, #32
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0220 	mvn.w	r2, #32
 8008c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e0ff      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b14      	cmp	r3, #20
 8008d3e:	f200 80f0 	bhi.w	8008f22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008f23 	.word	0x08008f23
 8008d50:	08008f23 	.word	0x08008f23
 8008d54:	08008f23 	.word	0x08008f23
 8008d58:	08008ddd 	.word	0x08008ddd
 8008d5c:	08008f23 	.word	0x08008f23
 8008d60:	08008f23 	.word	0x08008f23
 8008d64:	08008f23 	.word	0x08008f23
 8008d68:	08008e1f 	.word	0x08008e1f
 8008d6c:	08008f23 	.word	0x08008f23
 8008d70:	08008f23 	.word	0x08008f23
 8008d74:	08008f23 	.word	0x08008f23
 8008d78:	08008e5f 	.word	0x08008e5f
 8008d7c:	08008f23 	.word	0x08008f23
 8008d80:	08008f23 	.word	0x08008f23
 8008d84:	08008f23 	.word	0x08008f23
 8008d88:	08008ea1 	.word	0x08008ea1
 8008d8c:	08008f23 	.word	0x08008f23
 8008d90:	08008f23 	.word	0x08008f23
 8008d94:	08008f23 	.word	0x08008f23
 8008d98:	08008ee1 	.word	0x08008ee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fc4e 	bl	8009644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0208 	orr.w	r2, r2, #8
 8008db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0204 	bic.w	r2, r2, #4
 8008dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6999      	ldr	r1, [r3, #24]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	619a      	str	r2, [r3, #24]
      break;
 8008dda:	e0a5      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fcc8 	bl	8009778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6999      	ldr	r1, [r3, #24]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	021a      	lsls	r2, r3, #8
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	619a      	str	r2, [r3, #24]
      break;
 8008e1c:	e084      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fd3b 	bl	80098a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0208 	orr.w	r2, r2, #8
 8008e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0204 	bic.w	r2, r2, #4
 8008e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69d9      	ldr	r1, [r3, #28]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	61da      	str	r2, [r3, #28]
      break;
 8008e5c:	e064      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fdad 	bl	80099c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69d9      	ldr	r1, [r3, #28]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	021a      	lsls	r2, r3, #8
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	61da      	str	r2, [r3, #28]
      break;
 8008e9e:	e043      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fe20 	bl	8009aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0208 	orr.w	r2, r2, #8
 8008eba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0204 	bic.w	r2, r2, #4
 8008eca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ede:	e023      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fe6a 	bl	8009bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	021a      	lsls	r2, r3, #8
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f20:	e002      	b.n	8008f28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	75fb      	strb	r3, [r7, #23]
      break;
 8008f26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop

08008f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_TIM_ConfigClockSource+0x1c>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e0f6      	b.n	8009146 <HAL_TIM_ConfigClockSource+0x20a>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a6f      	ldr	r2, [pc, #444]	@ (8009150 <HAL_TIM_ConfigClockSource+0x214>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	f000 80c1 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008f98:	4a6d      	ldr	r2, [pc, #436]	@ (8009150 <HAL_TIM_ConfigClockSource+0x214>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f200 80c6 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fa0:	4a6c      	ldr	r2, [pc, #432]	@ (8009154 <HAL_TIM_ConfigClockSource+0x218>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	f000 80b9 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8009154 <HAL_TIM_ConfigClockSource+0x218>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	f200 80be 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb0:	4a69      	ldr	r2, [pc, #420]	@ (8009158 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f000 80b1 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008fb8:	4a67      	ldr	r2, [pc, #412]	@ (8009158 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	f200 80b6 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc0:	4a66      	ldr	r2, [pc, #408]	@ (800915c <HAL_TIM_ConfigClockSource+0x220>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 80a9 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008fc8:	4a64      	ldr	r2, [pc, #400]	@ (800915c <HAL_TIM_ConfigClockSource+0x220>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 80ae 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd0:	4a63      	ldr	r2, [pc, #396]	@ (8009160 <HAL_TIM_ConfigClockSource+0x224>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 80a1 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008fd8:	4a61      	ldr	r2, [pc, #388]	@ (8009160 <HAL_TIM_ConfigClockSource+0x224>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 80a6 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe0:	4a60      	ldr	r2, [pc, #384]	@ (8009164 <HAL_TIM_ConfigClockSource+0x228>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f000 8099 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8009164 <HAL_TIM_ConfigClockSource+0x228>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f200 809e 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ff4:	f000 8091 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8008ff8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ffc:	f200 8096 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8009000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009004:	f000 8089 	beq.w	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8009008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900c:	f200 808e 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8009010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009014:	d03e      	beq.n	8009094 <HAL_TIM_ConfigClockSource+0x158>
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800901a:	f200 8087 	bhi.w	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 800901e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009022:	f000 8086 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1f6>
 8009026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800902a:	d87f      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 800902c:	2b70      	cmp	r3, #112	@ 0x70
 800902e:	d01a      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x12a>
 8009030:	2b70      	cmp	r3, #112	@ 0x70
 8009032:	d87b      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8009034:	2b60      	cmp	r3, #96	@ 0x60
 8009036:	d050      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x19e>
 8009038:	2b60      	cmp	r3, #96	@ 0x60
 800903a:	d877      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 800903c:	2b50      	cmp	r3, #80	@ 0x50
 800903e:	d03c      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x17e>
 8009040:	2b50      	cmp	r3, #80	@ 0x50
 8009042:	d873      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8009044:	2b40      	cmp	r3, #64	@ 0x40
 8009046:	d058      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x1be>
 8009048:	2b40      	cmp	r3, #64	@ 0x40
 800904a:	d86f      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 800904c:	2b30      	cmp	r3, #48	@ 0x30
 800904e:	d064      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8009050:	2b30      	cmp	r3, #48	@ 0x30
 8009052:	d86b      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 8009054:	2b20      	cmp	r3, #32
 8009056:	d060      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8009058:	2b20      	cmp	r3, #32
 800905a:	d867      	bhi.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d05c      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8009060:	2b10      	cmp	r3, #16
 8009062:	d05a      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x1de>
 8009064:	e062      	b.n	800912c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009076:	f000 fe8b 	bl	8009d90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	609a      	str	r2, [r3, #8]
      break;
 8009092:	e04f      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090a4:	f000 fe74 	bl	8009d90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090b6:	609a      	str	r2, [r3, #8]
      break;
 80090b8:	e03c      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	461a      	mov	r2, r3
 80090c8:	f000 fde6 	bl	8009c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2150      	movs	r1, #80	@ 0x50
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fe3f 	bl	8009d56 <TIM_ITRx_SetConfig>
      break;
 80090d8:	e02c      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090e6:	461a      	mov	r2, r3
 80090e8:	f000 fe05 	bl	8009cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2160      	movs	r1, #96	@ 0x60
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fe2f 	bl	8009d56 <TIM_ITRx_SetConfig>
      break;
 80090f8:	e01c      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009106:	461a      	mov	r2, r3
 8009108:	f000 fdc6 	bl	8009c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2140      	movs	r1, #64	@ 0x40
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fe1f 	bl	8009d56 <TIM_ITRx_SetConfig>
      break;
 8009118:	e00c      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f000 fe16 	bl	8009d56 <TIM_ITRx_SetConfig>
      break;
 800912a:	e003      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]
      break;
 8009130:	e000      	b.n	8009134 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	00100070 	.word	0x00100070
 8009154:	00100060 	.word	0x00100060
 8009158:	00100050 	.word	0x00100050
 800915c:	00100040 	.word	0x00100040
 8009160:	00100030 	.word	0x00100030
 8009164:	00100020 	.word	0x00100020

08009168 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	460b      	mov	r3, r1
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e14a      	b.n	80094ce <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b01      	cmp	r3, #1
 8009242:	f040 80dd 	bne.w	8009400 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009246:	7afb      	ldrb	r3, [r7, #11]
 8009248:	2b1f      	cmp	r3, #31
 800924a:	f200 80d6 	bhi.w	80093fa <HAL_TIM_RegisterCallback+0x1de>
 800924e:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <HAL_TIM_RegisterCallback+0x38>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	080092d5 	.word	0x080092d5
 8009258:	080092dd 	.word	0x080092dd
 800925c:	080092e5 	.word	0x080092e5
 8009260:	080092ed 	.word	0x080092ed
 8009264:	080092f5 	.word	0x080092f5
 8009268:	080092fd 	.word	0x080092fd
 800926c:	08009305 	.word	0x08009305
 8009270:	0800930d 	.word	0x0800930d
 8009274:	08009315 	.word	0x08009315
 8009278:	0800931d 	.word	0x0800931d
 800927c:	08009325 	.word	0x08009325
 8009280:	0800932d 	.word	0x0800932d
 8009284:	08009335 	.word	0x08009335
 8009288:	0800933d 	.word	0x0800933d
 800928c:	08009347 	.word	0x08009347
 8009290:	08009351 	.word	0x08009351
 8009294:	0800935b 	.word	0x0800935b
 8009298:	08009365 	.word	0x08009365
 800929c:	0800936f 	.word	0x0800936f
 80092a0:	08009379 	.word	0x08009379
 80092a4:	08009383 	.word	0x08009383
 80092a8:	0800938d 	.word	0x0800938d
 80092ac:	08009397 	.word	0x08009397
 80092b0:	080093a1 	.word	0x080093a1
 80092b4:	080093ab 	.word	0x080093ab
 80092b8:	080093b5 	.word	0x080093b5
 80092bc:	080093bf 	.word	0x080093bf
 80092c0:	080093c9 	.word	0x080093c9
 80092c4:	080093d3 	.word	0x080093d3
 80092c8:	080093dd 	.word	0x080093dd
 80092cc:	080093e7 	.word	0x080093e7
 80092d0:	080093f1 	.word	0x080093f1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80092da:	e0f7      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80092e2:	e0f3      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80092ea:	e0ef      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80092f2:	e0eb      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80092fa:	e0e7      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009302:	e0e3      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800930a:	e0df      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009312:	e0db      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800931a:	e0d7      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009322:	e0d3      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800932a:	e0cf      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009332:	e0cb      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800933a:	e0c7      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009344:	e0c2      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800934e:	e0bd      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009358:	e0b8      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009362:	e0b3      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800936c:	e0ae      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009376:	e0a9      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009380:	e0a4      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800938a:	e09f      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009394:	e09a      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800939e:	e095      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80093a8:	e090      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093b2:	e08b      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093bc:	e086      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80093c6:	e081      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80093d0:	e07c      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80093da:	e077      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80093e4:	e072      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80093ee:	e06d      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80093f8:	e068      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
        break;
 80093fe:	e065      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d15d      	bne.n	80094c8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	2b0d      	cmp	r3, #13
 8009410:	d857      	bhi.n	80094c2 <HAL_TIM_RegisterCallback+0x2a6>
 8009412:	a201      	add	r2, pc, #4	@ (adr r2, 8009418 <HAL_TIM_RegisterCallback+0x1fc>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	08009451 	.word	0x08009451
 800941c:	08009459 	.word	0x08009459
 8009420:	08009461 	.word	0x08009461
 8009424:	08009469 	.word	0x08009469
 8009428:	08009471 	.word	0x08009471
 800942c:	08009479 	.word	0x08009479
 8009430:	08009481 	.word	0x08009481
 8009434:	08009489 	.word	0x08009489
 8009438:	08009491 	.word	0x08009491
 800943c:	08009499 	.word	0x08009499
 8009440:	080094a1 	.word	0x080094a1
 8009444:	080094a9 	.word	0x080094a9
 8009448:	080094b1 	.word	0x080094b1
 800944c:	080094b9 	.word	0x080094b9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009456:	e039      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800945e:	e035      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009466:	e031      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800946e:	e02d      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009476:	e029      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800947e:	e025      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009486:	e021      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800948e:	e01d      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009496:	e019      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800949e:	e015      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80094a6:	e011      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80094ae:	e00d      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80094b6:	e009      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80094c0:	e004      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]
        break;
 80094c6:	e001      	b.n	80094cc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop

080094dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a4c      	ldr	r2, [pc, #304]	@ (8009620 <TIM_Base_SetConfig+0x144>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d017      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fa:	d013      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a49      	ldr	r2, [pc, #292]	@ (8009624 <TIM_Base_SetConfig+0x148>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00f      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a48      	ldr	r2, [pc, #288]	@ (8009628 <TIM_Base_SetConfig+0x14c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00b      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a47      	ldr	r2, [pc, #284]	@ (800962c <TIM_Base_SetConfig+0x150>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d007      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a46      	ldr	r2, [pc, #280]	@ (8009630 <TIM_Base_SetConfig+0x154>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_Base_SetConfig+0x48>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a45      	ldr	r2, [pc, #276]	@ (8009634 <TIM_Base_SetConfig+0x158>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d108      	bne.n	8009536 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a39      	ldr	r2, [pc, #228]	@ (8009620 <TIM_Base_SetConfig+0x144>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d023      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009544:	d01f      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a36      	ldr	r2, [pc, #216]	@ (8009624 <TIM_Base_SetConfig+0x148>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d01b      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a35      	ldr	r2, [pc, #212]	@ (8009628 <TIM_Base_SetConfig+0x14c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d017      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a34      	ldr	r2, [pc, #208]	@ (800962c <TIM_Base_SetConfig+0x150>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d013      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a33      	ldr	r2, [pc, #204]	@ (8009630 <TIM_Base_SetConfig+0x154>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00f      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a33      	ldr	r2, [pc, #204]	@ (8009638 <TIM_Base_SetConfig+0x15c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00b      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a32      	ldr	r2, [pc, #200]	@ (800963c <TIM_Base_SetConfig+0x160>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d007      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a31      	ldr	r2, [pc, #196]	@ (8009640 <TIM_Base_SetConfig+0x164>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d003      	beq.n	8009586 <TIM_Base_SetConfig+0xaa>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a2c      	ldr	r2, [pc, #176]	@ (8009634 <TIM_Base_SetConfig+0x158>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d108      	bne.n	8009598 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800958c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	4313      	orrs	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <TIM_Base_SetConfig+0x144>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d013      	beq.n	80095ec <TIM_Base_SetConfig+0x110>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009630 <TIM_Base_SetConfig+0x154>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00f      	beq.n	80095ec <TIM_Base_SetConfig+0x110>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009638 <TIM_Base_SetConfig+0x15c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00b      	beq.n	80095ec <TIM_Base_SetConfig+0x110>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a19      	ldr	r2, [pc, #100]	@ (800963c <TIM_Base_SetConfig+0x160>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d007      	beq.n	80095ec <TIM_Base_SetConfig+0x110>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a18      	ldr	r2, [pc, #96]	@ (8009640 <TIM_Base_SetConfig+0x164>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_Base_SetConfig+0x110>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a13      	ldr	r2, [pc, #76]	@ (8009634 <TIM_Base_SetConfig+0x158>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d103      	bne.n	80095f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b01      	cmp	r3, #1
 8009604:	d105      	bne.n	8009612 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f023 0201 	bic.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	611a      	str	r2, [r3, #16]
  }
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40012c00 	.word	0x40012c00
 8009624:	40000400 	.word	0x40000400
 8009628:	40000800 	.word	0x40000800
 800962c:	40000c00 	.word	0x40000c00
 8009630:	40013400 	.word	0x40013400
 8009634:	40015000 	.word	0x40015000
 8009638:	40014000 	.word	0x40014000
 800963c:	40014400 	.word	0x40014400
 8009640:	40014800 	.word	0x40014800

08009644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	f023 0201 	bic.w	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 0302 	bic.w	r3, r3, #2
 8009690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a30      	ldr	r2, [pc, #192]	@ (8009760 <TIM_OC1_SetConfig+0x11c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <TIM_OC1_SetConfig+0x88>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009764 <TIM_OC1_SetConfig+0x120>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00f      	beq.n	80096cc <TIM_OC1_SetConfig+0x88>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009768 <TIM_OC1_SetConfig+0x124>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00b      	beq.n	80096cc <TIM_OC1_SetConfig+0x88>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a2d      	ldr	r2, [pc, #180]	@ (800976c <TIM_OC1_SetConfig+0x128>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d007      	beq.n	80096cc <TIM_OC1_SetConfig+0x88>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a2c      	ldr	r2, [pc, #176]	@ (8009770 <TIM_OC1_SetConfig+0x12c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d003      	beq.n	80096cc <TIM_OC1_SetConfig+0x88>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009774 <TIM_OC1_SetConfig+0x130>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d10c      	bne.n	80096e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f023 0308 	bic.w	r3, r3, #8
 80096d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	4313      	orrs	r3, r2
 80096dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f023 0304 	bic.w	r3, r3, #4
 80096e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009760 <TIM_OC1_SetConfig+0x11c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d013      	beq.n	8009716 <TIM_OC1_SetConfig+0xd2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009764 <TIM_OC1_SetConfig+0x120>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00f      	beq.n	8009716 <TIM_OC1_SetConfig+0xd2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009768 <TIM_OC1_SetConfig+0x124>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00b      	beq.n	8009716 <TIM_OC1_SetConfig+0xd2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a1a      	ldr	r2, [pc, #104]	@ (800976c <TIM_OC1_SetConfig+0x128>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d007      	beq.n	8009716 <TIM_OC1_SetConfig+0xd2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a19      	ldr	r2, [pc, #100]	@ (8009770 <TIM_OC1_SetConfig+0x12c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d003      	beq.n	8009716 <TIM_OC1_SetConfig+0xd2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a18      	ldr	r2, [pc, #96]	@ (8009774 <TIM_OC1_SetConfig+0x130>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d111      	bne.n	800973a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800971c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4313      	orrs	r3, r2
 800972e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	621a      	str	r2, [r3, #32]
}
 8009754:	bf00      	nop
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	40012c00 	.word	0x40012c00
 8009764:	40013400 	.word	0x40013400
 8009768:	40014000 	.word	0x40014000
 800976c:	40014400 	.word	0x40014400
 8009770:	40014800 	.word	0x40014800
 8009774:	40015000 	.word	0x40015000

08009778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	f023 0210 	bic.w	r2, r3, #16
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	021b      	lsls	r3, r3, #8
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	4313      	orrs	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f023 0320 	bic.w	r3, r3, #32
 80097c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009888 <TIM_OC2_SetConfig+0x110>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d007      	beq.n	80097ec <TIM_OC2_SetConfig+0x74>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a2b      	ldr	r2, [pc, #172]	@ (800988c <TIM_OC2_SetConfig+0x114>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_OC2_SetConfig+0x74>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <TIM_OC2_SetConfig+0x118>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d10d      	bne.n	8009808 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009806:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a1f      	ldr	r2, [pc, #124]	@ (8009888 <TIM_OC2_SetConfig+0x110>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <TIM_OC2_SetConfig+0xc0>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a1e      	ldr	r2, [pc, #120]	@ (800988c <TIM_OC2_SetConfig+0x114>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_OC2_SetConfig+0xc0>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1e      	ldr	r2, [pc, #120]	@ (8009894 <TIM_OC2_SetConfig+0x11c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_OC2_SetConfig+0xc0>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1d      	ldr	r2, [pc, #116]	@ (8009898 <TIM_OC2_SetConfig+0x120>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_OC2_SetConfig+0xc0>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1c      	ldr	r2, [pc, #112]	@ (800989c <TIM_OC2_SetConfig+0x124>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC2_SetConfig+0xc0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <TIM_OC2_SetConfig+0x118>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d113      	bne.n	8009860 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800983e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40012c00 	.word	0x40012c00
 800988c:	40013400 	.word	0x40013400
 8009890:	40015000 	.word	0x40015000
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800

080098a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f023 0303 	bic.w	r3, r3, #3
 80098da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a2b      	ldr	r2, [pc, #172]	@ (80099ac <TIM_OC3_SetConfig+0x10c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d007      	beq.n	8009912 <TIM_OC3_SetConfig+0x72>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a2a      	ldr	r2, [pc, #168]	@ (80099b0 <TIM_OC3_SetConfig+0x110>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d003      	beq.n	8009912 <TIM_OC3_SetConfig+0x72>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a29      	ldr	r2, [pc, #164]	@ (80099b4 <TIM_OC3_SetConfig+0x114>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d10d      	bne.n	800992e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800992c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a1e      	ldr	r2, [pc, #120]	@ (80099ac <TIM_OC3_SetConfig+0x10c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d013      	beq.n	800995e <TIM_OC3_SetConfig+0xbe>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a1d      	ldr	r2, [pc, #116]	@ (80099b0 <TIM_OC3_SetConfig+0x110>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00f      	beq.n	800995e <TIM_OC3_SetConfig+0xbe>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a1d      	ldr	r2, [pc, #116]	@ (80099b8 <TIM_OC3_SetConfig+0x118>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00b      	beq.n	800995e <TIM_OC3_SetConfig+0xbe>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a1c      	ldr	r2, [pc, #112]	@ (80099bc <TIM_OC3_SetConfig+0x11c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <TIM_OC3_SetConfig+0xbe>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a1b      	ldr	r2, [pc, #108]	@ (80099c0 <TIM_OC3_SetConfig+0x120>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_OC3_SetConfig+0xbe>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a16      	ldr	r2, [pc, #88]	@ (80099b4 <TIM_OC3_SetConfig+0x114>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d113      	bne.n	8009986 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800996c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4313      	orrs	r3, r2
 8009978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	011b      	lsls	r3, r3, #4
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	4313      	orrs	r3, r2
 8009984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	621a      	str	r2, [r3, #32]
}
 80099a0:	bf00      	nop
 80099a2:	371c      	adds	r7, #28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	40012c00 	.word	0x40012c00
 80099b0:	40013400 	.word	0x40013400
 80099b4:	40015000 	.word	0x40015000
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800

080099c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	021b      	lsls	r3, r3, #8
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	031b      	lsls	r3, r3, #12
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a2c      	ldr	r2, [pc, #176]	@ (8009ad4 <TIM_OC4_SetConfig+0x110>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d007      	beq.n	8009a38 <TIM_OC4_SetConfig+0x74>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009ad8 <TIM_OC4_SetConfig+0x114>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d003      	beq.n	8009a38 <TIM_OC4_SetConfig+0x74>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a2a      	ldr	r2, [pc, #168]	@ (8009adc <TIM_OC4_SetConfig+0x118>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d10d      	bne.n	8009a54 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	031b      	lsls	r3, r3, #12
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad4 <TIM_OC4_SetConfig+0x110>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d013      	beq.n	8009a84 <TIM_OC4_SetConfig+0xc0>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad8 <TIM_OC4_SetConfig+0x114>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d00f      	beq.n	8009a84 <TIM_OC4_SetConfig+0xc0>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae0 <TIM_OC4_SetConfig+0x11c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d00b      	beq.n	8009a84 <TIM_OC4_SetConfig+0xc0>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ae4 <TIM_OC4_SetConfig+0x120>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d007      	beq.n	8009a84 <TIM_OC4_SetConfig+0xc0>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae8 <TIM_OC4_SetConfig+0x124>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d003      	beq.n	8009a84 <TIM_OC4_SetConfig+0xc0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <TIM_OC4_SetConfig+0x118>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d113      	bne.n	8009aac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	019b      	lsls	r3, r3, #6
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	019b      	lsls	r3, r3, #6
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	621a      	str	r2, [r3, #32]
}
 8009ac6:	bf00      	nop
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	40012c00 	.word	0x40012c00
 8009ad8:	40013400 	.word	0x40013400
 8009adc:	40015000 	.word	0x40015000
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40014400 	.word	0x40014400
 8009ae8:	40014800 	.word	0x40014800

08009aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	041b      	lsls	r3, r3, #16
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a19      	ldr	r2, [pc, #100]	@ (8009ba8 <TIM_OC5_SetConfig+0xbc>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <TIM_OC5_SetConfig+0x82>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a18      	ldr	r2, [pc, #96]	@ (8009bac <TIM_OC5_SetConfig+0xc0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00f      	beq.n	8009b6e <TIM_OC5_SetConfig+0x82>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a17      	ldr	r2, [pc, #92]	@ (8009bb0 <TIM_OC5_SetConfig+0xc4>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <TIM_OC5_SetConfig+0x82>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a16      	ldr	r2, [pc, #88]	@ (8009bb4 <TIM_OC5_SetConfig+0xc8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d007      	beq.n	8009b6e <TIM_OC5_SetConfig+0x82>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a15      	ldr	r2, [pc, #84]	@ (8009bb8 <TIM_OC5_SetConfig+0xcc>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_OC5_SetConfig+0x82>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a14      	ldr	r2, [pc, #80]	@ (8009bbc <TIM_OC5_SetConfig+0xd0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d109      	bne.n	8009b82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	621a      	str	r2, [r3, #32]
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40013400 	.word	0x40013400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40014400 	.word	0x40014400
 8009bb8:	40014800 	.word	0x40014800
 8009bbc:	40015000 	.word	0x40015000

08009bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	051b      	lsls	r3, r3, #20
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a1a      	ldr	r2, [pc, #104]	@ (8009c80 <TIM_OC6_SetConfig+0xc0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d013      	beq.n	8009c44 <TIM_OC6_SetConfig+0x84>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a19      	ldr	r2, [pc, #100]	@ (8009c84 <TIM_OC6_SetConfig+0xc4>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00f      	beq.n	8009c44 <TIM_OC6_SetConfig+0x84>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a18      	ldr	r2, [pc, #96]	@ (8009c88 <TIM_OC6_SetConfig+0xc8>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00b      	beq.n	8009c44 <TIM_OC6_SetConfig+0x84>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a17      	ldr	r2, [pc, #92]	@ (8009c8c <TIM_OC6_SetConfig+0xcc>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d007      	beq.n	8009c44 <TIM_OC6_SetConfig+0x84>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a16      	ldr	r2, [pc, #88]	@ (8009c90 <TIM_OC6_SetConfig+0xd0>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <TIM_OC6_SetConfig+0x84>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a15      	ldr	r2, [pc, #84]	@ (8009c94 <TIM_OC6_SetConfig+0xd4>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d109      	bne.n	8009c58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	029b      	lsls	r3, r3, #10
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	40012c00 	.word	0x40012c00
 8009c84:	40013400 	.word	0x40013400
 8009c88:	40014000 	.word	0x40014000
 8009c8c:	40014400 	.word	0x40014400
 8009c90:	40014800 	.word	0x40014800
 8009c94:	40015000 	.word	0x40015000

08009c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	f023 0201 	bic.w	r2, r3, #1
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f023 030a 	bic.w	r3, r3, #10
 8009cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a1b      	ldr	r3, [r3, #32]
 8009d0c:	f023 0210 	bic.w	r2, r3, #16
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	031b      	lsls	r3, r3, #12
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	f043 0307 	orr.w	r3, r3, #7
 8009d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	609a      	str	r2, [r3, #8]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	021a      	lsls	r2, r3, #8
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	609a      	str	r2, [r3, #8]
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	2201      	movs	r2, #1
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1a      	ldr	r2, [r3, #32]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	43db      	mvns	r3, r3
 8009df2:	401a      	ands	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a1a      	ldr	r2, [r3, #32]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f003 031f 	and.w	r3, r3, #31
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	fa01 f303 	lsl.w	r3, r1, r3
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	621a      	str	r2, [r3, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
	...

08009e1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a26      	ldr	r2, [pc, #152]	@ (8009ec0 <TIM_ResetCallback+0xa4>)
 8009e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a25      	ldr	r2, [pc, #148]	@ (8009ec4 <TIM_ResetCallback+0xa8>)
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a24      	ldr	r2, [pc, #144]	@ (8009ec8 <TIM_ResetCallback+0xac>)
 8009e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a23      	ldr	r2, [pc, #140]	@ (8009ecc <TIM_ResetCallback+0xb0>)
 8009e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a22      	ldr	r2, [pc, #136]	@ (8009ed0 <TIM_ResetCallback+0xb4>)
 8009e48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a21      	ldr	r2, [pc, #132]	@ (8009ed4 <TIM_ResetCallback+0xb8>)
 8009e50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <TIM_ResetCallback+0xbc>)
 8009e58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <TIM_ResetCallback+0xc0>)
 8009e60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee0 <TIM_ResetCallback+0xc4>)
 8009e68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee4 <TIM_ResetCallback+0xc8>)
 8009e70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee8 <TIM_ResetCallback+0xcc>)
 8009e78:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009eec <TIM_ResetCallback+0xd0>)
 8009e80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef0 <TIM_ResetCallback+0xd4>)
 8009e88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a19      	ldr	r2, [pc, #100]	@ (8009ef4 <TIM_ResetCallback+0xd8>)
 8009e90:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a18      	ldr	r2, [pc, #96]	@ (8009ef8 <TIM_ResetCallback+0xdc>)
 8009e98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a17      	ldr	r2, [pc, #92]	@ (8009efc <TIM_ResetCallback+0xe0>)
 8009ea0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a16      	ldr	r2, [pc, #88]	@ (8009f00 <TIM_ResetCallback+0xe4>)
 8009ea8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <TIM_ResetCallback+0xe8>)
 8009eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	08002cb1 	.word	0x08002cb1
 8009ec4:	08009169 	.word	0x08009169
 8009ec8:	080091e1 	.word	0x080091e1
 8009ecc:	080091f5 	.word	0x080091f5
 8009ed0:	08009191 	.word	0x08009191
 8009ed4:	080091a5 	.word	0x080091a5
 8009ed8:	0800917d 	.word	0x0800917d
 8009edc:	080091b9 	.word	0x080091b9
 8009ee0:	080091cd 	.word	0x080091cd
 8009ee4:	08009209 	.word	0x08009209
 8009ee8:	0800a15d 	.word	0x0800a15d
 8009eec:	0800a171 	.word	0x0800a171
 8009ef0:	0800a185 	.word	0x0800a185
 8009ef4:	0800a199 	.word	0x0800a199
 8009ef8:	0800a1ad 	.word	0x0800a1ad
 8009efc:	0800a1c1 	.word	0x0800a1c1
 8009f00:	0800a1d5 	.word	0x0800a1d5
 8009f04:	0800a1e9 	.word	0x0800a1e9

08009f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e074      	b.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a34      	ldr	r2, [pc, #208]	@ (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a33      	ldr	r2, [pc, #204]	@ (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a31      	ldr	r2, [pc, #196]	@ (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d108      	bne.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a21      	ldr	r2, [pc, #132]	@ (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d022      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa0:	d01d      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a1f      	ldr	r2, [pc, #124]	@ (800a024 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d018      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a1d      	ldr	r2, [pc, #116]	@ (800a028 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d013      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a1c      	ldr	r2, [pc, #112]	@ (800a02c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00e      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a15      	ldr	r2, [pc, #84]	@ (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d009      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a18      	ldr	r2, [pc, #96]	@ (800a030 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d004      	beq.n	8009fde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a11      	ldr	r2, [pc, #68]	@ (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d10c      	bne.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40012c00 	.word	0x40012c00
 800a01c:	40013400 	.word	0x40013400
 800a020:	40015000 	.word	0x40015000
 800a024:	40000400 	.word	0x40000400
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000c00 	.word	0x40000c00
 800a030:	40014000 	.word	0x40014000

0800a034 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a04c:	2302      	movs	r3, #2
 800a04e:	e078      	b.n	800a142 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	041b      	lsls	r3, r3, #16
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a150 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d009      	beq.n	800a0f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a1b      	ldr	r2, [pc, #108]	@ (800a154 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a19      	ldr	r2, [pc, #100]	@ (800a158 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d11c      	bne.n	800a130 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	051b      	lsls	r3, r3, #20
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	40012c00 	.word	0x40012c00
 800a154:	40013400 	.word	0x40013400
 800a158:	40015000 	.word	0x40015000

0800a15c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e050      	b.n	800a2b0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a214:	2b00      	cmp	r3, #0
 800a216:	d114      	bne.n	800a242 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fde5 	bl	800adf0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d103      	bne.n	800a238 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a21      	ldr	r2, [pc, #132]	@ (800a2b8 <HAL_UART_Init+0xbc>)
 800a234:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2224      	movs	r2, #36	@ 0x24
 800a246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0201 	bic.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 f912 	bl	800b48c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fe13 	bl	800ae94 <UART_SetConfig>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b01      	cmp	r3, #1
 800a272:	d101      	bne.n	800a278 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e01b      	b.n	800a2b0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f991 	bl	800b5d0 <UART_CheckIdleState>
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	080041a5 	.word	0x080041a5

0800a2bc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d109      	bne.n	800a2e8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e09c      	b.n	800a422 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ee:	2b20      	cmp	r3, #32
 800a2f0:	d16c      	bne.n	800a3cc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	2b0c      	cmp	r3, #12
 800a2f6:	d85e      	bhi.n	800a3b6 <HAL_UART_RegisterCallback+0xfa>
 800a2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a300 <HAL_UART_RegisterCallback+0x44>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a335 	.word	0x0800a335
 800a304:	0800a33f 	.word	0x0800a33f
 800a308:	0800a349 	.word	0x0800a349
 800a30c:	0800a353 	.word	0x0800a353
 800a310:	0800a35d 	.word	0x0800a35d
 800a314:	0800a367 	.word	0x0800a367
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a37b 	.word	0x0800a37b
 800a320:	0800a385 	.word	0x0800a385
 800a324:	0800a38f 	.word	0x0800a38f
 800a328:	0800a399 	.word	0x0800a399
 800a32c:	0800a3a3 	.word	0x0800a3a3
 800a330:	0800a3ad 	.word	0x0800a3ad
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a33c:	e070      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a346:	e06b      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a350:	e066      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a35a:	e061      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a364:	e05c      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a36e:	e057      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a378:	e052      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a382:	e04d      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a38c:	e048      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a396:	e043      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a3a0:	e03e      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a3aa:	e039      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a3b4:	e034      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ca:	e029      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d11a      	bne.n	800a40c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	2b0b      	cmp	r3, #11
 800a3da:	d002      	beq.n	800a3e2 <HAL_UART_RegisterCallback+0x126>
 800a3dc:	2b0c      	cmp	r3, #12
 800a3de:	d005      	beq.n	800a3ec <HAL_UART_RegisterCallback+0x130>
 800a3e0:	e009      	b.n	800a3f6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a3ea:	e019      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a3f4:	e014      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	75fb      	strb	r3, [r7, #23]
        break;
 800a40a:	e009      	b.n	800a420 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
}
 800a422:	4618      	mov	r0, r3
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop

0800a430 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	@ 0x28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a444:	2b20      	cmp	r3, #32
 800a446:	d167      	bne.n	800a518 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_UART_Transmit_DMA+0x24>
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e060      	b.n	800a51a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	88fa      	ldrh	r2, [r7, #6]
 800a462:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2221      	movs	r2, #33	@ 0x21
 800a47a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d028      	beq.n	800a4d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a48a:	4a26      	ldr	r2, [pc, #152]	@ (800a524 <HAL_UART_Transmit_DMA+0xf4>)
 800a48c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a492:	4a25      	ldr	r2, [pc, #148]	@ (800a528 <HAL_UART_Transmit_DMA+0xf8>)
 800a494:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a49a:	4a24      	ldr	r2, [pc, #144]	@ (800a52c <HAL_UART_Transmit_DMA+0xfc>)
 800a49c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3328      	adds	r3, #40	@ 0x28
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	88fb      	ldrh	r3, [r7, #6]
 800a4ba:	f7fc f869 	bl	8006590 <HAL_DMA_Start_IT>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d009      	beq.n	800a4d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2210      	movs	r2, #16
 800a4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e020      	b.n	800a51a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2240      	movs	r2, #64	@ 0x40
 800a4de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a500:	623a      	str	r2, [r7, #32]
 800a502:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	69f9      	ldr	r1, [r7, #28]
 800a506:	6a3a      	ldr	r2, [r7, #32]
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e5      	bne.n	800a4e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	e000      	b.n	800a51a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a518:	2302      	movs	r3, #2
  }
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3728      	adds	r7, #40	@ 0x28
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	0800ba9b 	.word	0x0800ba9b
 800a528:	0800bb39 	.word	0x0800bb39
 800a52c:	0800bcd3 	.word	0x0800bcd3

0800a530 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08a      	sub	sp, #40	@ 0x28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a544:	2b20      	cmp	r3, #32
 800a546:	d137      	bne.n	800a5b8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <HAL_UART_Receive_DMA+0x24>
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e030      	b.n	800a5ba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a18      	ldr	r2, [pc, #96]	@ (800a5c4 <HAL_UART_Receive_DMA+0x94>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d01f      	beq.n	800a5a8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d018      	beq.n	800a5a8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	613b      	str	r3, [r7, #16]
   return(result);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a58a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	623b      	str	r3, [r7, #32]
 800a596:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	69f9      	ldr	r1, [r7, #28]
 800a59a:	6a3a      	ldr	r2, [r7, #32]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f001 f926 	bl	800b800 <UART_Start_Receive_DMA>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	e000      	b.n	800a5ba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a5b8:	2302      	movs	r3, #2
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3728      	adds	r7, #40	@ 0x28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	40008000 	.word	0x40008000

0800a5c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b0ba      	sub	sp, #232	@ 0xe8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a5f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a5fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a600:	2b00      	cmp	r3, #0
 800a602:	d11b      	bne.n	800a63c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a608:	f003 0320 	and.w	r3, r3, #32
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d015      	beq.n	800a63c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d105      	bne.n	800a628 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d009      	beq.n	800a63c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8312 	beq.w	800ac56 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
      }
      return;
 800a63a:	e30c      	b.n	800ac56 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a63c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8129 	beq.w	800a898 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a646:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a64a:	4b90      	ldr	r3, [pc, #576]	@ (800a88c <HAL_UART_IRQHandler+0x2c4>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a652:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a656:	4b8e      	ldr	r3, [pc, #568]	@ (800a890 <HAL_UART_IRQHandler+0x2c8>)
 800a658:	4013      	ands	r3, r2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 811c 	beq.w	800a898 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d011      	beq.n	800a690 <HAL_UART_IRQHandler+0xc8>
 800a66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00b      	beq.n	800a690 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2201      	movs	r2, #1
 800a67e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a686:	f043 0201 	orr.w	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d011      	beq.n	800a6c0 <HAL_UART_IRQHandler+0xf8>
 800a69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6b6:	f043 0204 	orr.w	r2, r3, #4
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d011      	beq.n	800a6f0 <HAL_UART_IRQHandler+0x128>
 800a6cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00b      	beq.n	800a6f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2204      	movs	r2, #4
 800a6de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6e6:	f043 0202 	orr.w	r2, r3, #2
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d017      	beq.n	800a72c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b00      	cmp	r3, #0
 800a706:	d105      	bne.n	800a714 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a708:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a70c:	4b5f      	ldr	r3, [pc, #380]	@ (800a88c <HAL_UART_IRQHandler+0x2c4>)
 800a70e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2208      	movs	r2, #8
 800a71a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a722:	f043 0208 	orr.w	r2, r3, #8
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <HAL_UART_IRQHandler+0x196>
 800a738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a73c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00c      	beq.n	800a75e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a74c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a754:	f043 0220 	orr.w	r2, r3, #32
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8278 	beq.w	800ac5a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d013      	beq.n	800a79e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a77a:	f003 0320 	and.w	r3, r3, #32
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d105      	bne.n	800a78e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b2:	2b40      	cmp	r3, #64	@ 0x40
 800a7b4:	d005      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d058      	beq.n	800a874 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 f903 	bl	800b9ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d2:	2b40      	cmp	r3, #64	@ 0x40
 800a7d4:	d148      	bne.n	800a868 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a80e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a81a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1d9      	bne.n	800a7d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d017      	beq.n	800a85c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a832:	4a18      	ldr	r2, [pc, #96]	@ (800a894 <HAL_UART_IRQHandler+0x2cc>)
 800a834:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fb ff7b 	bl	8006738 <HAL_DMA_Abort_IT>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01f      	beq.n	800a888 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a856:	4610      	mov	r0, r2
 800a858:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85a:	e015      	b.n	800a888 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a866:	e00f      	b.n	800a888 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a872:	e009      	b.n	800a888 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a886:	e1e8      	b.n	800ac5a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a888:	bf00      	nop
    return;
 800a88a:	e1e6      	b.n	800ac5a <HAL_UART_IRQHandler+0x692>
 800a88c:	10000001 	.word	0x10000001
 800a890:	04000120 	.word	0x04000120
 800a894:	0800bd57 	.word	0x0800bd57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	f040 8176 	bne.w	800ab8e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a6:	f003 0310 	and.w	r3, r3, #16
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 816f 	beq.w	800ab8e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8168 	beq.w	800ab8e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2210      	movs	r2, #16
 800a8c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d0:	2b40      	cmp	r3, #64	@ 0x40
 800a8d2:	f040 80dc 	bne.w	800aa8e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80b1 	beq.w	800aa50 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	f080 80a9 	bcs.w	800aa50 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a904:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	f040 8087 	bne.w	800aa2a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	461a      	mov	r2, r3
 800a942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a94a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a95e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1da      	bne.n	800a91c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3308      	adds	r3, #8
 800a96c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a98a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a98e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a99c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e1      	bne.n	800a966 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a9c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a9cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e3      	bne.n	800a9a2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9f8:	f023 0310 	bic.w	r3, r3, #16
 800a9fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e4      	bne.n	800a9e8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fb fe2e 	bl	8006686 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800aa42:	b292      	uxth	r2, r2
 800aa44:	1a8a      	subs	r2, r1, r2
 800aa46:	b292      	uxth	r2, r2
 800aa48:	4611      	mov	r1, r2
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa4e:	e106      	b.n	800ac5e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	f040 80ff 	bne.w	800ac5e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b20      	cmp	r3, #32
 800aa70:	f040 80f5 	bne.w	800ac5e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aa86:	4611      	mov	r1, r2
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
      return;
 800aa8c:	e0e7      	b.n	800ac5e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 80d9 	beq.w	800ac62 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800aab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80d4 	beq.w	800ac62 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	461a      	mov	r2, r3
 800aad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aadc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aade:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e4      	bne.n	800aaba <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	623b      	str	r3, [r7, #32]
   return(result);
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab06:	f023 0301 	bic.w	r3, r3, #1
 800ab0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3308      	adds	r3, #8
 800ab14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab18:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e1      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2220      	movs	r2, #32
 800ab30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f023 0310 	bic.w	r3, r3, #16
 800ab54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab62:	61fb      	str	r3, [r7, #28]
 800ab64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	69b9      	ldr	r1, [r7, #24]
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e4      	bne.n	800ab40 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2202      	movs	r2, #2
 800ab7a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab82:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ab86:	4611      	mov	r1, r2
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab8c:	e069      	b.n	800ac62 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d010      	beq.n	800abbc <HAL_UART_IRQHandler+0x5f4>
 800ab9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800abae:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abba:	e055      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d014      	beq.n	800abf2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800abc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d105      	bne.n	800abe0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800abd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d03e      	beq.n	800ac66 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
    }
    return;
 800abf0:	e039      	b.n	800ac66 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d009      	beq.n	800ac12 <HAL_UART_IRQHandler+0x64a>
 800abfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 f8b7 	bl	800bd7e <UART_EndTransmit_IT>
    return;
 800ac10:	e02a      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <HAL_UART_IRQHandler+0x66e>
 800ac1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d005      	beq.n	800ac36 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac34:	e018      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d012      	beq.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
 800ac42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	da0e      	bge.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac54:	e008      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac56:	bf00      	nop
 800ac58:	e006      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ac5a:	bf00      	nop
 800ac5c:	e004      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac5e:	bf00      	nop
 800ac60:	e002      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ac62:	bf00      	nop
 800ac64:	e000      	b.n	800ac68 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ac66:	bf00      	nop
  }
}
 800ac68:	37e8      	adds	r7, #232	@ 0xe8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a09      	ldr	r2, [pc, #36]	@ (800ad5c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d009      	beq.n	800ad50 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	615a      	str	r2, [r3, #20]
  }
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	40008000 	.word	0x40008000

0800ad60 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a18      	ldr	r2, [pc, #96]	@ (800add0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d027      	beq.n	800adc2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	d120      	bne.n	800adbe <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_UART_EnableReceiverTimeout+0x2a>
 800ad86:	2302      	movs	r3, #2
 800ad88:	e01c      	b.n	800adc4 <HAL_UART_EnableReceiverTimeout+0x64>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2224      	movs	r2, #36	@ 0x24
 800ad96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ada8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	e002      	b.n	800adc4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800adbe:	2302      	movs	r3, #2
 800adc0:	e000      	b.n	800adc4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
  }
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	40008000 	.word	0x40008000

0800add4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ae64 <UART_InitCallbacksToDefault+0x74>)
 800adfc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a19      	ldr	r2, [pc, #100]	@ (800ae68 <UART_InitCallbacksToDefault+0x78>)
 800ae04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a18      	ldr	r2, [pc, #96]	@ (800ae6c <UART_InitCallbacksToDefault+0x7c>)
 800ae0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a17      	ldr	r2, [pc, #92]	@ (800ae70 <UART_InitCallbacksToDefault+0x80>)
 800ae14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a16      	ldr	r2, [pc, #88]	@ (800ae74 <UART_InitCallbacksToDefault+0x84>)
 800ae1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a15      	ldr	r2, [pc, #84]	@ (800ae78 <UART_InitCallbacksToDefault+0x88>)
 800ae24:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a14      	ldr	r2, [pc, #80]	@ (800ae7c <UART_InitCallbacksToDefault+0x8c>)
 800ae2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a13      	ldr	r2, [pc, #76]	@ (800ae80 <UART_InitCallbacksToDefault+0x90>)
 800ae34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a12      	ldr	r2, [pc, #72]	@ (800ae84 <UART_InitCallbacksToDefault+0x94>)
 800ae3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a11      	ldr	r2, [pc, #68]	@ (800ae88 <UART_InitCallbacksToDefault+0x98>)
 800ae44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a10      	ldr	r2, [pc, #64]	@ (800ae8c <UART_InitCallbacksToDefault+0x9c>)
 800ae4c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a0f      	ldr	r2, [pc, #60]	@ (800ae90 <UART_InitCallbacksToDefault+0xa0>)
 800ae54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	0800ac85 	.word	0x0800ac85
 800ae68:	0800ac71 	.word	0x0800ac71
 800ae6c:	0800acad 	.word	0x0800acad
 800ae70:	0800ac99 	.word	0x0800ac99
 800ae74:	0800acc1 	.word	0x0800acc1
 800ae78:	0800acd5 	.word	0x0800acd5
 800ae7c:	0800ace9 	.word	0x0800ace9
 800ae80:	0800acfd 	.word	0x0800acfd
 800ae84:	0800bdd9 	.word	0x0800bdd9
 800ae88:	0800bded 	.word	0x0800bded
 800ae8c:	0800be01 	.word	0x0800be01
 800ae90:	0800ad11 	.word	0x0800ad11

0800ae94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae98:	b08c      	sub	sp, #48	@ 0x30
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	431a      	orrs	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4baa      	ldr	r3, [pc, #680]	@ (800b16c <UART_SetConfig+0x2d8>)
 800aec4:	4013      	ands	r3, r2
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aecc:	430b      	orrs	r3, r1
 800aece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a9f      	ldr	r2, [pc, #636]	@ (800b170 <UART_SetConfig+0x2dc>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aefc:	4313      	orrs	r3, r2
 800aefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800af0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af14:	430b      	orrs	r3, r1
 800af16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af1e:	f023 010f 	bic.w	r1, r3, #15
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a90      	ldr	r2, [pc, #576]	@ (800b174 <UART_SetConfig+0x2e0>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d125      	bne.n	800af84 <UART_SetConfig+0xf0>
 800af38:	4b8f      	ldr	r3, [pc, #572]	@ (800b178 <UART_SetConfig+0x2e4>)
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b03      	cmp	r3, #3
 800af44:	d81a      	bhi.n	800af7c <UART_SetConfig+0xe8>
 800af46:	a201      	add	r2, pc, #4	@ (adr r2, 800af4c <UART_SetConfig+0xb8>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af5d 	.word	0x0800af5d
 800af50:	0800af6d 	.word	0x0800af6d
 800af54:	0800af65 	.word	0x0800af65
 800af58:	0800af75 	.word	0x0800af75
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af62:	e116      	b.n	800b192 <UART_SetConfig+0x2fe>
 800af64:	2302      	movs	r3, #2
 800af66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6a:	e112      	b.n	800b192 <UART_SetConfig+0x2fe>
 800af6c:	2304      	movs	r3, #4
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e10e      	b.n	800b192 <UART_SetConfig+0x2fe>
 800af74:	2308      	movs	r3, #8
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e10a      	b.n	800b192 <UART_SetConfig+0x2fe>
 800af7c:	2310      	movs	r3, #16
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e106      	b.n	800b192 <UART_SetConfig+0x2fe>
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a7c      	ldr	r2, [pc, #496]	@ (800b17c <UART_SetConfig+0x2e8>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d138      	bne.n	800b000 <UART_SetConfig+0x16c>
 800af8e:	4b7a      	ldr	r3, [pc, #488]	@ (800b178 <UART_SetConfig+0x2e4>)
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af94:	f003 030c 	and.w	r3, r3, #12
 800af98:	2b0c      	cmp	r3, #12
 800af9a:	d82d      	bhi.n	800aff8 <UART_SetConfig+0x164>
 800af9c:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <UART_SetConfig+0x110>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afd9 	.word	0x0800afd9
 800afa8:	0800aff9 	.word	0x0800aff9
 800afac:	0800aff9 	.word	0x0800aff9
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800afe9 	.word	0x0800afe9
 800afb8:	0800aff9 	.word	0x0800aff9
 800afbc:	0800aff9 	.word	0x0800aff9
 800afc0:	0800aff9 	.word	0x0800aff9
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800aff9 	.word	0x0800aff9
 800afcc:	0800aff9 	.word	0x0800aff9
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800aff1 	.word	0x0800aff1
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afde:	e0d8      	b.n	800b192 <UART_SetConfig+0x2fe>
 800afe0:	2302      	movs	r3, #2
 800afe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe6:	e0d4      	b.n	800b192 <UART_SetConfig+0x2fe>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afee:	e0d0      	b.n	800b192 <UART_SetConfig+0x2fe>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff6:	e0cc      	b.n	800b192 <UART_SetConfig+0x2fe>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affe:	e0c8      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a5e      	ldr	r2, [pc, #376]	@ (800b180 <UART_SetConfig+0x2ec>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d125      	bne.n	800b056 <UART_SetConfig+0x1c2>
 800b00a:	4b5b      	ldr	r3, [pc, #364]	@ (800b178 <UART_SetConfig+0x2e4>)
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b010:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b014:	2b30      	cmp	r3, #48	@ 0x30
 800b016:	d016      	beq.n	800b046 <UART_SetConfig+0x1b2>
 800b018:	2b30      	cmp	r3, #48	@ 0x30
 800b01a:	d818      	bhi.n	800b04e <UART_SetConfig+0x1ba>
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	d00a      	beq.n	800b036 <UART_SetConfig+0x1a2>
 800b020:	2b20      	cmp	r3, #32
 800b022:	d814      	bhi.n	800b04e <UART_SetConfig+0x1ba>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <UART_SetConfig+0x19a>
 800b028:	2b10      	cmp	r3, #16
 800b02a:	d008      	beq.n	800b03e <UART_SetConfig+0x1aa>
 800b02c:	e00f      	b.n	800b04e <UART_SetConfig+0x1ba>
 800b02e:	2300      	movs	r3, #0
 800b030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b034:	e0ad      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b036:	2302      	movs	r3, #2
 800b038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03c:	e0a9      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b03e:	2304      	movs	r3, #4
 800b040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b044:	e0a5      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b046:	2308      	movs	r3, #8
 800b048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04c:	e0a1      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b04e:	2310      	movs	r3, #16
 800b050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b054:	e09d      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a4a      	ldr	r2, [pc, #296]	@ (800b184 <UART_SetConfig+0x2f0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d125      	bne.n	800b0ac <UART_SetConfig+0x218>
 800b060:	4b45      	ldr	r3, [pc, #276]	@ (800b178 <UART_SetConfig+0x2e4>)
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b066:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b06a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b06c:	d016      	beq.n	800b09c <UART_SetConfig+0x208>
 800b06e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b070:	d818      	bhi.n	800b0a4 <UART_SetConfig+0x210>
 800b072:	2b80      	cmp	r3, #128	@ 0x80
 800b074:	d00a      	beq.n	800b08c <UART_SetConfig+0x1f8>
 800b076:	2b80      	cmp	r3, #128	@ 0x80
 800b078:	d814      	bhi.n	800b0a4 <UART_SetConfig+0x210>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <UART_SetConfig+0x1f0>
 800b07e:	2b40      	cmp	r3, #64	@ 0x40
 800b080:	d008      	beq.n	800b094 <UART_SetConfig+0x200>
 800b082:	e00f      	b.n	800b0a4 <UART_SetConfig+0x210>
 800b084:	2300      	movs	r3, #0
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08a:	e082      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b08c:	2302      	movs	r3, #2
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b092:	e07e      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b094:	2304      	movs	r3, #4
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09a:	e07a      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b09c:	2308      	movs	r3, #8
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a2:	e076      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0aa:	e072      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a35      	ldr	r2, [pc, #212]	@ (800b188 <UART_SetConfig+0x2f4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d12a      	bne.n	800b10c <UART_SetConfig+0x278>
 800b0b6:	4b30      	ldr	r3, [pc, #192]	@ (800b178 <UART_SetConfig+0x2e4>)
 800b0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0c4:	d01a      	beq.n	800b0fc <UART_SetConfig+0x268>
 800b0c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0ca:	d81b      	bhi.n	800b104 <UART_SetConfig+0x270>
 800b0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0d0:	d00c      	beq.n	800b0ec <UART_SetConfig+0x258>
 800b0d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0d6:	d815      	bhi.n	800b104 <UART_SetConfig+0x270>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <UART_SetConfig+0x250>
 800b0dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0e0:	d008      	beq.n	800b0f4 <UART_SetConfig+0x260>
 800b0e2:	e00f      	b.n	800b104 <UART_SetConfig+0x270>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ea:	e052      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f2:	e04e      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b0f4:	2304      	movs	r3, #4
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fa:	e04a      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b102:	e046      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b104:	2310      	movs	r3, #16
 800b106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b10a:	e042      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a17      	ldr	r2, [pc, #92]	@ (800b170 <UART_SetConfig+0x2dc>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d13a      	bne.n	800b18c <UART_SetConfig+0x2f8>
 800b116:	4b18      	ldr	r3, [pc, #96]	@ (800b178 <UART_SetConfig+0x2e4>)
 800b118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b11c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b120:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b124:	d01a      	beq.n	800b15c <UART_SetConfig+0x2c8>
 800b126:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b12a:	d81b      	bhi.n	800b164 <UART_SetConfig+0x2d0>
 800b12c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b130:	d00c      	beq.n	800b14c <UART_SetConfig+0x2b8>
 800b132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b136:	d815      	bhi.n	800b164 <UART_SetConfig+0x2d0>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <UART_SetConfig+0x2b0>
 800b13c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b140:	d008      	beq.n	800b154 <UART_SetConfig+0x2c0>
 800b142:	e00f      	b.n	800b164 <UART_SetConfig+0x2d0>
 800b144:	2300      	movs	r3, #0
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14a:	e022      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b14c:	2302      	movs	r3, #2
 800b14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b152:	e01e      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b154:	2304      	movs	r3, #4
 800b156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b15a:	e01a      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b15c:	2308      	movs	r3, #8
 800b15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b162:	e016      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b164:	2310      	movs	r3, #16
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b16a:	e012      	b.n	800b192 <UART_SetConfig+0x2fe>
 800b16c:	cfff69f3 	.word	0xcfff69f3
 800b170:	40008000 	.word	0x40008000
 800b174:	40013800 	.word	0x40013800
 800b178:	40021000 	.word	0x40021000
 800b17c:	40004400 	.word	0x40004400
 800b180:	40004800 	.word	0x40004800
 800b184:	40004c00 	.word	0x40004c00
 800b188:	40005000 	.word	0x40005000
 800b18c:	2310      	movs	r3, #16
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4aae      	ldr	r2, [pc, #696]	@ (800b450 <UART_SetConfig+0x5bc>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	f040 8097 	bne.w	800b2cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b19e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1a2:	2b08      	cmp	r3, #8
 800b1a4:	d823      	bhi.n	800b1ee <UART_SetConfig+0x35a>
 800b1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ac <UART_SetConfig+0x318>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1d1 	.word	0x0800b1d1
 800b1b0:	0800b1ef 	.word	0x0800b1ef
 800b1b4:	0800b1d9 	.word	0x0800b1d9
 800b1b8:	0800b1ef 	.word	0x0800b1ef
 800b1bc:	0800b1df 	.word	0x0800b1df
 800b1c0:	0800b1ef 	.word	0x0800b1ef
 800b1c4:	0800b1ef 	.word	0x0800b1ef
 800b1c8:	0800b1ef 	.word	0x0800b1ef
 800b1cc:	0800b1e7 	.word	0x0800b1e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1d0:	f7fc fbbc 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800b1d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1d6:	e010      	b.n	800b1fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1d8:	4b9e      	ldr	r3, [pc, #632]	@ (800b454 <UART_SetConfig+0x5c0>)
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1dc:	e00d      	b.n	800b1fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1de:	f7fc fb47 	bl	8007870 <HAL_RCC_GetSysClockFreq>
 800b1e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1e4:	e009      	b.n	800b1fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1ec:	e005      	b.n	800b1fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8130 	beq.w	800b462 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b206:	4a94      	ldr	r2, [pc, #592]	@ (800b458 <UART_SetConfig+0x5c4>)
 800b208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b20c:	461a      	mov	r2, r3
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	fbb3 f3f2 	udiv	r3, r3, r2
 800b214:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	d305      	bcc.n	800b232 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d903      	bls.n	800b23a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b238:	e113      	b.n	800b462 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23c:	2200      	movs	r2, #0
 800b23e:	60bb      	str	r3, [r7, #8]
 800b240:	60fa      	str	r2, [r7, #12]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b246:	4a84      	ldr	r2, [pc, #528]	@ (800b458 <UART_SetConfig+0x5c4>)
 800b248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2200      	movs	r2, #0
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b25c:	f7f5 fcca 	bl	8000bf4 <__aeabi_uldivmod>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4610      	mov	r0, r2
 800b266:	4619      	mov	r1, r3
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	020b      	lsls	r3, r1, #8
 800b272:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b276:	0202      	lsls	r2, r0, #8
 800b278:	6979      	ldr	r1, [r7, #20]
 800b27a:	6849      	ldr	r1, [r1, #4]
 800b27c:	0849      	lsrs	r1, r1, #1
 800b27e:	2000      	movs	r0, #0
 800b280:	460c      	mov	r4, r1
 800b282:	4605      	mov	r5, r0
 800b284:	eb12 0804 	adds.w	r8, r2, r4
 800b288:	eb43 0905 	adc.w	r9, r3, r5
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	469a      	mov	sl, r3
 800b294:	4693      	mov	fp, r2
 800b296:	4652      	mov	r2, sl
 800b298:	465b      	mov	r3, fp
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7f5 fca9 	bl	8000bf4 <__aeabi_uldivmod>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2b0:	d308      	bcc.n	800b2c4 <UART_SetConfig+0x430>
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b8:	d204      	bcs.n	800b2c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6a3a      	ldr	r2, [r7, #32]
 800b2c0:	60da      	str	r2, [r3, #12]
 800b2c2:	e0ce      	b.n	800b462 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2ca:	e0ca      	b.n	800b462 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2d4:	d166      	bne.n	800b3a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b2d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2da:	2b08      	cmp	r3, #8
 800b2dc:	d827      	bhi.n	800b32e <UART_SetConfig+0x49a>
 800b2de:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <UART_SetConfig+0x450>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b311 	.word	0x0800b311
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b32f 	.word	0x0800b32f
 800b2f4:	0800b31f 	.word	0x0800b31f
 800b2f8:	0800b32f 	.word	0x0800b32f
 800b2fc:	0800b32f 	.word	0x0800b32f
 800b300:	0800b32f 	.word	0x0800b32f
 800b304:	0800b327 	.word	0x0800b327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b308:	f7fc fb20 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800b30c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b30e:	e014      	b.n	800b33a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b310:	f7fc fb32 	bl	8007978 <HAL_RCC_GetPCLK2Freq>
 800b314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b316:	e010      	b.n	800b33a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b318:	4b4e      	ldr	r3, [pc, #312]	@ (800b454 <UART_SetConfig+0x5c0>)
 800b31a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b31c:	e00d      	b.n	800b33a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b31e:	f7fc faa7 	bl	8007870 <HAL_RCC_GetSysClockFreq>
 800b322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b324:	e009      	b.n	800b33a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b32c:	e005      	b.n	800b33a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 8090 	beq.w	800b462 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b346:	4a44      	ldr	r2, [pc, #272]	@ (800b458 <UART_SetConfig+0x5c4>)
 800b348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b34c:	461a      	mov	r2, r3
 800b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b350:	fbb3 f3f2 	udiv	r3, r3, r2
 800b354:	005a      	lsls	r2, r3, #1
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	085b      	lsrs	r3, r3, #1
 800b35c:	441a      	add	r2, r3
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	fbb2 f3f3 	udiv	r3, r2, r3
 800b366:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	2b0f      	cmp	r3, #15
 800b36c:	d916      	bls.n	800b39c <UART_SetConfig+0x508>
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b374:	d212      	bcs.n	800b39c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	f023 030f 	bic.w	r3, r3, #15
 800b37e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	b29b      	uxth	r3, r3
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	8bfb      	ldrh	r3, [r7, #30]
 800b38e:	4313      	orrs	r3, r2
 800b390:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	8bfa      	ldrh	r2, [r7, #30]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	e062      	b.n	800b462 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3a2:	e05e      	b.n	800b462 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	d828      	bhi.n	800b3fe <UART_SetConfig+0x56a>
 800b3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b4 <UART_SetConfig+0x520>)
 800b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b2:	bf00      	nop
 800b3b4:	0800b3d9 	.word	0x0800b3d9
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3e9 	.word	0x0800b3e9
 800b3c0:	0800b3ff 	.word	0x0800b3ff
 800b3c4:	0800b3ef 	.word	0x0800b3ef
 800b3c8:	0800b3ff 	.word	0x0800b3ff
 800b3cc:	0800b3ff 	.word	0x0800b3ff
 800b3d0:	0800b3ff 	.word	0x0800b3ff
 800b3d4:	0800b3f7 	.word	0x0800b3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d8:	f7fc fab8 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800b3dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3de:	e014      	b.n	800b40a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3e0:	f7fc faca 	bl	8007978 <HAL_RCC_GetPCLK2Freq>
 800b3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3e6:	e010      	b.n	800b40a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b454 <UART_SetConfig+0x5c0>)
 800b3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3ec:	e00d      	b.n	800b40a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ee:	f7fc fa3f 	bl	8007870 <HAL_RCC_GetSysClockFreq>
 800b3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3f4:	e009      	b.n	800b40a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3fc:	e005      	b.n	800b40a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b408:	bf00      	nop
    }

    if (pclk != 0U)
 800b40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d028      	beq.n	800b462 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	4a10      	ldr	r2, [pc, #64]	@ (800b458 <UART_SetConfig+0x5c4>)
 800b416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b41a:	461a      	mov	r2, r3
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	085b      	lsrs	r3, r3, #1
 800b428:	441a      	add	r2, r3
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d910      	bls.n	800b45c <UART_SetConfig+0x5c8>
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b440:	d20c      	bcs.n	800b45c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b442:	6a3b      	ldr	r3, [r7, #32]
 800b444:	b29a      	uxth	r2, r3
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60da      	str	r2, [r3, #12]
 800b44c:	e009      	b.n	800b462 <UART_SetConfig+0x5ce>
 800b44e:	bf00      	nop
 800b450:	40008000 	.word	0x40008000
 800b454:	00f42400 	.word	0x00f42400
 800b458:	0800c17c 	.word	0x0800c17c
      }
      else
      {
        ret = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2201      	movs	r2, #1
 800b466:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2200      	movs	r2, #0
 800b476:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2200      	movs	r2, #0
 800b47c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b47e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b482:	4618      	mov	r0, r3
 800b484:	3730      	adds	r7, #48	@ 0x30
 800b486:	46bd      	mov	sp, r7
 800b488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b48c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00a      	beq.n	800b4d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4dc:	f003 0302 	and.w	r3, r3, #2
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00a      	beq.n	800b4fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fe:	f003 0304 	and.w	r3, r3, #4
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00a      	beq.n	800b53e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	430a      	orrs	r2, r1
 800b53c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	430a      	orrs	r2, r1
 800b55e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01a      	beq.n	800b5a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b58a:	d10a      	bne.n	800b5a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	605a      	str	r2, [r3, #4]
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b098      	sub	sp, #96	@ 0x60
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5e0:	f7f8 fff0 	bl	80045c4 <HAL_GetTick>
 800b5e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 0308 	and.w	r3, r3, #8
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d12f      	bne.n	800b654 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f88e 	bl	800b724 <UART_WaitOnFlagUntilTimeout>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d022      	beq.n	800b654 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b622:	653b      	str	r3, [r7, #80]	@ 0x50
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b62c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b62e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e6      	bne.n	800b60e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2220      	movs	r2, #32
 800b644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e063      	b.n	800b71c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0304 	and.w	r3, r3, #4
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d149      	bne.n	800b6f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b662:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b66a:	2200      	movs	r2, #0
 800b66c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f857 	bl	800b724 <UART_WaitOnFlagUntilTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d03c      	beq.n	800b6f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	623b      	str	r3, [r7, #32]
   return(result);
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b69c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e6      	bne.n	800b67c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f023 0301 	bic.w	r3, r3, #1
 800b6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6ce:	61fa      	str	r2, [r7, #28]
 800b6d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	69b9      	ldr	r1, [r7, #24]
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	617b      	str	r3, [r7, #20]
   return(result);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e5      	bne.n	800b6ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e012      	b.n	800b71c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2220      	movs	r2, #32
 800b702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3758      	adds	r7, #88	@ 0x58
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	4613      	mov	r3, r2
 800b732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b734:	e04f      	b.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d04b      	beq.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b73e:	f7f8 ff41 	bl	80045c4 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d302      	bcc.n	800b754 <UART_WaitOnFlagUntilTimeout+0x30>
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e04e      	b.n	800b7f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	d037      	beq.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b80      	cmp	r3, #128	@ 0x80
 800b76a:	d034      	beq.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b40      	cmp	r3, #64	@ 0x40
 800b770:	d031      	beq.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	f003 0308 	and.w	r3, r3, #8
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d110      	bne.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2208      	movs	r2, #8
 800b786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f920 	bl	800b9ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2208      	movs	r2, #8
 800b792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e029      	b.n	800b7f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7b0:	d111      	bne.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f906 	bl	800b9ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e00f      	b.n	800b7f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	69da      	ldr	r2, [r3, #28]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2301      	moveq	r3, #1
 800b7e8:	2300      	movne	r3, #0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d0a0      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b096      	sub	sp, #88	@ 0x58
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	88fa      	ldrh	r2, [r7, #6]
 800b818:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2222      	movs	r2, #34	@ 0x22
 800b828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b832:	2b00      	cmp	r3, #0
 800b834:	d02d      	beq.n	800b892 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b83c:	4a40      	ldr	r2, [pc, #256]	@ (800b940 <UART_Start_Receive_DMA+0x140>)
 800b83e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b846:	4a3f      	ldr	r2, [pc, #252]	@ (800b944 <UART_Start_Receive_DMA+0x144>)
 800b848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b850:	4a3d      	ldr	r2, [pc, #244]	@ (800b948 <UART_Start_Receive_DMA+0x148>)
 800b852:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b85a:	2200      	movs	r2, #0
 800b85c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3324      	adds	r3, #36	@ 0x24
 800b86a:	4619      	mov	r1, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b870:	461a      	mov	r2, r3
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	f7fa fe8c 	bl	8006590 <HAL_DMA_Start_IT>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d009      	beq.n	800b892 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2210      	movs	r2, #16
 800b882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e051      	b.n	800b936 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d018      	beq.n	800b8cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b8c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e6      	bne.n	800b89a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8ec:	637a      	str	r2, [r7, #52]	@ 0x34
 800b8ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e5      	bne.n	800b8cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	613b      	str	r3, [r7, #16]
   return(result);
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b920:	623a      	str	r2, [r7, #32]
 800b922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	69f9      	ldr	r1, [r7, #28]
 800b926:	6a3a      	ldr	r2, [r7, #32]
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e5      	bne.n	800b900 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3758      	adds	r7, #88	@ 0x58
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	0800bb59 	.word	0x0800bb59
 800b944:	0800bc8d 	.word	0x0800bc8d
 800b948:	0800bcd3 	.word	0x0800bcd3

0800b94c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b08f      	sub	sp, #60	@ 0x3c
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	e853 3f00 	ldrex	r3, [r3]
 800b960:	61fb      	str	r3, [r7, #28]
   return(result);
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b968:	637b      	str	r3, [r7, #52]	@ 0x34
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b974:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e6      	bne.n	800b954 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3308      	adds	r3, #8
 800b98c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	60bb      	str	r3, [r7, #8]
   return(result);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b99c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a6:	61ba      	str	r2, [r7, #24]
 800b9a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	6979      	ldr	r1, [r7, #20]
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	e841 2300 	strex	r3, r2, [r1]
 800b9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1e5      	bne.n	800b986 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2220      	movs	r2, #32
 800b9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b9c2:	bf00      	nop
 800b9c4:	373c      	adds	r7, #60	@ 0x3c
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b095      	sub	sp, #84	@ 0x54
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9de:	e853 3f00 	ldrex	r3, [r3]
 800b9e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9fc:	e841 2300 	strex	r3, r2, [r1]
 800ba00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1e6      	bne.n	800b9d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba1e:	f023 0301 	bic.w	r3, r3, #1
 800ba22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3308      	adds	r3, #8
 800ba2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e3      	bne.n	800ba08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d118      	bne.n	800ba7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f023 0310 	bic.w	r3, r3, #16
 800ba5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba66:	61bb      	str	r3, [r7, #24]
 800ba68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6979      	ldr	r1, [r7, #20]
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	613b      	str	r3, [r7, #16]
   return(result);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e6      	bne.n	800ba48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba8e:	bf00      	nop
 800ba90:	3754      	adds	r7, #84	@ 0x54
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b090      	sub	sp, #64	@ 0x40
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d137      	bne.n	800bb26 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab8:	2200      	movs	r2, #0
 800baba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800babe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3308      	adds	r3, #8
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	623b      	str	r3, [r7, #32]
   return(result);
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3308      	adds	r3, #8
 800badc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bade:	633a      	str	r2, [r7, #48]	@ 0x30
 800bae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e5      	bne.n	800babe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800baf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	69b9      	ldr	r1, [r7, #24]
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e6      	bne.n	800baf2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb24:	e004      	b.n	800bb30 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bb2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb2e:	4798      	blx	r3
}
 800bb30:	bf00      	nop
 800bb32:	3740      	adds	r7, #64	@ 0x40
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b09c      	sub	sp, #112	@ 0x70
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d171      	bne.n	800bc58 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bb74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb84:	e853 3f00 	ldrex	r3, [r3]
 800bb88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bba2:	e841 2300 	strex	r3, r2, [r1]
 800bba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1e6      	bne.n	800bb7c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	e853 3f00 	ldrex	r3, [r3]
 800bbbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bbbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc0:	f023 0301 	bic.w	r3, r3, #1
 800bbc4:	667b      	str	r3, [r7, #100]	@ 0x64
 800bbc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3308      	adds	r3, #8
 800bbcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bbce:	647a      	str	r2, [r7, #68]	@ 0x44
 800bbd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e5      	bne.n	800bbae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	623b      	str	r3, [r7, #32]
   return(result);
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbf8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc02:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e5      	bne.n	800bbe2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d118      	bne.n	800bc58 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f023 0310 	bic.w	r3, r3, #16
 800bc3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	69b9      	ldr	r1, [r7, #24]
 800bc4a:	69fa      	ldr	r2, [r7, #28]
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	617b      	str	r3, [r7, #20]
   return(result);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e6      	bne.n	800bc26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d109      	bne.n	800bc7a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800bc66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bc6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc6e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bc72:	4611      	mov	r1, r2
 800bc74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc76:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc78:	e004      	b.n	800bc84 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800bc7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bc82:	4798      	blx	r3
}
 800bc84:	bf00      	nop
 800bc86:	3770      	adds	r7, #112	@ 0x70
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d10b      	bne.n	800bcc0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bcb4:	0852      	lsrs	r2, r2, #1
 800bcb6:	b292      	uxth	r2, r2
 800bcb8:	4611      	mov	r1, r2
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcbe:	e004      	b.n	800bcca <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	4798      	blx	r3
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bce6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcfa:	2b80      	cmp	r3, #128	@ 0x80
 800bcfc:	d109      	bne.n	800bd12 <UART_DMAError+0x40>
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b21      	cmp	r3, #33	@ 0x21
 800bd02:	d106      	bne.n	800bd12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bd0c:	6978      	ldr	r0, [r7, #20]
 800bd0e:	f7ff fe1d 	bl	800b94c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd1c:	2b40      	cmp	r3, #64	@ 0x40
 800bd1e:	d109      	bne.n	800bd34 <UART_DMAError+0x62>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2b22      	cmp	r3, #34	@ 0x22
 800bd24:	d106      	bne.n	800bd34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f7ff fe4d 	bl	800b9ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd3a:	f043 0210 	orr.w	r2, r3, #16
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd4e:	bf00      	nop
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd76:	bf00      	nop
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b088      	sub	sp, #32
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	6979      	ldr	r1, [r7, #20]
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e6      	bne.n	800bd86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2220      	movs	r2, #32
 800bdbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdd0:	bf00      	nop
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <HAL_UARTEx_DisableFifoMode+0x16>
 800be26:	2302      	movs	r3, #2
 800be28:	e027      	b.n	800be7a <HAL_UARTEx_DisableFifoMode+0x66>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2224      	movs	r2, #36	@ 0x24
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 0201 	bic.w	r2, r2, #1
 800be50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e02d      	b.n	800befa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2224      	movs	r2, #36	@ 0x24
 800beaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f850 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf16:	2302      	movs	r3, #2
 800bf18:	e02d      	b.n	800bf76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2224      	movs	r2, #36	@ 0x24
 800bf26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f022 0201 	bic.w	r2, r2, #1
 800bf40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	430a      	orrs	r2, r1
 800bf54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f812 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d108      	bne.n	800bfa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfa0:	e031      	b.n	800c006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfa2:	2308      	movs	r3, #8
 800bfa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfa6:	2308      	movs	r3, #8
 800bfa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	0e5b      	lsrs	r3, r3, #25
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	0f5b      	lsrs	r3, r3, #29
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	7b3a      	ldrb	r2, [r7, #12]
 800bfce:	4911      	ldr	r1, [pc, #68]	@ (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfd0:	5c8a      	ldrb	r2, [r1, r2]
 800bfd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfd6:	7b3a      	ldrb	r2, [r7, #12]
 800bfd8:	490f      	ldr	r1, [pc, #60]	@ (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bfda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	7b7a      	ldrb	r2, [r7, #13]
 800bfec:	4909      	ldr	r1, [pc, #36]	@ (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfee:	5c8a      	ldrb	r2, [r1, r2]
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	4908      	ldr	r1, [pc, #32]	@ (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bffa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	0800c194 	.word	0x0800c194
 800c018:	0800c19c 	.word	0x0800c19c

0800c01c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	ed93 7a06 	vldr	s14, [r3, #24]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c032:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	edd3 7a08 	vldr	s15, [r3, #32]
 800c03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	edd3 7a06 	vldr	s15, [r3, #24]
 800c04c:	eeb1 7a67 	vneg.f32	s14, s15
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	edd3 7a08 	vldr	s15, [r3, #32]
 800c056:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c05a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a1a      	ldr	r2, [r3, #32]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	330c      	adds	r3, #12
 800c076:	220c      	movs	r2, #12
 800c078:	2100      	movs	r1, #0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 f804 	bl	800c088 <memset>
  }

}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <memset>:
 800c088:	4402      	add	r2, r0
 800c08a:	4603      	mov	r3, r0
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d100      	bne.n	800c092 <memset+0xa>
 800c090:	4770      	bx	lr
 800c092:	f803 1b01 	strb.w	r1, [r3], #1
 800c096:	e7f9      	b.n	800c08c <memset+0x4>

0800c098 <__errno>:
 800c098:	4b01      	ldr	r3, [pc, #4]	@ (800c0a0 <__errno+0x8>)
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000224 	.word	0x20000224

0800c0a4 <__libc_init_array>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	4d0d      	ldr	r5, [pc, #52]	@ (800c0dc <__libc_init_array+0x38>)
 800c0a8:	4c0d      	ldr	r4, [pc, #52]	@ (800c0e0 <__libc_init_array+0x3c>)
 800c0aa:	1b64      	subs	r4, r4, r5
 800c0ac:	10a4      	asrs	r4, r4, #2
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	42a6      	cmp	r6, r4
 800c0b2:	d109      	bne.n	800c0c8 <__libc_init_array+0x24>
 800c0b4:	4d0b      	ldr	r5, [pc, #44]	@ (800c0e4 <__libc_init_array+0x40>)
 800c0b6:	4c0c      	ldr	r4, [pc, #48]	@ (800c0e8 <__libc_init_array+0x44>)
 800c0b8:	f000 f848 	bl	800c14c <_init>
 800c0bc:	1b64      	subs	r4, r4, r5
 800c0be:	10a4      	asrs	r4, r4, #2
 800c0c0:	2600      	movs	r6, #0
 800c0c2:	42a6      	cmp	r6, r4
 800c0c4:	d105      	bne.n	800c0d2 <__libc_init_array+0x2e>
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0cc:	4798      	blx	r3
 800c0ce:	3601      	adds	r6, #1
 800c0d0:	e7ee      	b.n	800c0b0 <__libc_init_array+0xc>
 800c0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0d6:	4798      	blx	r3
 800c0d8:	3601      	adds	r6, #1
 800c0da:	e7f2      	b.n	800c0c2 <__libc_init_array+0x1e>
 800c0dc:	0800c1ac 	.word	0x0800c1ac
 800c0e0:	0800c1ac 	.word	0x0800c1ac
 800c0e4:	0800c1ac 	.word	0x0800c1ac
 800c0e8:	0800c1b0 	.word	0x0800c1b0

0800c0ec <memcpy>:
 800c0ec:	440a      	add	r2, r1
 800c0ee:	4291      	cmp	r1, r2
 800c0f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0f4:	d100      	bne.n	800c0f8 <memcpy+0xc>
 800c0f6:	4770      	bx	lr
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c102:	4291      	cmp	r1, r2
 800c104:	d1f9      	bne.n	800c0fa <memcpy+0xe>
 800c106:	bd10      	pop	{r4, pc}

0800c108 <sqrtf>:
 800c108:	b508      	push	{r3, lr}
 800c10a:	ed2d 8b02 	vpush	{d8}
 800c10e:	eeb0 8a40 	vmov.f32	s16, s0
 800c112:	f000 f817 	bl	800c144 <__ieee754_sqrtf>
 800c116:	eeb4 8a48 	vcmp.f32	s16, s16
 800c11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11e:	d60c      	bvs.n	800c13a <sqrtf+0x32>
 800c120:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c140 <sqrtf+0x38>
 800c124:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12c:	d505      	bpl.n	800c13a <sqrtf+0x32>
 800c12e:	f7ff ffb3 	bl	800c098 <__errno>
 800c132:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c136:	2321      	movs	r3, #33	@ 0x21
 800c138:	6003      	str	r3, [r0, #0]
 800c13a:	ecbd 8b02 	vpop	{d8}
 800c13e:	bd08      	pop	{r3, pc}
 800c140:	00000000 	.word	0x00000000

0800c144 <__ieee754_sqrtf>:
 800c144:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c148:	4770      	bx	lr
	...

0800c14c <_init>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr

0800c158 <_fini>:
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	bf00      	nop
 800c15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15e:	bc08      	pop	{r3}
 800c160:	469e      	mov	lr, r3
 800c162:	4770      	bx	lr

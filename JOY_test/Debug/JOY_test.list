
JOY_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ff4  08003ff4  00004ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004004  08004004  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004004  08004004  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004004  08004004  00005004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004008  08004008  00005008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800400c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004018  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004018  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bce0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d65  00000000  00000000  00011d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00013a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085d  00000000  00000000  000145b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002568f  00000000  00000000  00014e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfee  00000000  00000000  0003a49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6628  00000000  00000000  0004648a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  0013caf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003fdc 	.word	0x08003fdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003fdc 	.word	0x08003fdc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fae7 	bl	80007ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f820 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f91c 	bl	8000460 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f8f0 	bl	800040c <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f866 	bl	80002fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * )ADC_RawRead, 2);
 8000230:	2202      	movs	r2, #2
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <main+0x3c>)
 8000234:	4808      	ldr	r0, [pc, #32]	@ (8000258 <main+0x40>)
 8000236:	f000 ff47 	bl	80010c8 <HAL_ADC_Start_DMA>
    /* USER CODE BEGIN 3 */
//	  for(uint8_t i = 0; i < hadc2.Init.NbrOfConversion; i++){
//		  xValue = (uint16_t) ADC_RawRead[0];
//		  yValue = (uint16_t) ADC_RawRead[1];
//	  }
	  xValue = (uint16_t) ADC_RawRead[0];
 800023a:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <main+0x3c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	b29a      	uxth	r2, r3
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <main+0x44>)
 8000242:	801a      	strh	r2, [r3, #0]
	  yValue = (uint16_t) ADC_RawRead[1];
 8000244:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <main+0x3c>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	b29a      	uxth	r2, r3
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <main+0x48>)
 800024c:	801a      	strh	r2, [r3, #0]
	  xValue = (uint16_t) ADC_RawRead[0];
 800024e:	bf00      	nop
 8000250:	e7f3      	b.n	800023a <main+0x22>
 8000252:	bf00      	nop
 8000254:	200000f4 	.word	0x200000f4
 8000258:	20000028 	.word	0x20000028
 800025c:	200000fc 	.word	0x200000fc
 8000260:	200000fe 	.word	0x200000fe

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	@ 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2238      	movs	r2, #56	@ 0x38
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fe86 	bl	8003f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000286:	2000      	movs	r0, #0
 8000288:	f002 fe84 	bl	8002f94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2340      	movs	r3, #64	@ 0x40
 8000298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002a2:	2304      	movs	r3, #4
 80002a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002a6:	2355      	movs	r3, #85	@ 0x55
 80002a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 ff1e 	bl	80030fc <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f957 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2303      	movs	r3, #3
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2104      	movs	r1, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fa1c 	bl	8003720 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ee:	f000 f943 	bl	8000578 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3750      	adds	r7, #80	@ 0x50
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08c      	sub	sp, #48	@ 0x30
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2220      	movs	r2, #32
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f003 fe35 	bl	8003f84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800031a:	4b39      	ldr	r3, [pc, #228]	@ (8000400 <MX_ADC1_Init+0x104>)
 800031c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000322:	4b37      	ldr	r3, [pc, #220]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000324:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032a:	4b35      	ldr	r3, [pc, #212]	@ (8000400 <MX_ADC1_Init+0x104>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000330:	4b33      	ldr	r3, [pc, #204]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000336:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800033c:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <MX_ADC1_Init+0x104>)
 800033e:	2201      	movs	r2, #1
 8000340:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000342:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000344:	2204      	movs	r2, #4
 8000346:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000348:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <MX_ADC1_Init+0x104>)
 800034a:	2200      	movs	r2, #0
 800034c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000350:	2201      	movs	r2, #1
 8000352:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000354:	4b2a      	ldr	r3, [pc, #168]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000356:	2202      	movs	r2, #2
 8000358:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <MX_ADC1_Init+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_ADC1_Init+0x104>)
 800036a:	2200      	movs	r2, #0
 800036c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000370:	2201      	movs	r2, #1
 8000372:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000378:	2200      	movs	r2, #0
 800037a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800037c:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <MX_ADC1_Init+0x104>)
 800037e:	2200      	movs	r2, #0
 8000380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000384:	481e      	ldr	r0, [pc, #120]	@ (8000400 <MX_ADC1_Init+0x104>)
 8000386:	f000 fce3 	bl	8000d50 <HAL_ADC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000390:	f000 f8f2 	bl	8000578 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800039c:	4619      	mov	r1, r3
 800039e:	4818      	ldr	r0, [pc, #96]	@ (8000400 <MX_ADC1_Init+0x104>)
 80003a0:	f001 ffb0 	bl	8002304 <HAL_ADCEx_MultiModeConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003aa:	f000 f8e5 	bl	8000578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_ADC1_Init+0x108>)
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b2:	2306      	movs	r3, #6
 80003b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003b6:	2307      	movs	r3, #7
 80003b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ba:	237f      	movs	r3, #127	@ 0x7f
 80003bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003be:	2304      	movs	r3, #4
 80003c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	480d      	ldr	r0, [pc, #52]	@ (8000400 <MX_ADC1_Init+0x104>)
 80003cc:	f001 f9d8 	bl	8001780 <HAL_ADC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003d6:	f000 f8cf 	bl	8000578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <MX_ADC1_Init+0x10c>)
 80003dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003de:	230c      	movs	r3, #12
 80003e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	4806      	ldr	r0, [pc, #24]	@ (8000400 <MX_ADC1_Init+0x104>)
 80003e8:	f001 f9ca 	bl	8001780 <HAL_ADC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80003f2:	f000 f8c1 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	3730      	adds	r7, #48	@ 0x30
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028
 8000404:	04300002 	.word	0x04300002
 8000408:	08600004 	.word	0x08600004

0800040c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	@ (800045c <MX_DMA_Init+0x50>)
 8000414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000416:	4a11      	ldr	r2, [pc, #68]	@ (800045c <MX_DMA_Init+0x50>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	6493      	str	r3, [r2, #72]	@ 0x48
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_DMA_Init+0x50>)
 8000420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <MX_DMA_Init+0x50>)
 800042c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800042e:	4a0b      	ldr	r2, [pc, #44]	@ (800045c <MX_DMA_Init+0x50>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6493      	str	r3, [r2, #72]	@ 0x48
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_DMA_Init+0x50>)
 8000438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	200c      	movs	r0, #12
 8000448:	f002 f93f 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800044c:	200c      	movs	r0, #12
 800044e:	f002 f956 	bl	80026fe <HAL_NVIC_EnableIRQ>

}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	@ 0x28
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b3e      	ldr	r3, [pc, #248]	@ (8000570 <MX_GPIO_Init+0x110>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	4a3d      	ldr	r2, [pc, #244]	@ (8000570 <MX_GPIO_Init+0x110>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000482:	4b3b      	ldr	r3, [pc, #236]	@ (8000570 <MX_GPIO_Init+0x110>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	f003 0304 	and.w	r3, r3, #4
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b38      	ldr	r3, [pc, #224]	@ (8000570 <MX_GPIO_Init+0x110>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a37      	ldr	r2, [pc, #220]	@ (8000570 <MX_GPIO_Init+0x110>)
 8000494:	f043 0320 	orr.w	r3, r3, #32
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049a:	4b35      	ldr	r3, [pc, #212]	@ (8000570 <MX_GPIO_Init+0x110>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	f003 0320 	and.w	r3, r3, #32
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b32      	ldr	r3, [pc, #200]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	4a31      	ldr	r2, [pc, #196]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004c4:	f043 0302 	orr.w	r3, r3, #2
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b29      	ldr	r3, [pc, #164]	@ (8000570 <MX_GPIO_Init+0x110>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f002 fd1d 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	481e      	ldr	r0, [pc, #120]	@ (8000574 <MX_GPIO_Init+0x114>)
 80004fa:	f002 fb8d 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80004fe:	2306      	movs	r3, #6
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000502:	2303      	movs	r3, #3
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4818      	ldr	r0, [pc, #96]	@ (8000574 <MX_GPIO_Init+0x114>)
 8000512:	f002 fb81 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000516:	230c      	movs	r3, #12
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000526:	230c      	movs	r3, #12
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f002 fb70 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000538:	2320      	movs	r3, #32
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f002 fb61 	bl	8002c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2028      	movs	r0, #40	@ 0x28
 800055c:	f002 f8b5 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000560:	2028      	movs	r0, #40	@ 0x28
 8000562:	f002 f8cc 	bl	80026fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	@ 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	48000800 	.word	0x48000800

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x44>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6613      	str	r3, [r2, #96]	@ 0x60
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a6:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005ba:	f002 fd8f 	bl	80030dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09e      	sub	sp, #120	@ 0x78
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2254      	movs	r2, #84	@ 0x54
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fcc9 	bl	8003f84 <memset>
  if(hadc->Instance==ADC1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80005fa:	d167      	bne.n	80006cc <HAL_ADC_MspInit+0x100>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000600:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000602:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000606:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fa6b 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000618:	f7ff ffae 	bl	8000578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800061c:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000620:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 8000622:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000628:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	4a26      	ldr	r2, [pc, #152]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <HAL_ADC_MspInit+0x108>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800064c:	2303      	movs	r3, #3
 800064e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000650:	2303      	movs	r3, #3
 8000652:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f002 fad9 	bl	8002c18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 8000668:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <HAL_ADC_MspInit+0x110>)
 800066a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 800066e:	2205      	movs	r2, #5
 8000670:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 8000686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800068a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 800068e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000692:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 8000696:	2220      	movs	r2, #32
 8000698:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 80006a2:	f002 f847 	bl	8002734 <HAL_DMA_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80006ac:	f7ff ff64 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 80006b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_ADC_MspInit+0x10c>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2012      	movs	r0, #18
 80006c2:	f002 f802 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006c6:	2012      	movs	r0, #18
 80006c8:	f002 f819 	bl	80026fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006cc:	bf00      	nop
 80006ce:	3778      	adds	r7, #120	@ 0x78
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	20000094 	.word	0x20000094
 80006dc:	4002001c 	.word	0x4002001c

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f8ad 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <DMA1_Channel2_IRQHandler+0x10>)
 8000746:	f002 f918 	bl	800297a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <ADC1_2_IRQHandler+0x10>)
 800075a:	f000 fd89 	bl	8001270 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028

08000768 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800076c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000770:	f002 fbec 	bl	8002f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff ffea 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	@ (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f003 fbe3 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fd23 	bl	8000218 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	0800400c 	.word	0x0800400c
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	20000104 	.word	0x20000104

080007ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC3_IRQHandler>

080007ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f001 ff5b 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f80e 	bl	8000820 <HAL_InitTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	e001      	b.n	8000814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000810:	f7ff feb8 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000814:	79fb      	ldrb	r3, [r7, #7]

}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_InitTick+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d022      	beq.n	800087a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_InitTick+0x6c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <HAL_InitTick+0x68>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000840:	fbb1 f3f3 	udiv	r3, r1, r3
 8000844:	fbb2 f3f3 	udiv	r3, r2, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f001 ff66 	bl	800271a <HAL_SYSTICK_Config>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10f      	bne.n	8000874 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b0f      	cmp	r3, #15
 8000858:	d809      	bhi.n	800086e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085a:	2200      	movs	r2, #0
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f001 ff32 	bl	80026ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <HAL_InitTick+0x70>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e007      	b.n	800087e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e004      	b.n	800087e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e001      	b.n	800087e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000008 	.word	0x20000008
 800088c:	20000000 	.word	0x20000000
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x1c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_IncTick+0x20>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <HAL_IncTick+0x1c>)
 80008a4:	6013      	str	r3, [r2, #0]
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	20000100 	.word	0x20000100
 80008b4:	20000008 	.word	0x20000008

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000100 	.word	0x20000100

080008d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	609a      	str	r2, [r3, #8]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	609a      	str	r2, [r3, #8]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3360      	adds	r3, #96	@ 0x60
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <LL_ADC_SetOffset+0x44>)
 800095a:	4013      	ands	r3, r2
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	430a      	orrs	r2, r1
 8000966:	4313      	orrs	r3, r2
 8000968:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000970:	bf00      	nop
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	03fff000 	.word	0x03fff000

08000980 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3360      	adds	r3, #96	@ 0x60
 800098e:	461a      	mov	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3360      	adds	r3, #96	@ 0x60
 80009bc:	461a      	mov	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80009d6:	bf00      	nop
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b087      	sub	sp, #28
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3360      	adds	r3, #96	@ 0x60
 80009f2:	461a      	mov	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3360      	adds	r3, #96	@ 0x60
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	615a      	str	r2, [r3, #20]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b087      	sub	sp, #28
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3330      	adds	r3, #48	@ 0x30
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	4413      	add	r3, r2
 8000ab8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	211f      	movs	r1, #31
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	401a      	ands	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0e9b      	lsrs	r3, r3, #26
 8000ad2:	f003 011f 	and.w	r1, r3, #31
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ae6:	bf00      	nop
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3314      	adds	r3, #20
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	0e5b      	lsrs	r3, r3, #25
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	4413      	add	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	0d1b      	lsrs	r3, r3, #20
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	2107      	movs	r1, #7
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	0d1b      	lsrs	r3, r3, #20
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b62:	bf00      	nop
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0318 	and.w	r3, r3, #24
 8000b92:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b94:	40d9      	lsrs	r1, r3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	400b      	ands	r3, r1
 8000b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	0007ffff 	.word	0x0007ffff

08000bb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 031f 	and.w	r3, r3, #31
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6093      	str	r3, [r2, #8]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c28:	d101      	bne.n	8000c2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c78:	d101      	bne.n	8000c7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <LL_ADC_IsEnabled+0x18>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <LL_ADC_IsEnabled+0x1a>
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000cea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cee:	f043 0204 	orr.w	r2, r3, #4
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d101      	bne.n	8000d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d101      	bne.n	8000d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e1a9      	b.n	80010be <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fc27 	bl	80005cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff3f 	bl	8000c14 <LL_ADC_IsDeepPowerDownEnabled>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d004      	beq.n	8000da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff25 	bl	8000bf0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff5a 	bl	8000c64 <LL_ADC_IsInternalRegulatorEnabled>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d115      	bne.n	8000de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff3e 	bl	8000c3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dc0:	4b9c      	ldr	r3, [pc, #624]	@ (8001034 <HAL_ADC_Init+0x2e4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	099b      	lsrs	r3, r3, #6
 8000dc6:	4a9c      	ldr	r2, [pc, #624]	@ (8001038 <HAL_ADC_Init+0x2e8>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	099b      	lsrs	r3, r3, #6
 8000dce:	3301      	adds	r3, #1
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dd4:	e002      	b.n	8000ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f9      	bne.n	8000dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff3c 	bl	8000c64 <LL_ADC_IsInternalRegulatorEnabled>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10d      	bne.n	8000e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000df6:	f043 0210 	orr.w	r2, r3, #16
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff75 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 8000e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8142 	bne.w	80010ac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 813e 	bne.w	80010ac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e38:	f043 0202 	orr.w	r2, r3, #2
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff35 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d141      	bne.n	8000ed4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e58:	d004      	beq.n	8000e64 <HAL_ADC_Init+0x114>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a77      	ldr	r2, [pc, #476]	@ (800103c <HAL_ADC_Init+0x2ec>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10f      	bne.n	8000e84 <HAL_ADC_Init+0x134>
 8000e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000e68:	f7ff ff24 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	4873      	ldr	r0, [pc, #460]	@ (800103c <HAL_ADC_Init+0x2ec>)
 8000e70:	f7ff ff20 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4323      	orrs	r3, r4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	e012      	b.n	8000eaa <HAL_ADC_Init+0x15a>
 8000e84:	486e      	ldr	r0, [pc, #440]	@ (8001040 <HAL_ADC_Init+0x2f0>)
 8000e86:	f7ff ff15 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	486d      	ldr	r0, [pc, #436]	@ (8001044 <HAL_ADC_Init+0x2f4>)
 8000e8e:	f7ff ff11 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e92:	4603      	mov	r3, r0
 8000e94:	431c      	orrs	r4, r3
 8000e96:	486c      	ldr	r0, [pc, #432]	@ (8001048 <HAL_ADC_Init+0x2f8>)
 8000e98:	f7ff ff0c 	bl	8000cb4 <LL_ADC_IsEnabled>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4323      	orrs	r3, r4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d012      	beq.n	8000ed4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eb6:	d004      	beq.n	8000ec2 <HAL_ADC_Init+0x172>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800103c <HAL_ADC_Init+0x2ec>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Init+0x176>
 8000ec2:	4a62      	ldr	r2, [pc, #392]	@ (800104c <HAL_ADC_Init+0x2fc>)
 8000ec4:	e000      	b.n	8000ec8 <HAL_ADC_Init+0x178>
 8000ec6:	4a62      	ldr	r2, [pc, #392]	@ (8001050 <HAL_ADC_Init+0x300>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f7ff fcfe 	bl	80008d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7f5b      	ldrb	r3, [r3, #29]
 8000ed8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ede:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000ee4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000eea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ef2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d106      	bne.n	8000f10 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f06:	3b01      	subs	r3, #1
 8000f08:	045b      	lsls	r3, r3, #17
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	4b48      	ldr	r3, [pc, #288]	@ (8001054 <HAL_ADC_Init+0x304>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fee4 	bl	8000d28 <LL_ADC_INJ_IsConversionOngoing>
 8000f60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d17f      	bne.n	8001068 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d17c      	bne.n	8001068 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f8a:	f023 0302 	bic.w	r3, r3, #2
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	430b      	orrs	r3, r1
 8000f96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d017      	beq.n	8000fd0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000fb8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6911      	ldr	r1, [r2, #16]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8000fce:	e013      	b.n	8000ff8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000fde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d12a      	bne.n	8001058 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001018:	4311      	orrs	r1, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800101e:	4311      	orrs	r1, r2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001024:	430a      	orrs	r2, r1
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0201 	orr.w	r2, r2, #1
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	e019      	b.n	8001068 <HAL_ADC_Init+0x318>
 8001034:	20000000 	.word	0x20000000
 8001038:	053e2d63 	.word	0x053e2d63
 800103c:	50000100 	.word	0x50000100
 8001040:	50000400 	.word	0x50000400
 8001044:	50000500 	.word	0x50000500
 8001048:	50000600 	.word	0x50000600
 800104c:	50000300 	.word	0x50000300
 8001050:	50000700 	.word	0x50000700
 8001054:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10c      	bne.n	800108a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f023 010f 	bic.w	r1, r3, #15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
 8001088:	e007      	b.n	800109a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 020f 	bic.w	r2, r2, #15
 8001098:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010aa:	e007      	b.n	80010bc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop

080010c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010dc:	d004      	beq.n	80010e8 <HAL_ADC_Start_DMA+0x20>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a5a      	ldr	r2, [pc, #360]	@ (800124c <HAL_ADC_Start_DMA+0x184>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_Start_DMA+0x24>
 80010e8:	4b59      	ldr	r3, [pc, #356]	@ (8001250 <HAL_ADC_Start_DMA+0x188>)
 80010ea:	e000      	b.n	80010ee <HAL_ADC_Start_DMA+0x26>
 80010ec:	4b59      	ldr	r3, [pc, #356]	@ (8001254 <HAL_ADC_Start_DMA+0x18c>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd62 	bl	8000bb8 <LL_ADC_GetMultimode>
 80010f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe01 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 809b 	bne.w	800123e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Start_DMA+0x4e>
 8001112:	2302      	movs	r3, #2
 8001114:	e096      	b.n	8001244 <HAL_ADC_Start_DMA+0x17c>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <HAL_ADC_Start_DMA+0x190>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d008      	beq.n	800113a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d002      	beq.n	800113a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b09      	cmp	r3, #9
 8001138:	d17a      	bne.n	8001230 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 ff60 	bl	8002000 <ADC_Enable>
 8001140:	4603      	mov	r3, r0
 8001142:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d16d      	bne.n	8001226 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a3a      	ldr	r2, [pc, #232]	@ (800124c <HAL_ADC_Start_DMA+0x184>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d009      	beq.n	800117c <HAL_ADC_Start_DMA+0xb4>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a3b      	ldr	r2, [pc, #236]	@ (800125c <HAL_ADC_Start_DMA+0x194>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d002      	beq.n	8001178 <HAL_ADC_Start_DMA+0xb0>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	e003      	b.n	8001180 <HAL_ADC_Start_DMA+0xb8>
 8001178:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <HAL_ADC_Start_DMA+0x198>)
 800117a:	e001      	b.n	8001180 <HAL_ADC_Start_DMA+0xb8>
 800117c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d002      	beq.n	800118e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001192:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	f023 0206 	bic.w	r2, r3, #6
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80011b2:	e002      	b.n	80011ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011be:	4a29      	ldr	r2, [pc, #164]	@ (8001264 <HAL_ADC_Start_DMA+0x19c>)
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c6:	4a28      	ldr	r2, [pc, #160]	@ (8001268 <HAL_ADC_Start_DMA+0x1a0>)
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ce:	4a27      	ldr	r2, [pc, #156]	@ (800126c <HAL_ADC_Start_DMA+0x1a4>)
 80011d0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	221c      	movs	r2, #28
 80011d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3340      	adds	r3, #64	@ 0x40
 800120c:	4619      	mov	r1, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f001 fb37 	bl	8002884 <HAL_DMA_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fd5b 	bl	8000cda <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001224:	e00d      	b.n	8001242 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800122e:	e008      	b.n	8001242 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800123c:	e001      	b.n	8001242 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800123e:	2302      	movs	r3, #2
 8001240:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001242:	7dfb      	ldrb	r3, [r7, #23]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	50000100 	.word	0x50000100
 8001250:	50000300 	.word	0x50000300
 8001254:	50000700 	.word	0x50000700
 8001258:	50000600 	.word	0x50000600
 800125c:	50000500 	.word	0x50000500
 8001260:	50000400 	.word	0x50000400
 8001264:	0800212d 	.word	0x0800212d
 8001268:	08002205 	.word	0x08002205
 800126c:	08002221 	.word	0x08002221

08001270 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001294:	d004      	beq.n	80012a0 <HAL_ADC_IRQHandler+0x30>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8e      	ldr	r2, [pc, #568]	@ (80014d4 <HAL_ADC_IRQHandler+0x264>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_IRQHandler+0x34>
 80012a0:	4b8d      	ldr	r3, [pc, #564]	@ (80014d8 <HAL_ADC_IRQHandler+0x268>)
 80012a2:	e000      	b.n	80012a6 <HAL_ADC_IRQHandler+0x36>
 80012a4:	4b8d      	ldr	r3, [pc, #564]	@ (80014dc <HAL_ADC_IRQHandler+0x26c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc86 	bl	8000bb8 <LL_ADC_GetMultimode>
 80012ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d017      	beq.n	80012e8 <HAL_ADC_IRQHandler+0x78>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d012      	beq.n	80012e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 f808 	bl	80022f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2202      	movs	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <HAL_ADC_IRQHandler+0x8c>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8094 	beq.w	8001430 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 808e 	beq.w	8001430 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fb9f 	bl	8000a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d072      	beq.n	8001422 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a64      	ldr	r2, [pc, #400]	@ (80014d4 <HAL_ADC_IRQHandler+0x264>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d009      	beq.n	800135a <HAL_ADC_IRQHandler+0xea>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a65      	ldr	r2, [pc, #404]	@ (80014e0 <HAL_ADC_IRQHandler+0x270>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d002      	beq.n	8001356 <HAL_ADC_IRQHandler+0xe6>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	e003      	b.n	800135e <HAL_ADC_IRQHandler+0xee>
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <HAL_ADC_IRQHandler+0x274>)
 8001358:	e001      	b.n	800135e <HAL_ADC_IRQHandler+0xee>
 800135a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	4293      	cmp	r3, r2
 8001364:	d008      	beq.n	8001378 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d002      	beq.n	8001378 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d104      	bne.n	8001382 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	e014      	b.n	80013ac <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a53      	ldr	r2, [pc, #332]	@ (80014d4 <HAL_ADC_IRQHandler+0x264>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d009      	beq.n	80013a0 <HAL_ADC_IRQHandler+0x130>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a53      	ldr	r2, [pc, #332]	@ (80014e0 <HAL_ADC_IRQHandler+0x270>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d002      	beq.n	800139c <HAL_ADC_IRQHandler+0x12c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	e003      	b.n	80013a4 <HAL_ADC_IRQHandler+0x134>
 800139c:	4b51      	ldr	r3, [pc, #324]	@ (80014e4 <HAL_ADC_IRQHandler+0x274>)
 800139e:	e001      	b.n	80013a4 <HAL_ADC_IRQHandler+0x134>
 80013a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d135      	bne.n	8001422 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d12e      	bne.n	8001422 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fc9a 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11a      	bne.n	800140a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020c 	bic.w	r2, r2, #12
 80013e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d112      	bne.n	8001422 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001408:	e00b      	b.n	8001422 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f984 	bl	8001730 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	220c      	movs	r2, #12
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_ADC_IRQHandler+0x1d4>
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b3 	beq.w	80015b6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80ad 	beq.w	80015b6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb3a 	bl	8000af2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800147e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff faf5 	bl	8000a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800148a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_ADC_IRQHandler+0x264>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d009      	beq.n	80014aa <HAL_ADC_IRQHandler+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_ADC_IRQHandler+0x270>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d002      	beq.n	80014a6 <HAL_ADC_IRQHandler+0x236>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	e003      	b.n	80014ae <HAL_ADC_IRQHandler+0x23e>
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_ADC_IRQHandler+0x274>)
 80014a8:	e001      	b.n	80014ae <HAL_ADC_IRQHandler+0x23e>
 80014aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d008      	beq.n	80014c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d002      	beq.n	80014c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d10f      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	e01f      	b.n	8001512 <HAL_ADC_IRQHandler+0x2a2>
 80014d2:	bf00      	nop
 80014d4:	50000100 	.word	0x50000100
 80014d8:	50000300 	.word	0x50000300
 80014dc:	50000700 	.word	0x50000700
 80014e0:	50000500 	.word	0x50000500
 80014e4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a8b      	ldr	r2, [pc, #556]	@ (800171c <HAL_ADC_IRQHandler+0x4ac>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d009      	beq.n	8001506 <HAL_ADC_IRQHandler+0x296>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a8a      	ldr	r2, [pc, #552]	@ (8001720 <HAL_ADC_IRQHandler+0x4b0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_IRQHandler+0x292>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e003      	b.n	800150a <HAL_ADC_IRQHandler+0x29a>
 8001502:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <HAL_ADC_IRQHandler+0x4b4>)
 8001504:	e001      	b.n	800150a <HAL_ADC_IRQHandler+0x29a>
 8001506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800150a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d047      	beq.n	80015a8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_ADC_IRQHandler+0x2c2>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03f      	beq.n	80015a8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800152e:	2b00      	cmp	r3, #0
 8001530:	d13a      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153c:	2b40      	cmp	r3, #64	@ 0x40
 800153e:	d133      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d12e      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fbea 	bl	8000d28 <LL_ADC_INJ_IsConversionOngoing>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11a      	bne.n	8001590 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001568:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157e:	2b00      	cmp	r3, #0
 8001580:	d112      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800158e:	e00b      	b.n	80015a8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	f043 0210 	orr.w	r2, r3, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fe79 	bl	80022a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2260      	movs	r2, #96	@ 0x60
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d011      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x374>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00c      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8be 	bl	8001758 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <HAL_ADC_IRQHandler+0x3a4>
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00d      	beq.n	8001614 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fe5f 	bl	80022c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161a:	2b00      	cmp	r3, #0
 800161c:	d012      	beq.n	8001644 <HAL_ADC_IRQHandler+0x3d4>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00d      	beq.n	8001644 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fe51 	bl	80022dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001642:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b00      	cmp	r3, #0
 800164c:	d043      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x466>
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d03e      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
 8001664:	e021      	b.n	80016aa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001674:	d004      	beq.n	8001680 <HAL_ADC_IRQHandler+0x410>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a28      	ldr	r2, [pc, #160]	@ (800171c <HAL_ADC_IRQHandler+0x4ac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_ADC_IRQHandler+0x414>
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <HAL_ADC_IRQHandler+0x4b8>)
 8001682:	e000      	b.n	8001686 <HAL_ADC_IRQHandler+0x416>
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <HAL_ADC_IRQHandler+0x4bc>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff faa4 	bl	8000bd4 <LL_ADC_GetMultiDMATransfer>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001692:	2301      	movs	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
 8001696:	e008      	b.n	80016aa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80016a6:	2301      	movs	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10e      	bne.n	80016ce <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c0:	f043 0202 	orr.w	r2, r3, #2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f84f 	bl	800176c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2210      	movs	r2, #16
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d018      	beq.n	8001712 <HAL_ADC_IRQHandler+0x4a2>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d013      	beq.n	8001712 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	f043 0208 	orr.w	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fdd1 	bl	80022b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	50000100 	.word	0x50000100
 8001720:	50000500 	.word	0x50000500
 8001724:	50000400 	.word	0x50000400
 8001728:	50000300 	.word	0x50000300
 800172c:	50000700 	.word	0x50000700

08001730 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b6      	sub	sp, #216	@ 0xd8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x24>
 800179e:	2302      	movs	r3, #2
 80017a0:	f000 bc13 	b.w	8001fca <HAL_ADC_ConfigChannel+0x84a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff faa6 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 83f3 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f7ff f965 	bl	8000a9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fa94 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 80017da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff faa0 	bl	8000d28 <LL_ADC_INJ_IsConversionOngoing>
 80017e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 81d9 	bne.w	8001ba8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 81d4 	bne.w	8001ba8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001808:	d10f      	bne.n	800182a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f97f 	bl	8000b18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f913 	bl	8000a4e <LL_ADC_SetSamplingTimeCommonConfig>
 8001828:	e00e      	b.n	8001848 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	461a      	mov	r2, r3
 8001838:	f7ff f96e 	bl	8000b18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f903 	bl	8000a4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d022      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800187a:	f7ff f85d 	bl	8000938 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff f8a9 	bl	80009e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800189c:	2b01      	cmp	r3, #1
 800189e:	d102      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x126>
 80018a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018a4:	e000      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x128>
 80018a6:	2300      	movs	r3, #0
 80018a8:	461a      	mov	r2, r3
 80018aa:	f7ff f8b5 	bl	8000a18 <LL_ADC_SetOffsetSaturation>
 80018ae:	e17b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f862 	bl	8000980 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x15c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f857 	bl	8000980 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 021f 	and.w	r2, r3, #31
 80018da:	e01e      	b.n	800191a <HAL_ADC_ConfigChannel+0x19a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f84c 	bl	8000980 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800190a:	2320      	movs	r3, #32
 800190c:	e004      	b.n	8001918 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800190e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1b2>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	e018      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1e4>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800194a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800194e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001956:	2320      	movs	r3, #32
 8001958:	e004      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800195a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001964:	429a      	cmp	r2, r3
 8001966:	d106      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f81b 	bl	80009ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe ffff 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x222>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fff4 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	e01e      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x260>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe ffe9 	bl	8000980 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80019c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80019c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e004      	b.n	80019de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80019d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x278>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	e018      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2aa>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	e004      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d106      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe ffb8 	bl	80009ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe ff9c 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2e8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2102      	movs	r1, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe ff91 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 021f 	and.w	r2, r3, #31
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x326>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ff86 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e004      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x33e>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	e016      	b.n	8001aec <HAL_ADC_ConfigChannel+0x36c>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e004      	b.n	8001aec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe ff57 	bl	80009ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2103      	movs	r1, #3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff3b 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x3aa>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff30 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	e017      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x3da>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe ff25 	bl	8000980 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e003      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x3f2>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	e011      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x416>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ff02 	bl	80009ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f881 	bl	8000cb4 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 813d 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7fe ffd2 	bl	8000b70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4aa2      	ldr	r2, [pc, #648]	@ (8001e5c <HAL_ADC_ConfigChannel+0x6dc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	f040 812e 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x480>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	bf94      	ite	ls
 8001bf8:	2301      	movls	r3, #1
 8001bfa:	2300      	movhi	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e019      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x4b4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e003      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	bf94      	ite	ls
 8001c2e:	2301      	movls	r3, #1
 8001c30:	2300      	movhi	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d079      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x4d4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	069b      	lsls	r3, r3, #26
 8001c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c52:	e015      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x500>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	069b      	lsls	r3, r3, #26
 8001c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x520>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	e017      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x550>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x576>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	051b      	lsls	r3, r3, #20
 8001cf4:	e018      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x5a8>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	e003      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	e07e      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x5c8>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d46:	e015      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x5f4>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x614>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	e017      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x644>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	61fb      	str	r3, [r7, #28]
  return result;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	ea42 0103 	orr.w	r1, r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x670>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	3b1e      	subs	r3, #30
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	e01b      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x6a8>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	613b      	str	r3, [r7, #16]
  return result;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	051b      	lsls	r3, r3, #20
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe72 	bl	8000b18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_ADC_ConfigChannel+0x6e0>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80be 	beq.w	8001fbe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0x6d6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_ADC_ConfigChannel+0x6e4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x6ec>
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <HAL_ADC_ConfigChannel+0x6e8>)
 8001e58:	e009      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x6ee>
 8001e5a:	bf00      	nop
 8001e5c:	407f0000 	.word	0x407f0000
 8001e60:	80080000 	.word	0x80080000
 8001e64:	50000100 	.word	0x50000100
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fd54 	bl	800091c <LL_ADC_GetCommonPathInternalCh>
 8001e74:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a56      	ldr	r2, [pc, #344]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x858>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x70c>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a55      	ldr	r2, [pc, #340]	@ (8001fdc <HAL_ADC_ConfigChannel+0x85c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d13a      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d134      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ea0:	d005      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x72e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x860>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8085 	bne.w	8001fb8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x742>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a49      	ldr	r2, [pc, #292]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x746>
 8001ec2:	4a49      	ldr	r2, [pc, #292]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001ec4:	e000      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x748>
 8001ec6:	4a43      	ldr	r2, [pc, #268]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe fd0f 	bl	80008f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <HAL_ADC_ConfigChannel+0x86c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a44      	ldr	r2, [pc, #272]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x870>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ef2:	e002      	b.n	8001efa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f00:	e05a      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x874>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d125      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11f      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d104      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x7ac>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x878>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d047      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x7c0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x7c4>
 8001f40:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x7c6>
 8001f44:	4a23      	ldr	r2, [pc, #140]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7fe fcd0 	bl	80008f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f56:	e031      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	@ (8001ffc <HAL_ADC_ConfigChannel+0x87c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12d      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d127      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x80c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x810>
 8001f8c:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001f8e:	e000      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x812>
 8001f90:	4a10      	ldr	r2, [pc, #64]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe fcaa 	bl	80008f6 <LL_ADC_SetCommonPathInternalCh>
 8001fa2:	e00c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	37d8      	adds	r7, #216	@ 0xd8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	50000700 	.word	0x50000700
 8001fd8:	c3210000 	.word	0xc3210000
 8001fdc:	90c00010 	.word	0x90c00010
 8001fe0:	50000600 	.word	0x50000600
 8001fe4:	50000100 	.word	0x50000100
 8001fe8:	50000300 	.word	0x50000300
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	c7520000 	.word	0xc7520000
 8001ff8:	50000500 	.word	0x50000500
 8001ffc:	cb840000 	.word	0xcb840000

08002000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe4f 	bl	8000cb4 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d176      	bne.n	800210a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b3c      	ldr	r3, [pc, #240]	@ (8002114 <ADC_Enable+0x114>)
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e062      	b.n	800210c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fe1e 	bl	8000c8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002058:	d004      	beq.n	8002064 <ADC_Enable+0x64>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <ADC_Enable+0x118>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <ADC_Enable+0x68>
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <ADC_Enable+0x11c>)
 8002066:	e000      	b.n	800206a <ADC_Enable+0x6a>
 8002068:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <ADC_Enable+0x120>)
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fc56 	bl	800091c <LL_ADC_GetCommonPathInternalCh>
 8002070:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002076:	2b00      	cmp	r3, #0
 8002078:	d013      	beq.n	80020a2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <ADC_Enable+0x124>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <ADC_Enable+0x128>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002094:	e002      	b.n	800209c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fc09 	bl	80008b8 <HAL_GetTick>
 80020a6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020a8:	e028      	b.n	80020fc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fe00 	bl	8000cb4 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fde4 	bl	8000c8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020c4:	f7fe fbf8 	bl	80008b8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d914      	bls.n	80020fc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00d      	beq.n	80020fc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	f043 0210 	orr.w	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d1cf      	bne.n	80020aa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	8000003f 	.word	0x8000003f
 8002118:	50000100 	.word	0x50000100
 800211c:	50000300 	.word	0x50000300
 8002120:	50000700 	.word	0x50000700
 8002124:	20000000 	.word	0x20000000
 8002128:	053e2d63 	.word	0x053e2d63

0800212c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002142:	2b00      	cmp	r3, #0
 8002144:	d14b      	bne.n	80021de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d021      	beq.n	80021a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fc85 	bl	8000a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12b      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11f      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021a2:	e018      	b.n	80021d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d111      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff faaa 	bl	8001730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021dc:	e00e      	b.n	80021fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fabe 	bl	800176c <HAL_ADC_ErrorCallback>
}
 80021f0:	e004      	b.n	80021fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fa96 	bl	8001744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fa90 	bl	800176c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LL_ADC_IsEnabled>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LL_ADC_IsEnabled+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_IsEnabled+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_IsConversionOngoing>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d101      	bne.n	8002292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b0a1      	sub	sp, #132	@ 0x84
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0e7      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800232a:	2300      	movs	r3, #0
 800232c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800232e:	2300      	movs	r3, #0
 8002330:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233a:	d102      	bne.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800233c:	4b6f      	ldr	r3, [pc, #444]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	e009      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d102      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800234c:	4b6d      	ldr	r3, [pc, #436]	@ (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e001      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0be      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff7f 	bl	800227a <LL_ADC_REG_IsConversionOngoing>
 800237c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff79 	bl	800227a <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80a0 	bne.w	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 809c 	bne.w	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a0:	d004      	beq.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a55      	ldr	r2, [pc, #340]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023ac:	4b56      	ldr	r3, [pc, #344]	@ (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80023ae:	e000      	b.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023b0:	4b56      	ldr	r3, [pc, #344]	@ (800250c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80023b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d04b      	beq.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ce:	035b      	lsls	r3, r3, #13
 80023d0:	430b      	orrs	r3, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023e0:	d004      	beq.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a45      	ldr	r2, [pc, #276]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10f      	bne.n	800240c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80023ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f0:	f7ff ff30 	bl	8002254 <LL_ADC_IsEnabled>
 80023f4:	4604      	mov	r4, r0
 80023f6:	4841      	ldr	r0, [pc, #260]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023f8:	f7ff ff2c 	bl	8002254 <LL_ADC_IsEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4323      	orrs	r3, r4
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e012      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800240c:	483c      	ldr	r0, [pc, #240]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800240e:	f7ff ff21 	bl	8002254 <LL_ADC_IsEnabled>
 8002412:	4604      	mov	r4, r0
 8002414:	483b      	ldr	r0, [pc, #236]	@ (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002416:	f7ff ff1d 	bl	8002254 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	431c      	orrs	r4, r3
 800241e:	483c      	ldr	r0, [pc, #240]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002420:	f7ff ff18 	bl	8002254 <LL_ADC_IsEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	4323      	orrs	r3, r4
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d056      	beq.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800243e:	f023 030f 	bic.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6811      	ldr	r1, [r2, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6892      	ldr	r2, [r2, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002450:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002452:	e047      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800245c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800245e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002468:	d004      	beq.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a23      	ldr	r2, [pc, #140]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10f      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002474:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002478:	f7ff feec 	bl	8002254 <LL_ADC_IsEnabled>
 800247c:	4604      	mov	r4, r0
 800247e:	481f      	ldr	r0, [pc, #124]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002480:	f7ff fee8 	bl	8002254 <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	4323      	orrs	r3, r4
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e012      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002494:	481a      	ldr	r0, [pc, #104]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002496:	f7ff fedd 	bl	8002254 <LL_ADC_IsEnabled>
 800249a:	4604      	mov	r4, r0
 800249c:	4819      	ldr	r0, [pc, #100]	@ (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800249e:	f7ff fed9 	bl	8002254 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	431c      	orrs	r4, r3
 80024a6:	481a      	ldr	r0, [pc, #104]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024a8:	f7ff fed4 	bl	8002254 <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4323      	orrs	r3, r4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d012      	beq.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024c6:	f023 030f 	bic.w	r3, r3, #15
 80024ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ce:	e009      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024e2:	e000      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3784      	adds	r7, #132	@ 0x84
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	50000100 	.word	0x50000100
 8002500:	50000400 	.word	0x50000400
 8002504:	50000500 	.word	0x50000500
 8002508:	50000300 	.word	0x50000300
 800250c:	50000700 	.word	0x50000700
 8002510:	50000600 	.word	0x50000600

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff40 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff90 	bl	8002608 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5f 	bl	80025b4 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff33 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa4 	bl	8002670 <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08d      	b.n	8002862 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_DMA_Init+0x138>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d80f      	bhi.n	8002772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b45      	ldr	r3, [pc, #276]	@ (8002870 <HAL_DMA_Init+0x13c>)
 800275a:	4413      	add	r3, r2
 800275c:	4a45      	ldr	r2, [pc, #276]	@ (8002874 <HAL_DMA_Init+0x140>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a42      	ldr	r2, [pc, #264]	@ (8002878 <HAL_DMA_Init+0x144>)
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002770:	e00e      	b.n	8002790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_DMA_Init+0x148>)
 800277a:	4413      	add	r3, r2
 800277c:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_DMA_Init+0x140>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	009a      	lsls	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a3c      	ldr	r2, [pc, #240]	@ (8002880 <HAL_DMA_Init+0x14c>)
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9b6 	bl	8002b54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027f0:	d102      	bne.n	80027f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800280c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_DMA_Init+0x104>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d80c      	bhi.n	8002838 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9d6 	bl	8002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	e008      	b.n	800284a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40020407 	.word	0x40020407
 8002870:	bffdfff8 	.word	0xbffdfff8
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40020000 	.word	0x40020000
 800287c:	bffdfbf8 	.word	0xbffdfbf8
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Start_IT+0x20>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e066      	b.n	8002972 <HAL_DMA_Start_IT+0xee>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d155      	bne.n	8002964 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f8fb 	bl	8002ad8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 020e 	orr.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e00f      	b.n	800291c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0204 	bic.w	r2, r2, #4
 800290a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 020a 	orr.w	r2, r2, #10
 800291a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002938:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e005      	b.n	8002970 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800296c:	2302      	movs	r3, #2
 800296e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2204      	movs	r2, #4
 800299c:	409a      	lsls	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d026      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x7a>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d021      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0204 	bic.w	r2, r2, #4
 80029cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2104      	movs	r1, #4
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d071      	beq.n	8002ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029f2:	e06c      	b.n	8002ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2202      	movs	r2, #2
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02e      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d029      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020a 	bic.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	2102      	movs	r1, #2
 8002a46:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d038      	beq.n	8002ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a64:	e033      	b.n	8002ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2208      	movs	r2, #8
 8002a70:	409a      	lsls	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02a      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d025      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 020e 	bic.w	r2, r2, #14
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
}
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002aee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d108      	bne.n	8002b38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b36:	e007      	b.n	8002b48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d802      	bhi.n	8002b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e001      	b.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b70:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3b08      	subs	r3, #8
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40020407 	.word	0x40020407
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020820 	.word	0x40020820
 8002bc8:	cccccccd 	.word	0xcccccccd
 8002bcc:	40020880 	.word	0x40020880

08002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bf2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	1000823f 	.word	0x1000823f
 8002c14:	40020940 	.word	0x40020940

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c26:	e15a      	b.n	8002ede <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 814c 	beq.w	8002ed8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d130      	bne.n	8002cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d017      	beq.n	8002cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	6939      	ldr	r1, [r7, #16]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a6 	beq.w	8002ed8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_GPIO_Init+0x2e4>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	4a5a      	ldr	r2, [pc, #360]	@ (8002efc <HAL_GPIO_Init+0x2e4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d98:	4b58      	ldr	r3, [pc, #352]	@ (8002efc <HAL_GPIO_Init+0x2e4>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da4:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dce:	d01f      	beq.n	8002e10 <HAL_GPIO_Init+0x1f8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f04 <HAL_GPIO_Init+0x2ec>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d019      	beq.n	8002e0c <HAL_GPIO_Init+0x1f4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_GPIO_Init+0x1f0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f0c <HAL_GPIO_Init+0x2f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x1ec>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a49      	ldr	r2, [pc, #292]	@ (8002f10 <HAL_GPIO_Init+0x2f8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0x1e8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a48      	ldr	r2, [pc, #288]	@ (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_GPIO_Init+0x1e4>
 8002df8:	2305      	movs	r3, #5
 8002dfa:	e00a      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002dfc:	2306      	movs	r3, #6
 8002dfe:	e008      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e30:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e54:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7e:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e84:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed2:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f ae9d 	bne.w	8002c28 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400
 8002f18:	40010400 	.word	0x40010400

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f62:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f806 	bl	8002f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d141      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d131      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb6:	4a46      	ldr	r2, [pc, #280]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc0:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc8:	4a41      	ldr	r2, [pc, #260]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd0:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2232      	movs	r2, #50	@ 0x32
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a3f      	ldr	r2, [pc, #252]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9b      	lsrs	r3, r3, #18
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	e002      	b.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d102      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f2      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003002:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d158      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e057      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003014:	4b2e      	ldr	r3, [pc, #184]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800301a:	4a2d      	ldr	r2, [pc, #180]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003024:	e04d      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302c:	d141      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800302e:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d131      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800303c:	4b24      	ldr	r3, [pc, #144]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003042:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800304c:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2232      	movs	r2, #50	@ 0x32
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0c9b      	lsrs	r3, r3, #18
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003072:	e002      	b.n	800307a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3b01      	subs	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d102      	bne.n	800308e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d112      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e011      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a6:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030b0:	e007      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030ba:	4a05      	ldr	r2, [pc, #20]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40007000 	.word	0x40007000
 80030d4:	20000000 	.word	0x20000000
 80030d8:	431bde83 	.word	0x431bde83

080030dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ea:	6093      	str	r3, [r2, #8]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000

080030fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e2fe      	b.n	800370c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d075      	beq.n	8003206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	4b97      	ldr	r3, [pc, #604]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003124:	4b94      	ldr	r3, [pc, #592]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d102      	bne.n	800313a <HAL_RCC_OscConfig+0x3e>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d002      	beq.n	8003140 <HAL_RCC_OscConfig+0x44>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b8d      	ldr	r3, [pc, #564]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05b      	beq.n	8003204 <HAL_RCC_OscConfig+0x108>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d157      	bne.n	8003204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2d9      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x74>
 8003162:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a84      	ldr	r2, [pc, #528]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b7f      	ldr	r3, [pc, #508]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7e      	ldr	r2, [pc, #504]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b7c      	ldr	r3, [pc, #496]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7b      	ldr	r2, [pc, #492]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003194:	4b78      	ldr	r3, [pc, #480]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a77      	ldr	r2, [pc, #476]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b75      	ldr	r3, [pc, #468]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a74      	ldr	r2, [pc, #464]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fd fb80 	bl	80008b8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fd fb7c 	bl	80008b8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e29e      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xc0>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd fb6c 	bl	80008b8 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fd fb68 	bl	80008b8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e28a      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f6:	4b60      	ldr	r3, [pc, #384]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0xe8>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d075      	beq.n	80032fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003212:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321c:	4b56      	ldr	r3, [pc, #344]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d102      	bne.n	8003232 <HAL_RCC_OscConfig+0x136>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d002      	beq.n	8003238 <HAL_RCC_OscConfig+0x13c>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d11f      	bne.n	8003278 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003238:	4b4f      	ldr	r3, [pc, #316]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x154>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e25d      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	4946      	ldr	r1, [pc, #280]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003264:	4b45      	ldr	r3, [pc, #276]	@ (800337c <HAL_RCC_OscConfig+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fad9 	bl	8000820 <HAL_InitTick>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d043      	beq.n	80032fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e249      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3c      	ldr	r2, [pc, #240]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd fb14 	bl	80008b8 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003294:	f7fd fb10 	bl	80008b8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e232      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a6:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b31      	ldr	r3, [pc, #196]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	492d      	ldr	r1, [pc, #180]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
 80032c6:	e01a      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd faf0 	bl	80008b8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fd faec 	bl	80008b8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e20e      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ee:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1e0>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d041      	beq.n	800338e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01c      	beq.n	800334c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fd fac9 	bl	80008b8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332a:	f7fd fac5 	bl	80008b8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1e7      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ef      	beq.n	800332a <HAL_RCC_OscConfig+0x22e>
 800334a:	e020      	b.n	800338e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd faac 	bl	80008b8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003362:	e00d      	b.n	8003380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd faa8 	bl	80008b8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d906      	bls.n	8003380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1ca      	b.n	800370c <HAL_RCC_OscConfig+0x610>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003380:	4b8c      	ldr	r3, [pc, #560]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ea      	bne.n	8003364 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80a6 	beq.w	80034e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a0:	4b84      	ldr	r3, [pc, #528]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2b4>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x2b6>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b7f      	ldr	r3, [pc, #508]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	4a7e      	ldr	r2, [pc, #504]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c2:	4b7c      	ldr	r3, [pc, #496]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	4b79      	ldr	r3, [pc, #484]	@ (80035b8 <HAL_RCC_OscConfig+0x4bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033de:	4b76      	ldr	r3, [pc, #472]	@ (80035b8 <HAL_RCC_OscConfig+0x4bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	@ (80035b8 <HAL_RCC_OscConfig+0x4bc>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7fd fa65 	bl	80008b8 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fd fa61 	bl	80008b8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e183      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003404:	4b6c      	ldr	r3, [pc, #432]	@ (80035b8 <HAL_RCC_OscConfig+0x4bc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d108      	bne.n	800342a <HAL_RCC_OscConfig+0x32e>
 8003418:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341e:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003428:	e024      	b.n	8003474 <HAL_RCC_OscConfig+0x378>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d110      	bne.n	8003454 <HAL_RCC_OscConfig+0x358>
 8003432:	4b60      	ldr	r3, [pc, #384]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	4a5e      	ldr	r2, [pc, #376]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003442:	4b5c      	ldr	r3, [pc, #368]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	4a5a      	ldr	r2, [pc, #360]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003452:	e00f      	b.n	8003474 <HAL_RCC_OscConfig+0x378>
 8003454:	4b57      	ldr	r3, [pc, #348]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	4a56      	ldr	r2, [pc, #344]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003464:	4b53      	ldr	r3, [pc, #332]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a52      	ldr	r2, [pc, #328]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd fa1c 	bl	80008b8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	e00a      	b.n	800349a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fd fa18 	bl	80008b8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e138      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349a:	4b46      	ldr	r3, [pc, #280]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ed      	beq.n	8003484 <HAL_RCC_OscConfig+0x388>
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fd fa05 	bl	80008b8 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd fa01 	bl	80008b8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e121      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c8:	4b3a      	ldr	r3, [pc, #232]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ed      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b35      	ldr	r3, [pc, #212]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03c      	beq.n	800356e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01c      	beq.n	8003536 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034fc:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003502:	4a2c      	ldr	r2, [pc, #176]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fd f9d4 	bl	80008b8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003514:	f7fd f9d0 	bl	80008b8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0f2      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003526:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ef      	beq.n	8003514 <HAL_RCC_OscConfig+0x418>
 8003534:	e01b      	b.n	800356e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003536:	4b1f      	ldr	r3, [pc, #124]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fd f9b7 	bl	80008b8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354e:	f7fd f9b3 	bl	80008b8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0d5      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ef      	bne.n	800354e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80c9 	beq.w	800370a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003578:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b0c      	cmp	r3, #12
 8003582:	f000 8083 	beq.w	800368c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d15e      	bne.n	800364c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a08      	ldr	r2, [pc, #32]	@ (80035b4 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd f98d 	bl	80008b8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a0:	e00c      	b.n	80035bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fd f989 	bl	80008b8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d905      	bls.n	80035bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0ab      	b.n	800370c <HAL_RCC_OscConfig+0x610>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ec      	bne.n	80035a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c8:	4b52      	ldr	r3, [pc, #328]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <HAL_RCC_OscConfig+0x61c>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6a11      	ldr	r1, [r2, #32]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035d8:	3a01      	subs	r2, #1
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035e2:	0212      	lsls	r2, r2, #8
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0552      	lsls	r2, r2, #21
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035f6:	0852      	lsrs	r2, r2, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0652      	lsls	r2, r2, #25
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003602:	06d2      	lsls	r2, r2, #27
 8003604:	430a      	orrs	r2, r1
 8003606:	4943      	ldr	r1, [pc, #268]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003608:	4313      	orrs	r3, r2
 800360a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a40      	ldr	r2, [pc, #256]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003618:	4b3e      	ldr	r3, [pc, #248]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a3d      	ldr	r2, [pc, #244]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd f948 	bl	80008b8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fd f944 	bl	80008b8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e066      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x530>
 800364a:	e05e      	b.n	800370a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a30      	ldr	r2, [pc, #192]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd f92e 	bl	80008b8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fd f92a 	bl	80008b8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e04c      	b.n	800370c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	4924      	ldr	r1, [pc, #144]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 8003684:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCC_OscConfig+0x620>)
 8003686:	4013      	ands	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
 800368a:	e03e      	b.n	800370a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e039      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003698:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <HAL_RCC_OscConfig+0x618>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0203 	and.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d12c      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	3b01      	subs	r3, #1
 80036b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d123      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11b      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d113      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	019f800c 	.word	0x019f800c
 800371c:	feeefffc 	.word	0xfeeefffc

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e11e      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b91      	ldr	r3, [pc, #580]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b8e      	ldr	r3, [pc, #568]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 020f 	bic.w	r2, r3, #15
 800374e:	498c      	ldr	r1, [pc, #560]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b8a      	ldr	r3, [pc, #552]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e106      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d073      	beq.n	800385c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d129      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	4b81      	ldr	r3, [pc, #516]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0f4      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800378c:	f000 f966 	bl	8003a5c <RCC_GetSysClockFreqFromPLLSource>
 8003790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4a7c      	ldr	r2, [pc, #496]	@ (8003988 <HAL_RCC_ClockConfig+0x268>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d93f      	bls.n	800381a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800379a:	4b7a      	ldr	r3, [pc, #488]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d033      	beq.n	800381a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12f      	bne.n	800381a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ba:	4b72      	ldr	r3, [pc, #456]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037c2:	4a70      	ldr	r2, [pc, #448]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e024      	b.n	800381a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0c6      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	4b66      	ldr	r3, [pc, #408]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0be      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037f8:	f000 f8ce 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a61      	ldr	r2, [pc, #388]	@ (8003988 <HAL_RCC_ClockConfig+0x268>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d909      	bls.n	800381a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003806:	4b5f      	ldr	r3, [pc, #380]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800380e:	4a5d      	ldr	r2, [pc, #372]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4957      	ldr	r1, [pc, #348]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fd f844 	bl	80008b8 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e00a      	b.n	800384a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fd f840 	bl	80008b8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e095      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	4b4e      	ldr	r3, [pc, #312]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 020c 	and.w	r2, r3, #12
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	429a      	cmp	r2, r3
 800385a:	d1eb      	bne.n	8003834 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003874:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a42      	ldr	r2, [pc, #264]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800387a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800387e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003894:	4a3b      	ldr	r2, [pc, #236]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800389a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4936      	ldr	r1, [pc, #216]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b80      	cmp	r3, #128	@ 0x80
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038b6:	4b33      	ldr	r3, [pc, #204]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4a32      	ldr	r2, [pc, #200]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 80038bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d21d      	bcs.n	800390c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 020f 	bic.w	r2, r3, #15
 80038d8:	4929      	ldr	r1, [pc, #164]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038e0:	f7fc ffea 	bl	80008b8 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fc ffe6 	bl	80008b8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e03b      	b.n	8003976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d1ed      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b1a      	ldr	r3, [pc, #104]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4917      	ldr	r1, [pc, #92]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003936:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490f      	ldr	r1, [pc, #60]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800394a:	f000 f825 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490c      	ldr	r1, [pc, #48]	@ (800398c <HAL_RCC_ClockConfig+0x26c>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <HAL_RCC_ClockConfig+0x270>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc ff56 	bl	8000820 <HAL_InitTick>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40022000 	.word	0x40022000
 8003984:	40021000 	.word	0x40021000
 8003988:	04c4b400 	.word	0x04c4b400
 800398c:	08003ff4 	.word	0x08003ff4
 8003990:	20000000 	.word	0x20000000
 8003994:	20000004 	.word	0x20000004

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800399e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e047      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039b0:	4b27      	ldr	r3, [pc, #156]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d102      	bne.n	80039c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039bc:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e03e      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039c2:	4b23      	ldr	r3, [pc, #140]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d136      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ce:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3301      	adds	r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	4a16      	ldr	r2, [pc, #88]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f6:	68d2      	ldr	r2, [r2, #12]
 80039f8:	0a12      	lsrs	r2, r2, #8
 80039fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	617b      	str	r3, [r7, #20]
      break;
 8003a04:	e00c      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a06:	4a13      	ldr	r2, [pc, #76]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4a10      	ldr	r2, [pc, #64]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	0a12      	lsrs	r2, r2, #8
 8003a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
      break;
 8003a1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0e5b      	lsrs	r3, r3, #25
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e001      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a40:	693b      	ldr	r3, [r7, #16]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	016e3600 	.word	0x016e3600

08003a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10c      	bne.n	8003a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a80:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	0a12      	lsrs	r2, r2, #8
 8003a8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	617b      	str	r3, [r7, #20]
    break;
 8003a98:	e00c      	b.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	0a12      	lsrs	r2, r2, #8
 8003aa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    break;
 8003ab2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ace:	687b      	ldr	r3, [r7, #4]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	016e3600 	.word	0x016e3600
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af4:	2300      	movs	r3, #0
 8003af6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8098 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b22:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b32:	4b3a      	ldr	r3, [pc, #232]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a39      	ldr	r2, [pc, #228]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3e:	f7fc febb 	bl	80008b8 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b44:	e009      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fc feb7 	bl	80008b8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	74fb      	strb	r3, [r7, #19]
        break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5a:	4b30      	ldr	r3, [pc, #192]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d159      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b23      	ldr	r3, [pc, #140]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a18      	ldr	r2, [pc, #96]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fc fe77 	bl	80008b8 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fc fe73 	bl	80008b8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c24:	7c7b      	ldrb	r3, [r7, #17]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2e:	4aa6      	ldr	r2, [pc, #664]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c42:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	499d      	ldr	r1, [pc, #628]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c64:	4b98      	ldr	r3, [pc, #608]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f023 020c 	bic.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4995      	ldr	r1, [pc, #596]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c86:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	498c      	ldr	r1, [pc, #560]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca8:	4b87      	ldr	r3, [pc, #540]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4984      	ldr	r1, [pc, #528]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cca:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	497b      	ldr	r1, [pc, #492]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cec:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4973      	ldr	r1, [pc, #460]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	496a      	ldr	r1, [pc, #424]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d30:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4962      	ldr	r1, [pc, #392]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d52:	4b5d      	ldr	r3, [pc, #372]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	4959      	ldr	r1, [pc, #356]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d74:	4b54      	ldr	r3, [pc, #336]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	4951      	ldr	r1, [pc, #324]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d96:	4b4c      	ldr	r3, [pc, #304]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	4948      	ldr	r1, [pc, #288]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db8:	4b43      	ldr	r3, [pc, #268]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	4940      	ldr	r1, [pc, #256]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003df0:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	4932      	ldr	r1, [pc, #200]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e28:	4b27      	ldr	r3, [pc, #156]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	4924      	ldr	r1, [pc, #144]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e60:	4b19      	ldr	r3, [pc, #100]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6e:	4916      	ldr	r1, [pc, #88]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a10      	ldr	r2, [pc, #64]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	4908      	ldr	r1, [pc, #32]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a02      	ldr	r2, [pc, #8]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ed8:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	4926      	ldr	r1, [pc, #152]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ef8:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1e:	4918      	ldr	r1, [pc, #96]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f30:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	490a      	ldr	r1, [pc, #40]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4d0d      	ldr	r5, [pc, #52]	@ (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f000 f818 	bl	8003fdc <_init>
 8003fac:	1b64      	subs	r4, r4, r5
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004004 	.word	0x08004004
 8003fd0:	08004004 	.word	0x08004004
 8003fd4:	08004004 	.word	0x08004004
 8003fd8:	08004008 	.word	0x08004008

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr
